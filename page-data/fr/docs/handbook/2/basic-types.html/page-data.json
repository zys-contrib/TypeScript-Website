{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/2/basic-types.html","result":{"data":{"markdownRemark":{"id":"cf3dcf1b-e58c-5919-ab6e-5680d4287e95","excerpt":"Chaque valeur en JavaScript a un ensemble de comportements que l’on peut observer en exécutant diverses opérations.\nCela paraît abstrait, mais considérons cet…","html":"<p>Chaque valeur en JavaScript a un ensemble de comportements que l’on peut observer en exécutant diverses opérations.\nCela paraît abstrait, mais considérons cet exemple d’opérations qu’on pourrait lancer sur une variable appelée <code>message</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Accès à la propriété \"toLowerCase\"</span></div><div class='line'><span style=\"color: #008000\">// de 'message' et appel de cette propriété</span></div><div class='line'><span style=\"color: #001080\">message</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toLowerCase</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Appel direct de 'message'</span></div><div class='line'><span style=\"color: #795E26\">message</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>Si on y va étape par étape, la première ligne accède à une propriété appelée <code>toLowerCase</code> puis l’appelle.\nLa deuxième appelle <code>message</code> directement.</p>\n<p>Mais en supposant qu’on ne connaît pas la valeur de <code>message</code> - et cela arrive souvent - nous ne pouvons pas dire quel résultat nous obtiendrons quand on essaie de lancer le code.\nLe résultat de chaque opération dépend entièrement de la valeur qu’on avait au départ.</p>\n<ul>\n<li>Est-ce que <code>message</code> peut être appelé ?</li>\n<li>Est-ce qu’il a une propriété <code>toLowerCase</code> ?</li>\n<li>S’il en a une, est-ce que <code>toLowerCase</code> peut être appelée elle aussi ?</li>\n<li>Si ces deux valeurs peuvent être appelées, qu’est-ce qu’elles retournent ?</li>\n</ul>\n<p>Les réponses à toutes ces questions sont normalement des informations qu’on retient en écrivant du JavaScript, tout en espérant que notre mémoire ne nous trahira pas.</p>\n<p>Supposons que <code>message</code> soit défini de cette façon.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">message</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Comme vous pourrez peut-être le deviner, si nous essayons de lancer <code>message.toLowerCase()</code>, nous aurons le même string mais en minuscules.</p>\n<p>Et cette seconde ligne ?\nSi vous êtes familier avec JavaScript, vous saurez qu’elle échouera avec l’exception :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">txt</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">TypeError: message is not a function</span></div></code></div></pre>\n<p>Ce serait bien si on pouvait éviter ce genre d’erreurs.</p>\n<p>Quand on lance notre code, la façon dont JavaScript décide comment agir est de trouver quel est le <em>type</em> de la valeur - quelles sortes de comportements et capacités possède-t-elle.\nC’est en partie ce que <code>TypeError</code> nous dit - le string <code>\"Hello World!\"</code> ne peut pas être appelé comme une fonction.</p>\n<p>Pour certaines valeurs, comme les <code>string</code> et <code>number</code>, nous pouvons identifier leurs types à l’exécution grâce à l’opérateur <code>typeof</code>.\nMais pour autre chose comme des fonctions, il n’y a aucun mécanisme pour faire de même.\nConsidérons cette fonction par exemple :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">flip</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Nous pouvons <em>observer</em> en lisant le code que cette fonction ne fonctionnera que si elle reçoit un objet avec une propriété <code>flip</code> appelable, mais JavaScript ne remonte pas cette information pendant que l’on code.\nLa seule façon de le savoir, c’est d’appeler la méthode et voir le résultat. Ce type de comportement rend la prédiction de ce que le code va faire difficile.</p>\n<p>Vu de cette façon, un <em>type</em> permet de décrire quelles valeurs peuvent être passées à <code>fn</code> et quelles valeurs vont provoquer un bug.\nJavaScript ne fournit que du typage <em>dynamique</em> - vérifiable uniquement quand on lance le code.</p>\n<p>L’alternative est d’utiliser un système de typage <em>statique</em> pour faire des prédictions sur le comportement du code à exécuter <em>avant</em> qu’il se lance.</p>\n<h2 id=\"vérification-statique-de-types\" style=\"position:relative;\"><a href=\"#v%C3%A9rification-statique-de-types\" aria-label=\"vérification statique de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vérification statique de types</h2>\n<p>Nous avons eu un <code>TypeError</code> en essayant de nous servir d’un <code>string</code> en tant que fonction.\n<em>La plupart des gens</em> n’apprécient pas d’avoir des erreurs dans leur code - ce sont des bugs !\nEt quand on écrit du nouveau code, nous faisons de notre mieux pour éviter les bugs.</p>\n<p>Si nous ajoutons un bout de code, sauvegardons notre fichier, relançons notre code, et remarquons une erreur immédiatement, on pourrait isoler le problème assez vite ; mais ce n’est pas toujours le cas.\nPeut-être qu’on n’a pas assez testé notre code, donc il se peut qu’on ne tombe pas sur l’erreur assez tôt !\nOu alors, si on trouve l’erreur, on pourrait l’avoir trouvée après avoir fait une grosse refonte, ajouté beaucoup de code, et beaucoup creusé pour l’avoir trouvée.</p>\n<p>Idéalement, on aurait un outil qui nous aiderait à trouver ces bugs <em>avant</em> que ce code se lance.\nEt c’est là que TypeScript intervient, avec son système de typage statique.\nLes <em>systèmes de typage statique</em> décrivent les comportements de nos valeurs une fois notre programme lancé.\nUn système de vérification de types comme TypeScript utilise ces informations pour nous dire quand le code risque de se comporter de façon imprévue.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const message: \"bonsoir\"' >message</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"bonsoir\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-err><data-lsp lsp='const message: \"bonsoir\"' >message</data-lsp></data-err></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>This expression is not callable.\n  Type 'String' has no call signatures.</span><span class=\"code\">2349</span></span><span class=\"error-behind\">This expression is not callable.\n  Type 'String' has no call signatures.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBOAUAMZwB2iALqALaSKICGA5pKALygBEARiYnAJbR2Abjx5qtRpAAUASiFA'>Try</a></div></pre>\n<p>Exécuter cet exemple avec TypeScript va nous remonter une erreur avant même de lancer le code.</p>\n<h2 id=\"problèmes-qui-ne-crasheront-pas-le-programme\" style=\"position:relative;\"><a href=\"#probl%C3%A8mes-qui-ne-crasheront-pas-le-programme\" aria-label=\"problèmes qui ne crasheront pas le programme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problèmes qui ne crasheront pas le programme</h2>\n<p>Jusque-là, nous avons montré des cas où JavaScript indiquera qu’une erreur s’est produite.\nCes cas apparaissent parce que la <a href=\"https://tc39.github.io/ecma262/\">spécification ECMAScript</a> possède des instructions précises sur la façon dont JavaScript doit se comporter s’il rencontre un cas inhabituel.</p>\n<p>Par exemple, cette spécification dit qu’essayer d’appeler quelque chose qui ne peut pas être appelé provoque une erreur.\nCela peut paraître comme un comportement évident, mais on aurait pu dire qu’accéder à une propriété qui n’existe pas dans un objet devrait aussi lancer une erreur.\nÀ la place, JavaScript nous retourne la valeur <code>undefined</code> :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">user</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">age:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">user</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">location</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// retourne undefined</span></div></code></div></pre>\n<p>Finalement, un système de vérification statique de types devra décider quel code doit être considéré comme une erreur, même s’il est du code JavaScript “valide” qui ne retournera pas d’erreur immédiate.\nAvec le code suivant, TypeScript lance une erreur à propos de <code>location</code> qui n’est pas défini:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: {&#10;    name: string;&#10;    age: number;&#10;}' >user</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const user: {&#10;    name: string;&#10;    age: number;&#10;}' >user</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >location</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'location' does not exist on type '{ name: string; age: number; }'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'location' does not exist on type '{ name: string; age: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBjOAO0QBdQBXRGUAXlAG9dRQiBDAW0lQCIARNkQCWkADY8ANM1BsA5t3QA2KQF8A3LlxUYAOlFx8bUkOJqgA'>Try</a></div></pre>\n<p>Cela implique parfois de faire des concessions sur ce qu’il est possible de faire avec TypeScript, mais l’intention est de repérer les bugs légitimes dans votre programme.\nEt TypeScript repère <em>beaucoup</em> de bugs légitimes.</p>\n<p>Par exemple, les fautes d’orthographes :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World!\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Combien de temps mettrez-vous à repérer l&apos;erreur ?</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >toLocaleLowercase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >toLocalLowerCase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// On a probablement voulu écrire ça à la place...</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLocaleLowerCase(locales?: string | string[] | undefined): string' >toLocaleLowerCase</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAGNqRQF1AIaQwCukGApgLYWT4C8oARABIUA270oA6suwBMAhEwDcaNCFABhaFQBGAS1qgBFULmoAHFKBq5c8CgC8AtADdoJXQAPQRrQEuj8UOwDkFRBRKuA-GhEpOTUtLgAdLjQADLQGATsFLEA7l7xKBQAFACU4kFWITR0kTFxCSle0gQZOeKSYADykISgWkjyBPKJRfiWJOwkoI4Y8IpGoADnBKB27NNac5Thy4HEBZQ9JbHxiRXwVTW5QA'>Try</a></div></pre>\n<p>Les fonctions qui ne sont pas appelées :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function flipCoin(): boolean' >flipCoin</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// C&apos;était censé être Math.random()</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Operator '&lt;' cannot be applied to types '() =&gt; number' and 'number'.</span><span class=\"code\">2365</span></span><span class=\"error-behind\">Operator '&lt;' cannot be applied to types '() =&gt; number' and 'number'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBMAzAGwCsRAZgpNgC4BLaJFCd8AgA4BhaAMgAKAJSgA3kVChSUgOQBLvrgF9Q2FJCS7QAK77kUoALK4+ACwB05XJDTQAtkvVQOz4EchEnVw8vH19QAB5QAAY3NgBuIgBfIA'>Try</a></div></pre>\n<p>Ou de simples erreurs de logique.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const value: \"a\" | \"b\"' >value</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const value: \"a\" | \"b\"' >value</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const value: \"a\"' >value</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types '\"a\"' and '\"b\"' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types '\"a\"' and '\"b\"' have no overlap.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Oups, impossible de l&apos;atteindre</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUAMZwB2iALqAG4CGANgK6SgC8oAstWQBYB001xACZwAtgAoAlKAA8oAAw8ArKAD8oAETV1oVOoBG6gNx4AlgDNQYmgyYBCZq03qpAbzyhQIUDx94AvqCQtIhM5pbWjCwOGgau7p5gAPL0AA6IADSgJiIpcIiIJnq0TIJMtADknGSQJkLQkP5AA'>Try</a></div></pre>\n<h2 id=\"types-dans-loutillage\" style=\"position:relative;\"><a href=\"#types-dans-loutillage\" aria-label=\"types dans loutillage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types dans l’outillage</h2>\n<p>TypeScript peut capturer les bugs quand on commet des erreurs dans notre code. C’est bien, mais il est également <em>possible</em> de ne pas en faire dès le départ.</p>\n<p>TypeScript possède les informations nécessaires pour faire ses vérifications (on dit qu’il est un <em>vérificateur de types</em>, ou <em>type-checker</em>) : est-ce que la propriété ou variable à laquelle on tente d’accéder existe, quel est son type, quelles sont les opérations qu’on peut accomplir dessus.\nDe ce fait, le langage peut <em>suggérer</em> les propriétés que vous tentez d’utiliser.</p>\n<p>Cela signifie que TypeScript peut être également utilisé dans la modification de code, et le type-checker peut fournir messages d’erreur et autocomplétion pendant que vous écrivez.\nC’est en partie ce qu’il est signifié quand on parle de TypeScript dans l’outillage d’un projet.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) function express(): core.Express&#10;(alias) namespace express&#10;import express' >express</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(alias) express(): Express&#10;import express' >express</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Application.get: &lt;ParamsDictionary, any, any, QueryString.ParsedQs>(path: PathParams, ...handlers: RequestHandler&lt;ParamsDictionary, any, any, QueryString.ParsedQs>[]) => Express (+3 overloads)' >get</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"/\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) req: Request&lt;ParamsDictionary, any, any, QueryString.ParsedQs>' >req</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >sen</data-lsp></span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Application.listen(port: number, callback?: ((...args: any[]) => void) | undefined): Server (+5 overloads)' >listen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3000</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAggUxQWWgCYCuANlgJKQAuWSADmgJYC2dyVoWAHnfDiqABmSZqABE3XvzEBuNAGNokFBwCGdOqAC8nHnxQoAFAEo5adXQB0AcyxVDY4GIA0QopHlVGS0Ib4BHV31jUABvNFBQfUsULEgMMEik0AA9TkQsInhXMVjIMVBIAHJuRhUsUDpVFEtQADVoUkYsAC8AWgA3RoECRj5xPIICgH40AF9TNHMNSxIymkhDAGYABjXTIA'>Try</a></div></pre>\n<p>Un éditeur de code qui gère TypeScript peut fournir des “quick fixes” pour corriger automatiquement de petites erreurs, des suggestions de réorganisation, ainsi que des fonctionnalités de navigation pour trouver toutes les références à une variable, ainsi que sa définition initiale.\nTout cela s’appuie sur le vérificateur de types et est probablement multi-plateformes, il est donc probable que <a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\">votre IDE préféré supporte TypeScript</a>.</p>\n<h2 id=\"tsc-le-compilateur\" style=\"position:relative;\"><a href=\"#tsc-le-compilateur\" aria-label=\"tsc le compilateur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tsc</code>, le compilateur</h2>\n<p>On a beaucoup parlé du principe de vérification de types, mais pas du <em>vérificateur</em> de types. Ce vérificateur n’est autre que le compilateur TypeScript, <code>tsc</code>.\nTout d’abord, il faut l’installer depuis npm.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm install -g typescript</span></div></code></div></pre>\n<blockquote>\n<p>Cette commande installe globalement le compilateur <code>tsc</code>.\nSi vous préférez utiliser une version locale de TypeScript, vous pouvez utiliser <code>npx</code> ou tout autre outil similaire.</p>\n</blockquote>\n<p>Créons un dossier vide et un fichier <code>hello.ts</code> qui contient :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Dire bonjour.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"bonjour !\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEBEEsCcFNQEYHsB2ArJBXaA6AUAMaoDOSANrDmUgOYAUARMultKAIQMCUA3EA'>Try</a></div></pre>\n<p>Rien de fantastique : ce “hello world” est identique à un “hello world” en JavaScript.\nMaintenant, lançons la commande <code>tsc</code> qui a été installée avec le package <code>typescript</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc hello.ts</span></div></code></div></pre>\n<p>Et voilà… voilà quoi, exactement ? A priori, rien ne s’est passé.\nCela dit, il n’y a eu aucune erreur, donc rien n’a été rapporté depuis la console.</p>\n<p>En regardant de plus près, un nouveau fichier a été créé : dans le même dossier, il y a un <code>hello.js</code> à côté de <code>hello.ts</code>.\nC’est le résultat de la compilation de <code>hello.ts</code> en un fichier JavaScript standard.\nObservons le contenu du fichier émis par TypeScript :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Greets the world.</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello world!\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Ici, TypeScript n’a pas eu grand-chose à transformer, donc le code final est identique au code de départ. Le compilateur essaie toujours d’émettre du code qui ressemble à ce qu’écrirait une vraie personne.\nCe n’est pas toujours facile, mais TypeScript conserve l’indentation, fait attention quand le code s’étend sur beaucoup de lignes, et essaie de conserver les commentaires.</p>\n<p>Essayons d’introduire une erreur de vérification en modifiant <code>hello.ts</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Fonction de salutation générique et de haut niveau :</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: any, date: any): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: any' >person</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: any' >date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Bonjour </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: any' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, nous sommes le </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: any' >date</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> !`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: any, date: any): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Brendan\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAlAMWpAxgC4CWuoAJgKagoCGANgK4E3GkDmAl5B-EQI4MqFAuSoALGk1CQiANwqTQALjQAzBvlaRQbeBWEAKAA4VUuADTkWFAJSgA3mlCg8uFNDoUAdHWhsDAAYAQrgAVtAM8KAAJPYmZpAAvpYwDCjU0AC2mRTpnjH2ZNaJoACEATYA3GiJaGi6+gQGAERBepBFkM1VQA'>Try</a></div></pre>\n<p>Si on lance <code>tsc hello.ts</code> à nouveau, on remarque qu’on a bel et bien une erreur.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">txt</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Expected 2 arguments, but got 1.</span></div></code></div></pre>\n<p>TypeScript nous informe qu’on a oublié de passer un argument à la fonction <code>greet</code>, à raison.\nJusque-là nous avons écrit ce qui peut être vu comme du JavaScript valide, et la vérification de types a quand même pu repérer des erreurs.\nMerci TypeScript !</p>\n<h2 id=\"émissions-de-fichier-avec-erreurs\" style=\"position:relative;\"><a href=\"#%C3%A9missions-de-fichier-avec-erreurs\" aria-label=\"émissions de fichier avec erreurs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Émissions de fichier avec erreurs</h2>\n<p>Vous n’aurez peut-être pas remarqué que le fichier <code>hello.js</code> a encore changé.\nSi vous l’ouvrez à nouveau, vous verrez que son contenu est le même que le fichier source.\nCela peut surprendre, étant donné que <code>tsc</code> a rapporté une erreur, mais ce comportement est concordant avec les valeurs fondamentales de TypeScript : la plupart du temps, <em>vous</em> saurez mieux.</p>\n<p>La vérification de types limite les sortes de programmes que vous pouvez lancer. Il y a donc un compromis à atteindre sur ce que le vérificateur considère acceptable.\nD’habitude, cela ne pose aucun problème, mais il y a des situations où cette rigueur est contre-productive.\nPar exemple, imaginez que vous migrez du code JavaScript en TypeScript, introduisant de ce fait des erreurs de typage.\nÀ la fin, vous corrigerez ces erreurs, mais ce code JavaScript fonctionnait déjà. Le convertir en TypeScript ne devrait rien y changer.</p>\n<p>Bien sûr, avec le temps, vous voudrez peut-être qu’il soit plus restrictif par rapport aux erreurs, et faire en sorte que TypeScript agisse un peu plus strictement.\nDans ce cas, vous pouvez utiliser l’option de compilateur <a href=\"/tsconfig#noEmitOnError\"><code>noEmitOnError</code></a>.\nAvec cette option, modifiez <code>hello.ts</code> et lancez <code>tsc</code> :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc --noEmitOnError hello.ts</span></div></code></div></pre>\n<p><code>hello.js</code> ne va pas se mettre à jour.</p>\n<h2 id=\"types-explicites\" style=\"position:relative;\"><a href=\"#types-explicites\" aria-label=\"types explicites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types explicites</h2>\n<p>Jusque-là, nous n’avons pas précisé ce que sont <code>person</code> ou <code>date</code>.\nModifions notre code, et informons TypeScript que <code>person</code> est un <code>string</code>, et que <code>date</code> doit être un objet <code>Date</code>.\nOn utilisera aussi la méthode <code>toDateString()</code> de <code>date</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIoVKjGMgDSIAmAhlOmQCIvoCUiA3gChEiCAmIAbdADpxcZNgAGACXTjZiACR98RBAF96UOMwCeiGIU19mrKUc6sAypWrzuegIQLuAbgF6gA'>Try</a></div></pre>\n<p>Ce qu’on vient d’ajouter s’appelle des <em>annotations de types</em> sur <code>person</code> et <code>date</code>, pour décrire les valeurs dont <code>greet</code> peut se servir.\nCet exemple peut se lire ”<code>greet</code> prend une <code>person</code> de type <code>string</code>, et une <code>date</code> de type <code>Date</code>“.</p>\n<p>Armé de cette information, TypeScript peut nous prévenir quand <code>greet</code> pourrait être utilisé de façon incorrecte.\nPar exemple…</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;() => string' >Date</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'Date'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'Date'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAObSSQUAUADjIraohdFRL0ANKAAmAQwqRUAESmQAlKADeeUKDK1uAG0gA6HXHqsABgAlIOo6AAkKzkloBfURTiSAnqCqI7KyWl9d3lpAGV+QRNFZwBCU0UAbjxnPDxGZjYAIgBZCTExX1os0VDIVkUkoA'>Try</a></div></pre>\n<p>Quoi ?\nTypeScript a rapporté une erreur sur le deuxième argument, mais pourquoi ?</p>\n<p>Appeler <code>Date()</code> en JavaScript retourne un <code>string</code>. Mais construire une <code>Date</code> avec <code>new Date()</code> nous donne ce qu’on attend.</p>\n<p>L’erreur peut être rapidement réparée :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line dim'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line dim'><span style=\"color: #000000\">}</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">());</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIoVKjGMgDSIAmAhlOmQCIvoCUiA3gChEiCAmIAbdADpxcZNgAGACXTjZiACR98RBAF96UOMwCeiGIU19mrKUc6sAypWrzuegIQLuAbgF6BATRMHAAiAFkmBgYLBFD6MHQAd0QHdGxuXyA'>Try</a></div></pre>\n<p>Cela dit, nous ne sommes pas obligés de définir des annotations de types tout le temps.\nDans plusieurs situations, TypeScript peut simplement <em>inférer</em> (ou “déduire”) les types pour nous même si on les omet.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let msg: string' style='border-bottom: solid 2px lightgrey;'>msg</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"bien le bonjour !\"</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let msg: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgzg5hAvBARAIwJYgHYVBNAe2wCtCBXAJwgEIUBuAKAHpmIIA9AfiA'>Try</a></div></pre>\n<p>Même si on n’a pas dit que <code>msg</code> avait le type <code>string</code>, TypeScript a su le déduire tout seul.\nC’est une fonctionnalité, et il vaut mieux laisser TypeScript faire le travail d’inférence s’il déduit correctement le type.</p>\n<blockquote>\n<p>Note : le message qui s’affiche dans la bulle serait ce que votre éditeur afficherait si vous survolez la variable.</p>\n</blockquote>\n<h2 id=\"effacement-de-types\" style=\"position:relative;\"><a href=\"#effacement-de-types\" aria-label=\"effacement de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Effacement de Types</h2>\n<p>Compilons la méthode <code>greet</code> avec <code>tsc</code> et observons le résultat :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\", today is \"</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000\">(), </span><span style=\"color: #A31515\">\"!\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Date</span><span style=\"color: #000000\">());</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFygmQCsmAZgK4B2AxuqrM6EQSWQAoADiQKQulSOgKpmRADSgAJnnQlKAEVUkAlKADemUKFZdxAGxIA6c7CICABgAkS526AAk+kWK4BfRXRYFQBPUFRIT30VNSsgrTUAZWlZex0-AEIHHQBuTD9MTF5+dAEAIgBZPCUlCK4yxWYSeFAEkgEdXKA'>Try</a></div></pre>\n<p>Remarquons deux points sur le résultat :</p>\n<ol>\n<li>Les paramètres <code>person</code> et <code>date</code> n’ont pas d’annotations de types.</li>\n<li>Notre “template string” - la chaîne de caractères qui utilise les apostrophes inverses (<code>`</code>) - a été convertie en utilisant une concaténation classique (<code>+</code>).</li>\n</ol>\n<p>Nous parlerons du deuxième point plus tard, mais concentrons-nous sur le premier.\nLes annotations de types ne font pas partie de la spécification JavaScript (ou ECMAScript si on veut chercher la petite bête), donc TypeScript ne peut pas s’exécuter dans un navigateur sans modification préalable.\nC’est tout l’intérêt d’un compilateur TypeScript - il permet de transformer le code et lui permettre de se lancer.\nLa plupart du code propre à TypeScript est effacée, y compris nos annotations de types.</p>\n<blockquote>\n<p><strong>Souvenez-vous</strong> : Les annotations de type ne doivent jamais changer l’exécution de votre code.</p>\n</blockquote>\n<h2 id=\"nivellement-par-le-bas\" style=\"position:relative;\"><a href=\"#nivellement-par-le-bas\" aria-label=\"nivellement par le bas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nivellement par le bas</h2>\n<p>Une autre différence entre le code compilé et code source, la transformation de notre chaîne de caractères :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">person</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">date</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>vers</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">person</span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\", today is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000\">() + </span><span style=\"color: #A31515\">\"!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Pourquoi cela ?</p>\n<p>Les Template strings sont une fonctionnalité d’ECMAScript appelée ECMAScript 2015 (mais aussi ECMAScript 6, ES2015, ES6, etc. - <em>c’est compliqué</em>).\nTypeScript peut réécrire le code de versions récentes d’ECMAScript vers certaines plus anciennes, tel que ECMAScript 3 ou ECMAScript 5 (ES3 et ES5).\nLe fait de passer d’une version plus récente ou plus neuve d’ECMAScript vers une autre plus basse s’appelle le <em>nivellement vers le bas</em>.</p>\n<p>Par défaut, TypeScript vise ES3, une version extrêmement vieille d’ECMAScript.\nNous aurions pu choisir une version un peu plus récente avec l’option <a href=\"/tsconfig#target\"><code>target</code></a>.\nCompiler avec <code>--target es2015</code> compile TypeScript en visant ECMAScript 2015, donc tout environnement supportant ES2015 peut lancer ce code.\nLancer <code>tsc --target es2015 hello.ts</code> nous mène au résultat suivant :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">person</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">date</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Date</span><span style=\"color: #000000\">());</span></div></code></div></pre>\n<blockquote>\n<p>La cible par défaut est ES3, mais tous les navigateurs modernes supportent ES2015.</p>\n</blockquote>\n<p>Donc la plupart des développeurs peuvent viser ES2015 ou plus haut, sauf si supporter d’anciens navigateurs est une contrainte.</p>\n<h2 id=\"degré-de-rigueur\" style=\"position:relative;\"><a href=\"#degr%C3%A9-de-rigueur\" aria-label=\"degré de rigueur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Degré de rigueur</h2>\n<p>TypeScript est utilisé pour diverses raisons.\nCertains développeurs veulent une expérience laxiste et volontaire. TypeScript peut valider certaines parties du programme uniquement, tout en laissant ses capacités disponibles.\nC’est l’expérience par défaut avec TypeScript, où le typage est optionnel, l’inférence déduit des types vagues, et aucune valeur <code>null</code>/<code>undefined</code> n’est vérifiée.\nTout comme <code>tsc</code> émet des fichiers même avec des erreurs, ces comportements par défaut sont en place pour qu’ils ne vous entravent pas.\nCe serait une première étape désirable si vous migrez du code JavaScript.</p>\n<p>D’autres utilisateurs souhaitent que TypeScript valide et soit strict le plus possible, d’où plusieurs options disponibles à cet effet.\nCes paramètres permettent d’avoir des “niveaux” de rigueur (allant du laxiste au plus strict possible) plutôt que d’avoir deux options binaires (faire de la vérification de code ou pas du tout).\nPlus vous montez en niveaux de rigueur, plus TypeScript vous assistera avec la validation et la vérification.\nCela peut nécessiter du travail supplémentaire, mais il se rentabilise sur le long terme.\nSi possible, une nouvelle base de code doit toujours avoir les vérifications strictes activées.</p>\n<p>TypeScript a plusieurs options de rigueur qui peuvent être activées ou pas, et tous nos exemples les suivront, sauf si le contraire est mentionné.\nL’option <a href=\"/tsconfig#strict\"><code>strict</code></a> dans la ligne de commande, ou <code>\"strict\": true</code> dans le fichier <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\"><code>tsconfig.json</code></a> les active toutes ensemble, mais il est possible de les désactiver individuellement.\nLes deux options les plus importantes sont <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a> et <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>.</p>\n<h2 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h2>\n<p>À certains endroits, TypeScript n’essaie pas d’inférer de types et va rendre le type le plus laxiste : <code>any</code>.\nCe n’est pas forcément un problème - de toute façon, le type <code>any</code> est ce que JavaScript va vous donner.</p>\n<p>Cependant, utiliser <code>any</code> ne donne plus aucun intérêt d’utiliser TypeScript.\nPlus votre programme est couvert par du typage, plus vous serez épaulé en termes de validation et d’outillage, et moins vous aurez de bugs.\nActiver l’option <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a> va remonter une erreur pour toute variable avec un type qui a été inféré en <code>any</code>.</p>\n<h2 id=\"strictnullchecks\" style=\"position:relative;\"><a href=\"#strictnullchecks\" aria-label=\"strictnullchecks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code></h2>\n<p>Par défaut, les valeurs comme <code>null</code> et <code>undefined</code> sont assignables à tout autre type.\nCela peut s’avérer pratique, mais oublier de gérer <code>null</code> et <code>undefined</code> est la cause d’innombrables bugs - certains le considèrent comme une erreur <a href=\"https://www.youtube.com/watch?v=ybrQvs4x0Ps\">coûtant des milliards de dollars</a> !\nL’option <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> rend la gestion de <code>null</code> et <code>undefined</code> plus explicite, et <em>nous épargne</em> les maux de tête autour du fait de devoir gérer <code>null</code> et <code>undefined</code>.</p>","headings":[{"value":"Vérification statique de types","depth":2},{"value":"Problèmes qui ne crasheront pas le programme","depth":2},{"value":"Types dans l’outillage","depth":2},{"value":"tsc, le compilateur","depth":2},{"value":"Émissions de fichier avec erreurs","depth":2},{"value":"Types explicites","depth":2},{"value":"Effacement de Types","depth":2},{"value":"Nivellement par le bas","depth":2},{"value":"Degré de rigueur","depth":2},{"value":"noImplicitAny","depth":2},{"value":"strictNullChecks","depth":2}],"frontmatter":{"permalink":"/fr/docs/handbook/2/basic-types.html","title":"Bases","disable_toc":null,"handbook":null,"oneline":"Première étape dans l'apprentissage de TypeScript : les types de base.","preamble":"<p>Bienvenue dans la première page du manuel. Si c'est votre premier contact avec TypeScript, vous voudrez peut-être commencer avec <a href='https://www.typescriptlang.org/docs/handbook/intro.html#get-started'>les guides</a></p>\n","deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Le Manuel TypeScript","oneline":"Votre première étape vers l'apprentissage de TypeScript","permalink":"/fr/docs/handbook/intro.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Everyday Types","oneline":"Les primitives du langage.","permalink":"/fr/docs/handbook/2/everyday-types.html"}}}},"pageContext":{"id":"1-bases","slug":"/fr/docs/handbook/2/basic-types.html","repoPath":"/packages/documentation/copy/fr/handbook-v2/Basics.md","previousID":"fbd2001f-e93f-5743-958e-f4d69507d838","nextID":"c6927587-b1f9-5dea-9976-e2e42767a414","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}