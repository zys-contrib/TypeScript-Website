{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/2/type-declarations.html","result":{"data":{"markdownRemark":{"id":"d28b0aa8-ec3c-5376-be59-610478b3f918","excerpt":"Jusque-là, nous avons présenté des concepts basiques de TypeScript en utilisant des fonctionnalités présentes dans tous les moteurs JavaScript.\nDe nos jours…","html":"<p>Jusque-là, nous avons présenté des concepts basiques de TypeScript en utilisant des fonctionnalités présentes dans tous les moteurs JavaScript.\nDe nos jours, JavaScript contient beaucoup de librairies qui accomplissent des tâches communes.\nAvoir du typage sur les parties d’application qui <em>ne font pas</em> partie de votre code améliorera grandement votre expérience TypeScript.\nWhere do these types come from?</p>\n<h2 id=\"à-quoi-ressemblent-les-déclarations-de-types-\" style=\"position:relative;\"><a href=\"#%C3%A0-quoi-ressemblent-les-d%C3%A9clarations-de-types-\" aria-label=\"à quoi ressemblent les déclarations de types  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>À quoi ressemblent les déclarations de types ?</h2>\n<p>Supposons que vous avez ce code :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const k: number' >k</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.max(...values: number[]): number' >max</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >mix</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'mix' does not exist on type 'Math'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'mix' does not exist on type 'Math'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBjOAO0QBdQBrUAXlAFkBDUgCwDoBbBgDwAoBWADSgAbAEoA3AWJlQAKxr0mbdgEteAdiEAOCUA'>Try</a></div></pre>\n<p>Comment TypeScript a-t-il su que <code>max</code> existe, mais pas <code>mix</code>, même sans que l’implémentation de <code>Math</code> fasse partie de votre code ?</p>\n<p>Il existe des <em>fichiers de déclarations</em> qui décrivent ces objets pré-existants.\nUn fichier de déclarations fournit une manière de <em>déclarer</em> l’existence de certains types ou certaines valeurs, sans leur fournir d’implémentation.</p>\n<h2 id=\"fichiers-dts\" style=\"position:relative;\"><a href=\"#fichiers-dts\" aria-label=\"fichiers dts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fichiers <code>.d.ts</code></h2>\n<p>TypeScript a deux types principaux de fichiers.\nLes fichiers <code>.ts</code> sont des fichiers d’<em>implémentation</em>, qui contiennent du code exécutable.\nCe sont les fichiers qui émettent des fichiers <code>.js</code> en sortie. C’est là que vous écrirez votre code.</p>\n<p>Les fichiers <code>.d.ts</code> sont des fichiers de <em>déclarations</em>, qui ne contiennent <em>que</em> des informations de types.\nCes fichiers n’émettent pas de sortie <code>.js</code>; ils servent uniquement à la vérification de types.\nNous apprendrons comment écrire nos propres fichiers de déclarations plus tard.</p>\n<h2 id=\"définitions-de-types-pré-existantes\" style=\"position:relative;\"><a href=\"#d%C3%A9finitions-de-types-pr%C3%A9-existantes\" aria-label=\"définitions de types pré existantes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Définitions de Types Pré-existantes</h2>\n<p>TypeScript possède des fichiers de déclarations pour toutes les APIs standard pré-existantes dans les moteurs JavaScript.\nIls contiennent, par exemple, les propriétés des types <code>string</code> ou <code>function</code>, les objets globaux comme <code>Math</code> et <code>Object</code>, ainsi que leurs types associés.\nPar défaut, TypeScript contient également les types des éléments du navigateur, comme <code>window</code> et <code>document</code>; que l’on appelle collectivement les APIs de DOM (<em>DOM APIs</em>).</p>\n<p>Ces fichiers suivent la convention de nommage <code>lib.[quelque chose].d.ts</code>.\nSi vous ouvrez un fichier suivant ce nommage, vous saurez que c’est un élément pré-existant de la plateforme, qui ne contient pas de code.</p>\n<h3 id=\"loption-target\" style=\"position:relative;\"><a href=\"#loption-target\" aria-label=\"loption target permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L’option <code>target</code></h3>\n<p>Les méthodes, propriétés, et fonctions disponibles varient, dans les faits, en fonction de la <em>version</em> de JavaScript que votre code exécute.\nPar exemple, la méthode <code>startsWith</code> des chaînes de caractères est disponible à partir de la 6ème version de JavaScript (<em>EcmaScript 6</em>).</p>\n<p>Il est important de connaître quelle version de JavaScript est exécutée, car vous ne voulez pas utiliser d’APIs disponibles sur des versions plus récentes.\nC’est l’un des rôles de l’option de compilateur <a href=\"/tsconfig#target\"><code>target</code></a>.</p>\n<p>TypeScript vous aide sur ce problème en faisant varier quels fichiers <code>lib</code> sont inclus par défaut, en se basant sur l’option <a href=\"/tsconfig#target\"><code>target</code></a>.\nPar exemple, si <a href=\"/tsconfig#target\"><code>target</code></a> vaut <code>ES5</code>, vous aurez une erreur en essayant d’utiliser la méthode <code>startsWith</code>, parce qu’elle n’existe qu’à partir de la version <code>ES6</code>.</p>\n<h3 id=\"loption-lib\" style=\"position:relative;\"><a href=\"#loption-lib\" aria-label=\"loption lib permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L’option <code>lib</code></h3>\n<p>L’option <a href=\"/tsconfig#lib\"><code>lib</code></a> permet un contrôle plus précis des fichiers standards de déclaration qui seront considérés présents dans votre programme.\nVous pouvez lire plus de détails dans la documentation de <a href=\"/tsconfig#lib\"><code>lib</code></a>.</p>\n<h2 id=\"définitions-externes\" style=\"position:relative;\"><a href=\"#d%C3%A9finitions-externes\" aria-label=\"définitions externes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Définitions externes</h2>\n<p>Pour les APIs qui ne sont pas intégrées par défaut, il existe une variété de façons d’obtenir les informations de typage.\nCes façons dépendent de la librairie pour laquelle vous cherchez à obtenir ces types.</p>\n<h3 id=\"types-inclus-dans-la-librairie\" style=\"position:relative;\"><a href=\"#types-inclus-dans-la-librairie\" aria-label=\"types inclus dans la librairie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types inclus dans la librairie</h3>\n<p>Si une libraire que vous utilisez a été importée dans un package npm, il se pourrait qu’elle ait des déclarations de types intégrées.\nVous pouvez lire sa documentation pour en savoir plus, ou vous pouvez simplement importer la librairie et voir si TypeScript peut résoudre les types pour vous.</p>\n<p>Si vous écrivez un package vous-même et que vous souhaitez inclure les définitions de types, vous pouvez lire notre guide sur <a href=\"/docs/handbook/declaration-files/publishing.html#including-declarations-in-your-npm-package\">l’assemblage de définitions de types</a>.</p>\n<h3 id=\"definitelytyped--types\" style=\"position:relative;\"><a href=\"#definitelytyped--types\" aria-label=\"definitelytyped  types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DefinitelyTyped / <code>@types</code></h3>\n<p>The <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/\">répertoire DefinitelyTyped</a> est un répertoire centralisé qui contient des fichiers de déclarations pour des milliers de librairies.\nLa vaste majorité de librairies communément utilisées ont des fichiers de déclarations disponibles sur DefinitelyTyped.</p>\n<p>Les définitions de DefinitelyTyped sont automatiquement déployées dans npm sous le préfixe <code>@types</code>.\nLe nom des packages de types sont toujours les mêmes que les packages qu’ils annotent.\nPar exemple, si vous installez le package npm <code>react</code>, vous pouvez installer les types correspondants en écrivant :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm install --save-dev @types/react</span></div></code></div></pre>\n<p>TypeScript trouve les définitions de types automatiquement sous <code>node_modules/@types</code>, il n’y a donc aucune étape supplémentaire nécessaire pour accéder aux types.</p>\n<h3 id=\"vos-propres-types\" style=\"position:relative;\"><a href=\"#vos-propres-types\" aria-label=\"vos propres types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vos propres types</h3>\n<p>Si, dans de rares situations, les définitions de types n’existent ni chez DefinitelyTyped, ni dans la librairie elle-même, vous pouvez écrire vos propres fichiers de déclaration.\nConsultez le guide <a href=\"/docs/handbook/declaration-files/introduction.html\">Écrire des fichiers de déclaration</a> pour plus d’informations.</p>\n<p>Si vous voulez taire les avertissements concernant un module sans avoir à écrire de déclarations de types, vous pouvez déclarer son type comme étant <code>any</code> en créant un fichier de déclaration <code>.d.ts</code> vide dans votre projet.\nPar exemple, si vous voulez utiliser <code>some-untyped-module</code> sans avoir de définitions pour, il suffit d’écrire :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"some-untyped-module\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBAiAzsxIAtGgHYAuAngA4jCErqZYDcQA'>Try</a></div></pre>","headings":[{"value":"À quoi ressemblent les déclarations de types ?","depth":2},{"value":"Fichiers .d.ts","depth":2},{"value":"Définitions de Types Pré-existantes","depth":2},{"value":"L’option target","depth":3},{"value":"L’option lib","depth":3},{"value":"Définitions externes","depth":2},{"value":"Types inclus dans la librairie","depth":3},{"value":"DefinitelyTyped / @types","depth":3},{"value":"Vos propres types","depth":3}],"frontmatter":{"permalink":"/fr/docs/handbook/2/type-declarations.html","title":"Type Declarations","disable_toc":null,"handbook":null,"oneline":"Comment TypeScript fournit du typage pour du code JavaScript.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"slug":"/fr/docs/handbook/2/type-declarations.html","repoPath":"/packages/documentation/copy/fr/handbook-v2/Type Declarations.md","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}