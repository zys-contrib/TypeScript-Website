{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/2/conditional-types.html","result":{"data":{"markdownRemark":{"id":"a9ac3f01-c999-52e4-8081-8ff6f4196b6e","excerpt":"Les programmes un tant soit utiles doivent se baser sur une entrée utilisateur.\nCe n’est pas plus différent en JavaScript, mais comme les valeurs peuvent être…","html":"<p>Les programmes un tant soit utiles doivent se baser sur une entrée utilisateur.\nCe n’est pas plus différent en JavaScript, mais comme les valeurs peuvent être facilement examinées, ces décisions se basent également sur le type de ces valeurs.\nLes <em>types conditionnels</em> décrivent les relations entre les types en entrée et en sortie.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.live(): void' >live</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.woof(): void' >woof</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example1 = number' style='border-bottom: solid 2px lightgrey;'>Example1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example1 = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example2 = string' style='border-bottom: solid 2px lightgrey;'>Example2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example2 = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFAFFJcTKZwQAjMgC8yEeKkz5irLmQB+ZBAAV0wAI2hkBjkwKFBRTgB6RJJkAD1-QiMzS2tbewAmF2QAJQhRK1MJaQhZBXRfPECQ8Mjo2PiklJIMoA'>Try</a></div></pre>\n<p>Les types conditionnels prennent une forme similaire aux expressions ternaires (<code>condition ? trueExpression : falseExpression</code>) en JavaScript :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type SomeType = any' >SomeType</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='type OtherType = any' >OtherType</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\"><data-lsp lsp='type TrueType = any' >TrueType</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='type FalseType = any' >FalseType</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA'>Try</a></div></pre>\n<p>Quand le type à gauche d’<code>extends</code> peut être assigné au type de droite, le résultat sera le type dans la première branche (la branche “vrai”); sinon ce sera le type dans la deuxième branche (la branche “false”).</p>\n<p>Ces exemples ne montrent pas forcément l’intérêt des conditions, vu qu’on peut voir si <code>Dog extends Animal</code> et décider entre <code>number</code> et <code>string</code> de nous-même.\nCet intérêt se manifeste surtout en utilisant les types génériques.</p>\n<p>Considérons cette fonction <code>createLabel</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) IdLabel.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* + d&apos;autres champs */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NameLabel.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* + d&apos;autres champs */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(name: string): NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgNTLoDkcOmCgQAzsgQALOAwAO49qwDcJAL4lQkWIhQA5GRGx5CpciAM1Rw0AHM2nHv0HCxE6XIXK1JEjDogEMGAAexAJEThIIwIACkoaeiZoAEoaDGj8FT8AoNDwiEjDXFjzBghLaxAbVOR9Moys-0CQsIQIqOL8GNKIAHkoDAqoW2QAH1pGZhr0zrHagwbfJtzW9qLjboN+weQrYaq5xKm0rFnxuvWCYjJkMEkoYIB3ZAAif2A5fAgy8Ah0F5UqiAA'>Try</a></div></pre>\n<p>Ces surcharges de createLabel décrivent une seule fonction JavaScript qui fait des choix en fonction du type de son entrée. Notez, cependant, quelques problèmes :</p>\n<ol>\n<li>Si une librairie doit faire à chaque fois plusieurs choix à travers son API, toutes ces surcharges peuvent vite polluer le code.</li>\n<li>Trois surcharges doivent être créées : une pour chaque cas où vous êtes <em>sûrs et certains</em> du type de votre valeur (un cas pour <code>string</code>, un pour <code>number</code>), et une surcharge plus générale (<code>string | number</code>). Pour chaque nouveau type que <code>createLabel</code> peut gérer, le nombre de surcharges croît exponentiellement.</li>\n</ol>\n<p>À la place, nous pouvons décrire cette logique avec un type conditionnel :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgNTLoDkcOmCgQAzsgQALOAwAO49qwDcJAL4lQkWIhQA5GRGx5CpciAM1Rw0AHM2nHv0HCxE6XIXK1JVq2QBaQIQhQP8SMABPWT0DAHkoDAAeABVkCAAPSBB0cXomaGQAH2QrKFsAPmQAXmRUjKyc2kZmMmQAfjQsXAJWmn0GQ278JSA'>Try</a></div></pre>\n<p>Nous pouvons ensuite utiliser les types conditionnels pour éliminer les surcharges et simplifier la signature de la fonction.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >createLabel</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idOrName: T extends string | number' >idOrName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: NameLabel' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"typescript\">(idOrName: \"typescript\"): NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let a: NameLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let b: IdLabel' style='border-bottom: solid 2px lightgrey;'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;2.8>(idOrName: 2.8): IdLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2.8</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let b: IdLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let c: IdLabel | NameLabel' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"bonjour\" | 42>(idOrName: \"bonjour\" | 42): IdLabel | NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() ? </span><span style=\"color: #A31515\">\"bonjour\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>let c: NameLabel | IdLabel</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgNTLoDkcOmCgQAzsgQALOAwAO49qwDcJAL4lQkWIhQA5GRGx5CpciAM1Rw0AHM2nHv0HCxE6XIXK1JMAE9ZegYA8lAYADwAKsgQAB6QIOji9EzQyAA+yFZQtgB8yAC8yFGx8Ym0jMxkyAD8aFi4BFU0+gyGDfgqrKzIALR9CEJ9PSQwdCAIYMAA9iASInCQRgSR0XEQCUkVqRlZuQAUlCEtEDQRAJTNwaHokXmmyGCSUFMA7sgARGPAcvgQreAQdDvFTqEi-MDIOAFOYQBZtYx7d5+AKiBDZWRgd5nTrdZAAPWqJDBEAhOGhaNhi3aewATAA6AAc2JIXXIBKJ4Ik5PmVIRAFkFpI6VA4Akpgw9mcah8cDMAFZTOhQd7IGgAFhpzNZ+OqQA'>Try</a></div></pre>\n<h3 id=\"contraintes-de-types-conditionnels\" style=\"position:relative;\"><a href=\"#contraintes-de-types-conditionnels\" aria-label=\"contraintes de types conditionnels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contraintes de Types Conditionnels</h3>\n<p>Les vérifications sur des types conditionnels vont souvent révéler de nouvelles informations.\nTout comme rétrécir avec des gardes de types peut donner un type plus spécifique, la branche “vrai” du type conditionnel va restreindre le type générique qu’on vérifie avec la contrainte demandée.</p>\n<p>Prenons cet exemple :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type '\"message\"' cannot be used to index type 'T'.</span><span class=\"code\">2536</span></span><span class=\"error-behind\">Type '\"message\"' cannot be used to index type 'T'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA'>Try</a></div></pre>\n<p>TypeScript signale une erreur parce que <code>T</code> n’aura pas forcément une propriété <code>message</code>.\nIl serait possible de contraindre <code>T</code>, et TypeScript ne donnera plus d’erreur :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> }&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1CtoSFAtW1nCKaADCPHpkwFSSwUwYOAE2IpoA9KkOUAB6APxAA'>Try</a></div></pre>\n<p>Mais si on voulait que <code>MessageOf</code> prenne tout, mais soit égal à <code>never</code> s’il n’y a pas de propriété <code>message</code> ?\nNous pouvons déplacer la contrainte et introduire un type conditionnel :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): void' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DogMessageContents = never' style='border-bottom: solid 2px lightgrey;'>DogMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type DogMessageContents = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA'>Try</a></div></pre>\n<p>Dans la branche “vrai”, TypeScript sait que <code>T</code> <em>va</em> avoir une propriété <code>message</code>.</p>\n<p>Dans un tout autre exemple, nous pouvons aussi écrire un type <code>Flatten</code> qui aplatit les tableaux en récupérant les types de leurs contenus, mais laisse les types tels quels sinon :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Extraction du type des éléments de tableau</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Laisse le type tranquille.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAAlgHtUUClyihIeiDQCXcMzzTAaFaMAR84EBF0lHoAZWCD8sRGQ0dCpfDVQAc2ZsKTkoeIA9Vmk4gBkEDSoqaBdDcAcVVABHLg04FwA6D3yoADlef3gkcnRufiEY2XlE1iA'>Try</a></div></pre>\n<p>Quand <code>Flatten</code> reçoit un type tableau, il utilise un accès indexé avec <code>number</code> pour récupérer le type des éléments de <code>string[]</code>.\nSinon, il retourne simplement le type qui lui a été donné.</p>\n<h3 id=\"inférence-dans-les-types-conditionnels\" style=\"position:relative;\"><a href=\"#inf%C3%A9rence-dans-les-types-conditionnels\" aria-label=\"inférence dans les types conditionnels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inférence dans les Types Conditionnels</h3>\n<p>Nous avons utilisé des types conditionnels pour appliquer des contraintes et extraire des types.\nCette opération devient très facile avec ces types, qu’elle est devenue très commune.</p>\n<p>Les types conditionnels fournissent une façon d’inférer depuis les types qu’on compare avec le mot-clé <code>infer</code>.\nPar exemple, on pouvait inférer le type d’éléments de tableaux dans <code>Flatten</code> au lieu de le récupérer “manuellement” :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;Type> = Type extends (infer Item)[] ? Item : Type' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFXBAfFAXim0iggA8VUATAZygEEAnJhEdAS1QDMImoAkigC2+APyCRUAFzEcAbiA'>Try</a></div></pre>\n<p>Ici, le mot-clé <code>infer</code> introduit un nouveau type générique variable appelé <code>Item</code>, au lieu de préciser comment récupérer le type élément de <code>T</code> dans la branche vrai.\nCela nous libère de devoir penser à la façon de creuser et obtenir manuellement les types qui nous intéressent.</p>\n<p>Nous pouvons écrire des types utiles grâce au mot-clé <code>infer</code>.\nPour les cas simples, il est possible d’inférer le type de retour d’une fonction :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: never[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Bools = boolean[]' style='border-bottom: solid 2px lightgrey;'>Bools</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: boolean' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: boolean' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Bools = boolean[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAebkAfFALxQHQQAewE6AJgM5QAUAdBwIaoDmjAXFHQQAbhFQBtALoBKUsQCW6AGbioSYGnQAoKFAD86lBl1RBwsagDc27aEhQAcsgC2pWPA1aKuFnJLE6K4ARuKENgD0EXpQAHr6tvbQAMrAqO5wiMZYOL5UgoxpSjz+xIWoxeHaUTHxiThQAEIA9s0ANsxkmV4YPiycgsGtbRCc6AA0UMGDw6PopVOzY9JVNXrxQA'>Try</a></div></pre>\n<p>Lorsqu’on infère depuis une fonction qui a plusieurs signatures, le résultat est l’inférence de la <em>dernière</em> (et donc probablement la plus laxiste). Il n’est pas possible d’inférer une signature particulière en se basant sur une liste d’arguments de types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: number): string (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string | number): string | number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string | number' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGcMYtUBzAeRgDlkBbACgA8AuQ40sgSjdXoCMQMANwAoUJFgIU6bHnYlyVWo1bw+dQTB4LOYidDhI0mXPiKLKNeszYXO8AD7qBQnffJOXmoWNEYATwAHBAAVAEZ4AF54ACUQDGQYVFDgkAAeQJCcRF0lazoAPjEAehL4CoA9AH4gA'>Try</a></div></pre>\n<h2 id=\"types-conditionnels-distributifs\" style=\"position:relative;\"><a href=\"#types-conditionnels-distributifs\" aria-label=\"types conditionnels distributifs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types Conditionnels Distributifs</h2>\n<p>Quand les types conditionnels opèrent sur un type générique, ils deviennent <em>distributifs</em> quand on utilise également un type union.\nPar exemple :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcQA'>Try</a></div></pre>\n<p>Si <code>ToArray</code> reçoit un type union, le type conditionnel va s’appliquer sur chaque membre de ce type union.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = string[] | number[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = string[] | number[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKEmhIUAMrAkyJAHkkAOQCuAWxWFYiFOgx0lASyoBzKAB9BugEZjcUgPRuoXgHqsgA'>Try</a></div></pre>\n<p><code>StrArrOrNumArr </code> se distribue sur :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmUAHyjdcAIwjwA3EA'>Try</a></div></pre>\n<p>et s’applique à chaque membre de l’union, ce qui donne :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKFCQoAZWBJkSAPJIAcgFcAtssKSoUAPRGoAWgsBjTcAtmDsRCnQY6igJZUA5vgA+j5RcqHQAjMVxxIA'>Try</a></div></pre>\n<p>En suivant la logique de <code>ToArray</code> avec <code>string</code> et <code>number</code>, on finit par obtenir :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">[];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmA2gF0oAHyjdcAIwjwhAbiA'>Try</a></div></pre>\n<p>La distributivité est le comportement voulu d’habitude.\nPour éviter ce comportement, vous pouvez entourer chaque côté du mot-clé <code>extends</code> avec des crochets.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// &apos;StrArrOrNumArr&apos; is no longer a union.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = (string | number)[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = (string | number)[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgHJwHYBECWAzsADwzgQB8UAvFANrmQC6UEAHsBNgCaEOpsIVgH5YFeqwBcUbBABuEJAG4AUKoD0GqAHIAysCTIkAeSQYArgFtjOqEVlwoAGxwBzJVFRQL2fDgA6VVBIKAMjFDNLGxRaWEQUdCw8IlJiJHxsNygAH1lrACMlSjUtKHKAPREgA'>Try</a></div></pre>","headings":[{"value":"Contraintes de Types Conditionnels","depth":3},{"value":"Inférence dans les Types Conditionnels","depth":3},{"value":"Types Conditionnels Distributifs","depth":2}],"frontmatter":{"permalink":"/fr/docs/handbook/2/conditional-types.html","title":"Types Conditionnels","disable_toc":null,"handbook":null,"oneline":"Créer des types qui agissent comme des déclarations if dans le système de typage.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Using Type['a'] syntax to access a subset of a type.","permalink":"/fr/docs/handbook/2/indexed-access-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Types Mappés","oneline":"Générer des types en réutilisant certains types","permalink":"/fr/docs/handbook/2/mapped-types.html"}}}},"pageContext":{"id":"1-types-conditionnels","slug":"/fr/docs/handbook/2/conditional-types.html","repoPath":"/packages/documentation/copy/fr/handbook-v2/Type Manipulation/Conditional Types.md","previousID":"080b75ac-64de-5ff8-93c0-640478fb32f8","nextID":"dd6e17c7-5751-5c1c-b82a-7e146c7cc695","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}