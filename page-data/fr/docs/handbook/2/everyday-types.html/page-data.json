{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/2/everyday-types.html","result":{"data":{"markdownRemark":{"id":"8bc96d47-67a5-591b-8df9-f2e738eebafe","excerpt":"Dans ce chapitre, nous couvrirons certains types fréquents des valeurs communes dans du code JavaScript, et nous expliquerons les façons de représenter ces…","html":"<p>Dans ce chapitre, nous couvrirons certains types fréquents des valeurs communes dans du code JavaScript, et nous expliquerons les façons de représenter ces types en TypeScript.\nCe n’est pas une liste exhaustive, et les futurs chapitres couvriront plus de manières de nommer et utiliser d’autres types.</p>\n<p>Les types peuvent également apparaître d’autres endroits que des annotations.\nÀ mesure que vous apprenez à connaître les types, vous connaîtrez également les façons et endroits où l’on peut référer aux types pour former de nouvelles entités.</p>\n<p>D’abord, passons en revue les types les plus basiques et communs, que vous rencontrerez probablement quand vous écrirez du code JavaScript ou TypeScript.\nCes types formeront les blocs essentiels de types plus complexes.</p>\n<h2 id=\"les-primitives-string-number-et-boolean\" style=\"position:relative;\"><a href=\"#les-primitives-string-number-et-boolean\" aria-label=\"les primitives string number et boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les primitives: <code>string</code>, <code>number</code>, et <code>boolean</code></h2>\n<p>Le JavaScript possède trois <a href=\"https://developer.mozilla.org/fr/docs/Glossary/Primitive\">primitives</a> très communes : <code>string</code>, <code>number</code>, et <code>boolean</code>.\nChacune d’entre elles a un type correspondant en TypeScript.\nComme vous vous y attendrez, ce sont les mêmes noms que vous verrez si vous utilisez l’opérateur <code>typeof</code> sur les valeurs de ces types :</p>\n<ul>\n<li><code>string</code> représente des chaînes de caractères comme <code>\"bonjour tout le monde\"</code></li>\n<li><code>number</code> correspond aux nombres comme <code>42</code>. En JavaScript, tout est un <code>number</code> - il n’existe aucun équivalent à un <code>int</code> ou <code>float</code>. Tout est simplement un <code>number</code></li>\n<li><code>boolean</code> représente les deux valeurs <code>true</code> et <code>false</code></li>\n</ul>\n<blockquote>\n<p>Les noms de types <code>String</code>, <code>Number</code>, et <code>Boolean</code> (avec une première lettre majuscule) existent, mais réfèrent à des types spéciaux qui vont très rarement apparaître dans votre code. Utilisez <em>toujours</em> <code>string</code>, <code>number</code>, ou <code>boolean</code> pour annoter vos types.</p>\n</blockquote>\n<h2 id=\"tableaux\" style=\"position:relative;\"><a href=\"#tableaux\" aria-label=\"tableaux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tableaux</h2>\n<p>Pour préciser le type d’un tableau comme <code>[1, 2, 3]</code>, vous pouvez utiliser la syntaxe <code>number[]</code>; cette syntaxe peut être utilisée pour d’autres types (par exemple, <code>string[]</code> est un tableau de chaînes de caractères, et ainsi de suite).\nVous pourriez aussi voir la notation <code>Array&#x3C;number></code>, qui signifie la même chose.\nNous en apprendrons plus sur la notation <code>T&#x3C;U></code> quand on couvrira les <em>types génériques</em>.</p>\n<blockquote>\n<p>À noter que la notation <code>[number]</code> est différente; référez-vous à la section sur les <a href=\"/fr/docs/handbook/2/objects.html#tuple-types\">Tuples</a>.</p>\n</blockquote>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h2>\n<p>TypeScript possède également un type spécial, <code>any</code>, que vous pouvez utiliser dès que vous souhaitez qu’une valeur particulière ne cause pas d’erreurs à la vérification de types.</p>\n<p>Quand une valeur est de type <code>any</code>, vous pouvez accéder à toutes ses propriétés (qui seront, à leur tour, de type <code>any</code>), l’appeler comme une fonction, l’assigner à (ou depuis) une valeur de tous types, ainsi que tout ce qui pourrait être légal :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// Aucune de ces lignes ne va émettre d&apos;erreur.</span></div><div class='line'><span style=\"color: #008000\">// Utiliser `any` désactive toute vérification de types, et TypeScript supposera</span></div><div class='line'><span style=\"color: #008000\">// que vous connaissez l&apos;environnement mieux que lui.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >foo</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >bar</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBA9gRgVgLggQwHYE8IF4IG8IAeSADBAL4DcAUAPQ0QCCArgMZOogQAmnLIAzhGABLAOYdBHCADdkEAJcBbcGABOnLgHIQq9U1UA6WvQCqYYSP46IAAzTob3ef2Qtz0zmChMwnafNVhADNhFmRzKFRuT3QABwEAGghwCAAVOJAAZRZA2Mh+JljYqCtVZGMIAEcmP29BFkjUZGF+KwAvIW1UaWFVRpBlVEhFYRAmAiqaoSZhI1g4AyCoKAAKAEpqefXN+AMYZFVsCABGYmIduCOAIgALEGBgKCvqBtR+SFQkVCZFGGsceYUIA'>Try</a></div></pre>\n<p>Le type <code>any</code> est utile quand vous ne voulez pas écrire une très grande ligne de typage rien que pour convaincre TypeScript qu’une certaine ligne de code est valide.</p>\n<h3 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h3>\n<p>Si vous ne précisez pas de type, et TypeScript ne peut pas l’inférer du contexte, le compilateur va adopter le type <code>any</code>.</p>\n<p>Vous voudrez peut-être l’éviter, cependant, parce qu’il n’y a aucune vérification de types sur <code>any</code>.\nUtilisez l’option <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a> pour relever toutes ces situations en tant qu’erreurs.</p>\n<h2 id=\"annotations-de-types-sur-des-variables\" style=\"position:relative;\"><a href=\"#annotations-de-types-sur-des-variables\" aria-label=\"annotations de types sur des variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotations de Types sur des Variables</h2>\n<p>Quand vous déclarez une variable avec <code>const</code>, <code>var</code>, ou <code>let</code>, vous pouvez optionnellement ajouter une annotation de type pour préciser explicitement le type de la variable :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myName: string' >myName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngcgQyiAXBAzmATgSwHYDmEAvBAEQCCwOAxiGQNwBQA9CxB5xwHq9+8QKePAHswCMDhF4IAExAQwMAA4ggA'>Try</a></div></pre>\n<blockquote>\n<p>TypeScript n’utilise pas de déclarations du style “types vers la gauche”, comme <code>int x = 0;</code>\nLes annotations de types iront toujours <em>après</em> la variable qui est typée.</p>\n</blockquote>\n<p>Par contre, la plupart des cas, cela n’est pas nécessaire.\nDès que possible, TypeScript essaiera d’<em>inférer</em> automatiquement les types de votre code.\nPar exemple, le type d’une variable est inféré en fonction du type de son initialiseur :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Pas d&apos;annotation nécessaire -- inférer &apos;myName&apos; montre que la variable est de type &apos;string&apos;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myName: string' >myName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAUEMGdQEwOSQHbIPYBdIYJZuaMgJcDGAptNJDgE5mgC0DoOyAZkXTaAgLYCeAOUi8yCUL3wY6oAI4BXegBtIoAG6QaOSACMl9Chnj0M-AA70E0aawDmCAFD6jA4aNABeUACIAgkpxybwBuIA'>Try</a></div></pre>\n<p>La plupart du temps, vous n’aurez pas besoin d’apprendre les règles d’inférence.\nSi vous débutez avec TypeScript, essayez d’utiliser moins d’annotations que vous pensez nécessaire - vous verrez que TypeScript saura comprendre vos intentions bien plus souvent que vous ne le pensez.</p>\n<h2 id=\"fonctions\" style=\"position:relative;\"><a href=\"#fonctions\" aria-label=\"fonctions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fonctions</h2>\n<p>Les fonctions sont les moyens principaux de transfert de données en JavaScript.\nTypeScript vous permet d’annoter précisément les types de données en entrée et en sortie de ces fonctions.</p>\n<h3 id=\"annotations-de-types-de-paramètres\" style=\"position:relative;\"><a href=\"#annotations-de-types-de-param%C3%A8tres\" aria-label=\"annotations de types de paramètres permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotations de Types de Paramètres</h3>\n<p>Quand vous déclarez une fonction, vous pouvez ajouter des annotations de types après chaque paramètre pour déclarer quel(s) type(s) la fonction accepte.\nLes annotations de types de paramètres iront après le nom des paramètres :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Annotation de type de paramètre</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(name: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bonjour, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">() + </span><span style=\"color: #A31515\">\" !!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEEEDtIewFwIZwJY0qAJgU1HAngA47agEIBOCAtgBdzlYBQAZgK6QDGKaoA5g1jgAKSNSwAuUAGd6ySLwCUoAN6NQoEOq3adWgHoHDBtaA5opMADZYAdJZi8hAIgBCaAFYxW5ADSgnoADUoKJUtnAwAKoEROQAwghSWEJKwQEAhOlOCgDcjAC+QA'>Try</a></div></pre>\n<p>Dès qu’un paramètre est annoté, les arguments de cette fonction seront vérifiés :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Ceci provoquera une erreur à l&apos;exécution</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(name: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>42</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6AOZWTMAUDcgFtIqRM2isGXAJSoAbnFYEA3HhCgAtDuJ1mOrRrABhEq1AAHeEoCOdGOVCNqMKnWigAB6FIBySAAPAEu9Ng48Hkg+fiw0WVUgA'>Try</a></div></pre>\n<blockquote>\n<p>Même si vous n’avez pas d’annotation sur vos paramètres, TypeScript vérifiera également que vous passez le nombre correct d’arguments lors de l’appel de la fonction.</p>\n</blockquote>\n<h3 id=\"annotations-de-type-de-retour\" style=\"position:relative;\"><a href=\"#annotations-de-type-de-retour\" aria-label=\"annotations de type de retour permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotations de Type de Retour</h3>\n<p>Vous pouvez également ajouter des annotations de types de retour.\nCes annotations apparaissent après les listes de paramètres :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getFavoriteNumber(): number' >getFavoriteNumber</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQGIEMBucBOMUqAciALYBGq+AFAJQBciYF1+iA3gFCKID0-PsJGixIgHpTpU3onzoQ+JACYAbAG5uAXyA'>Try</a></div></pre>\n<p>Tout comme les annotations de variables, vous n’avez généralement pas besoin d’en préciser tout le temps, parce que TypeScript inférera les types de retour d’une fonction en se basant sur les valeurs retournées.\nDans l’exemple ci-dessus, le <code>: number</code> ne changera rien.\nCertaines bases de code précisent explicitement le type de retour à des fins de documentation, pour éviter les changements accidentels, ou simplement par préférence personnelle.</p>\n<h3 id=\"fonctions-anonymes\" style=\"position:relative;\"><a href=\"#fonctions-anonymes\" aria-label=\"fonctions anonymes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fonctions anonymes</h3>\n<p>Les fonctions anonymes sont légèrement différentes des déclarations de fonctions.\nQuand une fonction apparaît à un endroit où TypeScript peut déterminer comment elle sera appelée, les paramètres de cette fonction sont automatiquement typés.</p>\n<p>Voici un exemple :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Pas d&apos;annotations, mais TypeScript sera capable de repérer les bugs</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Typage contextuel pour des fonctions</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUppercase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Le typage contextuel peut aussi s&apos;appliquer aux fonctions fléchées</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUppercase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMEYBQJQAFAQ0VABMByYgOxrgBdiGBLOGxAGlAFtiWyAFQCeAB0gBlAMbQWohqEQxioKcVHEARgBtIFPdEiiAl4eihdZTQFcA5olxT2iBTWI9IZALygA2gCIAQW0WKUh-bn8AIThNCNB-AFEAN3CAXQBuXHwwEQ1bPScaBkgADwZrSG1QUThrc3JPUAAzdilWZ1w3D0QAOlboROIpAAsACmbrGna2GlAxxABKUABvXFBVZzhdXu04WwXehjgAVVFxaDUlMcXFrIBfO+yCABk9BjFiAs3isoqqmqQawKYjWRCIFiKajnEIAR0q5lBpRabQ6HBa2mMo2Mni67k8-QQQ1GYwWyy8AD5VusfohtpBdvtDsczhcrpAbk9HhkgA'>Try</a></div></pre>\n<p>Même si <code>s</code> n’a pas d’annotation de type, TypeScript a utilisé le type de la fonction <code>forEach</code>, ainsi que le type inféré du tableau (qui est, donc, <code>string[]</code>), pour déterminer le type de <code>s</code>.</p>\n<p>Ce procédé s’appelle <em>typage contextuel</em> car le <em>contexte</em> de cette fonction a permis de préciser quel type le paramètre doit avoir.</p>\n<p>De la même façon que les règles de l’inférence, vous n’avez pas besoin d’apprendre <em>exactement</em> comment ça se passe, mais comprendre que cela <em>peut</em> se produire peut vous aider à remarquer les endroits où une annotation n’est pas nécessaire.\nNous verrons plus tard des exemples où le contexte d’une variable peut lui changer son type.</p>\n<h2 id=\"types-objets\" style=\"position:relative;\"><a href=\"#types-objets\" aria-label=\"types objets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types Objets</h2>\n<p>À part les primitives, le type le plus commun que vous rencontrerez est le <em>type objet</em>.\nIl fait référence à toute valeur JavaScript qui peut avoir une propriété, c’est-à-dire <em>quasiment toutes</em> !\nPour définir un type objet, il suffit de lister ses propriétés et leurs types.</p>\n<p>Par exemple, voici une fonction qui prend en paramètre un objet qui ressemble à un point à coordonnées :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// L&apos;annotation de type du paramètre est un objet</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: {&#10;    x: number;&#10;    y: number;&#10;}): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur x de la coordonnée est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur y de la coordonnée est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: {&#10;    x: number;&#10;    y: number;&#10;}): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEBkHIEMDtYPYBdpIJYNqAJgU1EgJ4AO+2ArqMdAE7QC2AF0jfrgM5KjlYIBGAK1xIAUADMeAY3SYqNNLCQBhBAhrYAFMSQAuUAG9QADz2xy9PrhoBuUIVPnLNUAF8AlAZGhQIb3-8Bgd4AeqFh4RGRYV6gkpjsCAA2uAB0iQgA5hoARODQoABu0MnkzkY4+In5cWrYmLAAl2ycoNmgANRUSClGbtYxcbAJyWmZOXmFxbildhWgVbGq6vVNoBxcbZ3aKYR9Ii4ixPKKKrUahiagAMwANHZ6AOyufUA'>Try</a></div></pre>\n<p>Ici, nous avons annoté un paramètre avec un type à deux propriétés - <code>x</code> et <code>y</code> - qui sont toutes les deux de type <code>number</code>.\nVous pouvez utiliser <code>,</code> ou <code>;</code> pour séparer les propriétés, le dernier séparateur étant optionnel.</p>\n<p>Il n’est également pas nécessaire de préciser le type d’une propriété.\nDans ce cas, TypeScript supposera que la propriété en question est de type <code>any</code>.</p>\n<h3 id=\"propriétés-facultatives\" style=\"position:relative;\"><a href=\"#propri%C3%A9t%C3%A9s-facultatives\" aria-label=\"propriétés facultatives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Propriétés facultatives</h3>\n<p>Les types objet peuvent aussi préciser que certaines ou toutes leurs propriétés sont <em>facultatives</em>.\nPour ce faire, vous devrez ajouter un <code>?</code> après le nom de propriété :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// Les deux sont OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alisson\"</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAcgQwLYCmAFHAEYBWAXIgN6LAyoDOU1L6YA5gNyIA2OFgH42UDp0QBfAJS0AUIkQB6JYgB0GuZLkrEAGQJNEAEwIgAHoiYIoiAPIBpOWgzZ8xOg2atEAIgBCZL5S0tzOHG6ERJ6MLNS+AIJ8MBAEvgA0-II+iclM1mDBMtxAA'>Try</a></div></pre>\n<p>En JavaScript, accéder à une propriété qui n’existe pas retourne <code>undefined</code> au lieu d’une erreur.\nDe ce fait, quand vous <em>lisez</em> une propriété facultative, vous devrez vérifier qu’elle n’est pas <code>undefined</code> avant de continuer :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Erreur - peut provoquer un crash si `obj.last` est undefined !</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>'obj.last' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'obj.last' is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string' >last</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Une alternative plus sûre avec du JavaScript moderne :</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaBQAzAVwDsBjAFwEs5jQAHaS48gOQEMBbSACjgCMAVqgDeofJSTlUico2IBzANygANmxkB+abKbzQAXwCUoYblCgQoAKKxIhaKAC09O+XrwAbnACOhGKBJQUmh1AAtQREpQAAN+AQA6NRlo0EgZAOIAE0hxYkhM0ABCMyCaRDgVSES4eV5BRPVyePI4AFU6OhgAYXUeQ0NFEsp8UDqEpLdCgF4pjOzc-ONTc3NLAHkAaRLzUjKKqpUasYaZZraO7t7ufsHzfVwSy1a80DYVchhiNioPSHoVQiICIAb+gfzYv1IoEyhFAACkIWwAMrBSh0NwcODZaAvZAlXbEcqVaq1OIncgaM7tTrQHqIPoDXD6IA'>Try</a></div></pre>\n<h2 id=\"types-union\" style=\"position:relative;\"><a href=\"#types-union\" aria-label=\"types union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types Union</h2>\n<p>Le système de types de TypeScript permet de créer de nouveaux types en partant de types existants, à travers une grande variété opérateurs.\nMaintenant qu’on sait écrire des types, il est l’heure de les <em>combiner</em> de façons qui vont être intéressantes.</p>\n<h3 id=\"définir-un-type-union\" style=\"position:relative;\"><a href=\"#d%C3%A9finir-un-type-union\" aria-label=\"définir un type union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Définir un Type Union</h3>\n<p>La première façon de combiner des types est de créer un type <em>union</em>.\nUn type union est un type formé de deux ou plusieurs types, représentant des valeurs qui pourraient faire partie de <em>n’importe lequel</em> de ces types.\nChacun des types de l’union est un <em>membre de cette union</em>.</p>\n<p>Écrivons une fonction qui peut agir sur un <code>number</code> ou sur un <code>string</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Votre ID est : \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">101</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"202\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// Erreur</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) myID: number' >myID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">22342</span><span style=\"color: #000000\"> });</span></div><span class=\"error\"><span>Argument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAA7RUkUCSAJgBRXuolEBbAEYxQAH1CIKTEgHMAlKADeeUKDK1EcADaQAdNrizOAIgBqcaZFCsAIqEhTQqE6ADUoHvIDceAL54IKAA8gDSeIzMbFwAjAAMMT6BYGERMtGmaHFoJklBAKKwkETQaVEcnEqgAgCedqhomFhooH4+QA'>Try</a></div></pre>\n<h3 id=\"utiliser-les-types-union\" style=\"position:relative;\"><a href=\"#utiliser-les-types-union\" aria-label=\"utiliser les types union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utiliser les Types Union</h3>\n<p>Il est facile de <em>fournir</em> une valeur qui correspond à un type union - vous pouvez simplement fournir une valeur qui a un type membre de ce type union.\nMais si vous <em>avez</em> une valeur dont le type est un type union, que faire ?</p>\n<p>TypeScript va permettre une opération <em>uniquement</em> si elle est valide pour <em>tous</em> les membres de l’union.\nPar exemple, si vous avez le type <code>string | number</code>, vous ne pouvez pas utiliser les méthodes qui sont disponibles uniquement dans le type <code>string</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUpperCase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQAHaS48gSQBMAKSt1YwgWwBGMUAB9Qico2IBzAJSgA3rlChSNRHAA2kAHRa4Mrm13k4AVTp0YAYQCGiSBzlyA3LgC+QA'>Try</a></div></pre>\n<p>La solution est de <em>rétrécir</em> l’union avec du code, de la même façon qu’avec du code JavaScript sans annotation de types.\nLe <em>rétrécissement</em> se produit quand TypeScript peut déduire un type plus spécifique pour une certaine valeur, en se basant sur la structure du code.</p>\n<p>Par exemple, TypeScript sait que si <code>typeof</code> une valeur renvoie <code>string</code>, cette valeur peut uniquement être un <code>string</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Dans cette branche, id est un string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Ici, id est un nombre</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAkgEwBQw4BciYIAtgEYCmqiAPogM5TpgDmAlIgN4BQiRDGCI8UAJ7JqcEYUQBeRYgBELNu2Xd+gwQHpdiACIBDME0QRqUKNUSVUpiAAtqAGiE5E1FonDNWGOwCOhAITHAANtQAdBFw7AQ40VBwAKrIUqgAwsZM1HicnADcwQC+XhF5vMF6BlgQMO5y3lC+SGBwVKjUNRZhkTFxCYTFZXylQA'>Try</a></div></pre>\n<p>Un autre exemple qui implique d’utiliser <code>Array.isArray</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function welcomePeople(x: string[] | string): void' >welcomePeople</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | string[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ArrayConstructor.isArray(arg: any): arg is any[]' >isArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | string[]' >x</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Ici, &apos;x&apos; est un &apos;string[]&apos;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bonjour, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string | undefined): string' >join</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\" et \"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Ici, &apos;x&apos; est un &apos;string&apos;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bienvenue, voyageur solitaire \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwKYBsJwLaoAqpwAO6qAFAB4BciAzlAE4xgDmA2gLqIA+djzLAJSIA3gChEiGMERkAggwYBDAJ4A6GLQXKVlQcPGTJAemOIAkhBgAaRAHIKdxKnqJw9+k1ac7Eo1jBaOFI1dDgWMgAiACEEACs4EAZbSMQAakQKNQTmKOcoREj9AG4-AF9ndFpUUT8TM0sbe0dnV3c7TwFfI0QAoJCwiJiYVDAAN1GQVFsxuBUlFlQkumCYKCUYBhrUjIpBUskysTKgA'>Try</a></div></pre>\n<p>Remarquez que dans la branche <code>else</code>, nous n’avons pas eu à faire quoi que ce soit - si <code>x</code> n’est pas un <code>string[]</code>, alors il doit être un <code>string</code>.</p>\n<p>Parfois, vous aurez des unions où les types membres ont des éléments en commun.\nPar exemple, les tableaux et les <code>string</code> possèdent la méthode <code>slice</code>.\nSi chaque membre de l’union a cette propriété, vous pourrez vous en servir sans faire de rétrécissement :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Le type de retour est number[] | string</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getFirstThree(x: number[] | string): string | number[]' >getFirstThree</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) slice(start?: number | undefined, end?: number | undefined): string | number[]' >slice</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEBkFNQFwTwA7QCbQE6RgewK5tJAM4ygB2OAtgEaRoDaAuqAD6jFoCWpA5gFABmOUgGMYHLKVDdMAMQ5piAFQAWGSAAoAHgC4ylGvSat2XbgEpQAb16hQGGHkmaAdIQA2HYRoAMAGlAAzGYA3LwAvkA'>Try</a></div></pre>\n<blockquote>\n<p>L’<em>union</em> de types paraît posséder l’<em>intersection</em> des propriétés de ces types, ce qui peut paraître perturbant.\nC’est voulu : le nom <em>union</em> vient de la théorie des ensembles.\nL’<em>union</em> <code>number | string</code> est créée en obtenant l’union <em>des valeurs</em> de chaque type.\nRemarquez que pour deux ensembles avec des éléments qui décrivent chaque ensemble, seule l’<em>intersection</em> de ces éléments s’applique à l’<em>union</em> de ces ensembles.\nPar exemple, si on a une salle remplie de grandes personnes avec un chapeau, avec des personnes parlant l’espagnol et portant un chapeau, la seule description commune qui s’applique à l’<em>union</em> de ces personnes (à toutes ces personnes) est le fait qu’elles portent toutes un chapeau.</p>\n</blockquote>\n<h2 id=\"alias-de-types\" style=\"position:relative;\"><a href=\"#alias-de-types\" aria-label=\"alias de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alias de Types</h2>\n<p>Jusque-là, vous avez utilisé les types objet et types union en les écrivant directement dans les annotations de types.\nC’est convenable, mais vous voudrez souvent utiliser le même type plus d’une fois, et y référer avec un seul nom.</p>\n<p>Un <em>alias de type</em> est exactement cela - un <em>nom</em> pour un <em>type</em>.\nVoici la syntaxe d’un alias de type :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Identique à l&apos;exemple précédent</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur de la coordonnée x est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur de la coordonnée y est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACg9gSwHbCgXigbwFBSgDwC4okBXAWwCMIAnAblyhGLKtoYF8HsB6HqAJIATCCgQBHUtAAHUADYByCPgjkwc6GBoBLgMbaRKbADNSSXcARwkULcmABhOHBpCAFGGDF49gJRZGXWsAZzgNADo5OABzNwAiABkAQygANySNUhooEXkUoJchayRtaHwoCGDUOKgAaltgcPxfBjwgpFCIqNjElPTM7Ny5fOdXYtKmCqqoGvrPcJAW7A5sbDsUJ0K3TAJiAEYABgOAGiZ9o6gOFqA'>Try</a></div></pre>\n<p>Vous pouvez même utiliser les alias de types pour nommer toutes sortes de types, pas juste des types objet.\nPar exemple, un alias de type peut nommer un type union :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ID = string | number' >ID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAkgIlAvFAdgVwLYCMICcoA+UAzsLgJYoDmA3EA'>Try</a></div></pre>\n<p>Remarquez que les alias sont <em>uniquement</em> des alias - vous ne pouvez pas utiliser d’alias pour créer des variantes / versions différentes d’un type déjà existant.\nEn utilisant le type alias, c’est comme si vous aviez écrit le type remplacé par l’alias.\nEn d’autres termes, ce code peut <em>paraître</em> illégal, mais TypeScript l’accepte parce que les deux types sont, en réalité, deux alias pour le même type :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type UserInputSanitizedString = string' >UserInputSanitizedString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitizeInput(str: string): UserInputSanitizedString' >sanitizeInput</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type UserInputSanitizedString = string' >UserInputSanitizedString</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitize(str: string): string' >sanitize</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Aseptiser l&apos;entrée reçue</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let userInput: string' >userInput</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitizeInput(str: string): UserInputSanitizedString' >sanitizeInput</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='function getInput(): string' >getInput</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Peut toujours recevoir un string</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let userInput: string' >userInput</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"new input\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwHMQMBJVAB2QwAoBKALngGcMYtUCBuAKFElgQp02PMyios2AF4hqLGI3nsCDZq2U8A9JvgBafWCr7d3DAE9yCAKpMQMMpQwBlcZKwzgT9R3gBeNWwcPNxCmLj4TK7SIA5UcqyK3iqMNnaxzlHuIJ5J8ADe3PDwcBjIMBGZMvEwtDwAvtzc2vAAgrbk2LYw8BAA5CCorACXCHAA58gg3BDE8Mhd6X5iEtHp1ESkFHG0tY3NAAogVPAYOMgAVmcwTMXgIABuOFjdaAHK3PNpWxhLAESoIAA7vB2I5fpwgA'>Try</a></div></pre>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>Une <em>déclaration d’interface</em> est une autre façon de nommer un type objet :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur de la coordonnée x est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"La valeur de la coordonnée y est \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnnjBSARhg6EMgAOULAGF06KABMAFOLBkMWAJS4mCUQGd0AGwgA6I+gDmSgEQAZOMgBucExSjIFKI473yFoiAAlyhEyBD62DbIANQSYKZEmoyEeiCGJuZWtg7OrhDunt6+coqBISzhkcjRcaqmzMncvJIypco4xGQAjAAMvQA0LD39yFzJQA'>Try</a></div></pre>\n<p>Tout comme les alias de types ci-dessus, l’exemple des interfaces fonctionne de la même façon qu’avec une annotation anonyme de propriétés.\nTypeScript vérifie uniquement la <em>structure</em> de la valeur transmise à <code>printCoord</code> - l’appel est valide du moment que l’objet possède les propriétés requises.\nLe fait de n’être concerné que par la <em>structure</em> et capacités des types permet de dire que TypeScript est un système <em>typé structurellement</em>.</p>\n<h3 id=\"différence-entre-les-alias-de-types-et-interfaces\" style=\"position:relative;\"><a href=\"#diff%C3%A9rence-entre-les-alias-de-types-et-interfaces\" aria-label=\"différence entre les alias de types et interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Différence entre les alias de types et interfaces</h3>\n<p>Les alias de types et interfaces sont très similaires, et interchangeables la plupart des cas.\nLa quasi-totalité des fonctionnalités d’une <code>interface</code> sont disponibles dans les <code>type</code>. La différence principale est le fait qu’un type ne peut pas être modifié pour y ajouter des propriétés, tandis qu’une interface est toujours extensible.</p>\n<table class='full-width-table'>\n  <tbody>\n    <tr>\n      <th><code>Interface</code></th>\n      <th><code>Type</code></th>\n    </tr>\n    <tr>\n      <td>\n        <p>Étendre une interface</p>\n        <code><pre>\ninterface Animal {\n  name: string\n}<br/>\ninterface Bear extends Animal {\n  honey: boolean\n}<br/>\nconst bear = getBear() \nbear.name\nbear.honey\n        </pre></code>\n      </td>\n      <td>\n        <p>Étendre un type avec des intersections</p>\n        <code><pre>\ntype Animal = {\n  name: string\n}<br/>\ntype Bear = Animal & { \n  honey: boolean \n}<br/>\nconst bear = getBear();\nbear.name;\nbear.honey;\n        </pre></code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>Ajouter de nouvelles propriétés dans une interface existante</p>\n        <code><pre>\ninterface Window {\n  title: string\n}<br/>\ninterface Window {\n  ts: TypeScriptAPI\n}<br/>\nconst src = 'const a = \"bonjour tout le monde\"';\nwindow.ts.transpileModule(src, {});\n        </pre></code>\n      </td>\n      <td>\n        <p>Un type ne peut plus être changé une fois créé</p>\n        <code><pre>\ntype Window = {\n  title: string\n}<br/>\ntype Window = {\n  ts: TypeScriptAPI\n}<br/>\n<span style=\"color: #A31515\"> // Erreur : identificateur en double 'Window'.</span><br/>\n        </pre></code>\n      </td>\n    </tr>\n    </tbody>\n</table>\n<p>Vous en apprendrez plus sur ces concepts dans les chapitres suivants, donc ne vous inquiétez pas si vous ne comprenez pas l’erreur immédiatement.</p>\n<ul>\n<li>Avant la version 4.2 de TypeScript, les alias de types <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA\"><em>pourraient</em> apparaître dans les messages d’erreurs</a>, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages.</li>\n<li>Les alias de types ne sont pas concernés par les <a href=\"/play?#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA\">fusions de déclarations, au contraire des interfaces</a>.</li>\n<li>Les interfaces ne servent qu’à <a href=\"/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\">déclarer les formes d’objets, et ne peuvent pas renommer des primitives</a>.</li>\n<li>Les interfaces <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA\">apparaissent toujours dans leurs formes originelles</a> dans les messages d’erreur, mais <em>seulement</em> si elles sont utilisées avec leurs noms.</li>\n</ul>\n<p>La plupart du temps, vous êtes libres d’utiliser un type ou une interface, et TypeScript vous dira si vous avez besoin de l’autre déclaration. En règle générale, utilisez une <code>interface</code> sauf si vous avez besoin d’utiliser des <code>type</code>.</p>\n<h2 id=\"assertions-de-types\" style=\"position:relative;\"><a href=\"#assertions-de-types\" aria-label=\"assertions de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assertions de Types</h2>\n<p>Parfois, vous aurez des informations sur le type d’une valeur que TypeScript ne connaît pas.</p>\n<p>Par exemple, si vous appelez <code>document.getElementById</code>, TypeScript saura uniquement que c’est une espèce d’<code>HTMLElement</code>, mais vous savez peut-être que cet appel renverra un <code>HTMLCanvasElement</code> avec un certain ID.</p>\n<p>Dans cette situation, vous pourrez utiliser une <em>assertion de types</em> pour spécifier un type plus précis :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myCanvas: HTMLCanvasElement' >myCanvas</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface HTMLCanvasElement' >HTMLCanvasElement</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgExGAFc4BTMKAOgHMyoBRAGzPMoCEEBJfACgCI4KAJZgA+sDSYI-AJQwsMABIAVALIAZVBizNWFKAG4gA'>Try</a></div></pre>\n<p>Tout comme les annotations, les assertions de types sont enlevées par le compilateur et n’affecteront pas l’exécution de votre code.</p>\n<p>Une écriture équivalente consiste à utiliser les chevrons (sauf si votre fichier a l’extension <code>.tsx</code>) :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myCanvas: HTMLCanvasElement' >myCanvas</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface HTMLCanvasElement' >HTMLCanvasElement</data-lsp></span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgHgAkAVAWQBlUMsBRAGwFM4GwoA+AExGAFdnWAdAHMGUekxZQAQggCSHABQAiOCgCWYAPrA0mCEoCUAbiA'>Try</a></div></pre>\n<blockquote>\n<p>Rappel : Les assertions de types sont retirées à la compilation, et il n’existe aucune vérification associée à ces assertions.\nSi l’assertion est fausse, il n’y aura ni erreur ni <code>null</code> qui seront renvoyés.</p>\n</blockquote>\n<p>TypeScript permet de faire des assertions qui sont <em>plus spécifiques</em> ou <em>moins spécifiques</em> que le type d’origine.\nCette règle interdit les assertions impossibles, tel que :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"bonjour\"</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span><span class=\"code\">2352</span></span><span class=\"error-behind\">Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsaBQBjOAO0QBdQAPUAXlACIAjYgKzgFdo7QBDRUItgFsGMANxA'>Try</a></div></pre>\n<p>Cette règle peut parfois être trop restrictive, et pourrait interdire des conversions plus complexes mais qui restent valides.\nDans cette situation, vous pourrez faire une première conversion vers <code>any</code> (ou <code>unknown</code>, que nous introduirons plus tard), puis vers le type désiré :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: T' >a</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='const expr: any' >expr</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T = {&#10;    a: 1;&#10;    b: 2;&#10;    c: 3;&#10;}' >T</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iAHgBxgC54oUBPAbgCgMy8EAVeAXngG8TiBGC+AI2IAmXmGIBmeAF9qAehnwAtErABXDEoVVk6LFBbwAFLgIk0JcgEpT8BhSA'>Try</a></div></pre>\n<h2 id=\"types-littéraux\" style=\"position:relative;\"><a href=\"#types-litt%C3%A9raux\" aria-label=\"types littéraux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types littéraux</h2>\n<p>En plus des types généraux comme <code>string</code> ou <code>number</code>, nous pouvons faire des références à des <code>string</code> ou <code>number</code> plus <em>spécifiques</em> dans les annotations de types.</p>\n<p>Une façon de comprendre ce point est de considérer les différentes façons dont JavaScript déclare ses variables. <code>var</code> et <code>let</code> permettent de changer ce que contient la variable, au contraire de <code>const</code>. Ces comportements sont reflétés dans la manière avec laquelle TypeScript déduit les types.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' >changingString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' >changingString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// `changingString` peut représenter n&apos;importe quel string, donc</span></div><div class='line'><span style=\"color: #008000\">// TypeScript dit que cette variable est de type string</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' style='border-bottom: solid 2px lightgrey;'>changingString</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let changingString: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const constantString: \"Bonjour tout le monde\"' >constantString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Bonjour tout le monde\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// `constantString` ne peut représenter qu&apos;un seul string, donc TypeScript</span></div><div class='line'><span style=\"color: #008000\">// lui assigne un type littéral</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const constantString: \"Bonjour tout le monde\"' style='border-bottom: solid 2px lightgrey;'>constantString</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const constantString: \"Bonjour tout le monde\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAxgFghgOwOYEtkGUwCc1IgXggCIAJEYYAewgHVKtgATIgbgChZFUNtcDiA8sACHEALIBXBI0qs2AenkQABp2S5MOZMogAHEBMhYQurAEuAziARgQWCAgDkKALa76tiAEcJ5CBd5kABoIGQQoBSUAFQBPfXQoHF1IRhRIHxBocE8ANzgcOAAjUAgQANDMsDjMgK0kDnh1Hjr2RQgAPQB+Ng5KBHKoPoDEME0+QiIAIT6AK0oJezB5yBKXPsYQOTbVIbARse0HTP1DCGNTS2tbex9HKX8DYH9ApBCwqAhY+MSUZMiIYASFAQOAWCwoJAITL3Kr6AFpMBmLBwYC9fp7GwHJCtJRdIA'>Try</a></div></pre>\n<p>Les types littéraux ne sont pas très utiles tous seuls :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: \"bonjour\"' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"bonjour\"</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"bonjour\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let x: \"bonjour\"' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"bonjour\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #001080\"><data-err><data-lsp lsp='let x: \"bonjour\"' >x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"salut\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '\"salut\"' is not assignable to type '\"bonjour\"'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '\"salut\"' is not assignable to type '\"bonjour\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABtIAXUAD1QCIAjOAOwCs4BXac0AXlCtoefIG4cIUAHkA0jhLtO1ekxYChAOmUSp5RAEM8jQvyA'>Try</a></div></pre>\n<p>Une variable qui n’a qu’une seule valeur n’est pas très utile !</p>\n<p>Mais en <em>combinant</em> les types littéraux dans des unions, vous pouvez exprimer des concepts bien plus utiles - par exemple, il est possible de créer des fonctions qui n’acceptent que certaines valeurs précises :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) alignment: \"left\" | \"right\" | \"center\"' >alignment</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"right\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"center\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bonjour tout le monde\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Yo mec\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&quot;centre&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAA7RUkUAqkAHhQBQqiIUmJAOYAaUAEMANlWEkAtpBaoARFMgEKK0AB9QKpsIAWW3frJKKMFQEpQAbzyhQIUADoPeAL55GzNpw8KgBCtABWcETQoBSRFKDqoPK0ACaQKuJqGlo2ANy+QgFc3CoAmnBJkGQZ5pbQ6XlAA'>Try</a></div></pre>\n<p>Les types littéraux numériques fonctionnent de la même manière :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function compare(a: string, b: string): -1 | 0 | 1' >compare</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> : -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbADgQwE4FMAUmAXIgM5TYxgDmANIgEYnmU0CUJAtAIyIA+iAAz9EvAN4AoRIjxQQ2JJkQBeVY0QB+IYhJKAfOq28u3ANwSAvkA'>Try</a></div></pre>\n<p>Bien sûr, il est possible de combiner des primitives avec des types objet :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Options | \"auto\"' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.width: number' >width</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;automatic&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAPIAOJBcRioA3nqKAO4EAJiQAWqIgFcAtgCMYAbjwBfPOQlFqLNqGptyBAOYTokABQAPVEy3tQAH1AAiShJJxHASi49QIUADpA5TxdIn0jE1NOfiFRVABGAAZE0CUPRVDw4zNnV3d0kL1DbNNctylKFmpPeSA'>Try</a></div></pre>\n<p>Un autre type littéral existe : les littéraux booléens.\nIl n’existe que deux types booléens littéraux, et comme vous pourriez le deviner, ce sont <code>true</code> et <code>false</code>.\nLe type <code>boolean</code>, est, en réalité, un type alias de l’union <code>true | false</code>.</p>\n<h3 id=\"inférence-littérale\" style=\"position:relative;\"><a href=\"#inf%C3%A9rence-litt%C3%A9rale\" aria-label=\"inférence littérale permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inférence littérale</h3>\n<p>Quand vous créez une variable qui est un objet, TypeScript pense que les propriétés de cet objet pourraient changer de valeur.\nPar exemple, si vous écrivez ce code :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    counter: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) counter: number' >counter</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const someCondition: boolean' >someCondition</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    counter: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) counter: number' >counter</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3mpBbEAwqsAJYYmoBc8ARkkhCFCgNwBQA9B-ALR9gBXDHx5tk6LEhoAreAF54Ab0RIBKDCBjUADPAC+7EgDN4AChz4iKUuVQBKJW3jwp0gHTI1GmPPgBGdj0gA'>Try</a></div></pre>\n<p>TypeScript ne pense pas qu’assigner <code>1</code> à un champ qui avait <code>0</code> est une erreur.\nEn d’autres termes <code>obj.counter</code> est de type <code>number</code>, pas <code>0</code>, parce que les types sont utilisés pour déterminer le comportement à la <em>lecture</em> et l’<em>écriture</em>.</p>\n<p>Même chose pour les <code>string</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: string' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: string' >method</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6ABbkMGmQASpACOdSImYAKOtFKpJ0VgwDmAGlABbSMy5wCqAEQBxAKIAVQ6AA+oQwAUA8gGVLASlQA3OKwIBuPBBQAFpQ4jpmUOC8Yg5JUCoRUABeUABvUFl5Oy5mZgAHFBBIAA9yTXyBADpYzUMNbV19IzNLUABfAJ4+AWExCWlEqqyNIca9Ajc-IA'>Try</a></div></pre>\n<p>Dans l’exemple ci-dessus, <code>req.method</code> est inféré comme étant un <code>string</code>, pas <code>\"GET\"</code>. BIl se peut qu’il y ait du code entre la déclaration de <code>req</code> et l’appel de <code>handleRequest</code>, et ce code pourrait assigner un nouveau <code>string</code> comme <code>\"GUESS\"</code> to <code>req.method</code>. Donc TypeScript considère que ce code contient une erreur.</p>\n<p>Il y a deux façons de corriger ce problème.</p>\n<ol>\n<li>\n<p>Vous pouvez ajouter une assertion à deux endroits :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 1er endroit :</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// 2ème endroit</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAspVgIQAlEAR2RAGcMAKZGCALngZi1QHMAaeAFsQGAjmAcARAHEAogBUp8AD7wpABQDyAZSUBKDgDccWYAG4AUAHpr8ALSOwyDI-s27ARhAx4IEjCmGPBslmB4DPBwVPAAvPAA3vAs7OoEGBgADnRstiAAHlBCmWQAdOFCUoIiYhLS8krwUHTqDcoAvla28ABMABcifgFBlkQkZJQ09EzRpSmCszXiwE0tsopS+uZAA'>Try</a></div></pre>\n<p>Le premier changement signifie “Je veux que <code>req.method</code> ait toujours le type littéral <code>\"GET\"</code>”, empêchant tout changement de cette valeur vers <code>\"GUESS\"</code> plus tard.\nLe deuxième changement signifie “Je sais que, pour certaines raisons, <code>req.method</code> est égal à <code>\"GET\"</code>“.</p>\n</li>\n<li>\n<p>Vous pouvez utiliser <code>as const</code> pour convertir l’objet entier en types littéraux :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: \"https://example.com\"' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: \"https://example.com\"' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAspVgIQAlEAR2RAGcMAKZGCALngZi1QHMAaeAFsQGAjmAcARAHEAogBUp8AD7wpABQDyAZSUBKDgDccWYAG4AUAHpr8ALSOwyDI-uWweBvDhV4AXngAb3gWdnUCDAwABzo2WxAADyghaLIAOk8hKUERMQlpeSV4AF94KDp4T1QGKyISMkoaeiZfdLDBNrzxYH1zIA'>Try</a></div></pre>\n</li>\n</ol>\n<p>Le suffixe <code>as const</code> vaut la même chose que <code>const</code> mais pour le système de types, garantissant que toutes les propriétés aient un type littéral, au lieu d’un type plus général comme <code>string</code> ou <code>number</code>.</p>\n<h2 id=\"null-et-undefined\" style=\"position:relative;\"><a href=\"#null-et-undefined\" aria-label=\"null et undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>null</code> et <code>undefined</code></h2>\n<p>JavaScript a deux valeurs primitives pour signaler une valeur inexistante ou non-initialisée : <code>null</code> et <code>undefined</code>.</p>\n<p>TypeScript a deux <em>types</em> des mêmes noms. Le comportement de ces types dépend de l’activation de l’option <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>.</p>\n<h3 id=\"strictnullchecks-désactivé\" style=\"position:relative;\"><a href=\"#strictnullchecks-d%C3%A9sactiv%C3%A9\" aria-label=\"strictnullchecks désactivé permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> désactivé</h3>\n<p>Si <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> est <em>désactivé</em>, les valeurs qui pourraient être <code>null</code> ou <code>undefined</code> peuvent toujours être lues, et les valeurs <code>null</code> et <code>undefined</code> peuvent être assignées à des variables de tous types.\nCe comportement est similaire aux langages qui n’ont pas de vérification pour <code>null</code> ou <code>undefined</code> (ex. Java ou C#).\nNe pas vérifier pour ces deux valeurs tend à être une source importante de bugs ; nous recommandons toujours d’activer <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> s’il est pratique de le faire.</p>\n<h3 id=\"strictnullchecks-activé\" style=\"position:relative;\"><a href=\"#strictnullchecks-activ%C3%A9\" aria-label=\"strictnullchecks activé permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> activé</h3>\n<p>Si <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a> est <em>activé</em>, quand une valeur est <code>null</code> ou <code>undefined</code>, vous devrez vous assurer que ces deux types sont écartés avant d’utiliser des méthodes ou des propriétés sous ces valeurs.\nTout comme <code>undefined</code> doit être éliminé avant d’utiliser une propriété facultative, vous pouvez vous servir du <em>rétrécissement</em> pour éliminer les valeurs qui pourraient être <code>null</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(x: string | null): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | null' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | null' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ne rien faire</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bonjour, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAB4BciAzlAE6FGIA+iYIANhwJSIDeAKESIYwROUQBeaW049+Q4YgD0yttkQNsSYAEMYdbIoC+ibB2obBSxBATU4HbADoOcUgCIAQggBWcEDoAGkQPRABqRDJnKDgAVQAHBOw6AGFdSxJubgBuEwFjIA'>Try</a></div></pre>\n<h3 id=\"opérateur-dassertion-non-nulle-suffixe-\" style=\"position:relative;\"><a href=\"#op%C3%A9rateur-dassertion-non-nulle-suffixe-\" aria-label=\"opérateur dassertion non nulle suffixe  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opérateur d’assertion non-nulle (Suffixe <code>!</code>)</h3>\n<p>TypeScript possède une syntaxe spéciale pour éliminer <code>null</code> et <code>undefined</code> d’un type sans passer par un rétrécissement.\nÉcrire <code>!</code> après toute expression est effectivement une assertion que cette valeur n’est ni <code>null</code>, ni <code>undefined</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function liveDangerously(x?: number | null): void' >liveDangerously</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | null | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Pas d&apos;erreur</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | null | undefined' >x</data-lsp></span><span style=\"color: #000000\">!.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgNwKYBECGYDmGATnCAM7ICeAFAB4D8AXImCALYBGxiAPiyMmQBKRAG8AUIkQB6aYgAKOMogAmAcmJEMIIpMQQEZOMgwA6ZHHx0AhKahwAYjFoYV1IUIDc4gL5A'>Try</a></div></pre>\n<p>Tout comme les autres assertions, votre code ne sera pas changé à l’exécution, donc n’utilisez l’opérateur <code>!</code> que si vous savez que votre type <em>ne peut jamais</em> être <code>null</code> ni <code>undefined</code>.</p>\n<h2 id=\"enums\" style=\"position:relative;\"><a href=\"#enums\" aria-label=\"enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums</h2>\n<p>Les Enums sont une fonctionnalité ajoutée à JavaScript par TypeScript. Elle permet de décrire une valeur qui pourrait faire partie d’un ensemble de constantes nommées. Au contraire de la plupart des fonctionnalités TypeScript, elle n’est <em>pas</em> un ajout au niveau du système de types, mais bel et bien un ajout qui sera reflété à l’exécution. De ce fait, vous devriez savoir que cette possibilité existe, mais vous ne devriez vous en servir que si vous en avez la certitude. Vous pouvez lire plus dans la <a href=\"/fr/docs/handbook/enums.html\">page de référence d’Enums</a>.</p>\n<h2 id=\"primitives-moins-fréquentes\" style=\"position:relative;\"><a href=\"#primitives-moins-fr%C3%A9quentes\" aria-label=\"primitives moins fréquentes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitives moins fréquentes</h2>\n<p>Il serait intéressant de mentionner le reste des primitives JavaScript représentées dans le système de types, bien que nous ne rentrerons pas dans leurs détails.</p>\n<h4 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>bigint</code></h4>\n<p>À partir d’ES2020, il existe une primitive JavaScript pour les très grands entiers, <code>BigInt</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Création d&apos;un BigInt via la fonction</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const oneHundred: bigint' >oneHundred</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">bigint</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var BigInt: BigIntConstructor&#10;(value: string | number | bigint | boolean) => bigint' >BigInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Création d&apos;un BigInt via la syntaxe littérale</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const anotherHundred: bigint' >anotherHundred</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">bigint</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #0000FF\">n</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcpEGcBMAGXAofEUAYVgEvpIBLAewDtQATAcgFdGAha+ASXsigAbtWigANmIBmDAMY0G+WQwyCGiABIcmsREzQAjHtQGgAvKG58BACgCMOHAEoA3IWJlKCxqw6We-IIiYpKgGACeAtAAHogS1JCQ5LDQ4ohKKoLQ9LSQABaIsFr0OnqGxqYWDjj0LkA'>Try</a></div></pre>\n<p>Vous pouvez en apprendre plus sur les BigInt dans les <a href=\"/docs/handbook/release-notes/typescript-3-2.html#bigint\">notes de changement de TypeScript 3.2</a>.</p>\n<h4 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>symbol</code></h4>\n<p>Il existe une primitive en JavaScript qui sert à créer des références uniques via la fonction <code>Symbol()</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const firstName: typeof firstName' >firstName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"nom\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const secondName: typeof secondName' >secondName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"nom\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const firstName: typeof firstName' >firstName</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const secondName: typeof secondName' >secondName</data-lsp></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Ne peut jamais se produire</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUAMZwB2iALqAGYCWSZAcgIYC2koAvKAMoCezARnAA2ACgBExOMzEBKANyES5UIkhFiAEyasO3PoNESpshXmqVQImnW1t29lWpJaWkGaADeeUKBCh6bAAOkACuFABWLIzUiI6ggfAaIbSQeAC+QA'>Try</a></div></pre>\n<p>Vous pouvez en savoir plus dans la <a href=\"/fr/docs/handbook/symbols.html\">page de référence des Symbols</a>.</p>","headings":[{"value":"Les primitives: string, number, et boolean","depth":2},{"value":"Tableaux","depth":2},{"value":"any","depth":2},{"value":"noImplicitAny","depth":3},{"value":"Annotations de Types sur des Variables","depth":2},{"value":"Fonctions","depth":2},{"value":"Annotations de Types de Paramètres","depth":3},{"value":"Annotations de Type de Retour","depth":3},{"value":"Fonctions anonymes","depth":3},{"value":"Types Objets","depth":2},{"value":"Propriétés facultatives","depth":3},{"value":"Types Union","depth":2},{"value":"Définir un Type Union","depth":3},{"value":"Utiliser les Types Union","depth":3},{"value":"Alias de Types","depth":2},{"value":"Interfaces","depth":2},{"value":"Différence entre les alias de types et interfaces","depth":3},{"value":"Assertions de Types","depth":2},{"value":"Types littéraux","depth":2},{"value":"Inférence littérale","depth":3},{"value":"null et undefined","depth":2},{"value":"strictNullChecks désactivé","depth":3},{"value":"strictNullChecks activé","depth":3},{"value":"Opérateur d’assertion non-nulle (Suffixe !)","depth":3},{"value":"Enums","depth":2},{"value":"Primitives moins fréquentes","depth":2},{"value":"bigint","depth":4},{"value":"symbol","depth":4}],"frontmatter":{"permalink":"/fr/docs/handbook/2/everyday-types.html","title":"Everyday Types","disable_toc":null,"handbook":null,"oneline":"Les primitives du langage.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Bases","oneline":"Première étape dans l'apprentissage de TypeScript : les types de base.","permalink":"/fr/docs/handbook/2/basic-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Rétrécissement","oneline":"Comprendre comment TypeScript utilise ses connaissances JavaScript pour réduire la quantité de syntaxe de types dans vos projets.","permalink":"/fr/docs/handbook/2/narrowing.html"}}}},"pageContext":{"id":"1-everyday-types","slug":"/fr/docs/handbook/2/everyday-types.html","repoPath":"/packages/documentation/copy/fr/handbook-v2/Everyday Types.md","previousID":"f471d048-30b3-58c0-a7a2-b999d380d8ae","nextID":"7c8fdbe3-0b8f-5c51-845d-1df912f931ca","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}