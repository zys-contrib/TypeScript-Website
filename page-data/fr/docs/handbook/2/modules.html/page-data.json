{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/2/modules.html","result":{"data":{"markdownRemark":{"id":"005d94d7-d6e7-5ccc-85aa-67bfc3ba19ca","excerpt":"Le JavaScript a une longue histoire et plusieurs manières différentes de gérer du code séparé en modules.\nTypeScript, présent depuis 2012, a géré plusieurs de…","html":"<p>Le JavaScript a une longue histoire et plusieurs manières différentes de gérer du code séparé en modules.\nTypeScript, présent depuis 2012, a géré plusieurs de ces formats, mais avec le temps, la communauté et la spécification JavaScript ont convergé sur un format appelé les ES Modules (ou modules ES6). Vous l’aurez peut-être connue avec la syntaxe <code>import</code>/<code>export</code>.</p>\n<p>Les ES Modules ont été ajoutés à la spécification JavaScript 2015, et ont été supportés dans la plupart des moteurs JavaScript en 2020.</p>\n<p>Pour ne pas s’éparpiller, le manuel va couvrir les ES Modules et leur précurseur populaire, la syntaxe CommonJS de <code>module.exports =</code>. Vous pouvez également trouver des informations sur les autres styles de déclarations de modules dans la référence, sous la page <a href=\"/docs/handbook/modules.html\">Modules</a> (en anglais).</p>\n<h2 id=\"comment-les-modules-javascript-sont-définis\" style=\"position:relative;\"><a href=\"#comment-les-modules-javascript-sont-d%C3%A9finis\" aria-label=\"comment les modules javascript sont définis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment les modules JavaScript sont définis</h2>\n<p>Dans TypeScript, tout comme dans ECMAScript 2015, tout fichier contenant un <code>import</code> ou <code>export</code> est un module.</p>\n<p>De même, tout fichier sans déclaration d’import ou d’export est considéré comme un script dont le contenu est disponible dans la portée globale (donc disponible pour les modules).</p>\n<p>Les Modules possèdent leur propre portée dans laquelle ils sont exécutés, donc ils ne sont pas exécutés dans la portée globale.\nCela signifie que toute variable, fonction, classe, etc. déclarée dans un module n’est pas visible en dehors du module, sauf si explicitement exportés d’une façon ou d’une autre.\nDe même, pour utiliser une variable, fonction, classe, interface, etc. exportée d’un module différent, une forme d’import doit être utilisée.</p>\n<h2 id=\"ce-qui-nest-pas-un-module\" style=\"position:relative;\"><a href=\"#ce-qui-nest-pas-un-module\" aria-label=\"ce qui nest pas un module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ce qui n’est pas un Module</h2>\n<p>Il est important de comprendre ce que TypeScript considère comme un module.\nLa spécification JavaScript déclare que tout fichier JavaScript sans un <code>export</code> ni d’<code>await</code> à la portée la plus haute du fichier doit être considéré comme un script, pas comme un module.</p>\n<p>Dans un fichier de script, les variables et types sont déclarés et accessibles dans la portée globale, et TypeScript suppose que vous utiliserez l’option de compilateur <a href=\"/tsconfig#outFile\"><code>outFile</code></a> pour assembler plusieurs fichiers d’entrée dans un fichier de sortie, ou utiliser des balises <code>&#x3C;script></code> dans votre HTML pour charger ces fichiers (dans le bon ordre !).</p>\n<p>Si vous avez des fichiers qui n’ont pas d’<code>import</code>, ni d’<code>export</code>, mais que vous souhaitez traiter comme des modules, ajoutez la ligne :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAbwL4G4g'>Try</a></div></pre>\n<p>qui va convertir le fichier en un module qui n’exporte rien. Cette syntaxe fonctionne peu importe votre façon de gérer les imports et exports.</p>\n<h2 id=\"modules-en-typescript\" style=\"position:relative;\"><a href=\"#modules-en-typescript\" aria-label=\"modules en typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules en TypeScript</h2>\n<blockquote class='bg-reading'>\n   <p>Lecture additionnelle :<br />\n   <a href='https://exploringjs.com/impatient-js/ch_modules.html#overview-syntax-of-ecmascript-modules'>Impatient JS (en anglais)</a><br/>\n   <a href='https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Modules'>MDN : Modules JavaScript</a><br/>\n   </p>\n</blockquote>\n<p>Il y a trois éléments principaux à considérer quand vous écrivez du code basé sur des Modules en TypeScript :</p>\n<ul>\n<li><strong>Syntaxe</strong> : Quelle syntaxe voudrais-je utiliser pour importer et exporter mes modules ?</li>\n<li><strong>Résolution de Modules</strong> : Quelle est la relation entre les noms (ou chemins) de modules et leurs fichiers sur le disque ?</li>\n<li><strong>Cible d’émission de Modules</strong> : À quoi doit ressembler mon code JavaScript émis en sortie ?</li>\n</ul>\n<h3 id=\"syntaxe-es-module\" style=\"position:relative;\"><a href=\"#syntaxe-es-module\" aria-label=\"syntaxe es module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe ES Module</h3>\n<p>Un fichier peut déclarer un export principal avec <code>export default</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: hello.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function helloWorld(): void' >helloWorld</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Bonjour tout le monde !\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAFvWsB7AOgBcBnAKHgA8AHAgJxNABN5JkBXWZyTxAMYloBRDjyEA6o1gsAFAEpQAbwqhQA0WQIIihAOZyARACFRAKwKcGoEleYJQqUW1ABCIwoDcFAL5A'>Try</a></div></pre>\n<p>Qui est donc importé avec :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) function helloWorld(): void&#10;import helloWorld' >helloWorld</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./hello.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='(alias) helloWorld(): void&#10;import helloWorld' >helloWorld</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAFvWsB7AOgBcBnAKHgA8AHAgJxNABN5JkBXWZyTxAMYloBRDjyEA6o1gsAFAEpQAbwqhQA0WQIIihAOZyARACFRAKwKcGoEleYJQqUW1ABCIwoDcFAL4UQCBgEFHQsaEQ2alJKQIBaBIFOEgS4imhUeiZxfAJpBllQSAYCVFAjImBcXKJzMiMfaqkZeW8gA'>Try</a></div></pre>\n<p>En plus de l’export principal, vous pouvez avoir plus d’un export de variables et fonctions via le mot-clé <code>export</code> en omettant <code>default</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: maths.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3.14</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let squareTwo: number' >squareTwo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1.41</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const phi: 1.61' >phi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1.61</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class RandomNumberGenerator' >RandomNumberGenerator</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function absolute(num: number): number' >absolute</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\"> * -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11ADdkHQbpQBeUAZmIBGACwBuSrUbMEzQgEcAru3gAVAO51eoIcRFCJ1ek1ABjOokLMa+bn10A2A+UnHmp2MkKFQAJWSIACZ0qAByiqgARvAMAOJIMXiMoADeAL4uRtKgkIqIprjQFqDIkYR0sIq48AAUiBFY9VExAJSp5KCg0JCgdRGgADygAAxtDPC4igyIoE2gAFSgALTOneOT07MREmlAA'>Try</a></div></pre>\n<p>Ces exports peuvent être utilisés avec la syntaxe <code>import</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) var pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const phi: 1.61&#10;import phi' >phi</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(alias) function absolute(num: number): number&#10;import absolute' >absolute</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./maths.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) var pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const absPhi: number' style='border-bottom: solid 2px lightgrey;'>absPhi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(alias) absolute(num: number): number&#10;import absolute' >absolute</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) const phi: 1.61&#10;import phi' >phi</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const absPhi: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11ADdkHQbpQBeUAZmIBGACwBuSrUbMEzQgEcAru3gAVAO51eoIcRFCJ1ek1ABjOokLMa+bn10A2A5OPNTsZIUKgASskQAJnSoAHKKqABG8AwA4kjReIygAN4Avi7SoJCKiKa40BagyBGEdLCKuPAAFIjhWLWR0QCUKeSgoNCQoDXhoAA8oAAMLQzwuIoMiKANoABUoAC0zu2j45PT4RLpIBAwCCjoWMg0NKQUOwuXphWXC+TQqK4pnNAANJy278Wl5ZWgqVkGMFQAAiYjAHAEEgAK0IIIk5HMljK8GIsDoAHMqlwmhIkVYiiUAAq2bTfMoVao2aC48g7dqgAB6AH4gA'>Try</a></div></pre>\n<h3 id=\"syntaxe-dimport-additionnelle\" style=\"position:relative;\"><a href=\"#syntaxe-dimport-additionnelle\" aria-label=\"syntaxe dimport additionnelle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe d’import additionnelle</h3>\n<p>Un import peut être renommé en utilisant un format comme <code>import { old as new }</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='var pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) var π: number&#10;import π' >π</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./maths.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) var π: number&#10;import π' style='border-bottom: solid 2px lightgrey;'>π</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(alias) var π: number\nimport π</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11ADdkHQbpQBeUAZmIBGACwBuciAgwEKdFmQ0apClIC0GgMYBXXBrXloqek1ABvTt2SFQgAeBQAX1CQGdVKABExYDgIkAVoQeEuSadIiEdAjEsHQA5gAUtgCUElKgGZmZAHoA-EA'>Try</a></div></pre>\n<p>Vous pouvez combiner les deux façons d’importer dans un seul <code>import</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: maths.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const pi: 3.14' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3.14</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class RandomNumberGenerator' >RandomNumberGenerator</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) class RandomNumberGenerator&#10;import RandomNumberGenerator' >RandomNumberGenerator</data-lsp></span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\"><data-lsp lsp='const pi: 3.14' >pi</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const π: 3.14&#10;import π' >π</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./maths.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='(alias) class RandomNumberGenerator&#10;import RandomNumberGenerator' style='border-bottom: solid 2px lightgrey;'>RandomNumberGenerator</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>(alias) class RandomNumberGenerator\nimport RandomNumberGenerator</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) const π: 3.14&#10;import π' style='border-bottom: solid 2px lightgrey;'>π</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(alias) const π: 3.14\nimport π</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11AGM7FDmbpQBeUAMzEAjABYA3JVqNmAE3iRkAV1jMWsZIUKgASskSy6qAHJLUAI3gMA4kit5GoAN4BfcuRAQYCFOizIaGlIKaFR6Jl19QxMzSxs7BgcGABpnUG5QTVBAAeBQF1BIBiNQACJiYBwCEgArQhLJcj0DI1MLK1tEe1xGSU8APQB+dzYOOgRiWDoAcwAKbIBKXrBQFdXVwaA'>Try</a></div></pre>\n<p>Vous pouvez assembler tous les éléments exportés dans un espace de noms avec <code>* as name</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import math' >math</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./maths.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='import math' >math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='var pi: number' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const positivePhi: number' style='border-bottom: solid 2px lightgrey;'>positivePhi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='import math' >math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='function absolute(num: number): number' >absolute</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='import math' >math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='const phi: 1.61' >phi</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const positivePhi: number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11ADdkHQbpQBeUAZmIBGACwBuSrUbMEzQgEcAru3gAVAO51eoIcRFCJ1ek1ABjOokLMa+bn10A2A+UnHmkRYlO5oF0MgAjQjpYRVx4AApERVQsaNQA+AYASlAAb3JQUGhIUCiY0AAeUAAGVIZ4XEUGRFB40AAqUABaZyyKqpq6mIkAX3IQFubm0zDh5oGwKDgkNEx-GhpSCmhUN0b-Qmw8fFBIBjpUUAAiYmAcAhIAK0JjiXJzSxD4Ylg6AHMIi-xiLmSJR5WTh0QjQHwseAABVs2m+xECwVC4S+O1+tn+kyyWQAegB+IA'>Try</a></div></pre>\n<p>Vous pouvez importer un fichier et <em>ne pas</em> inclure de variables dans votre module actuel avec <code>import \"./file\"</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./maths.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"3.14\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVyAuALAZwDpdCAoeADwAcB7AJ11ADdkHQbpQBeUAZmIBGACwBuciFABaWQGMArrlnTJYKHCRpMoZDRqkK0VPSagARMWA4CJAFaFzE8nLqJCdBMVh0A5gApzQVFzAEoxIA'>Try</a></div></pre>\n<p>Dans ce cas, l’<code>import</code> ne fait rien. Cela dit, tout le code de <code>maths.ts</code> est évalué, ce qui peut provoquer des effets de bord dans d’autres parties.</p>\n<h4 id=\"syntaxe-des-modules-propre-à-typescript\" style=\"position:relative;\"><a href=\"#syntaxe-des-modules-propre-%C3%A0-typescript\" aria-label=\"syntaxe des modules propre à typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe d’ES Modules propre à TypeScript</h4>\n<p>Les types peuvent être importés et exportés en utilisant la même syntaxe que JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: animal.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}' >Cat</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) breed: string' >breed</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) yearOfBirth: number' >yearOfBirth</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.breeds: string[]' >breeds</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dog.yearOfBirth: number' >yearOfBirth</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(alias) interface Dog&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Animals = Cat | Dog' >Animals</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) interface Dog&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKZjqubAHQAuAzgFDwAeADgPYBOxoxAnjfKAMLLMC8oAN6gARg3jwAJllLEG0RAHMA3KFbxkDAPKQAQtCYALLIgCuqEfAagAvsvKVajZguJXIyAMacAInUVC5KCi4lKkMnIKigDaALr2weqaOvpGJuaWDPY2DiAQMAgo6FjINDQkFHj0TELcvAA0oH4BNqCQDHSooABEhMA4eASEAFak3fZsHKAAgrj4sKSgAjzMAD5N-spAA'>Try</a></div></pre>\n<p>TypeScript a ajouté deux concepts à la syntaxe d’<code>import</code> pour importer un type :</p>\n<h6 id=\"import-type\" style=\"position:relative;\"><a href=\"#import-type\" aria-label=\"import type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>import type</code></h6>\n<p>Une déclaration d’import qui ne peut importer <em>que</em> des types :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: animal.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}' >Cat</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) breed: string' >breed</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) yearOfBirth: number' >yearOfBirth</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>'createCatName' cannot be used as a value because it was imported using 'import type'.</span><span class=\"code\">1361</span></span><span class=\"error-behind\">'createCatName' cannot be used as a value because it was imported using 'import type'.</span><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Dog = {&#10;    breeds: string[];&#10;    yearOfBirth: number;&#10;}' >Dog</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) breeds: string[]' >breeds</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]; </span><span style=\"color: #001080\"><data-lsp lsp='(property) yearOfBirth: number' >yearOfBirth</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createCatName: () => string' >createCatName</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bloom\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: valid.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type Dog = {&#10;    breeds: string[];&#10;    yearOfBirth: number;&#10;}&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Animals = Cat | Dog' >Animals</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) type Dog = {&#10;    breeds: string[];&#10;    yearOfBirth: number;&#10;}&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const createCatName: () => string&#10;import createCatName' >createCatName</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const name: string' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(alias) createCatName(): string&#10;import createCatName' >createCatName</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKZjqubAHQAuAzgFDwAeADgPYBOxoxAnjfKAMLLMC8oAN6gARg3jwAJllLEG0RAHMA3KFbxkDAPKQAQtCYALLIgCuqEfAagAvssq1GzNh1AAROotADhYiZNIZOQVFAG0AXVV1TR19IxNzS2s7B3omUABjOkRZTPFeeB5iADk0TgEACgBKbwA+UAAiEVg6OlQG+3IQCBgEFHQsADcCaEkSCjw053ZOYSKAGndPW1BIBjbGwmAcPAJCACtSDtSnFhnQAEFcfFhSb25eUAAfJZVyLrAoOCQyrGQaGjjD4QKzrBiBUAARgAzAA2SHkSanFyzPIaYiFXildArNYbBpbHY3A5HexZHLMfrlNEFIrY+DVZRAA'>Try</a></div></pre>\n<h6 id=\"imports-de-type-en-une-ligne\" style=\"position:relative;\"><a href=\"#imports-de-type-en-une-ligne\" aria-label=\"imports de type en une ligne permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imports de <code>type</code> en une ligne</h6>\n<p>TypeScript 4.5 permet également de préfixer des déclarations d’imports en une ligne avec <code>type</code> pour indiquer que l’import en une ligne est un type :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: app.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const createCatName: () => string&#10;import createCatName' >createCatName</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) type Dog = {&#10;    breeds: string[];&#10;    yearOfBirth: number;&#10;}&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Animals = Cat | Dog' >Animals</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) type Cat = {&#10;    breed: string;&#10;    yearOfBirth: number;&#10;}&#10;import Cat' >Cat</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='(alias) type Dog = {&#10;    breeds: string[];&#10;    yearOfBirth: number;&#10;}&#10;import Dog' >Dog</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const name: string' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(alias) createCatName(): string&#10;import createCatName' >createCatName</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKZjqubAHQAuAzgFDwAeADgPYBOxoxAnjfKAMLLMC8oAN6gARg3jwAJllLEG0RAHMA3KFbxkDAPKQAQtCYALLIgCuqEfAagAvssq1GzNh1AAROotADhYiZNIZOQVFAG0AXVV1TR19IxNzS2s7B3omUABjOkRZTPFeeB5iADk0TgEACgBKbwA+UAAiEVg6OlQG+xBQAFpejNNiXu7yLqg4JDKsZBoaEgo8NOZhDPziQt5S9AAaFnZOIp2XTg8vG1BIBjbGwmAcPAJCACtSDvJUp13XAEFcfFhSbzcXigAA+7k89iyOWYKHQgJWGjWRU28GqyiAA'>Try</a></div></pre>\n<p>Cela permet aux outils qui n’interagissent pas avec TypeScript, comme Babel, SWC ou esbuild de savoir quels imports peuvent être enlevés en toute sécurité.</p>\n<h4 id=\"syntaxe-es-module-au-comportement-commonjs\" style=\"position:relative;\"><a href=\"#syntaxe-es-module-au-comportement-commonjs\" aria-label=\"syntaxe es module au comportement commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe ES Module au comportement CommonJS</h4>\n<p>TypeScript possède une syntaxe ES Module qui correspond <em>directement</em> au <code>require</code> de CommonJS et AMD. Les imports qui utilisent la syntaxe ES Module sont <em>pour la plupart</em> un équivalent de <code>require</code> dans ces environnements, mais cette syntaxe vous garantira que vous aurez une correspondance identique entre votre fichier TypeScript et le fichier de sortie de CommonJS :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) module \"fs\"&#10;import fs = require(\"fs\")' >fs</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const code: string' >code</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) module \"fs\"&#10;import fs = require(\"fs\")' >fs</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='function fs.readFileSync(path: number | fs.PathLike, options: {&#10;    encoding: BufferEncoding;&#10;    flag?: string | undefined;&#10;} | BufferEncoding): string (+2 overloads)' >readFileSync</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQgEB4CcFMDNpgOwMbVAFwJ4AdoGcBeAIkQHsATaI0YAPgCgwABAWwoFcAbaALlGVIs2iAFZ5GwUAFoZyduhlT6ASxbZSkdKFh5QBUDACO7ZTAAURHUQCUAbnoDEeLQMp7teAHQwAhuQBiytwAypgoFgAW0JycpJ7oeEQANKBE8rAAHDa2QA'>Try</a></div></pre>\n<p>Vous pourrez en apprendre plus sur votre syntaxe dans la page de référence de <a href=\"/docs/handbook/modules.html#export--and-import--require\">modules</a> (en anglais).</p>\n<h2 id=\"syntaxe-commonjs\" style=\"position:relative;\"><a href=\"#syntaxe-commonjs\" aria-label=\"syntaxe commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe CommonJS</h2>\n<p>Le format CommonJS est le format dans lequel la plupart des modules npm sont fournis. Même si vous vous contentez d’écrire en ES Modules, une brève compréhension du mode de fonctionnement de CommonJS vous permettra de faciliter votre débogage.</p>\n<h4 id=\"exports\" style=\"position:relative;\"><a href=\"#exports\" aria-label=\"exports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exports</h4>\n<p>Les identifiants sont exportés en définissant la propriété <code>exports</code> sur un objet global appelé <code>module</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function absolute(num: number): number' >absolute</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\"> * -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) num: number' >num</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: NodeModule' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='(property) NodeJS.Module.exports: any' >exports</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3.14</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) squareTwo: number' >squareTwo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1.41</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) phi: number' >phi</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1.61</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) absolute: (num: number) => number' >absolute</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQgEB4CcFMDNpgOwMbVAFwJ4AdoGcBeAIkQHsATaI0YAPgCgwBaF5AV3RaftjZXQCWpRKACGAIzykANh2gAKRGwC2ALlBLl4hAEpQAb3qhQA2KEUqIoAAx6Y6NpBGbQAKlBMAjAG4joe47OKr4AvvT0yhRs0tAAdNAAHtikkOh4oAQGftgC6gDMsZ4ALAA0fngAjmyiMAAqAO6k6p6xRZ5lxtgAFrmgLQBs7X4SUrLo0GUh3kA'>Try</a></div></pre>\n<p>Ces fichiers peuvent maintenant être importés avec <code>require</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const maths: any' >maths</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='var require: NodeRequire&#10;(id: string) => any' >require</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"maths\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const maths: any' >maths</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' style='border-bottom: solid 2px lightgrey;'>pi</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFsHsBMFcA2BTAXKAxtSMB2ArAZwCgQIAzASxVwENI1RJaAXAC0IDoWSQwAeAE7JyyYbgzJQLAJ4AHZIQC8AIlxxkK0MAB8xcvAktK0XKFoAjQtETwWyABS54kdM8gWxASlABvYqCglOSgTi6g-KAADD7CLPCCZu6gAFSgALQAjADcAaBxCUkuuQC+xMQwCCicyAAectCCPKBKfnlylOgAzJyZACwANHmEAI7wtMIAKgDu0OiZnH2ZQ4FybJ2gCwBsy3mW1rb2QyW5ZOBUNPSMlLiwddy8YOnPGHbP6cRYuIQsTKwcLXyyDGlGEDhUzHYhBUXlykI4nA6pzAgVAAD0APxAA'>Try</a></div></pre>\n<p>Vous pouvez simplifier en utilisant la déstructuration en JavaScript :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> { </span><span style=\"color: #0070C1\"><data-lsp lsp='const squareTwo: any' >squareTwo</data-lsp></span><span style=\"color: #000000\"> } = </span><span style=\"color: #795E26\"><data-lsp lsp='var require: NodeRequire&#10;(id: string) => any' >require</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"maths\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const squareTwo: any' style='border-bottom: solid 2px lightgrey;'>squareTwo</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>const squareTwo: any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFsHsBMFcA2BTAXKAxtSMB2ArAZwCgQIAzASxVwENI1RJaAXAC0IDoWSQwAeAE7JyyYbgzJQLAJ4AHZIQC8AIlxxkK0MAB8xcvAktK0XKFoAjQtETwWyABS54kdM8gWxASlABvYqCglOSgTi6g-KAADD7CLPCCZu6gAFSgALQAjADcAaBxCUkuuQC+xMQwCCicyAAectCCPKBKfnlylOgAzJyZACwANHmEAI7wtMIAKgDu0OiZnH2ZQ4FybJ2gCwBsy3mW1rb2QyW5ZOBUNPSMlLiwddy8YOnPGHbP6cRYuIQsfqCj4yms1AJRa+WQY0owgcKmY7EIKi8uQBE2QM2gpzAAD0APxAA'>Try</a></div></pre>\n<h3 id=\"interopérabilité-entre-commonjs-et-es-modules\" style=\"position:relative;\"><a href=\"#interop%C3%A9rabilit%C3%A9-entre-commonjs-et-es-modules\" aria-label=\"interopérabilité entre commonjs et es modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interopérabilité entre CommonJS et ES Modules</h3>\n<p>Il y a une certaine différence de fonctionnalités entre les modules CommonJS et ES Module, en terme d’usage de l’objet <code>module</code> ou de définition d’export par défaut. TypeScript possède une option de compilateur pour réduire les conflits entre les deux ensembles de contraintes et de règles avec <a href=\"/tsconfig#esModuleInterop\"><code>esModuleInterop</code></a>.</p>\n<h2 id=\"options-de-résolution-de-modules-de-typescript\" style=\"position:relative;\"><a href=\"#options-de-r%C3%A9solution-de-modules-de-typescript\" aria-label=\"options de résolution de modules de typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options de résolution de modules de TypeScript</h2>\n<p>La résolution de modules est le procédé de détermination du fichier à importer en fonction de la chaîne de caractères dans la déclaration d’<code>import</code> ou <code>require</code>.</p>\n<p>TypeScript possède deux stratégies de résolution de modules : Classic et Node. Classic, l’option par défaut quand l’option <a href=\"/tsconfig#module\"><code>module</code></a> n’est pas égale à <code>commonjs</code>, est incluse pour des raisons de rétro-compatibilité.\nLa stratégie Node réplique la façon de fonctionnement de Node.js avec CommonJS, avec des vérifications supplémentaires pour les fichiers <code>.ts</code> et <code>.d.ts</code>.</p>\n<p>Beaucoup d’options de tsconfig influencent la stratégie de résolution de modules dans TypeScript : <a href=\"/tsconfig#moduleResolution\"><code>moduleResolution</code></a>, <a href=\"/tsconfig#baseUrl\"><code>baseUrl</code></a>, <a href=\"/tsconfig#paths\"><code>paths</code></a>, <a href=\"/tsconfig#rootDirs\"><code>rootDirs</code></a>.</p>\n<p>Pour plus de détails sur la façon de fonctionner de ces stratégies, vous pouvez consulter la section de référence sur la <a href=\"/docs/handbook/module-resolution.html\">Résolution de Modules</a> (en anglais).</p>\n<h2 id=\"options-démission-de-modules-en-typescript\" style=\"position:relative;\"><a href=\"#options-d%C3%A9mission-de-modules-en-typescript\" aria-label=\"options démission de modules en typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options d’émission de modules en TypeScript</h2>\n<p>Deux options affectent le code JavaScript émis :</p>\n<ul>\n<li><a href=\"/tsconfig#target\"><code>target</code></a> détermine quelles fonctionnalités JS sont nivelées vers le bas (converties pour être exécutées dans des moteurs plus anciens) et lesquelles doivent rester intactes</li>\n<li><a href=\"/tsconfig#module\"><code>module</code></a> détermine quelle stratégie est utilisée pour les interactions entre modules</li>\n</ul>\n<p>Les fonctionnalités disponibles dans votre moteur JavaScript détermineront la valeur de l’option <a href=\"/tsconfig#target\"><code>target</code></a> où votre code se lancera. Cela pourrait être : le navigateur le plus ancien que vous supportez, la version-cible la plus basse de Node.js, ou des contraintes uniques de votre environnement - comme avec Electron par exemple.</p>\n<p>Tout module doit passer par un chargeur de modules avant d’être utilisé, et l’option <a href=\"/tsconfig#module\"><code>module</code></a> détermine quel chargeur vous utiliserez.\nÀ l’exécution, le chargeur de modules s’occupe de localiser et exécuter toutes les dépendances d’un module avant de l’exécuter.</p>\n<p>Par exemple, voici un fichier TypeScript qui utilise la syntaxe d’ES Modules, démontrant différentes options pour <a href=\"/tsconfig#module\"><code>module</code></a> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const twoPi: number' >twoPi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRAQYCFOizREAE3pUC6sAFpL2PkUvnq0VE1agA3t14DhY0AF9QkMy4qKAARBTAeIQkZJQAVgSharSMLGxRnEQA7rg+Ujz8QqLiAFSgqkA'>Try</a></div></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGe7McAO1kQCcPYPJNVkABx7pQAb1AA3AIbFCpAPIAzAAqpQAX1BLuyUACIAdMADGsFpHTSW6SIYBWkfQG5MmUgA9hHUWYuj0eFg1UABeKVl5ZRCAKlAaZyA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_js_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants.js\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_js_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHHtkQCcvYuXUyAA590oAN6gAbgENihUgHkAZgAVUoAL6hlvZKABEAOmA16kdDPrpIR5gYDcmTKQAeIrmLMXQ6eLHVQAF5pOQUVQIAqUAAmByA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants.js\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_js_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants.js\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_js_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADtZEAnF2FyTVZABw-SgA3qABuAQ2KFSAeQBmABVSgAvqDntkoAEQA6YAGNYDSOnEN0kXQCtI2gNyZMpAB78WgoycHp4sJaAAvGKS0vIBAFSgAEz2QA'>Try</a></div></pre>\n<blockquote>\n<p>Remarque, ES2020 est effectivement le même que <code>index.ts</code>.</p>\n</blockquote>\n<p>Vous pourrez voir toutes les options disponibles et à quoi ressemble le code JavaScript en sortie dans la référence de l’option <a href=\"/tsconfig#module\"><code>module</code></a>.</p>\n<h2 id=\"espaces-de-noms-typescript\" style=\"position:relative;\"><a href=\"#espaces-de-noms-typescript\" aria-label=\"espaces de noms typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Espaces de noms TypeScript</h2>\n<p>TypeScript possède son propre format de modules, les <code>namespaces</code>, qui datent d’avant les ES Modules. Cette syntaxe a beaucoup de fonctionnalités pratiques pour créer des fichiers de définitions complexes, et est utilisée activement <a href=\"/dt\">chez DefinitelyTyped</a>. Les espaces de noms ne sont pas dépréciés, mais la majorité de fonctionnalités dans les espaces de noms existent dans les ES Modules et nous la recommandons pour vous aligner sur JavaScript. Vous pouvez en savoir plus sur les espaces de noms dans la page <a href=\"/docs/handbook/namespaces.html\">de référence</a>.</p>","headings":[{"value":"Comment les modules JavaScript sont définis","depth":2},{"value":"Ce qui n’est pas un Module","depth":2},{"value":"Modules en TypeScript","depth":2},{"value":"Syntaxe ES Module","depth":3},{"value":"Syntaxe d’import additionnelle","depth":3},{"value":"Syntaxe d’ES Modules propre à TypeScript","depth":4},{"value":"import type","depth":6},{"value":"Imports de type en une ligne","depth":6},{"value":"Syntaxe ES Module au comportement CommonJS","depth":4},{"value":"Syntaxe CommonJS","depth":2},{"value":"Exports","depth":4},{"value":"Interopérabilité entre CommonJS et ES Modules","depth":3},{"value":"Options de résolution de modules de TypeScript","depth":2},{"value":"Options d’émission de modules en TypeScript","depth":2},{"value":"ES2020","depth":4},{"value":"CommonJS","depth":4},{"value":"UMD","depth":4},{"value":"Espaces de noms TypeScript","depth":2}],"frontmatter":{"permalink":"/fr/docs/handbook/2/modules.html","title":"Modules","disable_toc":null,"handbook":null,"oneline":"Comment le JavaScript gère la communication entre les fichiers.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Classes","oneline":"Comment fonctionnent les classes en TypeScript","permalink":"/fr/docs/handbook/2/classes.html"}}},"next":null},"pageContext":{"id":"1-modules","slug":"/fr/docs/handbook/2/modules.html","repoPath":"/packages/documentation/copy/fr/handbook-v2/Modules.md","previousID":"98acac32-1c11-5c08-aef1-5b8728bf19d9","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}