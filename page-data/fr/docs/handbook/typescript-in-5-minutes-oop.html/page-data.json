{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/typescript-in-5-minutes-oop.html","result":{"data":{"markdownRemark":{"id":"3c0621b5-4105-57b8-8a69-73bda8475ee3","excerpt":"TypeScript est un choix populaire pour les développeurs habitués aux autres langages à typage statique, comme le C# et le Java. Le système de types de…","html":"<p>TypeScript est un choix populaire pour les développeurs habitués aux autres langages à typage statique, comme le C# et le Java.</p>\n<p>Le système de types de TypeScript offre la plupart de ces bénéfices : meilleure complétion de code, détection d’erreurs plus précoce, communication plus claire entre les composantes de votre programme.\nTypeScript fournit plusieurs fonctionnalités familières à ces développeurs, mais il est intéressant de faire un pas en arrière et apprendre comment le JavaScript (et par conséquent, TypeScript) diffère des langages orientés objet traditionnels.\nComprendre ces différences vous permettra d’écrire du code JavaScript de meilleure qualité, et d’éviter les pièges communs dans lesquels les développeurs passant de C#/Java à TypeScript peuvent tomber.</p>\n<h2 id=\"apprendre-le-javascript\" style=\"position:relative;\"><a href=\"#apprendre-le-javascript\" aria-label=\"apprendre le javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apprendre le JavaScript</h2>\n<p>Si vous êtes déjà familier avec le JavaScript, mais vous êtes principalement un développeur Java ou C#, cette page d’introduction peut expliquer certaines idées fausses et pièges auxquels vous seriez susceptible.\nCertaines façons avec lesquelles TypeScript modélise les types sont très différentes du Java ou du C#. Il est important de s’en souvenir en apprenant TypeScript.</p>\n<p>Si vous êtes un développeur Java ou C#, et vous êtes nouveau avec JavaScript en général, nous recommandons d’apprendre un peu de JavaScript <em>sans les types</em> d’abord, afin de comprendre son comportement lors de l’exécution.\nVu que TypeScript ne change pas comment votre code <em>s’exécute</em>, vous devrez quand même apprendre le JavaScript pour écrire du code qui fait réellement quelque chose !</p>\n<p>Il est important de se rappeler que TypeScript utilise le même <em>runtime</em> que le JavaScript, donc toute ressource sur comment accomplir un comportement particulier (conversion d’un string à un nombre, affichage d’une alerte, écriture d’un fichier, etc.) s’appliquera également en TypeScript.\nNe vous limitez pas à ce qui est spécifique à TypeScript !</p>\n<h2 id=\"repenser-les-classes\" style=\"position:relative;\"><a href=\"#repenser-les-classes\" aria-label=\"repenser les classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repenser les classes</h2>\n<p>Le C# et le Java sont ce qu’on pourrait appeler des langages à <em>POO obligatoire</em>.\nDans ces langages, la <em>classe</em> est l’unité basique d’organisation de code, ainsi que le conteneur de base de toutes les données <em>et</em> de la logique à l’exécution.\nObliger toute la fonctionnalité et toutes les données à être contenues dans des classes peut être un bon modèle de domaine pour certains problèmes, mais tous les modèles <em>ne doivent pas</em> être représentés de cette façon.</p>\n<h3 id=\"fonctions-et-données-libres\" style=\"position:relative;\"><a href=\"#fonctions-et-donn%C3%A9es-libres\" aria-label=\"fonctions et données libres permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fonctions et données libres</h3>\n<p>En JavaScript, les fonctions peuvent être placées n’importe où, et les données peuvent être librement relayées sans être cantonnées à une <code>class</code> ou une <code>struct</code>.\nCette flexibilité est extrêmement puissante.\nCes fonctions “libres” (celles qui ne sont pas associées à une classe), qui travaillent sur des données sans hiérarchie orientée objet, ont tendance à être le modèle préféré pour écrire un programme en JavaScript.</p>\n<h3 id=\"classes-statiques\" style=\"position:relative;\"><a href=\"#classes-statiques\" aria-label=\"classes statiques permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes statiques</h3>\n<p>De plus, certaines structures du C# et du Java, comme les singletons et les classes statiques, ne sont pas nécessaires en TypeScript.</p>\n<h2 id=\"poo-en-typescript\" style=\"position:relative;\"><a href=\"#poo-en-typescript\" aria-label=\"poo en typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POO en TypeScript</h2>\n<p>Cela dit, vous pouvez quand même utiliser des classes si vous le souhaitez !\nCertains problèmes ont une solution qui correspond à l’approche POO classique, et la capacité de TypeScript à supporter les classes JavaScript rendra ces solutions encore plus puissantes.\nTypeScript supporte plusieurs patterns comme l’implémentation d’interfaces, l’héritage, et les méthodes statiques.</p>\n<p>Nous couvrirons les classes plus tard dans ce guide.</p>\n<h2 id=\"repenser-les-types\" style=\"position:relative;\"><a href=\"#repenser-les-types\" aria-label=\"repenser les types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repenser les types</h2>\n<p>La façon dont TypeScript comprend la notion de <em>type</em> est très différente du C# et du Java.\nExplorons certaines différences.</p>\n<h3 id=\"systèmes-de-types-nominaux-réifiés\" style=\"position:relative;\"><a href=\"#syst%C3%A8mes-de-types-nominaux-r%C3%A9ifi%C3%A9s\" aria-label=\"systèmes de types nominaux réifiés permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Systèmes de Types Nominaux Réifiés</h3>\n<p>En C# ou Java, toute valeur a exactement un type - <code>null</code>, une primitive, ou un type de classe.\nNous pouvons appeler des méthodes comme <code>value.GetType()</code> ou <code>value.getClass()</code> pour obtenir le type exact à l’exécution.\nLa définition de ce type réside dans une certaine classe sous un certain nom, et nous n’avons pas le droit d’utiliser deux classes à formes similaires de façon interchangeable, sauf si une relation explicite d’héritage existe ou une interface en commun est implémentée.</p>\n<p>Ces aspects décrivent un système <em>réifié et nominal</em> de types.\nLes types qu’on écrit sont présents à l’exécution, et ils sont liés à eux via leurs déclarations, pas leurs structures.</p>\n<h3 id=\"types-en-tant-quensembles\" style=\"position:relative;\"><a href=\"#types-en-tant-quensembles\" aria-label=\"types en tant quensembles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types en tant qu’ensembles</h3>\n<p>En C# ou Java, cela a du sens de faire une correspondance entre un type à l’exécution et sa déclarations à la compilation.</p>\n<p>En TypeScript, il vaut mieux de penser aux types comme des <em>ensembles de valeurs</em> qui partagent quelque chose en commun.\nParce que les types ne sont que des ensembles, une valeur peut appartenir à <em>plusieurs</em> ensembles en même temps.</p>\n<p>Une fois que vous pensez aux types en tant qu’ensembles, certaines opérations deviennent naturelles.\nPar exemple, en C#, il est bizarre de transmettre une valeur qui est <em>soit</em> un <code>string</code> ou <code>int</code>, parce qu’il n’existe aucun type les représentant tous les deux.</p>\n<p>En TypeScript, ce procédé devient naturel quand vous pensez aux types en tant qu’ensembles.\nComment décrire une valeur qui appartient, soit à l’ensemble des <code>string</code>, soit à celui des <code>number</code> ?\nElle appartient simplement à l’<em>union</em> de ces ensembles : <code>string | number</code>.</p>\n<p>TypeScript fournit un certain nombre de mécanismes pour travailler avec les types de façons similaires à la théorie des ensembles, et ces façons seront plus intuitives si on pense aux types en tant qu’ensembles.</p>\n<h3 id=\"types-structurels-effacés\" style=\"position:relative;\"><a href=\"#types-structurels-effac%C3%A9s\" aria-label=\"types structurels effacés permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types Structurels Effacés</h3>\n<p>En TypeScript, les objets n’ont <em>pas</em> de seul et unique type.\nPar exemple, si nous créons un objet qui correspond à une interface, nous pouvons utiliser cet objet là où l’interface est attendue même si aucune relation de déclaration n’existait entre les deux.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Pointlike' >Pointlike</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Pointlike.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Pointlike.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Named' >Named</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Named.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(point: Pointlike): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Pointlike' >point</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Pointlike' >Pointlike</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"x = \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Pointlike' >point</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Pointlike.x: number' >x</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\", y = \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Pointlike' >point</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Pointlike.y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function logName(x: Named): void' >logName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Named' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Named' >Named</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Named' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Named.name: string' >name</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    name: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Origin\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(point: Pointlike): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    name: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logName(x: Named): void' >logName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    name: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtRgDbANYoDeAUMsgB4BcyIArgLYBG0A3KcgJ7V1OvEC+xLNHhJkAOTj0IAE2QkyIKRGoBnMFFABzNoOIxaIBGGDoQybOi0YsACgAOmcNRvhcBAJTz2CM6vTYEAB0llq2AETkyAC8yOHIANTIjlhBUUnhADScMXGJyU5gQRweusT6hsam5qGS0rZUEsoyXgrIviD+gSFWEQASENiW2fFJ5EFK0qUC5R3qyOiMAFa5bY0ADJnsXMib7JMqcQDymlqgWQJsxKGuYLaLS9O1yvfLpUA'>Try</a></div></pre>\n<p>Le système de types de TypeScript est <em>structurel</em>, et non nominal : nous pouvons utiliser <code>obj</code> en tant que <code>Pointlike</code> parce qu’<code>obj</code> a les propriétés <code>x</code> et <code>y</code> qui sont toutes les deux des nombres.\nLes relations entre types sont déterminées par les propriétés qu’ils contiennent, et non pas avec une relation de déclaration entre eux.</p>\n<p>Le système de types de TypeScript n’est également <em>pas réifié</em>: rien ne va pouvoir nous dire qu’<code>obj</code> est un <code>Pointlike</code>, lors de l’exécution.\nD’ailleurs, le type <code>Pointlike</code> n’est <em>même pas présent</em> lors de l’exécution.</p>\n<p>Si nous revenons à notre façon de réfléchir aux types <em>en tant qu’ensemble</em>, nous pouvons dire qu’<code>obj</code> est membre de l’ensemble <code>Pointlike</code>, ainsi que de l’ensemble <code>Named</code>.</p>\n<h3 id=\"conséquences-du-typage-structurel\" style=\"position:relative;\"><a href=\"#cons%C3%A9quences-du-typage-structurel\" aria-label=\"conséquences du typage structurel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conséquences du typage structurel</h3>\n<p>Deux aspects particuliers de ce système surprennent souvent les développeurs POO.</p>\n<h4 id=\"types-vides\" style=\"position:relative;\"><a href=\"#types-vides\" aria-label=\"types vides permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types vides</h4>\n<p>Le premier est que le <em>type vide</em> a l’air d’agir de manière impromptue :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Empty' >Empty</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(arg: Empty): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Empty' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='class Empty' >Empty</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// fais quelque chose ?</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Pas d&apos;erreur, mais ce n&apos;est pas un Empty ?</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(arg: Empty): void' >fn</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) k: number' >k</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECiC2AHALgT2gbwL4CgcDMBXAO2GQEsB7Y6fYgCjACcBzALjiTQEpMdpoAekG0w5GAEdCAUxBTp0YAAtKEBQH4cuHMOgAFSNAAmAcmlMm0wkwA00eGJjAFxMxGTREhkpxTpNdPQY0ADWHACMAAzQWNwA3EA'>Try</a></div></pre>\n<p>TypeScript détermine si l’appel à <code>fn</code> est valide en déterminant si l’argument fourni est un <code>Empty</code> valide.\nCela est accompli en examinant la <em>structure</em> de <code>{ k: 10 }</code> et <code>class Empty { }</code>.\nNous pouvons voir que <code>{ k: 10 }</code> a <em>toutes</em> les propriétés d’<code>Empty</code> vu qu’<code>Empty</code> n’a aucune propriété.\nC’est donc un appel valide !</p>\n<p>Cela peut paraître surprenant, mais c’est au final une relation très similaire à celle respectées dans les langages POO nominaux.\nUne sous-classe ne peut pas <em>retirer</em> une propriété de sa classe-mère, parce que faire cela détruirait la relation de sous-type naturelle existant entre la sous-classe et sa classe-mère.\nLes systèmes de type structurels identifient cette relation en décrivant les sous-types de façon à avoir des propriétés à types compatibles.</p>\n<h4 id=\"types-identiques\" style=\"position:relative;\"><a href=\"#types-identiques\" aria-label=\"types identiques permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types identiques</h4>\n<p>Les types identiques sont une autre source fréquente de surprises :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Car</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// accélérer</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Golfer</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// frapper la balle fort</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Pas d'erreur ?</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">w</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Car</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Golfer</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>Encore une fois, ceci n’est pas une erreur parce que les <em>structures</em> de ces classes sont les mêmes.\nCela peut paraître comme une source de confusion, mais en pratique, les classes identiques n’ayant aucun rapport ne sont pas communes.</p>\n<p>Nous apprendrons plus sur comment les classes sont liées l’une à l’autre dans leur chapitre.</p>\n<h3 id=\"réflexivité\" style=\"position:relative;\"><a href=\"#r%C3%A9flexivit%C3%A9\" aria-label=\"réflexivité permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Réflexivité</h3>\n<p>Les développeurs POO ont l’habitude de pouvoir demander le type de n’importe quelle valeur, même générique :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">csharp</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// C#</span></div><div class='line'><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogType</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">WriteLine</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\">Name</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Mais parce que le système de types de TypeScript est complètement effacé, aucune information sur, par exemple, l’instanciation d’un type générique n’est disponible à l’exécution.</p>\n<p>JavaScript possède quelques opérateurs comme <code>typeof</code> et <code>instanceof</code>, mais souvenez-vous que ces opérateurs agissent sur les valeurs, tel qu’elles existent dans le code sans informations de types.\nPar exemple, <code>typeof (new Car())</code> va retourner <code>\"object\"</code>, et non <code>Car</code> ni <code>\"Car\"</code>.</p>\n<h2 id=\"prochaines-étapes\" style=\"position:relative;\"><a href=\"#prochaines-%C3%A9tapes\" aria-label=\"prochaines étapes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prochaines étapes</h2>\n<p>C’était un bref résumé de la syntaxe et des outils régulièrement utilisés en TypeScript. À partir de là, vous pourrez :</p>\n<ul>\n<li>Lire le Manuel <a href=\"/docs/handbook/intro.html\">du début à la fin</a> (30m)</li>\n<li>Explorer les <a href=\"/play#show-examples\">exemples du bac à sable</a></li>\n</ul>","headings":[{"value":"Apprendre le JavaScript","depth":2},{"value":"Repenser les classes","depth":2},{"value":"Fonctions et données libres","depth":3},{"value":"Classes statiques","depth":3},{"value":"POO en TypeScript","depth":2},{"value":"Repenser les types","depth":2},{"value":"Systèmes de Types Nominaux Réifiés","depth":3},{"value":"Types en tant qu’ensembles","depth":3},{"value":"Types Structurels Effacés","depth":3},{"value":"Conséquences du typage structurel","depth":3},{"value":"Types vides","depth":4},{"value":"Types identiques","depth":4},{"value":"Réflexivité","depth":3},{"value":"Prochaines étapes","depth":2}],"frontmatter":{"permalink":"/fr/docs/handbook/typescript-in-5-minutes-oop.html","title":"TypeScript pour les Programmeurs Java/C#","disable_toc":null,"handbook":null,"oneline":"Apprenez TypeScript si vous avez de l'expérience avec les langages orientés objet","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-typescript-pour-les-programmeurs-java/c#","slug":"/fr/docs/handbook/typescript-in-5-minutes-oop.html","repoPath":"/packages/documentation/copy/fr/get-started/TS for OOPers.md","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}