{"componentChunkName":"component---src-templates-documentation-tsx","path":"/fr/docs/handbook/typescript-from-scratch.html","result":{"data":{"markdownRemark":{"id":"f4269cc0-18be-5720-a7e0-87f512bbe8ae","excerpt":"Félicitations, vous avez choisi TypeScript comme premier langage — déjà une bonne décision ! Vous avez peut-être déjà entendu dire que TypeScript est une…","html":"<p>Félicitations, vous avez choisi TypeScript comme premier langage — déjà une bonne décision !</p>\n<p>Vous avez peut-être déjà entendu dire que TypeScript est une “variante” de JavaScript.\nLa relation entre les deux est unique parmi les langages de programmation existants, et étudier cette relation vous permettra de comprendre ce qu’ajoute TypeScript à JavaScript.</p>\n<h2 id=\"bref-historique-de-javascript\" style=\"position:relative;\"><a href=\"#bref-historique-de-javascript\" aria-label=\"bref historique de javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bref historique de JavaScript</h2>\n<p>JavaScript (aussi connu sous le nom ECMAScript) était à l’origine un simple langage de scripting pour navigateurs.\nQuand il fut inventé, il était utilisé pour de petits extraits de code dans une page web — aller au-delà d’une douzaine de ligne était inhabituel.\nDe ce fait, les navigateurs exécutaient du code JS assez lentement.\nCependant, la popularité de JavaScript grandira avec le temps, et les développeurs web ont commencé à s’en servir pour créer des expériences interactives.</p>\n<p>Les développeurs de navigateurs Web répondirent à cette croissance de fréquence d’usage en optimisant les environnements d’exécution (compilation dynamique) et en élargissant le champ du possible avec JS (en ajoutant des APIs). Cela contribua à un usage encore plus répandu parmi les développeurs web.\nUn site web moderne, de nos jours, contient des centaines de milliers de lignes de code. Ceci est en phase avec la façon dont le web a grandi, partant d’un simple ensemble de pages statiques, pour devenir une plateforme d’applications riches pour tout et sur tout.</p>\n<p>De plus, le JS est devenu assez populaire pour être utilisé en dehors de navigateurs, Node.js ayant marqué l’implémentation de JS dans un environnement côté serveur.\nCette capacité à s’exécuter partout a fait du langage un choix populaire pour le développement d’applications cross-platform.\nIl y a beaucoup de développeurs dont le stack technique n’est constitué que de JavaScript !</p>\n<p>Pour résumer, ce langage a été créé à l’origine pour répondre à des besoins simples, puis a évolué pour supporter l’exécution de millions de lignes.\nChaque langage a ses propres points bizarres et surprises, le JS ne faisant pas exception dû à ses débuts :</p>\n<ul>\n<li>\n<p>L’opérateur d’égalité (<code>==</code>) <em>convertit</em> ses arguments, conduisant à un comportement bizarre :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\"> == </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// C'est vrai, mais pourquoi ?</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// C'est vrai peu importe la valeur de x !</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</li>\n<li>\n<p>JavaScript permet l’accès à des propriétés inexistantes :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">obj</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">width:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">height:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">area</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">width</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">heigth</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Bonne chance pour savoir pourquoi \"area\" est égale à NaN</span></div></code></div></pre>\n</li>\n</ul>\n<p>La plupart des langages lanceraient une erreur lors de ces situations. Certains le font à la compilation — avant l’exécution de quoi que ce soit.\nCette absence d’erreurs et ses mauvaises surprises sont gérables pour de petits programmes, mais beaucoup moins à l’échelle d’une grande application.</p>\n<h2 id=\"typescript--un-vérificateur-statique-de-types\" style=\"position:relative;\"><a href=\"#typescript--un-v%C3%A9rificateur-statique-de-types\" aria-label=\"typescript  un vérificateur statique de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript : un vérificateur statique de types</h2>\n<p>Nous disions que certains langages interdiraient l’exécution de code erroné.\nLa détection d’erreurs dans le code sans le lancer s’appelle la <em>vérification statique</em>.\nLa distinction entre ce qui est une erreur de ce qui ne l’est pas, en partant des valeurs avec lesquelles on travaille, s’appelle la vérification statique de types.</p>\n<p>TypeScript vérifie les erreurs d’un programme avant l’exécution, et fait cela en se basant sur les <em>types de valeurs</em>, c’est un <em>vérificateur statique</em>.\nPar exemple, l’exemple ci-dessus avait une erreur à cause du <em>type</em> d’<code>obj</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    width: number;&#10;    height: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) width: number' >width</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) height: number' >height</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const area: number' >area</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    width: number;&#10;    height: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) width: number' >width</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    width: number;&#10;    height: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >heigth</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'heigth' does not exist on type '{ width: number; height: number; }'. Did you mean 'height'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'heigth' does not exist on type '{ width: number; height: number; }'. Did you mean 'height'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMEYBQBjOAO0QBdQ4AjAK1AF5QBvUAdwEsATUgC1WwAYANKG6Q2Ac26k+GUAF8A3AWJlQAQ2iQ19CjQB07Lt1AAqXdT2iJPBUA'>Try</a></div></pre>\n<h3 id=\"une-surcouche-typée-de-javascript\" style=\"position:relative;\"><a href=\"#une-surcouche-typ%C3%A9e-de-javascript\" aria-label=\"une surcouche typée de javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Une surcouche typée de JavaScript</h3>\n<p>Quel est le rapport entre JavaScript et TypeScript ?</p>\n<h4 id=\"syntaxe\" style=\"position:relative;\"><a href=\"#syntaxe\" aria-label=\"syntaxe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntaxe</h4>\n<p>TypeScript est une <em>surcouche</em> de JavaScript : une syntaxe JS légale est donc une syntaxe TS légale.\nLa syntaxe définit la façon dont on écrit un programme.\nPar exemple, ce code a une erreur de <em>syntaxe</em> parce qu’il manque un <code>)</code> :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: number' >a</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #098658\">4<data-err></data-err></span></div><span class=\"error\"><span>')' expected.</span><span class=\"code\">1005</span></span><span class=\"error-behind\">')' expected.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwAYMFYBQAbSAF1AENQBeUACgBYg'>Try</a></div></pre>\n<p>TypeScript ne considère pas forcément du code JavaScript comme du code invalide.\nCela signifie que vous pouvez prendre du code JavaScript fonctionnel et le mettre dans un fichier TypeScript sans vous inquiéter de comment il est écrit exactement.</p>\n<h4 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h4>\n<p>Cependant, TypeScript est une surcouche <em>typée</em>. Cela veut dire que TS ajoute des règles régissant comment différents types de valeurs peuvent être utilisés.\nL’erreur à propos de <code>obj.heigth</code> n’est pas une erreur de <em>syntaxe</em> : c’est une erreur où l’on a utilisé une sorte de valeur (un <em>type</em>) de façon incorrecte.</p>\n<p>Autre exemple, ce code JavaScript que vous pouvez lancez dans votre navigateur. Il <em>va</em> afficher une valeur :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> / []);</span></div></code></div></pre>\n<p>Ce programme - dont la syntaxe est correcte - affiche <code>Infinity</code>.\nMais TypeScript considère que la division d’un nombre par un tableau ne fait pas sens, et va lancer une erreur :</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> / <data-err>[]</data-err>);</span></div><span class=\"error\"><span>The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.</span><span class=\"code\">2363</span></span><span class=\"error-behind\">The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsGBQBjOAO0TgBtIA6MuAcwAoAWUMAbQF0BKAbiA'>Try</a></div></pre>\n<p>Il se peut que vous vouliez <em>vraiment</em> diviser un nombre par un tableau, peut-être juste pour voir le résultat, mais la plupart du temps, vous avez fait une erreur.\nLe vérificateur de types de TS est conçu pour accepter les programmes valides, tout en signalant le plus d’erreurs communes possibles.\n(Nous apprendrons plus tard divers paramètres pour contrôler à quel point vous voulez que TS soit strict avec votre code.)</p>\n<p>En migrant du code JavaScript vers un fichier TypeScript, il se peut que vous voyiez des <em>erreurs de type</em> en fonction de la façon avec laquelle il a été écrit.\nIl se peut qu’il y ait de vrais problèmes avec votre code, tout comme il se peut que TypeScript soit trop strict.\nÀ travers ce guide, nous montrerons comment ajouter de la syntaxe TypeScript pour éliminer ces erreurs.</p>\n<h4 id=\"comportement-à-lexécution\" style=\"position:relative;\"><a href=\"#comportement-%C3%A0-lex%C3%A9cution\" aria-label=\"comportement à lexécution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comportement à l’exécution</h4>\n<p>TypeScript est aussi un langage qui préserve le <em>comportement à l’exécution</em> de JavaScript.\nPar exemple, la division par 0 produit <code>Infinity</code> au lieu de lancer une erreur.\nTypeScript, par principe, ne change <strong>jamais</strong> le comportement de code JS.</p>\n<p>Cela veut dire que si vous déplacez du code de JavaScript à TypeScript, il est <strong>garanti</strong> de s’exécuter de la même façon, même si TS pense qu’il comporte des erreurs liées aux types.</p>\n<p>La conservation du comportement à l’exécution est l’un des principes fondamentaux de TypeScript parce que cela signifie que vous pouvez facilement alterner entre les deux langages sans vous inquiéter de différences subtiles qui empêcheraient votre programme de se lancer.</p>\n<!--\nMissing subsection on the fact that TS extends JS to add syntax for type\nspecification.  (Since the immediately preceding text was raving about\nhow JS code can be used in TS.)\n-->\n<h4 id=\"effacement-de-types\" style=\"position:relative;\"><a href=\"#effacement-de-types\" aria-label=\"effacement de types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Effacement de types</h4>\n<p>Grossièrement, une fois que le compilateur de TypeScript a fini de vérifier le code, il <em>efface</em> les types pour laisser le code résultant.\nCela signifie qu’à la fin du processus de compilation, le code JS ne conserve aucune information de types.</p>\n<p>Cela signifie aussi que TypeScript, en se basant sur les types présents dans le code, n’altère jamais le <em>comportement</em> du programme.</p>\n<p>Pour résumer, même si vous pouvez avoir des erreurs de type lors de la compilation, le système de types n’affecte aucunement la façon dont votre programme s’exécute.</p>\n<p>Enfin, TypeScript ne fournit aucune librairie supplémentaire.\nVos programmes utiliseront les mêmes librairies standard ou externes que vos programmes JS, il n’y a donc aucun framework additionnel à apprendre au niveau de TS.</p>\n<p>Il est intéressant de noter qu’il est possible de préciser la version de JavaScript que TypeScript doit cibler lors de la compilation. Cela affecte le code final, qui contiendra ou non des <em>polyfills</em> (du code qui redéfinit des fonctionnalités existantes dans une version de JavaScript mais absentes dans une autre).</p>\n<!--\nShould extend this paragraph to say that there's an exception of\nallowing you to use newer JS features and transpile the code to an older\nJS, and this might add small stubs of functionality when needed.  (Maybe\nwith an example --- something like `?.` would be good in showing readers\nthat this document is maintained.)\n-->\n<h2 id=\"apprendre-javascript-et-typescript\" style=\"position:relative;\"><a href=\"#apprendre-javascript-et-typescript\" aria-label=\"apprendre javascript et typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apprendre JavaScript et TypeScript</h2>\n<p>Une question souvent posée est “Est-ce que je dois apprendre TypeScript ou JavaScript”, à laquelle on répond qu’il n’est pas possible d’apprendre le TS sans apprendre le JS.</p>\n<p>TypeScript possède la même syntaxe, et se comporte de la même façon que JavaScript, donc vous pourrez utiliser tout ce que vous apprenez avec JavaScript, dans TypeScript.</p>\n<p>Il y a beaucoup, <em>beaucoup</em> de ressources disponibles pour apprendre le JavaScript. Ces ressources ne doivent pas être ignorées si vous voulez apprendre TypeScript. Par exemple, il y a à peu près 20 fois plus de questions StackOverflow taggées <code>javascript</code> que <code>typescript</code>, mais toutes les questions <code>javascript</code> s’appliquent aussi à TypeScript.</p>\n<p>Si vous recherchez quelque chose comme “comment trier un tableau en TypeScript”, souvenez-vous : <strong>TypeScript est du JavaScript avec un vérificateur de types à la compilation</strong>. La façon dont vous triez un tableau en JavaScript est la même qu’en TypeScript.\nSi vous trouvez une ressource qui utilise TypeScript, ce n’est pas plus mal, mais ne croyez pas que vous avez besoin de réponses spécifiques à TS pour des tâches JS de tous les jours.</p>\n<h2 id=\"prochaines-étapes\" style=\"position:relative;\"><a href=\"#prochaines-%C3%A9tapes\" aria-label=\"prochaines étapes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prochaines étapes</h2>\n<p>C’était un bref résumé des syntaxes et outils utilisés dans le TypeScript de tous les jours. À partir de là, vous pourrez :</p>\n<ul>\n<li>\n<p>Apprendre des fondamentaux de TypeScript. Nous recommandons :</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/javascript/\">Les ressources JavaScript de Microsoft</a> ou</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Guide\">Le guide JavaScript dans les Mozilla Web Docs</a></li>\n</ul>\n</li>\n<li>\n<p>Continuer vers la page <a href=\"/docs/handbook/typescript-in-5-minutes.html\">TypeScript pour les développeurs JavaScript</a></p>\n</li>\n<li>\n<p>Lire le Manuel <a href=\"/docs/handbook/intro.html\">du début à la fin</a> (30m)</p>\n</li>\n<li>\n<p>Explorer les <a href=\"/play#show-examples\">exemples du bac à sable</a></p>\n</li>\n</ul>\n<!-- Note: I'll be happy to write the following... -->\n<!--\n## Types\n\n    * What's a type? (For newbies)\n      * A type is a *kind* of value\n      * Types implicitly define what operations make sense on them\n      * Lots of different kinds, not just primitives\n      * We can make descriptions for all kinds of values\n      * The `any` type -- a quick desctiption, what it is, and why it's bad\n    * Inference 101\n      * Examples\n      * TypeScript can figure out types most of the time\n      * Two places we'll ask you what the type is: Function boundaries, and later-initialized values\n    * Co-learning JavaScript\n      * You can+should read existing JS resources\n      * Just paste it in and see what happens\n      * Consider turning off 'strict' -->","headings":[{"value":"Bref historique de JavaScript","depth":2},{"value":"TypeScript : un vérificateur statique de types","depth":2},{"value":"Une surcouche typée de JavaScript","depth":3},{"value":"Syntaxe","depth":4},{"value":"Types","depth":4},{"value":"Comportement à l’exécution","depth":4},{"value":"Effacement de types","depth":4},{"value":"Apprendre JavaScript et TypeScript","depth":2},{"value":"Prochaines étapes","depth":2}],"frontmatter":{"permalink":"/fr/docs/handbook/typescript-from-scratch.html","title":"TypeScript pour les nouveaux programmeurs","disable_toc":null,"handbook":null,"oneline":"Learn TypeScript from scratch","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-typescript-pour-les-nouveaux-programmeurs","slug":"/fr/docs/handbook/typescript-from-scratch.html","repoPath":"/packages/documentation/copy/fr/get-started/TS for the New Programmer.md","lang":"fr","modifiedTime":"2024-10-21T12:35:09.545Z"}},"staticQueryHashes":[]}