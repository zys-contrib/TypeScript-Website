{"componentChunkName":"component---src-templates-play-example-tsx","path":"/fr/play/3-7/fixits/big-number-literals.ts.html","result":{"pageContext":{"name":"Big number literals","title":"Big number literals","lang":"fr","html":"\n Saviez vous qu'il existe une limite à la taille des nombres qu'il est possible\n de représenter en JavaScript ?\n\n<code><pre>\nconst maxHighValue = 9007199254740991;\nconst maxLowValue = -9007199254740991;\n\n</pre></code>\n// Si vous augmentez / diminuez d'une unité ces nombres vous commencez a courir un\n risque.\n\n<code><pre>\nconst oneOverMax = 9007199254740992;\nconst oneBelowMin = -9007199254740992;\n\n</pre></code>\n// La solution pour manipuler des nombres de cette taille est de les convertir en\n BigInts:\n\n https://developer.mozilla.org/fr/docs/orphaned/Web/JavaScript/Reference/Global_Objects/BigInt\n\n TypeScript désormais propose une correction automatique, pour des nombres\n supérieurs à 2^52 (positif / negatif).\n Cette correction automatique ajoute le suffixe \"n\", ce qui informe JavaScript\n que le type doit être BigInt.\n\n Nombres\n<code><pre>\n9007199254740993;\n-9007199254740993;\n9007199254740994;\n-9007199254740994;\n\n// Nombres hexadécimaux\n0x19999999999999;\n-0x19999999999999;\n0x20000000000000;\n-0x20000000000000;\n0x20000000000001;\n-0x20000000000001;\n","redirectHref":"fr/play/?target=99#example/big-number-literals"}},"staticQueryHashes":[]}