{"componentChunkName":"component---src-templates-play-example-tsx","path":"/fr/play/3-7/syntax-and-messaging/optional-chaining.ts.html","result":{"pageContext":{"name":"Optional Chaining","title":"Optional Chaining","lang":"fr","html":"\n Le chaînage optionnel a atteint l'étape 3 du TC39 pendant le development\n de la version 3.7. Le chaînage optionnel permet d'écrire du code qui va\n interrompre l'execution des expressions dès qu'il atteint une valeur\n null ou undefined.\n\n Accès aux propriétés d'un objet\n\n Imaginons que nous ayons un album où l'artiste, et sa bio, puissent ne pas\n être present dans les données. Par exemple, une compilation pourrait ne pas\n avoir qu'un seul artiste.\n\n<code><pre>\ntype AlbumAPIResponse = {\n  title: string;\n  artist?: {\n    name: string;\n    bio?: string;\n    previousAlbums?: string[];\n  };\n};\n\ndeclare const album: AlbumAPIResponse;\n\n</pre></code>\n// Avec le chaînage optionnel,\n vous pouvez écrire le code suivant:\n\n<code><pre>\nconst artistBio = album?.artist?.bio;\n\n// A la place de:\n\nconst maybeArtistBio = album.artist && album.artist.bio;\n\n</pre></code>\n// Dans ce cas ?. agit différemment que le ET logique (&&) car ce dernier traite\n les valeur fausses (e.g. une chaîne de caractères vide, 0, Nan et false) de\n façon différente.\n\n Le chaînage optionnel va seulement arrêter l'évaluation et retourner undefined\n si la valeur est null ou undefined.\n\n Accès à un élément optionnel\n\n Acceder à une propriété se fait avec l'opérateur ., et le chaînage optionnel\n marche aussi avec l'opérateur [] pour acceder à des éléments.\n\n<code><pre>\nconst maybeArtistBioElement = album?.[\"artist\"]?.[\"bio\"];\n\nconst maybeFirstPreviousAlbum = album?.artist?.previousAlbums?.[0];\n\n// Appel optionnel\n\n</pre></code>\n// Quand il s'agit d'appeler des fonctions qui peuvent être définies ou non définies,\n le chaînage optionnel permet d'appeler la fonction uniquement si elle existe.\n Cela peut remplacer le code où l'on écrirait traditionnellement quelque chose comme:\n if (func) func()\n\n Par example le chaînage optionnel pour appeler un callback après une requête\n vers une API:\n\n<code><pre>\nconst callUpdateMetadata = (metadata: any) => Promise.resolve(metadata); // Fake API call\n\nconst updateAlbumMetadata = async (metadata: any, callback?: () => void) => {\n  await callUpdateMetadata(metadata);\n\n  callback?.();\n};\n\n</pre></code>\n// Plus de détails sur le chaînage optionnel dans la version 3.7 sur le blog:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"fr/play/?#example/optional-chaining"}},"staticQueryHashes":[]}