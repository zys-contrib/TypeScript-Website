{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/javascript/working-with-classes/generic-classes.ts.html","result":{"pageContext":{"name":"Generic Classes","title":"Generic Classes","lang":"ko","html":"\n 먼저 이 방식으로 이해하는 게 훨씬 쉬우므로\n 예시는 대부분 TypeScript로 작성했습니다.\n 마지막에는 JSDoc을 사용하여 동일한 클래스를 만드는 방법을 다룰 겁니다.\n\n 제네릭 클래스는 특정 타입이 다른 타입에 따라 동작한다는 것을 보여주는 하나의 방식입니다.\n 예를 들어, 여기에는 한 종류만 있지만\n 여러 가지 물건을 담을 수 있는 하나의 서랍이 있습니다:\n\n<code><pre>\nclass Drawer<ClothingType> {\n  contents: ClothingType[] = [];\n\n  add(object: ClothingType) {\n    this.contents.push(object);\n  }\n\n  remove() {\n    return this.contents.pop();\n  }\n}\n\n</pre></code>\n// Drawer를 사용하기 위해서\n 또 다른 타입이 필요합니다:\n\n<code><pre>\ninterface Sock {\n  color: string;\n}\n\ninterface TShirt {\n  size: \"s\" | \"m\" | \"l\";\n}\n\n</pre></code>\n// 새로운 Drawer를 만들 때 Sock 타입을 전달하여\n 양말 전용의 새로운 Drawer를 만들 수 있습니다:\n<code><pre>\nconst sockDrawer = new Drawer<Sock>();\n\n// 이제 양말을 서랍에 추가하거나 삭제할 수 있습니다:\nsockDrawer.add({ color: \"white\" });\nconst mySock = sockDrawer.remove();\n\n// 티셔츠를 위한 서랍도 만들 수 있습니다:\nconst tshirtDrawer = new Drawer<TShirt>();\ntshirtDrawer.add({ size: \"m\" });\n\n</pre></code>\n// 여러분이 조금 별나신 편이라면,\n 유니언을 사용하여 양말과 티셔츠가 섞인 서랍을 만들 수도 있습니다\n\n<code><pre>\nconst mixedDrawer = new Drawer<Sock | TShirt>();\n\n</pre></code>\n// 추가 TypeScript 구문 없이 Drawer와 같은 클래스를 만드는 것은\n JSDoc에서 템플릿 태그 사용을 요구합니다.\n 이 예시에서 템플릿 변수를 정의하고,\n 클래스에 프로퍼티를 제공할 것입니다:\n\n playground에서 작업하기 위해서,\n JavaScript 파일로 설정을 변경하고\n 위에 있는 TypeScript 코드를 제거해야 합니다\n\n<code><pre>\n/**\n * @template {{}} ClothingType\n */\nclass Dresser {\n  constructor() {\n    /** @type {ClothingType[]} */\n    this.contents = [];\n  }\n\n  /** @param {ClothingType} object */\n  add(object) {\n    this.contents.push(object);\n  }\n\n  /** @return {ClothingType} */\n  remove() {\n    return this.contents.pop();\n  }\n}\n\n// 그러고 나서 JSDoc을 통해 새로운 타입을 만듭니다:\n\n/**\n * @typedef {Object} Coat 의류 아이템\n * @property {string} color 코트 색상\n */\n\n</pre></code>\n// Dresser 클래스의 새로운 인스턴스를 생성할 때\n 코트를 다루는 Dresser로\n 변수를 할당하기 위해 @type을 사용합니다.\n\n<code><pre>\n/** @type {Dresser<Coat>} */\nconst coatDresser = new Dresser();\n\ncoatDresser.add({ color: \"green\" });\nconst coat = coatDresser.remove();\n","redirectHref":"ko/play/?#example/generic-classes"}},"staticQueryHashes":[]}