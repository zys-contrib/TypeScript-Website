{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/typescript/primitives/union-and-intersection-types.ts.html","result":{"pageContext":{"name":"Union and Intersection Types","title":"Union and Intersection Types","lang":"ko","html":" 유니언 타입은 객체가 하나 이상의\n 타입이 될 수 있도록 선언하는 방법입니다.\n\n<code><pre>\ntype StringOrNumber = string | number;\ntype ProcessStates = \"open\" | \"closed\";\ntype OddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\ntype AMessyUnion = \"hello\" | 156 | { error: true };\n\n</pre></code>\n// \"open\"과 \"closed\"을 문자열과 대비하여 사용하는 것이 새롭게 느껴지신다면,\n 다음을 확인해보세요: example:literals\n\n 하나의 유니언에 서로 다른 타입을 혼합할 수 있으며,\n 여기서 중요한 점은 값은 그 타입 중 하나라는 것입니다.\n\n TypeScript는 실행 중에 어떤 값이 될 수 있는지\n 결정하는 방법을 알아낼 것입니다.\n\n 예를 들어, 유니언은 가끔 타입을\n 여러 개 사용함으로써 기존 의도와 달라질 수 있습니다:\n\n<code><pre>\ntype WindowStates = \"open\" | \"closed\" | \"minimized\" | string;\n\n</pre></code>\n// 위에를 호버해보면, WindowStates가 유니언 타입이 아닌\n string 타입으로 되는 것을 확인할 수 있습니다.\n 이에 대한 내용은 예시:type-widening-and-narrowing에서 다룹니다.\n\n 유니언이 OR이면, 교집합은 AND입니다.\n 교집합 타입은 새로운 타입을 생성하기 위해 두 개의 타입이 교차하는 경우입니다.\n 이를 통해 타입 구성이 가능합니다.\n\n<code><pre>\ninterface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ninterface ArtistsData {\n  artists: { name: string }[];\n}\n\n</pre></code>\n// 이런 인터페이스는 일관된 오류 핸들링과\n 자체 데이터 모두를 갖는 응답으로 구성할 수 있습니다.\n\n<code><pre>\ntype ArtworksResponse = ArtworksData & ErrorHandling;\ntype ArtistsResponse = ArtistsData & ErrorHandling;\n\n// 예를 들어:\n\nconst handleArtistsResponse = (response: ArtistsResponse) => {\n  if (response.error) {\n    console.error(response.error.message);\n    return;\n  }\n\n  console.log(response.artists);\n};\n\n</pre></code>\n// 교집합과 유니언이 혼합된 타입은\n 객체가 두 개의 값 중 하나를 포함해야 할 때\n 정말 유용합니다:\n\n<code><pre>\ninterface CreateArtistBioBase {\n  artistID: string;\n  thirdParty?: boolean;\n}\n\ntype CreateArtistBioRequest = CreateArtistBioBase & ({ html: string } | { markdown: string });\n\n</pre></code>\n// 이제 artistID와 html 또는 markdown 둘 중 하나를\n 포함할 때만 요청을 생성할 수 있습니다\n\n<code><pre>\nconst workingRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n  markdown: \"Banksy is an anonymous England-based graffiti artist...\",\n};\n\nconst badRequest: CreateArtistBioRequest = {\n  artistID: \"banksy\",\n};\n","redirectHref":"ko/play/?#example/union-and-intersection-types"}},"staticQueryHashes":[]}