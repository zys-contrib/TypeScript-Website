{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/typescript/type-primitives/built-in-utility-types.ts.html","result":{"pageContext":{"name":"Built-in Utility Types","title":"Built-in Utility Types","lang":"ko","html":"\n 대부분 코드에서 특정한 타입이 유용하다고 느낄 때,\n TypeScript에 추가해서\n 누구나 사용할 수 있게 하여\n 가용성을 지속해서 의존할 수 있습니다\n\n Partial<Type>\n\n 타입을 갖고 모든 프로퍼티를\n 선택적 프로퍼티로 변환하세요.\n\n<code><pre>\ninterface Sticker {\n  id: number;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  submitter: undefined | string;\n}\n\ntype StickerUpdateParam = Partial<Sticker>;\n\n// Readonly<Type>\n\n// 객체를 갖고 읽기 전용 프로퍼티를 만드세요.\n\ntype StickerFromAPI = Readonly<Sticker>;\n\n// Record<KeysFrom, Type>\n\n</pre></code>\n// KeysFrom의 프로퍼티 리스트를 사용하는 타입을 만들고\n Type의 값을 전달하세요.\n\n 키로 사용할 리스트:\n<code><pre>\ntype NavigationPages = \"home\" | \"stickers\" | \"about\" | \"contact\";\n\n// 각각의 ^에 대한 데이터의 형태가 필요합니다:\ninterface PageInfo {\n  title: string;\n  url: string;\n  axTitle?: string;\n}\n\nconst navigationInfo: Record<NavigationPages, PageInfo> = {\n  home: { title: \"Home\", url: \"/\" },\n  about: { title: \"About\", url: \"/about\" },\n  contact: { title: \"Contact\", url: \"/contact\" },\n  stickers: { title: \"Stickers\", url: \"/stickers/all\" },\n};\n\n// Pick<Type, Keys>\n\n</pre></code>\n// Type에서 Keys 프로퍼티 집합을 선택하여 타입을 만드세요.\n 기본적으로 타입에서\n 타입 정보를 추출하기 위한 허용 목록입니다.\n\n<code><pre>\ntype StickerSortPreview = Pick<Sticker, \"name\" | \"updatedAt\">;\n\n// Omit<Type, Keys>\n\n</pre></code>\n// Type에서 Keys 프로퍼티 집합을 제거하여 타입을 만드세요.\n 기본적으로 타입에서\n 타입 정보를 추출하기 위한 차단 목록입니다.\n\n<code><pre>\ntype StickerTimeMetadata = Omit<Sticker, \"name\">;\n\n// Exclude<Type, RemoveUnion>\n\n</pre></code>\n// RemoveUnion과 겹치지 않는\n Type 프로퍼티의 모든 프로퍼티 타입을 만드세요.\n\n<code><pre>\ntype HomeNavigationPages = Exclude<NavigationPages, \"home\">;\n\n// Extract<Type, MatchUnion>\n\n</pre></code>\n// MatchUnion하고 겹칠 때 포함되는\n Type 프로퍼티의 모든 프로퍼티 타입을 만드세요.\n\n<code><pre>\ntype DynamicPages = Extract<NavigationPages, \"home\" | \"stickers\">;\n\n// NonNullable<Type>\n\n</pre></code>\n// 프로퍼티 집합에서 null과 undefined를 제외하여 타입을 만드세요.\n 유효성 검사를 할 때 유용합니다.\n\n<code><pre>\ntype StickerLookupResult = Sticker | undefined | null;\ntype ValidatedResult = NonNullable<StickerLookupResult>;\n\n// ReturnType<Type>\n\n// Type에서 반환 값을 추출하세요.\n\ndeclare function getStickerByID(id: number): Promise<StickerLookupResult>;\ntype StickerResponse = ReturnType<typeof getStickerByID>;\n\n// InstanceType<Type>\n\n</pre></code>\n// 클래스의 인스턴스 또는\n 생성자 함수를 가진 객체인 타입을 만드세요.\n\n<code><pre>\nclass StickerCollection {\n  stickers: Sticker[];\n}\n\ntype CollectionItem = InstanceType<typeof StickerCollection>;\n\n// Required<Type>\n\n</pre></code>\n// 모든 선택적 프로퍼티를\n 필수적인 프로퍼티로 변환하는 타입을 만드세요.\n\n<code><pre>\ntype AccessiblePageInfo = Required<PageInfo>;\n\n// ThisType<Type>\n\n</pre></code>\n// 다른 타입과 다르게, ThisType은 새로운 타입을 반환하지 않는 대신에\n 함수의 내부 this의 정의를 조작합니다.\n TSConfig에서 noImplicitThis를 실행시켰을 때\n ThisType만 사용할 수 있습니다.\n\n https://www.typescriptlang.org/docs/handbook/utility-types.html\n","redirectHref":"ko/play/?strictNullChecks=true#example/built-in-utility-types"}},"staticQueryHashes":[]}