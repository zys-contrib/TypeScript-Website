{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html","result":{"pageContext":{"name":"Uncalled Function Checks","title":"Uncalled Function Checks","lang":"ko","html":"\n 3.7에서는 if문 안에서\n 함수의 반환 값 대신 함수를 잘못 사용하는 것을\n 검사하는 기능이 추가되었습니다.\n\n 이것은 함수가 존재하는 것을 알고 있으며\n if문을 항상 참으로 할 때만 적용됩니다.\n\n 선택적인 콜백과, 선택적이지 않은 콜백이 있는\n 플러그인 인터페이스의 예시입니다.\n\n<code><pre>\ninterface PluginSettings {\n  pluginShouldLoad?: () => void;\n  pluginIsActivated: () => void;\n}\n\ndeclare const plugin: PluginSettings;\n\n</pre></code>\n// pluginShouldLoad가 존재하지 않을 수 있으므로,\n 다음 검사는 타당합니다.\n\n<code><pre>\nif (plugin.pluginShouldLoad) {\n  // pluginShouldLoad가 존재할 때의 처리.\n}\n\n// 이는 3.6 이전에서 에러가 아니었습니다.\n\nif (plugin.pluginIsActivated) {\n  // 플러그인이 활성화되었을 때 무언가를 처리하려고 하는데,\n  // 메서드를 호출하는 대신\n  // 프로퍼티로 사용했습니다.\n}\n\n</pre></code>\n// pluginIsActivated는 언제나 존재하겠지만,\n if 블록 안에서 메서드가 호출되고 있으므로\n TypeScript는 검사를 허용하고 있습니다.\n\n<code><pre>\nif (plugin.pluginIsActivated) {\n  plugin.pluginIsActivated();\n}\n","redirectHref":"ko/play/?#example/uncalled-function-checks"}},"staticQueryHashes":[]}