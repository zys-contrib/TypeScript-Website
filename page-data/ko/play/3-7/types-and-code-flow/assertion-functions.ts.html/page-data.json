{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ko/play/3-7/types-and-code-flow/assertion-functions.ts.html","result":{"pageContext":{"name":"Assertion Functions","title":"Assertion Functions","lang":"ko","html":"\n JavaScript의 유연성 때문에,\n 가정을 검증하기 위해서 코드에 런타임 검사를 추가하는 것이 좋습니다.\n\n 일반적으로 단언(또는 불변)이라고 불리며\n 변수가 예상한 것과 일치하지 않을 때\n 초기에 에러를 발생시키는 작은 기능입니다.\n\n Node는 이 기능을 즉시 사용할 수 있는 함수를 가지고 있으며,\n assert라고 불리며 import 없이 사용할 수 있습니다.\n\n 우리는 스스로 정의할 것입니다.\n value가 true라고 하는 \n 표현식을 단언하는 함수를 선언합니다:\n<code><pre>\ndeclare function assert(value: unknown): asserts value;\n\n// 이제 enum의 타입이 유효한지 검사하기 위해 assert를 사용합니다\ndeclare const maybeStringOrNumber: string | number;\nassert(typeof maybeStringOrNumber === \"string\");\n\n</pre></code>\n// TypeScript 3.7에서, 코드 흐름 분석은\n 코드가 무엇인지 알아내기 위해\n 이런 함수의 종류를 사용할 수 있습니다.\n 아래의 변수를 호버해보면 - 하나의 문자열 또는 숫자에서\n 하나의 문자열로 좁혀진 것을 확인할 수 있습니다.\n\n<code><pre>\nmaybeStringOrNumber;\n\n</pre></code>\n// 추론된 코드 전체에 있는 타입을 보장하기 위해\n 단언 함수를 사용할 수 있습니다.\n 예를 들어 TypeScript는 위에 assert 선언을 통해\n 파라미터에 타입을 추가할 필요 없이\n 함수가 숫자를 반환한다는 것을 알고 있습니다.\n\n<code><pre>\nfunction multiply(x: any, y: any) {\n  assert(typeof x === \"number\");\n  assert(typeof y === \"number\");\n\n  return x * y;\n}\n\n</pre></code>\n// 단언 함수는 타입 가드와 형제입니다\n 예시: 타입 가드는 함수를 통해 제어 흐름이 계속 동작할 때,\n 제어 흐름에 영향을 준다는 것을 제외합니다.\n\n 예를 들어, enum을 좁히기 위해\n 단언 함수를 사용할 수 있습니다:\n\n<code><pre>\ndeclare const oneOfFirstFiveNumbers: 1 | 2 | 3 | 4 | 5;\n\ndeclare function isOdd(param: unknown): asserts param is 1 | 3 | 5;\ndeclare function isBelowFour(param: unknown): asserts param is 1 | 2 | 3 | 4;\n\n// enum을 다음과 같이 줄여야 합니다: 1 | 3 | 5\n\nisOdd(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n// 그리고 enum의 가능한 상태를 다음과 같이 줄입니다: 1 | 3\n\nisBelowFour(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n</pre></code>\n// TypeScript 3.7에서 단언 함수의 기능 중 일부 입문서입니다\n - 릴리스 노트를 읽어보면\n 더 많은 것을 알아낼 수 있습니다:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"ko/play/?#example/assertion-functions"}},"staticQueryHashes":[]}