{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/iterators-and-generators.html","result":{"data":{"markdownRemark":{"id":"c0323eb5-eed1-5411-9319-4912a711e78a","excerpt":"이터러블 Symbol.iterator 프로퍼티에 대한 구현을 가진 객체는 이터러블로 간주합니다.\nArray, Map, Set, String, Int32Array, Uint32Array, 등과 같은 내장 타입에는 Symbol.iterator…","html":"<h2 id=\"이터러블\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터러블</h2>\n<p><a href=\"Symbols.html#symboliterator\"><code>Symbol.iterator</code></a> 프로퍼티에 대한 구현을 가진 객체는 이터러블로 간주합니다.\n<code>Array</code>, <code>Map</code>, <code>Set</code>, <code>String</code>, <code>Int32Array</code>, <code>Uint32Array</code>, 등과 같은 내장 타입에는 <code>Symbol.iterator</code> 프로퍼티가 이미 구현되어 있습니다.\n객체에 있는 <code>Symbol.iterator</code> 함수는 반복할 값 목록을 반환합니다.</p>\n<h2 id=\"forof-문\" style=\"position:relative;\"><a href=\"#forof-%EB%AC%B8\" aria-label=\"forof 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>for..of</code> 문</h2>\n<p><code>for..of</code>문은 객체 내부 <code>Symbol.iterator</code> 프로퍼티를 호출해 이터러블 객체를 반복합니다.\n다음은 배열의 간단한 <code>for..of</code> 루프입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">someArray</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">entry</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">someArray</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">entry</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 1, \"string\", false</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"forof-vs-forin문\" style=\"position:relative;\"><a href=\"#forof-vs-forin%EB%AC%B8\" aria-label=\"forof vs forin문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>for..of</code> vs. <code>for..in</code>문</h3>\n<p><code>for..of</code>와 <code>for..in</code>문은 모두 리스트를 반복하지만 반복하는 값이 다릅니다. <code>for..in</code>은 반복하는 객체의 <em>키</em> 리스트를 반환하지만 <code>for..of</code>는 반복하는 객체의 숫자 프로퍼티인 <em>값</em> 리스트를 반환합니다.</p>\n<p>다음은 이러한 차이를 보여주는 예시입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"0\", \"1\", \"2\",</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">list</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"4\", \"5\", \"6\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>또 다른 차이는 <code>for..in</code>이 모든 객체에서 작동한다는 것입니다. 그래서 객체의 프로퍼티를 검사하는 방법으로 사용합니다.\n반면에 <code>for..of</code>는 주로 이터러블 객체의 값에 중점을 둡니다. <code>Map</code>과 <code>Set</code> 같은 내장 객체는 저장된 값에 접근할 수 있는 <code>Symbol.iterator</code> 프로퍼티를 구현합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pets</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"Cat\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Dog\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Hamster\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #001080\">pets</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"species\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"mammals\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pets</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"species\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pets</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">pet</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// \"Cat\", \"Dog\", \"Hamster\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"코드-생성\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"코드 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 생성</h3>\n<h4 id=\"es5-및-es3-타겟팅\" style=\"position:relative;\"><a href=\"#es5-%EB%B0%8F-es3-%ED%83%80%EA%B2%9F%ED%8C%85\" aria-label=\"es5 및 es3 타겟팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES5 및 ES3 타겟팅</h4>\n<p>ES5 또는 ES3 호환 엔진을 대상으로 하는 경우, 반복자는 <code>Array</code> 타입 값만 허용합니다.\n<code>Symbol.iterator</code> 프로퍼티를 구현하더라도 Array가 아닌 값에 <code>for..of</code> 루프를 사용하면 오류가 발생합니다.</p>\n<p>컴파일러는 <code>for..of</code>에 대해 간단한 <code>for</code> 루프를 생성합니다, 예를 들면:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numbers</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numbers</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>컴파일러는 위 코드를 다음과 같이 생성합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numbers</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">numbers</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">num</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">numbers</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">num</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h4 id=\"ecmascript-2015-및-상위-버전-타겟팅\" style=\"position:relative;\"><a href=\"#ecmascript-2015-%EB%B0%8F-%EC%83%81%EC%9C%84-%EB%B2%84%EC%A0%84-%ED%83%80%EA%B2%9F%ED%8C%85\" aria-label=\"ecmascript 2015 및 상위 버전 타겟팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript 2015 및 상위 버전 타겟팅</h4>\n<p>ECMAScipt 2015 호환 엔진을 대상으로 하는 경우, 컴파일러는 엔진에서 내장 반복자 구현을 대상으로 하는 <code>for..of</code> 루프를 생성합니다.</p>","headings":[{"value":"이터러블","depth":2},{"value":"for..of 문","depth":2},{"value":"for..of vs. for..in문","depth":3},{"value":"코드 생성","depth":3},{"value":"ES5 및 ES3 타겟팅","depth":4},{"value":"ECMAScript 2015 및 상위 버전 타겟팅","depth":4}],"frontmatter":{"permalink":"/ko/docs/handbook/iterators-and-generators.html","title":"Iterators and Generators","disable_toc":null,"handbook":null,"oneline":"How Iterators and Generators work in TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-iterators-and-generators","slug":"/ko/docs/handbook/iterators-and-generators.html","repoPath":"/packages/documentation/copy/ko/reference/Iterators and Generators.md","lang":"ko","modifiedTime":"2024-10-21T12:35:09.561Z"}},"staticQueryHashes":[]}