{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/functions.html","result":{"data":{"markdownRemark":{"id":"95b27a53-3122-5ce5-afbf-fd505fc7fc14","excerpt":"지역 함수이건, 다른 모듈에서 불러온 함수이건, 어떤 클래스의 메서드이건, 함수는 어느 어플리케이션에서도 기초적인 구성 요소의 역할을 합니다.\r\n함수는 값입니다. 그리고 다른 값처럼, TypeScript…","html":"<p>지역 함수이건, 다른 모듈에서 불러온 함수이건, 어떤 클래스의 메서드이건, 함수는 어느 어플리케이션에서도 기초적인 구성 요소의 역할을 합니다.\r\n함수는 값입니다. 그리고 다른 값처럼, TypeScript에서는 함수들이 호출될 수 있는 방법을 서술하는 방법이 많이 있습니다.\r\n함수를 설명하는 타입들을 작성하는 방법들을 알아봅시다.</p>\n<h2 id=\"함수-타입-표현식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"함수 타입 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 타입 표현식</h2>\n<p>함수를 설명하는 가장 간단한 방법은 <em>함수 타입 표현식</em> 입니다.\r\n이 타입은 화살표 함수와 문법적으로 유사합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: (a: string) => void): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (a: string) => void' >fn</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (a: string) => void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, World\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printToConsole(s: string): void' >printToConsole</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: (a: string) => void): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='function printToConsole(s: string): void' >printToConsole</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1XagFMMALkVwENiBnKVGMZASkQF4A+RANzhgBNGBvALAAoRIgK4ARAAl0AG1lwANIgDqcVLO4T6AbmEBfYcNCRYCRAAcaYKABU4AYQQU4s9LgqVqtBokEjECGdXdAA6BWQPXQMjITRMbDwrWjtHYLddIA'>Try</a></div></pre>\n<p><code>(a: string) => void</code> 라는 문법은 “문자열 타입 <code>a</code>를 하나의 매개변수로 가지고 반환값이 없는 함수”를 의미합니다.\r\n함수 선언처럼, 매개변수의 타입이 지정되지 않으면, 암묵적으로 <code>any</code>가 됩니다.</p>\n<blockquote>\n<p>매개변수 이름이 <strong>필수</strong> 라는것을 명심하십시오. 함수 타입 <code>(string) => void</code>는 ”<code>any</code> 타입을 가진 <code>string</code>이라는 이름의 매개변수를 가진 함수를 뜻합니다!</p>\n</blockquote>\n<p>물론 타입 별칭을 사용해서 함수의 타입에 이름을 붙일 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GreetFunction = (a: string) => void' >GreetFunction</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greeter(fn: GreetFunction): void' >greeter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: GreetFunction' >fn</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type GreetFunction = (a: string) => void' >GreetFunction</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwBiBXAdgY2ASwPbpQC8UAFAIYBcUAzsHDugOYCUxAfFAG544AmAbgCwAKABmGbPkJMESCHFJj01eIhSTcBNgG9RUKAHpDUAHTnRAXyA'>Try</a></div></pre>\n<h2 id=\"호출-시그니처\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98\" aria-label=\"호출 시그니처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출 시그니처</h2>\n<p>JavaScript에서, 함수들은 호출이 가능할 뿐만 아니라, 프로퍼티도 가질 수 있습니다.\r\n하지만, 함수 타입 표현식 문법은 프로퍼티를 정의하는 것을 허락하지 않습니다.\r\n만약 우리가 호출 가능하면서 프로퍼티를 가진 무언가를 설명하려고 하면, 객체 타입에 <em>호출 시그니처</em> 를 사용하여 표현할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescribableFunction = {&#10;    (someArg: number): boolean;&#10;    description: string;&#10;}' >DescribableFunction</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) description: string' >description</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) someArg: number' >someArg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(fn: DescribableFunction): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: DescribableFunction' >fn</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescribableFunction = {&#10;    (someArg: number): boolean;&#10;    description: string;&#10;}' >DescribableFunction</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) fn: DescribableFunction' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) description: string' >description</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" returned \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) fn: (someArg: number) => boolean' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAIhDOBjATgSwEYEN0BsIDEBXAO0WFQHtioBeKAbwFgAoKKAEwRVTHKoC4o8YGmIBzANws2ACngUAthACCyMYOKEF6CMgCUg9BQp5MxKcwC+FgGYkylauwoBlRRGAALVOJk3ignBIaFi4BPZ8xHoM0lCIVPJ4AHQ4FGJ+xEmcwTyRUADUUABEUMgehMjEEOzFBVD+MgBsenoWlkA'>Try</a></div></pre>\n<p>이 문법은 함수 타입 표현식과 다릅니다. 매개변수 타입과 반환값의 타입 사이에 <code>=></code>가 아닌 <code>:</code>를 사용해야 합니다.</p>\n<h2 id=\"구성-시그니처\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98\" aria-label=\"구성 시그니처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성 시그니처</h2>\n<p>JavaScript 함수는 <code>new</code>연산자를 통해서도 호출 될 수 있습니다.\r\nTypeScript는 이런 것들이 주로 새로운 객체를 생성하는데 사용되기 때문에 <em>생성자</em> 로 간주합니다.\r\n여러분은 호출 시그니처 앞에 <code>new</code> 키워드를 붙임으로서, <em>구성 시그니처</em>를 작성할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeConstructor = new (s: string) => SomeObject' >SomeConstructor</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeObject = any' >SomeObject</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(ctor: SomeConstructor): any' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ctor: SomeConstructor' >ctor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type SomeConstructor = new (s: string) => any' >SomeConstructor</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) ctor: new (s: string) => any' >ctor</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgeQEYCsIGNhQLxQCGAdiANwCwAUAPQ1QC0TWArsEw9aJLIhAMJxiAZ2AAnFjjhj8UAN7UoUYhADuUABTCAXFFFiAlsQDmASl3wkaTDkpUAvnYBmLYjgNCoT4hqliLfIIi4pLA0qbyilBiEMAsYsTKalB+GgBEABYQADbZcGmmdvZAA'>Try</a></div></pre>\n<p>JavaScript의 <code>Date</code> 객체와 같은 몇몇 객체는 <code>new</code>가 있든 없든 호출될 수 있습니다.\r\n여러분은 호출 시그니처와 구성 시그니처를 임의로 같은 타입에서 결합시킬 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface CallOrConstruct' >CallOrConstruct</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number | undefined' >n</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJwDYYPJVQexAGcwoBXBMZAbwFgAoZZECAd2QAoiAuZEqUAHMAlLwAicSAG4GTDiAD8vEGQC2AI2ijmazVBn0AvkA'>Try</a></div></pre>\n<h2 id=\"제네릭-함수\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%95%A8%EC%88%98\" aria-label=\"제네릭 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 함수</h2>\n<p>입력 값이 출력 값의 타입과 관련이 있거나, 두 입력값의 타입이 서로 관련이 있는 형태의 함수를 작성하는 것은 흔히 일어나는 일입니다.\r\n잠시 배열의 첫 번째 원소를 반환하는 함수를 생각해 봅시다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement(arr: any[]): any' >firstElement</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAFAIaqoBci5YAngNoC6AlIgN4CwAUIolR4oIVEkqomABhYBuPgF8gA'>Try</a></div></pre>\n<p>함수는 제 역할을 하지만, 아쉽게도 반환 타입이 <code>any</code> 입니다.\r\n함수가 배열 원소의 타입을 반환한다면 더 나을 것 같습니다.</p>\n<p>TypeScript에서, <em>제네릭</em> 문법이 두 값 사이의 상관관계를 표현하기 위해서 사용됩니다.\r\n우리는 함수 시그니처에서 <em>타입 매개변수</em>를 선언함으로서 그런 표현을 할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;Type>(arr: Type[]): Type | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement&lt;Type>(arr: Type[]): Type | undefined' >Type</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAPACoCeADngHwAUAhqqgFyJW0DaAugJQcueRAB9E4ACZ4UYPJMQBvALAAoRIlR4oIVEhapuABl4BuNQF8gA'>Try</a></div></pre>\n<p>타입 매개변수 <code>Type</code>을 이 함수에 선언하고, 필요한 두 곳에 사용함으로써 우리는 함수의 입력 값(배열)과 출력(반환 값) 사이에 연결고리를 만들었습니다.\r\n이제 우리가 이 함수를 호출할 때, 더 명확한 타입을 얻을 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// s는 \"string\" 타입</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const s: string | undefined' >s</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;string>(arr: string[]): string | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// n은 \"number\" 타입</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: number | undefined' >n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;number>(arr: number[]): number | undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// u는 \"undefined\" 타입</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const u: undefined' >u</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement&lt;never>(arr: never[]): undefined' >firstElement</data-lsp></span><span style=\"color: #000000\">([]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVKxgGcMBRCEAWxFQwB4AVATwAcQA+AClhgC55mbANoBdAJT9BCAD7w0oRFlQhgAbgCwAKAD02+AFpDYZBkP6tu+EUApTfABEJGEoDmd+IAGFwKHjWsHhJX4AF4CYjIKalpOITsoOwAaewAjePswO3ENHT1UQAFx+1RkSkSQGDcvHz8MeHxgxVDyKhoMKIBGBIAmBIBmDIs9ZFs7eRBFZWAy701fVH9kIJCSBojm0TFVIA'>Try</a></div></pre>\n<h3 id=\"추론inference\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EB%A1%A0inference\" aria-label=\"추론inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추론(Inference)</h3>\n<p>이 예제에서 우리는 <code>Type</code>을 특정하지 않았음에 주목하세요.\r\n여기서 타입은 <em>추론되었습니다</em> 즉 TypeScript에 의해서 자동적으로 선택된 것입니다.</p>\n<p>우리는 여러 개의 타입 매개변수도 사용할 수 있습니다.\r\n예를 들어서, <code>map</code>의 스탠드얼론 버전은 아래와 같을 것 입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >map</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Input[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) func: (arg: Input) => Output' >func</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Input' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Input</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Output in map&lt;Input, Output>(arr: Input[], func: (arg: Input) => Output): Output[]' >Output</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Input[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Input>.map&lt;Output>(callbackfn: (value: Input, index: number, array: Input[]) => Output, thisArg?: any): Output[]' >map</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: (arg: Input) => Output' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 매개변수 &apos;n&apos;의 타입은 &apos;string&apos; 입니다.</span></div><div class='line'><span style=\"color: #008000\">// &apos;parsed&apos;는 number[] 타입을 하고 있습니다.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const parsed: number[]' >parsed</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;string, number>(arr: string[], func: (arg: string) => number): number[]' >map</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"2\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"3\"</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: string' >n</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: string' >n</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAcCcFMBdYJbUgWgQcwHYHsYFgAoAMwFdMBjRbTUAWwENwAeASU3BNgBpQB5TjrAB8ACnqRIALlBtBAbQC6PUhWljI6abM4BKUAF4hfAbun9Y8haADehUKBiwSkGuMgA6BuBEryOgNyEAL6EhCCggCedgDg1gAM9gBhDoADkmImAGuOggAMLgKHjgALjSQDOsJAImOiJoFmAE02AJ03uYWCJ4OL50AAmiYApTaCYJLQARsiKmVmAIuOggBqrgAc1oIAR44CtQzV1BOTUhRDNbQZ0jCJyAEQAjHs8ewBMx6B7AMx7SqAimHqG65AtbLAPOgFAA'>Try</a></div></pre>\n<p>이 예제에서 TypeScript는 <code>Input</code> 타입과(입력으로 주어진 <code>string</code> 배열로부터) <code>Output</code>타입을 함수 표현식의 반환 값(<code>number</code>)를 통해서 추론할 수 있는 점을 눈여겨보십시오.</p>\n<h3 id=\"타입-제한-조건\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%A0%9C%ED%95%9C-%EC%A1%B0%EA%B1%B4\" aria-label=\"타입 제한 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 제한 조건</h3>\n<p>우리는 <em>모든</em> 타입에 대해서 동작하는 제네릭 함수들을 작성하였습니다.\r\n가끔, 우리는 두 값을 연관시키기 원하지만 특정한 값들의 부분집합에 한해서만 동작하기를 원할 때가 있습니다.\r\n이러한 경우에 우리는 <em>타입 제한 조건</em>을 사용하여, 타입 매개변수가 받아들일 수 있는 타입들을 제한할 수 있습니다.</p>\n<p>두 값 중에 더 긴 것을 반환하는 함수를 작성해 봅시다.\r\n이 작업을 위해, number인 <code>length</code> 프로퍼티가 필요합니다.\r\n<code>extends</code>절을 이용해서 타입 매개변수를 그 타입으로 <em>제한</em> 할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >longest</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in longest&lt;Type extends {&#10;    length: number;&#10;}>(a: Type, b: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: Type extends { length: number; }' >a</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: Type extends { length: number; }' >b</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// longerArray 의 타입은 &apos;number[]&apos; 입니다&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const longerArray: number[]' >longerArray</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;number[]>(a: number[], b: number[]): number[]' >longest</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">], [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// longerString 의 타입은 &apos;alice&apos; | &apos;bob&apos; 입니다.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const longerString: \"alice\" | \"bob\"' >longerString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;\"alice\" | \"bob\">(a: \"alice\" | \"bob\", b: \"alice\" | \"bob\"): \"alice\" | \"bob\"' >longest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"bob\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// 에러! Number에는 &apos;length&apos; 프로퍼티가 없습니다.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const notOK: {&#10;    length: number;&#10;}' >notOK</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function longest&lt;{&#10;    length: number;&#10;}>(a: {&#10;    length: number;&#10;}, b: {&#10;    length: number;&#10;}): {&#10;    length: number;&#10;}' >longest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>10</data-err></span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type '{ length: number; }'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type '{ length: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWdG00BYAKADMBXAOwGMAXASzitABtmBzSROgHgBUAngAdIoSAA86kKgBNEoAN5sZHOgAtUVCgFsARjFABfAHwAKAIaohogDSg91kZACUS0qFAMyoSwDpWVQ1QEwBeBwCg9TdFD09QaEg6CmgWCwBuOKNxVkQxWJJ4hKSUlj1MwuNSI1JSEDZOGABBWAtBUEANcdBAAYXAUPHAAXHQAHJtfRgAbQBdIdBewAmmwBOmodIaZh4Gqi5oFug20HD2Te46M3GARns0Sftzy-sMSZcK+sOtgGU6aAZNzp6B4YsrAYNEgMwAPsM9HA9DN5gs-Cs1nQNu9Pt8OPsUcczAAiQHAyA4+w4qF6HFPOpgQALo4Ab9oAhKAAHK6AzQKmAFKbhoFNhoZoAQVcAOh2AH2XAA9LgAAa0CAMdHAK1DiwRJFWVHWVDgdAA8gBpTGvbFnAAM9n1eqeQA'>Try</a></div></pre>\n<p>이 예시에서는 몇 가지 흥미로운 점에 주목해야 합니다.\r\n우리는 TypeScript가 <code>longest</code>의 반환 타입을 <em>추론</em> 하도록 허용했습니다.\r\n반환 타입 추론은 제네릭 함수에서도 작동합니다.</p>\n<p>우리가 <code>Type</code>을 <code>{ length: number }</code>로 제한했기에, 우리는 <code>a</code>와 <code>b</code> 매개변수에 대해서 <code>.length</code> 프로퍼티에 접근할 수 있었습니다.\r\n타입 제한이 없다면, 이러한 값들이 length 프로퍼티를 가지지 않는 다른 타입일 수 있기 때문에, 그 프로퍼티에 접근 할 수 없었을 것입니다.</p>\n<p><code>longerArray</code>와 <code>longerString</code>의 타입은 인수를 기반으로 추론되었습니다.\r\n제네릭은 두 개 이상의 값을 같은 타입으로 연관 짓는 것이라는 사실을 기억해야 합니다!</p>\n<p>결국 우리가 원하는 대로 <code>longest(10,100)</code>은 <code>number</code>타입이 <code>.length</code> 프로퍼티를 가지고 있지 않았기 때문에 호출이 거부된 것을 볼 수 있습니다.</p>\n<h3 id=\"제한된-값으로-작업하기\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EB%90%9C-%EA%B0%92%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0\" aria-label=\"제한된 값으로 작업하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한된 값으로 작업하기</h3>\n<p>다음은 제네릭 타입 제약 조건을 사용할 때, 흔히 범할 수 있는 실수입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >minimumLength</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in minimumLength&lt;Type extends {&#10;    length: number;&#10;}>(obj: Type, minimum: number): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type extends { length: number; }' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) minimum: number' >minimum</data-lsp></span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Type '{ length: number; }' is not assignable to type 'Type'.\n  '{ length: number; }' is assignable to the constraint of type 'Type', but 'Type' could be instantiated with a different subtype of constraint '{ length: number; }'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ length: number; }' is not assignable to type 'Type'.\n  '{ length: number; }' is assignable to the constraint of type 'Type', but 'Type' could be instantiated with a different subtype of constraint '{ length: number; }'.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oLACgAzAVwDsBjAFwEs4TQBbKkq+o+gGUhIHMKALADwAVAJ4AHSKEgAPClwAmiUAG9QAGy68+qEmwBGMUAF8AfAAp8oUHD0ArVKIkAaSwyYs2O-THwBKB+KSyq5UBKBmNrYAdBo8-KAmALxuzKz0viquVtCQFETQdJEA3K5GUmqIQVmgOXkFKuqa-KiMqWzGJXhWRvhGQA'>Try</a></div></pre>\n<p>이 함수는 문제가 없는 것처럼 보입니다. <code>Type</code>은 <code>{ length: number }</code>로 제한되어 있고, 함수는 <code>Type</code>이나 저 제약조건을 만족하는 값을 반환합니다.\r\n문제는 이 함수가 제약사항을 만족하는 <em>어떤</em> 객체가 아닌, 입력된 <em>어떤</em> 객체를 반환한다는 점입니다.\r\n만약 이 코드가 유효하다면, 여러분들은 확실히 동작하지 않을 아래의 코드를 작성할 수 있을 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// &apos;arr&apos; gets value { length: 6 }</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function minimumLength&lt;number[]>(obj: number[], minimum: number): number[]' >minimumLength</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// 여기서 배열은 &apos;slice&apos; 메서드를 가지고 있지만</span></div><div class='line'><span style=\"color: #008000\">// 반환된 객체는 그렇지 않기에 에러가 발생합니다!</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.slice(start?: number | undefined, end?: number | undefined): number[]' >slice</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFstUsDkCAZEVAcwwAsAeAFQE8AHBEADw2uADO8AN7wI1OvQBc8VOQBGIGPAC+APgAUAWABQ8eDnkArGW04AaXfqIkyBGXIKKYugJSmOIANy6A9L-gAWmCwZAxgwL8AgHJYGGj4GhAMIQA3KAhkBFFxWgYZADZVXTA8AQx4OPgAXkJiUnIqPPoNAG0ARnN4ACYugGYAXS6C1x8df3hAG9HABjrAHEH4QAYewBfRwAFx+GiBCCwwEATAFS7ZwB2WwB9O+EAAGsABycADmvhACPGLwBnOqPhADB7ADTXAHBb4QFwawBaZwBSm+CAD9rAOAdF3ggClR6aABdH4NDADftZ3ggBwewC7A4BLVcAE02AE6aAIQlMo4cQAOggOBoGjixM22xAGgADK5RkA'>Try</a></div></pre>\n<h3 id=\"타입-인수를-명시하기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%9D%B8%EC%88%98%EB%A5%BC-%EB%AA%85%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-label=\"타입 인수를 명시하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 인수를 명시하기</h3>\n<p>TypeScript는 제네릭 호출에서 의도된 타입을 대체로 추론해 내지만, 항상 그렇지는 않습니다.\r\n예를 들어서, 여러분들이 두 배열을 결합하는 함수를 하나 작성했다고 합시다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >combine</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr1: Type[]' >arr1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr2: Type[]' >arr2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in combine&lt;Type>(arr1: Type[], arr2: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr1: Type[]' >arr1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.concat(...items: ConcatArray&lt;Type>[]): Type[] (+1 overload)' >concat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr2: Type[]' >arr2</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbARjMBTAPAFQE8AHbAPgAoBDAJxoEYAuRI0gbQF0AaRWmgJmatsnAJRCSIjogDeAWABQiRDWxQQNJH3oA6FJCpRqdfqIDcigL5A'>Try</a></div></pre>\n<p>일반적으로 짝이 맞지 않는 배열과 함께 해당 함수를 부르는 것은 잘못된 것일 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: number[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;number>(arr1: number[], arr2: number[]): number[]' >combine</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], [</span><span style=\"color: #A31515\"><data-err>&quot;hello&quot;</data-err></span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oLACgATSAYwBsBDaSUAMwFcA7YgFwEs4HRi4BbAI1YNIAHgAqATwAOkAHwAKStACMqCdIDaAXQA0oRWlVTIWgJSGNmgNz4QoALQPidZg7v5uDRMz2xQAXi5eASE5dSVdNF0MHVB1ACIAC0hSUjg4zRNLIA'>Try</a></div></pre>\n<p>만약 여러분이 이런 것을 의도하셨다면, 여러분은 수동으로 <code>Type</code>을 명시해야 합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr: (string | number)[]' >arr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function combine&lt;string | number>(arr1: (string | number)[], arr2: (string | number)[]): (string | number)[]' >combine</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], [</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXzBwFsAjLVEAHgBUBPABxAD4AKWGARgC547GBtALoAaeOwBMPPiCEBKKQxmCA3AFgAUAHpN8ALT6wyDPt0bCqAM4YxMGPAC8BYmQqUrMcgHN4AH3ipkUhAYVn4OUXFRAGYReH4AIgALEAgIHHjBWWUgA'>Try</a></div></pre>\n<h3 id=\"좋은-제네릭-함수를-작성하기-위한-가이드라인\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8\" aria-label=\"좋은 제네릭 함수를 작성하기 위한 가이드라인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 제네릭 함수를 작성하기 위한 가이드라인</h3>\n<p>제네릭 함수를 작성하는 것은 재미있고, 타입 매개 변수를 사용하는 것이 쉬울 수 있습니다.\r\n너무 많은 타입 매개변수나 제한 조건을 꼭 필요하지 않은 곳에 사용하는 것은 추론을 잘하지 못하게 해서 여러분의 함수 호출자를 불만스럽게 만들 수 있습니다.</p>\n<h4 id=\"타입-매개변수를-누르기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EB%88%84%EB%A5%B4%EA%B8%B0\" aria-label=\"타입 매개변수를 누르기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 매개변수를 누르기</h4>\n<p>여기 비슷해 보이는 두 함수를 쓰는 방법이 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement1&lt;Type>(arr: Type[]): Type' >firstElement1</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement1&lt;Type>(arr: Type[]): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement1&lt;Type>(arr: Type[]): Type' >Type</data-lsp></span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement2&lt;Type extends any[]>(arr: Type): any' >firstElement2</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement2&lt;Type extends any[]>(arr: Type): any' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type extends any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in firstElement2&lt;Type extends any[]>(arr: Type): any' >Type</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type extends any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// a: number (good)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement1&lt;number>(arr: number[]): number' >firstElement1</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #008000\">// b: any (bad)</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const b: any' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function firstElement2&lt;number[]>(arr: number[]): any' >firstElement2</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAnAzlAogGwKYC2eYUAjADwAqAngA54B8AFAIaqoBciN9A2gLoBKRAG8AsAChEiVHighUSNql4AGfgG5JAX0mTQkWAmRpMuQsSgAmKnTyI8ADyjEAJukQsw1Ac2VcePGFxKRk5BSV2NU0dPQkAenjPLjAQAgAjPFREJgBzODhXQUkIBExPRABeEwxsfCISUiZeUgAaRCt2gGYhLQSk9K4vahz0liKSsqhEdKqas3rLK2a2ju7eoA'>Try</a></div></pre>\n<p>처음 보기에는 동일하게 보일 수 있습니다만, <code>firstElement1</code>이 이 함수를 작성하는데 더 좋은 방법입니다.\r\n이 함수의 추론된 반환 타입은 <code>Type</code> 입니다만, <code>firstElement2</code>의 추론된 반환 타입은 TypeScript가 호출 중에 타입을 해석하기 위해서 “기다리기” 보다 호출 시점에 <code>arr[0]</code> 표현식을 타입 제한 조건을 이용해서 해석하기 때문에 <code>any</code>가 됩니다.</p>\n<blockquote>\n<p><strong>규칙</strong>: 가능하다면, 타입 매개변수를 제약하기보다는 타입 매개변수 그 자체를 사용하십시오.</p>\n</blockquote>\n<h4 id=\"더-적은-타입-매개변수를-사용하기\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EC%A0%81%EC%9D%80-%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"더 적은 타입 매개변수를 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 적은 타입 매개변수를 사용하기</h4>\n<p>다음은 유사한 함수의 또 다른 쌍입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >filter1</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) func: (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter1&lt;Type>(arr: Type[], func: (arg: Type) => boolean): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.filter(predicate: (value: Type, index: number, array: Type[]) => unknown, thisArg?: any): Type[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >filter2</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Func in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Func</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: Func extends (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Func in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Func</data-lsp></span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in filter2&lt;Type, Func extends (arg: Type) => boolean>(arr: Type[], func: Func): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: Type[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;Type>.filter(predicate: (value: Type, index: number, array: Type[]) => unknown, thisArg?: any): Type[] (+1 overload)' >filter</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) func: Func extends (arg: Type) => boolean' >func</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMGAbKBTATgRgDwAqAngA4YB8AFAIZZYBcixZA2gLoA0y4EjNWAc0bMMASkQBecogBGcOKgzUwo4aQztEAbwCwAKESIsGKCCxJaWAHQp02SqEiiA3PoC++-Y+jwktzFgATITqXABiPIgYAB6YYAAmAM6I-EJM6uJSsvKKylT6hpZqrJwF3JCMEZD6qukl2mXGpuaIljZoAQ48Lu5AA'>Try</a></div></pre>\n<p>우리는 <em>두 값을 연관시키지 않는</em> 타입 매개변수 <code>Func</code>를 만들었습니다.\r\n이는 타입 인수를 원하는 호출자가 아무 이유 없이 추가 타입 인수를 제공해야 하기 때문에, 상당히 좋지 않습니다.\r\n<code>Func</code>는 함수를 더 읽고 이해하기 어렵게 만들 뿐이지, 아무것도 하지 않습니다!</p>\n<blockquote>\n<p><strong>규칙</strong>: 항상 가능하다면 타입 매개변수를 최소로 사용하십시오</p>\n</blockquote>\n<h4 id=\"타입-매개변수는-두-번-나타나야-합니다\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%8A%94-%EB%91%90-%EB%B2%88-%EB%82%98%ED%83%80%EB%82%98%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"타입 매개변수는 두 번 나타나야 합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 매개변수는 두 번 나타나야 합니다.</h4>\n<p>가끔 우리는 함수가 제네릭이 필요 없을 수 있다는 사실을 간과합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet&lt;Str extends string>(s: Str): void' >greet</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in greet&lt;Str extends string>(s: Str): void' >Str</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Str extends string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Str in greet&lt;Str extends string>(s: Str): void' >Str</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Str extends string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet&lt;\"world\">(s: \"world\"): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QDwGUqqLoAeU6YAJgM6JUExjIB8AFFQFyL6oCUiA3gFgAUIkQQEVOABt0AOmlxkLAEQAJdNMUAaRCsQBqWjwDcIgL4iRaTFFUB3OKmkUVpoA'>Try</a></div></pre>\n<p>우리는 간단한 버전을 쉽게 작성할 수 있었을 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(s: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQGcBciuUqMYyAlIgN4CwAUIohArnADboB07cy2AIgAS6drwA0iAYgDURCgG4GAXyA'>Try</a></div></pre>\n<p>타입 매개변수는 <em>여러 값의 타입을 연관</em>시키는 용도로 사용함을 기억해 주십시오.\r\n만약 타입 매개변수가 함수 시그니처에서 한 번만 사용되었다면, 어떤 것도 연관시키지 않고 있는 것입니다.</p>\n<blockquote>\n<p><strong>규칙</strong>: 만약 타입 매개변수가 한 곳에서만 나온다면, 정말로 필요한 건지 다시 생각해 보십시오.</p>\n</blockquote>\n<h2 id=\"선택적-매개변수\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%81-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"선택적 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택적 매개변수</h2>\n<p>JavaScript에서 쓰이는 함수는 종종 가변적인 수의 인자들을 사용합니다.\r\n예를 들어서 <code>number</code>의 <code>toFixed</code> 메서드는 선택적으로 자릿수를 사용합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(n: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">()); </span><span style=\"color: #008000\">// 0 arguments</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">)); </span><span style=\"color: #008000\">// 1 argument</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFGAXIsIC2AjAUwCcBKRAbwFgAoRRCBAZzgBsCA6FuAczXajgAxGAA8CAExQkSAbkQB6eYgAMiAIZFuuAmCiMadBmGZtOPPgOFjJAZmlzFiAIzrN23TQC+QA'>Try</a></div></pre>\n<p>TypeScript에서 우리는 매개변수를 <code>?</code>로 표시함으로 <em>선택적</em>으로 만들 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFADwPwC5FhAWwCMBTAJwEpEBvAWAChFEB6JxAOg-oF97VyBuZqwDyAaV4oAjAAYBQxGKA'>Try</a></div></pre>\n<p>매개변수의 타입이 <code>number</code>로 지정되었지만, JavaScript에서 명시되지 않은 매개변수는 <code>undefined</code>가 되기 때문에, <code>x</code> 매개변수는 실질적으로 <code>number | undefined</code> 타입이 될 것입니다.</p>\n<p>여러분은 매개변수 <em>기본값</em>또한 제공할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFAD0QXkQRgAwCUiA3gLABQiiA9NYgHSMUC+QA'>Try</a></div></pre>\n<p>이제 <code>f</code>의 본문 내에서 모든 <code>undefined</code> 인수가 <code>10</code>으로 대체되기 때문에 <code>x</code>의 타입은 <code>number</code>가 될 것입니다.\r\n매개변수가 선택적일 때, 호출자는 <code>undefined</code>를 넘김으로써, “누락된” 인수를 흉내 낼 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// cut</span></div><div class='line'><span style=\"color: #008000\">// All OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function f(x?: number): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVIAoAPAfgC55VkBbAIxBgEoKA3HLYAbgFgAoAen7wwyDH0HwAghAjwA8gGk+iAox68VARgAMa5QTShEWVCGBqgA'>Try</a></div></pre>\n<h3 id=\"콜백-함수에서의-선택적-매개변수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%EC%9D%98-%EC%84%A0%ED%83%9D%EC%A0%81-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"콜백 함수에서의 선택적 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수에서의 선택적 매개변수</h3>\n<p>선택적 매개변수 및 함수 타입 표현식에 대해 알게 되면, 콜백을 호출하는 함수를 작성할 때 아래와 같은 실수를 범하기 쉽습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number | undefined' >index</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;any>.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">], </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwJ4DE4CcCiBDCACwAo8ssAuRPMVAbQF0AaRCPAG3YCMCBrK0lgDmVGqhYwwAEwCmADwD8VMCGRcZWAJSIAvAD5EANzgwp2gN4BYAFCJEwbImLsZURDF2IADAG53iAB5qcgA6FzAhKEI-GABqWIsbOzs2Th4IXkEsOhhmd00fJMQAXxtioA'>Try</a></div></pre>\n<p>사람들이 <code>index?</code>를 선택적 매개변수로 사용하기 위해 작성할 때 보통 의도하는 것은 두 호출 모두 유효하기를 바라는 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAE0gGMAbAQ2klADMBXAOxIBcBLOR0AWwE8AxBAFEKJABYAKAqFBVoqCo14BtALoAaaaBIUyZAEaiA1qglUA5gqXrQbRsQAeAflSN63fTACUoALwA+UAA3ODZCAi9UELCAbgIQUABaZJJ6FmTEgj5BaBFxCWUARhs0GywNUDMfAO1ORDgySAA6MjhzKq84-GzhUUkikrKKsxs2asCSOobm1vaKUa9OoA'>Try</a></div></pre>\n<p><em>실제로</em> 이것이 의미하는 바는 <em><code>callback</code>이 하나의 인수로 호출될 수 있음</em> 입니다.\r\n다시 말해, 이전의 함수 정의는 구현이 다음과 같을 수도 있다고 하는 것과 같습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) index: number | undefined' >index</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;any>.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 오늘은 index를 제공하고 싶지 않아</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) callback: (arg: any, index?: number) => void' >callback</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='let i: number' >i</data-lsp></span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAMwFcA7AYwBcBLOU0AWwE8AxBAUQENyALACk6xUnUkwDaAXQA0ocpwA28gEbcA1qgHQA5sNEzqpACaQAHgH5UpYgyUwAlKAC8APlAA3ONUMOA3gVCghAigfPKQlKDUTqAADADckaAAPKCC0AB0YaRalDwJ1ADUBb7+AaAgoIAkY4AZTYAC45FGpoA+naCAOBOArzWAGquABzWggG9DgAOToIBSo4Aio6UBcooq5Kqa0GLUEnZxpQC+BGtAA'>Try</a></div></pre>\n<p>결국, TypeScript는 이러한 의미를 강제하여 실제로 일어나지 않을 에러를 발생시킵니다.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function myForEach(arr: any[], callback: (arg: any, index?: number) => void): void' >myForEach</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">], (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) i: number | undefined' >i</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>'i' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'i' is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAE0gGMAbAQ2klADMBXAOxIBcBLOR0AWwE8AxBAFEKJABYAKAqFBVoqCo14BtALoAaaaBIUyZAEaiA1qglUA5gqXrQbRsQAeAflSN63fTACUoALwA+UAA3ODZCAi9UELCAbgIQUABaZJJ6FmTEgj5BaBFxCWUARhs0GywNUDMbNh8A0ABvLRJORDgySAA6MjhzCTYOljh+NgdIQgkvLzj8AF8poA'>Try</a></div></pre>\n<p>JavaScript에서, 매개변수로 지정된 것보다 많은 인수를 전달하여 호출되면, 남은 인수들은 단순히 무시됩니다.\r\nTypeScript도 같은 방식으로 동작합니다.\r\n(같은 타입을 가진) 매개변수가 더 적은 함수는 더 많은 매개변수가 있는 함수를 대체할 수 있습니다.</p>\n<blockquote>\n<p>콜백에 대한 함수 타입을 작성할 때, 해당 인수 없이 <em>호출할</em> 의도가 없는 한, <em>절대로</em> 선택적 매개변수를 사용하지 마십시오.</p>\n</blockquote>\n<h2 id=\"함수-오버로드\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C\" aria-label=\"함수 오버로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 오버로드</h2>\n<p>몇몇 JavaScript 함수는 다양한 인수의 개수, 타입을 통해서 호출될 수 있습니다.\r\n예를 들어서, 여러분은 <code>Date</code>를 생성하고, 타임스탬프 하나(인자 한 개)를 받을 수도 있고, 월/일/연도 형식(인자 3개)를 받는 함수를 만들 수 있을 것입니다.</p>\n<p>TypeScript에서는, 우리는 다른 방법으로 호출될 수 있는 함수를 <em>오버로드 시그니처</em>를 작성함으로 묘사할 수 있습니다.\r\n그러기 위해서, 함수 시그니처 몇 개(보통 2개 이상)을 적은 다음, 함수 본문을 작성하면 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) timestamp: number' >timestamp</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(m: number, d: number, y: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number' >d</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number | undefined' >d</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number | undefined' >y</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number | undefined' >d</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number | undefined' >y</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new (year: number, monthIndex: number, date?: number | undefined, hours?: number | undefined, minutes?: number | undefined, seconds?: number | undefined, ms?: number | undefined) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) d: number' >d</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) mOrTimestamp: number' >mOrTimestamp</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d1: Date' >d1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">12345678</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d2: Date' >d2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(m: number, d: number, y: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const d3: Date' >d3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function makeDate(timestamp: number): Date (+1 overload)' >makeDate</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span><span class=\"code\">2575</span></span><span class=\"error-behind\">No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsGCwAoAMwFcA7AYwBcBLOU0AWwEMBrSAEScsgAoaHIiSkwYAHVKWIMARjACUqTtwDcBEhRp1GrDl14MJU2dAA0oACaGZMMwE8rxhaCWRVRMlVr1mbFzwYA8tAAKtQCQiLioJLWphYA-A42oLaJ0UbyinqgAN4EoKDUhKA85qAAhAC8laBk5pCE1KSQZQBkrSkV1bWk9Y3N5nK5+QWg0JCUxND0zQDuzno8tmaBIWGCwmJmg24FAL6gkAA2iJDD+KNjE1MzkPN+q6Hhm6Jyu6B7BJ-45HRCFgBGUA1Hy6bg8AFoADMABYMAA2LAADjeBF+pH+5jQwO0vkWGDMBNAGFRPz+lAsUJxoL8ALMULeQA'>Try</a></div></pre>\n<p>이 예시에서, 우리는 두 개의 오버로드를 작성하였습니다. 하나는 한 개의 인수를 받고, 다른 하나는 인수 세 개를 받습니다.\r\n처음에 쓴 이 두 시그니처들을 <em>오버로드 시그니처</em> 라고 합니다.</p>\n<p>그리고, 우리는 호환 가능한 시그니처와 함께 함수 구현을 작성하였습니다.\r\n함수는 <em>구현</em> 시그니처를 가지고 있습니다만, 이 시그니처는 직접 호출될 수 없습니다.\r\n우리가 필수적인 매개변수 뒤에 두 개의 선택적 매개변수를 작성하였지만, 우리는 두 개의 매개변수 만으로는 이 함수를 호출할 수 없습니다!</p>\n<h3 id=\"오버로드-시그니처와-구현-시그니처\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98%EC%99%80-%EA%B5%AC%ED%98%84-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98\" aria-label=\"오버로드 시그니처와 구현 시그니처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로드 시그니처와 구현 시그니처</h3>\n<p>이것은 일반적인 혼동의 원인입니다.\r\n사람들은 종종 아래처럼 코드를 작성하고, 왜 에러가 있는지 이해하지 못하는 경우가 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// 0개의 인자로 호출하기를 예상했음</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>Expected 1 arguments, but got 0.</span><span class=\"code\">2554</span></span><span class=\"error-behind\">Expected 1 arguments, but got 0.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMBYCwAoAMwFcA7AYwBcBLOU0Q0gCgA9VFLprSBzASlQA3ONQAmAbgIkKNOg2Z9QAbwKhQIUADptBAL4ENABkA4NYA1x0IA9xwAnjgHQ7QgDjXAObOANVcAMdYB9O0IAgxwIMDgCNXAGXGpBXEgA'>Try</a></div></pre>\n<p>다시 한번 강조하지만, 함수 본문을 작성하기 위해 사용된 시그니처는 외부에서 “보이지 않습니다”.</p>\n<blockquote>\n<p><em>구현</em>의 시그니처는 외부에서 보이지 않습니다.\r\n오버로드된 함수를 작성할 때, 여러분들은 <em>두 개 이상</em>의 시그니처를 함수 구현 위에 작성해야 합니다.</p>\n</blockquote>\n<p>또한 구현 시그니처는 오버로드된 시그니처와 <em>호환되어야</em> 합니다.\r\n예를 들어, 아래의 함수들은 구현 시그니처가 오버로드들과 올바르게 일치하지 않기 때문에 오류가 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: boolean): void (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: boolean' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// 인수 타입이 옳지 않습니다.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='function fn(x: string): void (+1 overload)' >fn</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: boolean): void (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: boolean' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAsAFABmArgHYDGALgJZxmhFkAUAHqgEZxwA2kAhmQCUqAG5waAEwDchEKEAe44Awh0IAGFwKHjgF3HQgZjHAA5OhAUqOBWocATTYBOmgHSFSlWvUYt2oRFWg0yAcxGhxU2cTk1HQMTGyc3HyCQqAA3gC+QA'>Try</a></div></pre>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): string (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// 반환 타입이 옳지 않습니다.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='function fn(x: number): boolean (+1 overload)' >fn</data-lsp></data-err></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>This overload signature is not compatible with its implementation signature.</span><span class=\"code\">2394</span></span><span class=\"error-behind\">This overload signature is not compatible with its implementation signature.</span><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): string (+1 overload)' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCcAWAsAFABmArgHYDGALgJZxmhFkAUAHqoldDWQOYCUHLj14BuQiFCAMHsAaa6EADC4FDxwC7joQMxjgAcnQgKVHArUOAJpsAnTQDpCpSrXqMW7UGRIBbAEYxBoJ3DgAbSAEMy4sTk1HQMTGxC3HygAD52ji7Q-KAA3oSgoNCQVCTQDABEngAOiPmBAL5AA'>Try</a></div></pre>\n<h3 id=\"좋은-오버로드-작성하기\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"좋은 오버로드 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 오버로드 작성하기</h3>\n<p>제네릭처럼, 함수 오버로드를 작성할 때 따라야 할 몇몇 가이드라인이 있습니다.\r\n다음의 규칙을 따르는 것은 여러분의 함수들을 부르기 쉽고, 이해하기 쉽고, 구현하기 쉽게 만들어 줄 것입니다.</p>\n<p>문자열 혹은 배열의 길이를 반환하는 함수를 생각해 봅시다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(arr: any[]): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arr: any[]' >arr</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGwKZgBQGcBcitQBOMYA5gJR5ggC2ARqoQNwCwAUKJLAiuhgIaFCefmACeAbQC6lRNXqNWHcNHhI0mAB4jx5RAG92iRIVRQQhJJoB0G0lAAWSgL5A'>Try</a></div></pre>\n<p>이 함수는 괜찮습니다. 우리는 이 함수를 문자열이나 배열을 통해서 호출할 수 있습니다.\r\n하지만, TypeScript는 하나의 오버로드를 통해서만 함수를 해석하기에, 우리는 이 함수를 문자열 <em>또는</em> 배열이 될 수 있는 값을 통해서 호출할 수 없습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(arr: any[]): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function len(s: string): number (+1 overload)' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &gt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>No overload matches this call.\n  Overload 1 of 2, '(s: string): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'string'.\n      Type 'number[]' is not assignable to type 'string'.\n  Overload 2 of 2, '(arr: any[]): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'any[]'.\n      Type 'string' is not assignable to type 'any[]'.</span><span class=\"code\">2769</span></span><span class=\"error-behind\">No overload matches this call.\n  Overload 1 of 2, '(s: string): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'string'.\n      Type 'number[]' is not assignable to type 'string'.\n  Overload 2 of 2, '(arr: any[]): number', gave the following error.\n    Argument of type 'number[] | \"hello\"' is not assignable to parameter of type 'any[]'.\n      Type 'string' is not assignable to type 'any[]'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYBsBOAsAFAAmkAxgDYCG0koAZgK4B2pALgJZxOjmRMAUKUIlbR2TAOYBKVEwYBbAEYwA3IRIVqtRiw5cefftWipKTAJ4BtALozQcpasIhQAWnekGrd68K8BAEQBUiqgLgDyANJ+hpYADLahEdEE-vwAspSsABYAdNBmRHDy-FKgAHygcbkArKAA-KAB2ZDk5HABoKjxiUA'>Try</a></div></pre>\n<p>두 오버로드 모두 같은 인수 개수와, 같은 반환 타입을 가지기 때문에, 우리는 오버로드 되지 않은 함수의 형태로 다음과 같이 작성할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function len(x: any[] | string): number' >len</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | any[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGwKZgBQA8BciCGYAngNoC6iAPogM5QBOMYA5gJSIDeAsAFCKL1UUEPSRYAdGhZQAFgG5eAXyA'>Try</a></div></pre>\n<p>훨씬 낫습니다!\r\n호출자는 이 함수를 두 가지 값 중 하나를 이용하여 호출할 수 있으며, 추가적으로 정확한 구현 시그니처를 찾을 필요도 없어졌습니다.</p>\n<blockquote>\n<p>가능하다면 오버로드 대신 유니온 타입을 사용하십시오</p>\n</blockquote>\n<h3 id=\"함수-내에서-this-선언하기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EB%82%B4%EC%97%90%EC%84%9C-this-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-label=\"함수 내에서 this 선언하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 내에서 <code>this</code> 선언하기</h3>\n<p>TypeScript는 함수 안에서의 <code>this</code>가 무엇이 되어야 할지, 아래의 예시처럼 코드 흐름 분석을 통해서 추론합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: {&#10;    id: number;&#10;    admin: boolean;&#10;    becomeAdmin: () => void;&#10;}' >user</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">,</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) admin: boolean' >admin</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) becomeAdmin: () => void' >becomeAdmin</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) admin: boolean' >admin</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBArhApgJxgXhgbwLACgYwCWAJgFwwCMATAMwA0eeBAhsQLaFjkBmzANkgb4YAI0Sg2iAILtOPOGGBRC4GAAoAlFiYEYUABaEIAOlYcw6PcjiIA3DoC+Qh7aA'>Try</a></div></pre>\n<p>TypeScript는 함수 <code>user.becomeAdmin</code>이 외부 객체 <code>user</code>에 상응하는 <code>this</code>를 가지고 있다고 이해합니다. 보통 이걸로 충분할 수 있습니다만, 여러분들은 <code>this</code>객체가 표현하는 것에 대해서 더 많은 통제가 필요한 경우가 많을 겁니다. JavaScript 명세에서는 <code>this</code>라는 이름의 매개변수를 가질 수 없다고 나와 있기에, TypeScript는 해당 문법 공간을 함수 본문에서 <code>this</code>의 타입을 정의하는 데 사용하도록 허락해 줍니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface DB' >DB</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filter: (this: User) => boolean' >filter</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const getDB: () => DB' >getDB</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const admins: User[]' >admins</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) User.admin: boolean' >admin</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdrIN4FgBQyywAJgFzIgCuAtgEbQDcBRcJNoFdA9twDYQ4IZvgC+BEhAR84UFAm4h0YZAHMIYACIAhCgAoAlMgC8APmQ6RAeivIAtA4RUwDuwVCRYiFDpwtkMMB8nhjQ6HqBwdD6YAAWwOgUoVBGZsg8-IIgBkmYUADaALoi4vgECkoqJHQmaho6hiIVyshsHEq11QB0kSF54TBUIAhgwIrIenEJudBGeITIcmBUUCDIU+hdbaAlBoxAA'>Try</a></div></pre>\n<p>이 패턴은 일반적으로 다른 객체가 함수를 호출할 때 제어하는 콜백 스타일 API에서 흔히 사용됩니다. 이런 효과를 얻기 위해서는 화살표 함수가 아닌 <code>function</code> 키워드를 사용해야 합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface DB' >DB</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) filter: (this: User) => boolean' >filter</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: User' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const getDB: () => DB' >getDB</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const admins: User[]' >admins</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const db: DB' >db</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) DB.filterUsers(filter: (this: User) => boolean): User[]' >filterUsers</data-lsp></span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >admin</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>The containing arrow function captures the global value of 'this'.</br>Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.</span><span class=\"code\">7041<br/>7017</span></span><span class=\"error-behind\">The containing arrow function captures the global value of 'this'.</br>Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYAsBGdGc0BYAKAEsA7AFxgDMBDAY0lAFVEZQBvU0UMgCaoKAVwC2AIxgBuXv0QBBAWMqoJcOABtI9CrJIBfUgMiNN9aC0ZwKiKqADmkKgBEAQqgAUASlABeAD5Qd30QUABaSMYRKkjw0koaaAZmYLduOVoyTST2GERPLJyYLyoACzIUNg5oX0DQdS0dCm9UPOgAbQBdfSMSUmtbewEJf0dndx99QbtQemVKRDGRgDoi3JqCn38g8sqV+ZUW6SA'>Try</a></div></pre>\n<h2 id=\"알아야-할-다른-타입\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85\" aria-label=\"알아야 할 다른 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알아야 할 다른 타입</h2>\n<p>함수 타입에 대해서 작업을 할 때, 자주 나타나는 몇 가지 추가 타입들이 더 있습니다.\r\n모든 타입처럼, 이 타입들을 어디서나 사용하실 수 있습니다만, 이 타입들은 특별히 함수라는 맥락에 관련이 깊습니다.</p>\n<h3 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code></h3>\n<p><code>void</code>는 값을 반환하지 않는 함수의 반환 값을 의미합니다.\r\n함수에 <code>return</code>문이 없거나, 명시적으로 값을 반환하지 않을 때, 추론되는 타입입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 추론된 반환 타입은 void 입니다.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function noop(): void' >noop</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEhTZwDDsHBbUDB7Aaa6QAwuFDxwAuOgG4HsCWAJqKoBNNgJ00B0AsAFABmArgHYDGALnjk6EzjgA4AKAJSgA3rVCgATgFM2DaUwDctAL5A'>Try</a></div></pre>\n<p>JavaScript에서는, 아무것도 반환하지 않는 함수는 암묵적으로 <code>undefined</code> 값을 반환합니다.\r\n하지만 TypeScript에서 <code>void</code>와 <code>undefined</code>는 같은 것으로 간주되지 않습니다.\r\n이 장의 끝에서 다 자세한 내용들을 다루도록 하겠습니다.</p>\n<blockquote>\n<p><code>void</code>는 <code>undefined</code>과 같지 않습니다.</p>\n</blockquote>\n<h3 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>object</code></h3>\n<p>특별한 타입 <code>object</code>는 원시 값(<code>string</code>, <code>number</code>, <code>bigint</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, <code>undefined</code>)이 아닌 모든 값을 지칭합니다.\r\n이것은 <em>빈 객체 타입</em> <code>{ }</code>와는 다르고, 전역 타입 <code>Object</code>와도 다릅니다.\r\n아마도 여러분은 <code>Object</code>를 사용할 일이 없을 것입니다.</p>\n<blockquote>\n<p><code>object</code>는 <code>Object</code>가 아닙니다.. <strong>항상</strong> <code>object</code>를 사용하십시오!</p>\n</blockquote>\n<p>JavaScript에서 함수 값은 객체입니다. 프로퍼티가 있고, 프로토타입 체인에 <code>Object.prototype</code>가 있고, <code>instanceof Object</code>이면서, <code>Object.keys</code>를 호출할 수 있고, 기타 등등이 있습니다.\r\n이러한 이유로, TypeScript에서 함수 타입은 <code>object</code>로 간주됩니다.</p>\n<h3 id=\"unknown\" style=\"position:relative;\"><a href=\"#unknown\" aria-label=\"unknown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code></h3>\n<p><code>unknown</code> 타입은 <em>모든 값</em>을 나타냅니다.\r\n<code>any</code> 타입과 유사합니다만, <code>unknown</code> 타입에 어떤 것을 대입하는 것이 유효하지 않기 때문에 더 안전합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f1(a: any): void' >f1</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f2(a: unknown): void' >f2</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: unknown' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: unknown' >a</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>'a' is of type 'unknown'.</span><span class=\"code\">18046</span></span><span class=\"error-behind\">'a' is of type 'unknown'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsBGAsAFABmArgHYDGALgJZxmhE4AUAhqq2QJ4CUoA3oVChWAOgBGzHgG5QIUAHkA0oQC+hUpVr1GaNqnIBrMnADuZPoILCxkmWqA'>Try</a></div></pre>\n<p>이는 <code>any</code> 형태의 값을 함수 본문에 사용하지 않고도, 아무 값이나 받는 함수를 표현할 수 있기 때문에, 함수 타입을 설명하는 데에 유용하게 쓰입니다.</p>\n<p>반대로, 여러분들은 unknown 타입의 값을 반환하는 함수를 표현할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function safeParse(s: string): unknown' >safeParse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var JSON: JSON' >JSON</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) JSON.parse(text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined): any' >parse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// &apos;obj&apos;를 사용할 때 조심해야 합니다!</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: unknown' >obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function safeParse(s: string): unknown' >safeParse</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const someRandomString: string' >someRandomString</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3mpBbEASlCsHgMoYwCWKA5gFzaU20DcAsAFAD038AtILABXDIP5cAZsJRgMVVNiiSQABVhoQACjSNM1OgEpGMgNYokAdxTwA3l3jw4GYTBsApMgHkAcgDoABw1tNEMOTgBfLi5eeAByJAAjACs4wB9O+EAagcBKscADVfhAGVb4QAcJwBuhwBdVwB9R+EBLVcAJpsATpoBCLmR0LCTk+ABeJRV1GE0dPEJiUlwKA1owoA'>Try</a></div></pre>\n<h3 id=\"never\" style=\"position:relative;\"><a href=\"#never\" aria-label=\"never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>never</code></h3>\n<p>어떤 함수는 <em>결코(never)</em> 값을 반환하지 않습니다</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fail(msg: string): never' >fail</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) msg: string' >msg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) msg: string' >msg</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAhjANgCgLYGcDmAXIrlAE4xj4CUxYApgG71mIDeAsAFCKJQAWZOAHdEDUQFEyQsjgLUA3NwC+QA'>Try</a></div></pre>\n<p><code>never</code> 타입은 결코 관측될 수 없는 값을 의미합니다.\r\n반환 타입에서는, 해당 함수가 예외를 발생시키거나, 프로그램 실행을 종료함을 의미합니다.</p>\n<p><code>never</code>은 TypeScript가 유니온에 아무것도 남아있지 않다고 판단했을 때 또한 나타납니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string | number): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do something</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do something else</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: never' >x</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// &apos;never&apos; 타입이 됨!</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMMAKAHgLkQZygJxjAHNEAfRMEAWwCMBTfASkQG8BYAKEURmEVRQAngAd6cfukQBeWYgBEeQiXksO3HogD0WxABM4uONXpQAFkWJceAX0T0ANjnq9+g0eMky58qnUaqbNaaOvqGOMamFiT2TvTBdo7OQRo86ADc2roA5GD0AG6M2YiAAwuAoeOALuOIgBQtAIQJXDZAA'>Try</a></div></pre>\n<h3 id=\"function\" style=\"position:relative;\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Function</code></h3>\n<p>전역 타입 <code>Function</code>은 <code>bind</code>, <code>call</code>, <code>apply</code> 그리고 JavaScript 함수 값에 있는 다른 프로퍼티를 설명하는 데에 사용됩니다.\r\n또한 여기에는 <code>Function</code>타입의 값은 언제나 호출될 수 있다는 값을 가지며, 이러한 호출은 <code>any</code>를 반환합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(f: Function): any' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: Function' >f</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Function' >Function</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: Function' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFMAFyIBi408YAlIgN4CwAUIogE64jdJgJAIwAaRACZxAZgYBuDgF8gA'>Try</a></div></pre>\n<p>이는 <em>타입되지 않은 함수 호출</em> 이며, 안전하지 않은 <code>any</code> 타입을 반환하기에 일반적으로 피하는 것이 가장 좋습니다.</p>\n<p>만약 여러분이 임의의 함수를 허용해야 하지만, 호출할 생각이 없다면 <code>() => void</code> 타입이 일반적으로 더 안전합니다.</p>\n<h2 id=\"나머지-매개변수와-인수\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-%EC%9D%B8%EC%88%98\" aria-label=\"나머지 매개변수와 인수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지 매개변수와 인수</h2>\n<blockquote class='bg-reading'>\r\n   <p>배경지식 읽기:<br />\r\n   <a href='https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters'>나머지 매개변수(Rest Parameter)</a><br/>\r\n   <a href='https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax'>전개 구문(Spread Syntax)</a><br/>\r\n   </p>\r\n</blockquote>\n<h3 id=\"나머지-매개변수rest-parameter\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98rest-parameter\" aria-label=\"나머지 매개변수rest parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지 매개변수(Rest Parameter)</h3>\n<p>선택적 매개변수와 오버로드를 사용하여 다양한 정해진 인수들을 받아들일 수 있지만, 우리는 <em>정해지지 않은</em> 수의 인수를 받아들이는 함수를 <em>나머지 매개변수</em>를 이용하여 정의할 수 있습니다.</p>\n<p>나머지 매개변수는 다른 모든 매개변수 뒤에 나타나며, <code>...</code> 구문을 사용합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function multiply(n: number, ...m: number[]): number[]' >multiply</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number[]' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) m: number[]' >m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.map&lt;number>(callbackfn: (value: number, index: number, array: number[]) => number, thisArg?: any): number[]' >map</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// &apos;a&apos; gets value [10, 20, 30, 40]</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number[]' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function multiply(n: number, ...m: number[]): number[]' >multiply</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWxAG1gBzQTwBRgBciYIyARgKYBOANIgHRPLGkU0DaAugJSIDeAWABQiRNUpQQ1JMgbIAhpjx4AHnwC8APhKIAVInUBuEQF8RAeguIA5ApuIA5pIDOiAG4K0ISog4BGAAZ6ACZgxABmcIAWQK4RCAQXKEQFRA0UdCxcPCD6f1D6CPponiMgA'>Try</a></div></pre>\n<p>TypeScript에서는, 이러한 매개변수에 대한 타입 표기는 암묵적으로 <code>any</code>가 아닌 <code>any[]</code>를 사용하며, 타입 표현식은 <code>Array&#x3C;T></code> 또는 <code>T[]</code> 또는 튜플 타입(나중에 배울 것입니다)으로 표현해야 합니다.</p>\n<h3 id=\"나머지-인수rest-argument\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9D%B8%EC%88%98rest-argument\" aria-label=\"나머지 인수rest argument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지 인수(Rest Argument)</h3>\n<p>반대로 우리는 전개 구문을 사용하여 배열에서 제공되는 인수의 개수를 <em>제공</em>할 수 있습니다.\r\n예를 들어, 배열의 <code>push</code> 메서드는 인수를 몇 개든 받을 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr1: number[]' >arr1</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const arr2: number[]' >arr2</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const arr1: number[]' >arr1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const arr2: number[]' >arr2</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAhgJwQRhgXhgbWQGhgJjwGYBdAbgFgAoUSWRBfdLAFjwFY8A2c6h5AHQAHAK4QAFgAoBMhvgCUZIA'>Try</a></div></pre>\n<p>일반적으로 TypeScript는 배열이 불변하다고 간주하지 않습니다.\r\n이로 인해 다음과 같은 놀라운 동작이 발생할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 추론된 타입은 0개 이상의 숫자를 가지는 배열인 number[]</span></div><div class='line'><span style=\"color: #008000\">// 명시적으로 2개의 숫자를 가지는 배열로 간주되지 않습니다</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const args: number[]' >args</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const angle: number' >angle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.atan2(y: number, x: number): number' >atan2</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const args: number[]' >args</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>A spread argument must either have a tuple type or be passed to a rest parameter.</span><span class=\"code\">2556</span></span><span class=\"error-behind\">A spread argument must either have a tuple type or be passed to a rest parameter.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMDYCwAoEUQFNnADDsBwW0QAYXBQ8cAFx0ABkBwa0QF3HBBgcA1x0QaiHAE8cA+naEAANYAHJwClNoQAw9gF9HAHuOgAdgFcAtgCMYAbQC6BIoFCuwDtDgQAnAPOOAdDvTMeA4eKlzrgEBrAPxOAMFrGhAUqOBWocAJpsATpoIAYzglRAAXUABDaABzRFAAXlBtAA4AGlAMXQBuMIjouKUEgBtIVNAAWViogAsAOnrYpTQACibu+KSASnygA'>Try</a></div></pre>\n<p>이러한 상황의 최선의 해결책은 코드에 따라서 다르지만, 일반적으로 <code>const</code> 콘텍스트가 가장 간단한 해결책입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 길이가 2인 튜플로 추론됨</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const args: readonly [8, 5]' >args</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">8</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = readonly [8, 5]' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const angle: number' >angle</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.atan2(y: number, x: number): number' >atan2</data-lsp></span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\"><data-lsp lsp='const args: readonly [8, 5]' >args</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEg46wXccABrQJkB7jpA5S4GFXA6HaQKbOAMOwFC0CwAUAMYD2AdgM4AuoAhgE4DmVoAvKANoAcANKACsAXQZty1GgG5iIUAHkA0sQm0GFZgBsAph1ABZejQAWAOiP0KcABSm7TVgEopQA'>Try</a></div></pre>\n<p>나머지 인수를 사용하는 것은 오래된 런타임을 대상으로 할 때, <a href=\"/tsconfig#downlevelIteration\"><code>downlevelIteration</code></a>을 필요로 할 수 있습니다.</p>\n<!-- TODO link to downlevel iteration -->\n<h2 id=\"매개변수-구조-분해parameter-destructing\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4parameter-destructing\" aria-label=\"매개변수 구조 분해parameter destructing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 구조 분해(Parameter Destructing)</h2>\n<blockquote class='bg-reading'>\r\n   <p>배경지식 읽기:<br />\r\n   <a href='https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment'>구조분해 할당</a><br/>\r\n   </p>\r\n</blockquote>\n<p>매개변수 분해를 사용하여 인수로 제공된 객체를 함수 본문에서 하나 이상의 지역 변수로 편리하게 언팩 할 수 있습니다.\r\nJavaScript에서는 아래의 형태처럼 생겼습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">sum</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\"> });</span></div></code></div></pre>\n<p>객체를 위한 타입 표기는 분해 구문 뒤에 위치하게 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum({ a, b, c }: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}): void' >sum</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\"> }: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) c: number' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAZxAWwBQG9EEMA0iARoRIgL4BciOu1Y6RApgE4Dcx9jrHEXazFhQCUNALAAoRIggJkcADZMAdArgBzDLkQBqYrpnC2k8kA'>Try</a></div></pre>\n<p>약간 장황하게 느껴질 수 있지만, 여기에서도 이름 붙은 타입을 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 이전 예제와 동일</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ABC = {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}' >ABC</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) c: number' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum({ a, b, c }: ABC): void' >sum</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\"><data-lsp lsp='type ABC = {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;}' >ABC</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: number' >c</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEhdxwQCdQIMcHAnACY6Qm82B9xgsAKAC4E8AOApqAIIBCAwqALygDeoAhgFygB2ArgLYBGhATgG5QPVp14DhAYzHc+-UAF9BWAGYc2U7AEsA9m1ABnbgAoGjADQirUpa3IUAlPSyhQU-Yd0AbQgDpvXQBzE0ZQAGoRCPdHFUxFIA'>Try</a></div></pre>\n<h2 id=\"함수의-할당가능성\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%ED%95%A0%EB%8B%B9%EA%B0%80%EB%8A%A5%EC%84%B1\" aria-label=\"함수의 할당가능성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 할당가능성</h2>\n<h3 id=\"void-반환-타입\" style=\"position:relative;\"><a href=\"#void-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85\" aria-label=\"void 반환 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>void</code> 반환 타입</h3>\n<p>함수의 <code>void</code> 반환 타입은 몇몇 일반적이지는 않지만 예측할 수 있는 동작을 발생시킬 수 있습니다.</p>\n<p><code>void</code> 반환 타입으로의 문맥적 타이핑은 함수를 아무것도 반환하지 <strong>않도록</strong> 강제하지 <strong>않습니다</strong>.이를 설명하는 또 다른 방법은, <code>void</code> 반환 타입을 가지는 문맥적 함수 타입(<code>type vf = () => void</code>)가 구현되었을 때, <em>아무값</em>이나 반환될 수 있지만, 무시됩니다.</p>\n<p>그러므로 후술할 타입 <code>() => void</code>의 구현들은 모두 유효합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f1: voidFunc' >f1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f2: voidFunc' >f2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: voidFunc' >f3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type voidFunc = () => void' >voidFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAbg9gSwCYDECuA7AxlAvFACgEo8A+WRJAbgFgAoerODAZ2CgDMBGALguXTY8hErnIBvelCgAnCMDQyMUYDLQRadAL6bGzNpwBMfeAMw58xMirUb6e1uw4BmE5UEXO54AmYioknTScgpKNuqaOkA'>Try</a></div></pre>\n<p>그리고 이러한 함수의 반환값이 다른 변수에 할당될 때, 이들은 여전히 <code>void</code>타입을 유지할 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v1: void' >v1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f1: () => void' >f1</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v2: void' >v2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f2: () => void' >f2</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const v3: void' >v3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: () => void' >f3</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAbg9gSwCYDECuA7AxlAvFACgEo8A+WRJAbgFgAoerODAZ2CgDMBGALguXTY8hErnIBvelCgAnCMDQyMUYDLQRadAL6bGzNpwBMfeAMw58xMirUb6e1uw4BmE5UEXO54AmYioknTScgpKNuqaOvQA9NFQALSJWGjAifEOBjBcwtzEunRMjrCGOYZ59gX67DDOOc55QA'>Try</a></div></pre>\n<p>이러한 동작이 존재하기에, <code>Array.prototype.push</code>가 number를 반환하고, <code>Array.prototype.forEach</code> 메서드가 <code>void</code> 반환 타입을 가지는 함수를 예상함에도 다음 코드는 유효할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const src: number[]' >src</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const dst: number[]' >dst</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const src: number[]' >src</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.forEach(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) el: number' >el</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const dst: number[]' >dst</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) el: number' >el</data-lsp></span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBBBOwYF4YG0CMAaGAmHAzALoDcAsAFCiSwAm0K6ADKZZQsAHQBmI8AogENgACwAUYgKYAbAJQoAfDHpROABwCuEcTNmySQA'>Try</a></div></pre>\n<p>유의해야 할 한 가지 다른 경우가 있습니다. 리터럴 함수 정의가 <code>void</code> 반환 값을 가지고 있다면, 그 함수는 어떠한 것도 반환해서는 <strong>안됩니다</strong>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f2(): void' >f2</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const f3: () => void' >f3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMATACgJQC5EDc4wAmiA3gLABQiiA9DYgAJQDOAtAKYAeADu9BwCcBcAZWoD2UEAKRQBIdgG5KAX0qUICZlGQBmRAF5k4aPCSYc+IqTG16TNl1792QkbYlSZiOQuUUVRSA'>Try</a></div></pre>\n<p><code>void</code>에 대한 더 많은 내용은 다음 문서 항목을 참조해 주십시오.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#void\">v1 handbook</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#void\">v2 handbook</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-returning-non-void-assignable-to-function-returning-void\">FAQ - “Why are functions returning non-void assignable to function returning void?”</a></li>\n</ul>","headings":[{"value":"함수 타입 표현식","depth":2},{"value":"호출 시그니처","depth":2},{"value":"구성 시그니처","depth":2},{"value":"제네릭 함수","depth":2},{"value":"추론(Inference)","depth":3},{"value":"타입 제한 조건","depth":3},{"value":"제한된 값으로 작업하기","depth":3},{"value":"타입 인수를 명시하기","depth":3},{"value":"좋은 제네릭 함수를 작성하기 위한 가이드라인","depth":3},{"value":"타입 매개변수를 누르기","depth":4},{"value":"더 적은 타입 매개변수를 사용하기","depth":4},{"value":"타입 매개변수는 두 번 나타나야 합니다.","depth":4},{"value":"선택적 매개변수","depth":2},{"value":"콜백 함수에서의 선택적 매개변수","depth":3},{"value":"함수 오버로드","depth":2},{"value":"오버로드 시그니처와 구현 시그니처","depth":3},{"value":"좋은 오버로드 작성하기","depth":3},{"value":"함수 내에서 this 선언하기","depth":3},{"value":"알아야 할 다른 타입","depth":2},{"value":"void","depth":3},{"value":"object","depth":3},{"value":"unknown","depth":3},{"value":"never","depth":3},{"value":"Function","depth":3},{"value":"나머지 매개변수와 인수","depth":2},{"value":"나머지 매개변수(Rest Parameter)","depth":3},{"value":"나머지 인수(Rest Argument)","depth":3},{"value":"매개변수 구조 분해(Parameter Destructing)","depth":2},{"value":"함수의 할당가능성","depth":2},{"value":"void 반환 타입","depth":3}],"frontmatter":{"permalink":"/ko/docs/handbook/2/functions.html","title":"More on Functions","disable_toc":null,"handbook":null,"oneline":"TypeScript에서 함수가 어떻게 동작하는지 알아봅시다.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Narrowing","oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","permalink":"/docs/handbook/2/narrowing.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Object Types","oneline":"How TypeScript describes the shapes of JavaScript objects.","permalink":"/docs/handbook/2/objects.html"}}}},"pageContext":{"id":"1-more-on-functions","slug":"/ko/docs/handbook/2/functions.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/More on Functions.md","previousID":"02637503-46d1-5d11-b2cc-807fa5837668","nextID":"cccf765e-760f-55c1-97d5-a1114863bbd7","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}