{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/conditional-types.html","result":{"data":{"markdownRemark":{"id":"4a825178-42d2-5091-ae7b-548949ddeda3","excerpt":"대부분 유용한 프로그램의 핵심은, 입력에 따라 출력이 결정되어야 한다는 것입니다.\nJavaScript…","html":"<p>대부분 유용한 프로그램의 핵심은, 입력에 따라 출력이 결정되어야 한다는 것입니다.\nJavaScript 프로그램도 크게 다르진 않지만, 값의 타입을 쉽게 검사할 수 있다는 사실을 고려할 때, 출력에 대한 결정은 또한 입력의 타입에도 기반합니다.\n<em>조건부 타입</em> 은 입력과 출력 타입간의 관계를 설명하는 데 도움을 줄 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.live(): void' >live</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.woof(): void' >woof</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example1 = number' style='border-bottom: solid 2px lightgrey;'>Example1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example1 = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example2 = string' style='border-bottom: solid 2px lightgrey;'>Example2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example2 = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFAFFJcTKZwQAjMgC8yEeKkz5irLmQB+ZBAAV0wAI2hkBjkwKFBRTgB6RJJkAD1-QiMzS2tbewAmF2QAJQhRK1MJaQhZBXRfPECQ8Mjo2PiklJIMoA'>Try</a></div></pre>\n<p>조건부 타입은 JavaScript에 있는 삼항 연산자 조건문 (<code>condition ? trueExpression : falseExpression</code>) 같은 형태를 가집니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type SomeType = any' >SomeType</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='type OtherType = any' >OtherType</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\"><data-lsp lsp='type TrueType = any' >TrueType</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='type FalseType = any' >FalseType</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA'>Try</a></div></pre>\n<p><code>extends</code>를 기준으로 왼쪽에 있는 타입이 오른쪽 타입에 할당할 수 있다면 첫 번째 분기(“참”값 분기)를, 그렇지 않다면 뒤의 분기(“거짓”값 분기)를 얻게 됩니다.</p>\n<p><code>Dog extends Animal</code> 에 따라 <code>number</code>나 <code>string</code>인지 알려주는 것 말곤, 위의 예제에서 조건부 타입은 그다지 유용해 보이지 않습니다!\n하지만 제네릭과 함께 사용될 때 조건부 타입은 강력한 힘을 갖습니다.</p>\n<p>예를 들어, 다음 <code>createLabel</code> 함수를 살펴보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) IdLabel.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* some fields */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NameLabel.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* other fields */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(name: string): NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbJIw6IBGGA8QyBFAg4SA0CAApKGnomaABKGgwQ-Ck3Dy8fPwCgiETQ3X4DI1M45FV1XAJk909vX39A4PL8XL0AeSgMAuMQMwAfWkZmYoTG5D7S7MbK1JqM+onNZv42ju5C7tH+6KghrBGxvUTiMmRrKB4Ad2QAIndgBgAHfAh+cAh0K+cgA'>Try</a></div></pre>\n<p>createLabel의 오버로드들은 입력 타입에 따른 단일 JavaScript 함수를 나타냅니다. 다음을 주목하세요.</p>\n<ol>\n<li>만약 라이브러리가 매번 API 전체에서 비슷한 종류의 함수를 만들어야 한다면 번거로워집니다.</li>\n<li>우린 3가지 오버로드 즉, 각 케이스별로 <em>확실한</em> 타입을 가지거나 (각각 <code>number</code>와 <code>string</code>) 그리고 일반적인 케이스(<code>string | number</code>) 가져야 합니다. <code>createLabel</code>의 새로운 타입을 다루기 위해선 오버로드의 수는 기하급수적으로 증가합니다.</li>\n</ol>\n<p>대신에 조건부 타입으로 로직을 인코딩할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbNatkAWk8I6YT+5JgAJ4ADip6APJQGAA8ACrIEAAekCAitIzMyAA+3EamAHzIALzI8UkpafRM0GTIAPxoWLgEtTSq6s34EkA'>Try</a></div></pre>\n<p>조건부 타입을 사용하면 단일 함수까지 오버로드 없이 단순화 시킬 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >createLabel</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idOrName: T extends string | number' >idOrName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: NameLabel' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"typescript\">(idOrName: \"typescript\"): NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let a: NameLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let b: IdLabel' style='border-bottom: solid 2px lightgrey;'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;2.8>(idOrName: 2.8): IdLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2.8</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let b: IdLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let c: IdLabel | NameLabel' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"hello\" | 42>(idOrName: \"hello\" | 42): IdLabel | NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>let c: NameLabel | IdLabel</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMgM4D2DKMYAXRdk7VgG4SAXxKhIsRCgBycftjyFS5EGog0uYKKADmbTjzAALaMkHDR4qbLABPAA4q9AeSgYAPAAqyBAAHpAgIrSMzMgAPtxGpgB8yAC8yMFhEVH0TNBkyAD8aFi4BIU0qurl+FKsrMgAtC0IdGAtTSQwdCAIYMA8IMgIUBBwkBoEQSHhEJGiebEJhsYgJskAFJS+1fqZAJRVPn7oQanayNZQPADuyABEvcAM7vgQ-OAQ6A-OJCTvMDIODpEZjCYQKb4TYPNyeLijYDuMAPA71RrIAB6RX+gOQOFBo3Gk1qmwATAA6AAcaJIDXI2NxECBCEJ4JJmk2AFkJlYKVA4JE+JsDsVHjZ8PgeA9kDQACxk2n0rFFIA'>Try</a></div></pre>\n<h3 id=\"조건부-타입으로-제한하기\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\" aria-label=\"조건부 타입으로 제한하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 타입으로 제한하기</h3>\n<p>종종, 조건부 타입의 검사에서 새로운 정보를 얻을 수 있습니다.\n타입 가드가 더 구체적인 타입으로 좁혀주듯이, 조건부 타입의 “참”값 분기는 대조하는 타입에 따라서 제네릭을 더 제한할 수 있습니다.</p>\n<p>다음 예를 살펴보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type '\"message\"' cannot be used to index type 'T'.</span><span class=\"code\">2536</span></span><span class=\"error-behind\">Type '\"message\"' cannot be used to index type 'T'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA'>Try</a></div></pre>\n<p>위 예제에서, <code>T</code>가 <code>message</code> 프로퍼티를 가지고 있는지 알 수 없기 때문에 TypeScript에서 오류가 발생합니다.\n<code>T</code>의 타입을 제한해서 TypeScript가 더이상 오류를 내지 않도록 만들 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> }&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1CtoSFAtW1nCKaADCPHpkwFSSwUwYOAE2IpoA9KkOUAB6APxAA'>Try</a></div></pre>\n<p>하지만 <code>MessageOf</code> 가 아무 타입이나 받을 수 있고, <code>message</code> 프로퍼티가 없으면 <code>never</code> 타입으로 결정하도록 만들 수 있을까요?\n여기서 제약 조건을 외부로 옮기고, 조건부 타입을 적용하면 가능합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): void' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DogMessageContents = never' style='border-bottom: solid 2px lightgrey;'>DogMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type DogMessageContents = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA'>Try</a></div></pre>\n<p>“참”값 분기내에서는 TypeScript는 <code>T</code>가 <code>message</code> 프로퍼티를 가지고 <em>있을 것을</em> 알 수 있습니다.</p>\n<p>또 다른 예제에서 배열 타입이면 배열의 개별 요소 타입으로 평탄화 시키지만, 배열 타입이 아니면 그대로 유지하는 <code>Flatten</code> 타입을 만들 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Extracts out the element type.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Leaves the type alone.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAaAey7AowABbQIcCDzS7QkAHSTL0AMrBB+WImRp0VJwEtUAc2ZsKTkoUIA9VmkQgBkIBAA3CBoDaDtaOE1UCBs0gDleF3gkcnRufiEg2Xlw1iA'>Try</a></div></pre>\n<p><code>Flatten</code>에 배열 타입이 주어지면, <code>number</code>를 사용한 인덱스 접근을 통해 <code>string[]</code>의 요소 타입을 가져올 수 있습니다.\n그렇지 않으면, 주어진 타입을 반환합니다.</p>\n<h3 id=\"조건부-타입-내에서-추론하기\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85-%EB%82%B4%EC%97%90%EC%84%9C-%EC%B6%94%EB%A1%A0%ED%95%98%EA%B8%B0\" aria-label=\"조건부 타입 내에서 추론하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 타입 내에서 추론하기</h3>\n<p>위에서 제약 조건을 가진 조건부 타입을 이용해서 타입을 추출할 수 있다는 점을 살펴봤습니다.\n이 부분은 조건부 타입을 더 쉽게 만드는 평범한 작업이 됩니다.</p>\n<p>조건부 타입은 <code>infer</code> 키워드를 사용해서 “참”값 분기에서 비교하는 타입을 추론할 수 있습니다.\n예를 들어, <code>Flatten</code>에서 인덱싱된 접근 타입으로 “직접” 추출하지 않고 요소 타입을 추론할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;Type> = Type extends (infer Item)[] ? Item : Type' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFXBAfFAXim0iggA8VUATAZygEEAnJhEdAS1QDMImoAkigC2+APyCRUAFzEcAbiA'>Try</a></div></pre>\n<p>여기 “참”값 분기에서 <code>T</code>의 요소 타입을 어떻게 제시할 필요 없이, <code>infer</code> 키워드를 새 제네릭 타입 변수 <code>Item</code>에 선언적으로 사용했습니다.\n이 방식은 관심 있는 타입의 구조를 깊게 분석하지 않아도 되도록 만들어줍니다.</p>\n<p><code>infer</code> 키워드를 사용해서 유용한 헬퍼 타입 별칭을 사용할 수 있습니다.\n예를 들어 함수 타입에서 리턴 타입을 추출하는 간단한 케이스를 살펴보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: never[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Bools = boolean[]' style='border-bottom: solid 2px lightgrey;'>Bools</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: boolean' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: boolean' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Bools = boolean[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAebkAfFALxQHQQAewE6AJgM5QAUAdBwIaoDmjAXFHQQAbhFQBtALoBKUsQCW6AGbioSYGnQAoKFAD86lBl1RBwsagDc27aEhQAcsgC2pWPA1aKuFnJLE6K4ARuKENgD0EXpQAHr6tvbQAMrAqO5wiMZYOL5UgoxpSjz+xIWoxeHaUTHxiThQAEIA9s0ANsxkmV4YPiycgsGtbRCc6AA0UMGDw6PopVOzY9JVNXrxQA'>Try</a></div></pre>\n<p>여러 호출 시그니처 (오버로트 함수 타입 같이)를 가진 타입을 추론할 때, <em>마지막</em> 시그니처 (아마, 모든 케이스에 허용되는)로 추론하게 됩니다. 인자 타입의 목록에 기반해서 오버로드들을 처리할 수는 없습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: number): string (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string | number): string | number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string | number' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGcMYtUBzAeRgDlkBbACgA8AuQ40sgSjdXoCMQMANwAoUJFgIU6bHnYlyVWo1bw+dQTB4LOYidDhI0mXPiKLKNeszYXO8AD7qBQnffJOXmoWNEYATwAHBAAVAEZ4AF54ACUQDGQYVFDgkAAeQJCcRF0lazoAPjEAehL4CoA9AH4gA'>Try</a></div></pre>\n<h2 id=\"분산적인-조건부-타입\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%82%B0%EC%A0%81%EC%9D%B8-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85\" aria-label=\"분산적인 조건부 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분산적인 조건부 타입</h2>\n<p>제네릭 타입 위에서 조건부 타입은 유니언 타입을 만나면 <em>분산적으로</em> 동작합니다.\n예를 들어 다음을 보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcQA'>Try</a></div></pre>\n<p><code>ToArray</code>에 유니언 타입을 넘기면 조건부 타입은 유니언의 각 멤버에 적용됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = string[] | number[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = string[] | number[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKEmhIUAMrAkyJAHkkAOQCuAWxWFYiFOgx0lASyoBzKAB9BugEZjcUgPRuoXgHqsgA'>Try</a></div></pre>\n<p><code>StrArrOrNumArr</code>이 동작하는 방식은 다음과 같습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmUAHyjdcAIwjwA3EA'>Try</a></div></pre>\n<p>유니언의 각 멤버 타입은 효율적으로 매핑됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKFCQoAZWBJkSAPJIAcgFcAtssKSoUAPRGoAWgsBjTcAtmDsRCnQY6igJZUA5vgA+j5RcqHQAjMVxxIA'>Try</a></div></pre>\n<p>그리고 다음과 같이 결과가 나옵니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">[];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmA2gF0oAHyjdcAIwjwhAbiA'>Try</a></div></pre>\n<p>일반적으로 분산성이 원하는 동작입니다. 이러한 동작을 방지하려면 <code>extends</code>키워드의 양 옆을 대괄호로 감싸면 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// &apos;StrArrOrNumArr&apos; is no longer a union.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = (string | number)[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = (string | number)[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgHJwHYBECWAzsADwzgQB8UAvFANrmQC6UEAHsBNgCaEOpsIVgH5YFeqwBcUbBABuEJAG4AUKoD0GqAHIAysCTIkAeSQYArgFtjOqEVlwoAGxwBzJVFRQL2fDgA6VVBIKAMjFDNLGxRaWEQUdCw8IlJiJHxsNygAH1lrACMlSjUtKHKAPREgA'>Try</a></div></pre>","headings":[{"value":"조건부 타입으로 제한하기","depth":3},{"value":"조건부 타입 내에서 추론하기","depth":3},{"value":"분산적인 조건부 타입","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/2/conditional-types.html","title":"Conditional Types","disable_toc":null,"handbook":null,"oneline":"타입 시스템에서 if문 처럼 동작하는 타입 생성하기.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Type['a'] 구문을 사용해서 타입의 내부 요소에 접근하기","permalink":"/ko/docs/handbook/2/indexed-access-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Mapped Types","oneline":"이미 존재하는 타입을 재사용해서 타입을 생성하기","permalink":"/ko/docs/handbook/2/mapped-types.html"}}}},"pageContext":{"id":"1-conditional-types","slug":"/ko/docs/handbook/2/conditional-types.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/Type Manipulation/Conditional Types.md","previousID":"d77b8fef-1671-5fe7-863d-7a8ff24e386d","nextID":"7abc5634-fac7-50e1-ae42-bce1eb9a34c2","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}