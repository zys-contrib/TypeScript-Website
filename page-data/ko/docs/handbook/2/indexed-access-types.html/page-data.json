{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/indexed-access-types.html","result":{"data":{"markdownRemark":{"id":"6475728d-7ea1-5e17-8b61-96d6cdb0706d","excerpt":"타입의 특정 프로퍼티를 찾기 위해서 인덱싱된 접근 타입 을 사용할 수 있습니다. 인덱싱된 타입은 그 자체로도 타입이라서 유니언, keyof 혹은 타입 전체에 사용할 수 있습니다. 존재하지 않는 프로퍼티를 인덱싱하려고 하면 오류가 발생합니다. 또 다른 예로는 임의의 타입을 number…","html":"<p>타입의 특정 프로퍼티를 찾기 위해서 <em>인덱싱된 접근 타입</em> 을 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) alive: boolean' >alive</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' style='border-bottom: solid 2px lightgrey;'>Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Age = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUKEhQAgkUywEKVAG0ARIQi6AuvID0pqJYB6AfiA'>Try</a></div></pre>\n<p>인덱싱된 타입은 그 자체로도 타입이라서 유니언, <code>keyof</code> 혹은 타입 전체에 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I1 = string | number' style='border-bottom: solid 2px lightgrey;'>I1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I1 = string | number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I2 = string | number | boolean' style='border-bottom: solid 2px lightgrey;'>I2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I2 = string | number | boolean</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type AliveOrName = \"name\" | \"alive\"' >AliveOrName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"alive\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I3 = string | boolean' style='border-bottom: solid 2px lightgrey;'>I3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='type AliveOrName = \"name\" | \"alive\"' >AliveOrName</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type I3 = string | boolean</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUAHoFUALRqAxuWBqVc0JCgBJAIyZYCFKgDaAIkIQbUAD5QbqJg4C68pVD8A9AH45PXBoQwAmMzgkNCsAawgQZAAzc1jUb0VlAODQgwBBAWEAeXgAOQ8zO2KHZ1d3Zht5fXCAZmiLOKKhCDLK5izfXKA'>Try</a></div></pre>\n<p>존재하지 않는 프로퍼티를 인덱싱하려고 하면 오류가 발생합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type I1 = any' >I1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\"><data-err>&quot;alve&quot;</data-err></span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Property 'alve' does not exist on type 'Person'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'alve' does not exist on type 'Person'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAXATwAdJQAFGROAO1AF5QBvUAQwHNJUaBXAWwBGMANygarPl1CJ80AJY12o1gBs5ANykC4cFZFZ0AvsNwhQAWksBjHvkvmCJMgEkAjAwpVaAbQBEqzV8AXWEgA'>Try</a></div></pre>\n<p>또 다른 예로는 임의의 타입을 <code>number</code>로 인덱싱해서 배열 요소의 타입을 가져올 수 있습니다.\n<code>typeof</code>와 결합하면 편리하게 배열 리터럴의 요소 타입을 캡쳐할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">15</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">38</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>Person</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type Person = {\n    name: string;\n    age: number;\n}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' style='border-bottom: solid 2px lightgrey;'>Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const MyArray: {&#10;    name: string;&#10;    age: number;&#10;}[]' >MyArray</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">][</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Age = number</span></div><div class='line'><span style=\"color: #008000\">// Or</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age2 = number' style='border-bottom: solid 2px lightgrey;'>Age2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    name: string;&#10;    age: number;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Age2 = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAsgTwIICcUEMEwLwwNoBQMMA3jGOgLYCmAXDAERIA2AlsNQwDQzoDmdGAEYArDAC+XIqXJVBDAEIgARt14D6AJgDMEqcTIUa9BgFEAbpx79B2gBx6CAXQDcBAlAQAHajAAK1CgQ4Dgwnj4gAGbwyGiYeGAArpTKga4EAPQZxDAAegD8Ht6+SAKh4dRRMagYCAnJqShOeAw2DOlZOQWZ2QDyKEU+MKXUmqEBQeAtbR3ZxAVAA'>Try</a></div></pre>\n<p>인덱싱할 때 변수 참조를 위해 사용된 <code>const</code>는 사용할 수 없고, 오로지 타입만 사용 가능합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const key: \"age\"' >key</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = key' >Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-err><data-err><data-lsp lsp='type key = /*unresolved*/ any' >key</data-lsp></data-err></data-err></span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type 'key' cannot be used as an index type.</br>'key' refers to a value, but is being used as a type here. Did you mean 'typeof key'?</span><span class=\"code\">2538<br/>2749</span></span><span class=\"error-behind\">Type 'key' cannot be used as an index type.</br>'key' refers to a value, but is being used as a type here. Did you mean 'typeof key'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMAOdB2AFgE4AoAFwE8AHSUABRkTgDtQBeUAb1AEMBzSKhYBXALYAjGAG5QLXmKGhE5aAEsW-WbwA2agG5KJcODsi82AX2mkQoALSOAxiPKP7pJ6xWgA1pEoOUAAiAUhgmypaUABBQSDGJFYAbX9KAF1pIA'>Try</a></div></pre>\n<p>하지만, 비슷한 스타일의 리팩터로 타입 별칭을 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type key = \"age\"' >key</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"age\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Age = number' >Age</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Person = {&#10;    age: number;&#10;    name: string;&#10;    alive: boolean;&#10;}' >Person</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\"><data-lsp lsp='type key = \"age\"' >key</data-lsp></span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChBOBnA9gOygXigbygQwHMIAuKVAVwFsAjBAbjL0pKkWHgEtUCG8AbDgDcW1ZMj4Q86AL50AUAHoFUALRqAxuWBqVc0JCgBrCCExQARIQjn5+6AEEiZuEjQBtYyAC6dIA'>Try</a></div></pre>","headings":[],"frontmatter":{"permalink":"/ko/docs/handbook/2/indexed-access-types.html","title":"Indexed Access Types","disable_toc":null,"handbook":null,"oneline":"Type['a'] 구문을 사용해서 타입의 내부 요소에 접근하기","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Typeof Type Operator","oneline":"타입 컨텍스트에서 typeof 연산자 사용하기.","permalink":"/ko/docs/handbook/2/typeof-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Conditional Types","oneline":"타입 시스템에서 if문 처럼 동작하는 타입 생성하기.","permalink":"/ko/docs/handbook/2/conditional-types.html"}}}},"pageContext":{"id":"1-indexed-access-types","slug":"/ko/docs/handbook/2/indexed-access-types.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/Type Manipulation/Indexed Access Types.md","previousID":"6bbe87ed-33ce-5636-b323-6a7ef15e94fa","nextID":"06954cfe-e70e-5c9b-a26e-be8d38450d2d","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}