{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/generics.html","result":{"data":{"markdownRemark":{"id":"7f20206f-7b06-54a7-82e8-6eaac6fe635b","excerpt":"잘 정의되고 일관된 API뿐만 아닌 재사용 가능한 컴포넌트를 구축하는 것도 소프트웨어 엔지니어링에서의 주요한 부분입니다.\n현재의 데이터와 미래의 데이터 모두를 다룰 수 있는 컴포넌트는 거대한 소프트웨어 시스템을 구성하는 데 있어 가장 유연한 능력을 제공할 것입니다. C#과 Java…","html":"<p>잘 정의되고 일관된 API뿐만 아닌 재사용 가능한 컴포넌트를 구축하는 것도 소프트웨어 엔지니어링에서의 주요한 부분입니다.\n현재의 데이터와 미래의 데이터 모두를 다룰 수 있는 컴포넌트는 거대한 소프트웨어 시스템을 구성하는 데 있어 가장 유연한 능력을 제공할 것입니다.</p>\n<p>C#과 Java 같은 언어에서, 재사용 가능한 컴포넌트를 생성하는 도구상자의 주요 도구 중 하나는 제네릭입니다, 즉, 단일 타입이 아닌 다양한 타입에서 작동하는 컴포넌트를 작성할 수 있습니다.\n사용자는 제네릭을 통해 여러 타입의 컴포넌트나 자신만의 타입을 사용할 수 있습니다.</p>\n<h1 id=\"제네릭의-hello-world-hello-world-of-generics\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-hello-world-hello-world-of-generics\" aria-label=\"제네릭의 hello world hello world of generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭의 Hello World (Hello World of Generics)</h1>\n<p>먼저 제네릭의 “hello world”인 identity 함수를 해봅시다.\nidentity 함수는 인수로 무엇이 오던 그대로 반환하는 함수입니다.\n<code>echo</code> 명령과 비슷하게 생각할 수 있습니다.</p>\n<p>제네릭이 없다면, identity 함수에 특정 타입을 주어야 합니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity(arg: number): number' >identity</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: number' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAFAQwCcBzALkTBAFsAjNQgSnMtvsQG8AoRRQtKEISRFiAbk4BfIA'>Try</a></div></pre>\n<p>또는 <code>any</code> 타입을 사용하여 identity 함수를 기술할 수 있습니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity(arg: any): any' >identity</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAFAQwCcBzALkXzGwEpzLtEBvAKEUULShEKSOIG5mAXyA'>Try</a></div></pre>\n<p><code>any</code>를 쓰는 것은 함수의 <code>arg</code>가 어떤 타입이든 받을 수 있다는 점에서 제네릭이지만, 실제로 함수가 반환할 때 어떤 타입인지에 대한 정보는 잃게 됩니다.\n만약 number 타입을 넘긴다고 해도 any 타입이 반환된다는 정보만 얻을 뿐입니다.</p>\n<p>대신에 우리는 무엇이 반환되는지 표시하기 위해 인수의 타입을 캡처할 방법이 필요합니다.\n여기서는 값이 아닌 타입에 적용되는 <em>타입 변수</em> 를 사용할 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8AvkA'>Try</a></div></pre>\n<p>identity 함수에 <code>Type</code>라는 타입 변수를 추가했습니다.\n<code>Type</code>는 유저가 준 인수의 타입을 캡처하고 (예 - <code>number</code>), 이 정보를 나중에 사용할 수 있게 합니다.\n여기에서는 <code>Type</code>를 반환 타입으로 다시 사용합니다. 인수와 반환 타입이 같은 타입을 사용하고 있는 것을 확인할 수 있습니다.\n이를 통해 타입 정보를 함수의 한쪽에서 다른 한쪽으로 운반할 수 있게끔 합니다.</p>\n<p>이 버전의 identity 함수는 타입을 불문하고 동작하므로 제네릭이라 할 수 있습니다.\n<code>any</code>를 쓰는 것과는 다르게 인수와 반환 타입에 number를 사용한 첫 번째 <code>identity</code> 함수만큼 정확합니다. (즉, 어떤 정보도 잃지 않습니다)</p>\n<p>일단 제네릭 identity 함수를 작성하고 나면, 두 가지 방법 중 하나로 호출할 수 있습니다.\n첫 번째 방법은 함수에 타입 인수를 포함한 모든 인수를 전달하는 방법입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let output: string' style='border-bottom: solid 2px lightgrey;'>output</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;string>(arg: string): string' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #A31515\">\"myString\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 출력 타입은 &apos;string&apos;입니다.</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let output: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8AvjwD0cxAFoVEEFBVKeAGyGI46ousQBeZOkwwcuAM5RqMMLQoAiALbYAyvce0XLCUQFREAc2cBSDsRAAYXAUPHAAXHEAHI7BycE6MAJpsATpoA6eUV+AsQAPQB+IA'>Try</a></div></pre>\n<p>여기서 우리는 함수를 호출할 때의 인수 중 하나로써 <code>Type</code>를 <code>string</code>으로 명시해 주고 인수 주변에 <code>()</code> 대신 <code>&#x3C;></code>로 감싸주었습니다.</p>\n<p>두 번째 방법은 아마 가장 일반적인 방법입니다. 여기서는 <em>타입 인수 추론</em> 을 사용합니다 — 즉, 우리가 전달하는 인수에 따라서 컴파일러가 <code>Type</code>의 값을 자동으로 정하게 하는 것입니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let output: string' style='border-bottom: solid 2px lightgrey;'>output</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;\"myString\">(arg: \"myString\"): \"myString\"' >identity</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"myString\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 출력 타입은 &apos;string&apos;입니다.</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let output: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8AvjwD0cxAFoVEEFBVKeAGyGI46ousQBeZOkwwc5AEQBbbAGUo1GGFo2WExAsSAc2cBSDsRAAYXAUPHAAXHEAHIAZxc3WijQwAmmwBOmgDp5RX4cxAA9AH4gA'>Try</a></div></pre>\n<p>타입 인수를 꺾쇠괄호(<code>&#x3C;></code>)에 담아 명시적으로 전달해 주지 않은 것을 주목하세요; 컴파일러는 값인 <code>\"myString\"</code>를 보고 그것의 타입으로 <code>Type</code>를 정합니다.\n인수 추론은 코드를 간결하고 가독성 있게 하는 데 있어 유용하지만 더 복잡한 예제에서 컴파일러가 타입을 유추할 수 없는 경우엔 명시적인 타입 인수 전달이 필요할 수도 있습니다.</p>\n<h1 id=\"제네릭-타입-변수-작업-working-with-generic-type-variables\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85-%EB%B3%80%EC%88%98-%EC%9E%91%EC%97%85-working-with-generic-type-variables\" aria-label=\"제네릭 타입 변수 작업 working with generic type variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 타입 변수 작업 (Working with Generic Type Variables)</h1>\n<p>제네릭을 사용하기 시작하면, <code>identity</code>와 같은 제네릭 함수를 만들 때, 컴파일러가 함수 본문에 제네릭 타입화된 매개변수를 쓰도록 강요합니다.\n즉, 이 매개변수들은 실제로 <code>any</code> 나 모든 타입이 될 수 있는 것처럼 취급할 수 있게 됩니다.</p>\n<p>앞에서 본 <code>identity</code> 함수를 살펴보도록 합니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8AvkA'>Try</a></div></pre>\n<p>함수 호출 시마다 인수 <code>arg</code>의 길이를 로그에 찍으려면 어떻게 해야 합니까?\n아마 이것을 쓰고 싶을 겁니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Type>(arg: Type): Type' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >length</data-lsp></data-err></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 오류: Type에는 .length 가 없습니다.</span></div><span class=\"error\"><span>Property 'length' does not exist on type 'Type'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'length' does not exist on type 'Type'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQAbOAc0cuMYEkATSYq8gTwA8AFX4AHSAD4AFAENojVKIkBKJeMigA3rlChSNRHDqQAdA0ZyF5no3IALFQG5QIUIBIxwBqd6iYAXRwClNoDZsDqCAADWggGOjgK1DgBNNgCdNprqg0JDkhNC08oxOuAC+QA'>Try</a></div></pre>\n<p>이렇게 하면, 컴파일러는 <code>arg</code>의 멤버 <code>.length</code>를 사용하고 있다는 오류를 낼 것입니다만, 어떤 곳에서도 <code>arg</code>가 이 멤버가 있다는 것이 명시되어 있지 않습니다.\n이전에 이러한 변수 타입은 <code>any</code>나 모든 타입을 의미한다고 했던 것을 기억하십시오. 따라서 이 함수를 쓰고 있는 사용자는 <code>.length</code> 멤버가 없는 <code>number</code>를 대신 전달할 수도 있습니다</p>\n<p>실제로 이 함수가 <code>Type</code>가 아닌 <code>Type</code>의 배열에서 동작하도록 의도했다고 가정해봅시다. 배열로 사용하기 때문에 <code>.length</code> 멤버는 사용 가능합니다.\n다른 타입들의 배열을 만드는 것처럼 표현할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Type>(arg: Type[]): Type[]' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">[] {</span></div><div class='line highlight'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;Type>.length: number' >length</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 배열은 .length를 가지고 있습니다. 따라서 오류는 없습니다.</span></div><div class='line dim'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line dim'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGzgczTMaCSATAUzFigE8AeAFVIAcCA+ACgEMAnNALkWroG0BdAJRceBAYgDeAKESIICAM5xkBAHSo0LduqJooAC0EBuRAHpTiQAw9gF9HAAuOId2A4B9OxIAAawAOTgA5rEgCPHArUOAE02AJ02qiIAMrYA+7YA4g4iAJGOAGp2AKU2IgGOjQaEyiKwEUCCsSGxoRlIAvkA'>Try</a></div></pre>\n<p><code>loggingIdentity</code>의 타입을 “제너릭 함수 <code>loggingIdentity</code>는 타입 매개변수 <code>Type</code>와 <code>Type</code> 배열인 인수 <code>arg</code>를 취하고 <code>Type</code> 배열을 반환한다.”라고 읽을 수 있습니다.\n만약 우리가 number 배열을 넘기면 <code>Type</code>가 <code>number</code>에 바인딩 되므로 함수는 number 배열을 얻게 됩니다.\n전체 타입변수를 쓰는 것보다 하나의 타입으로써 제네릭 타입변수 <code>Type</code>를 사용하는 것은 굉장한 유연함을 제공합니다.</p>\n<p>위 예제를 이렇게도 대체할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Type>(arg: Array&lt;Type>): Array&lt;Type>' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type[]): Type[]' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line highlight'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Array&lt;Type>.length: number' >length</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 배열은 .length를 가지고 있습니다. 따라서 오류는 없습니다.</span></div><div class='line dim'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type[]' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line dim'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGzgczTMaCSATAUzFigE8AeAFVIAcCA+ACgEMAnNALkQEFXXmK1OvQCUXXv0G0GiAN4AoRIggIAznGQEAdKjQt2OomigALEQG5EAeiuJADD2AX0cAC44kPZTgH07EgABrAA5OADmsRACPHAVqHACabAE6atREAGVsAfdsAcQcRAEjHADU7AFKbEQDHR8KjFRFYCKBBWJDY0c3kAXyA'>Try</a></div></pre>\n<p>다른 언어들과 비슷한 이런 타입 스타일이 이미 익숙할 것입니다.\n다음 섹션에서는 어떻게 <code>Array&#x3C;T></code>와 같은 고유한 제네릭 타입을 만들 수 있는지에 대해 다루도록 하겠습니다.</p>\n<h1 id=\"제네릭-타입-generic-types\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85-generic-types\" aria-label=\"제네릭 타입 generic types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 타입 (Generic Types)</h1>\n<p>이전 섹션에서 우리는 타입을 초월한 제네릭 함수 <code>identity</code>를 만들었습니다.\n이번 섹션에서는 함수 자체의 타입과 제네릭 인터페이스를 만드는 방법에 대해 살펴보겠습니다.</p>\n<p>제네릭 함수의 타입은 함수 선언과 유사하게 타입 매개변수가 먼저 나열되는, 비-제네릭 함수의 타입과 비슷합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='let myIdentity: &lt;Type>(arg: Type) => Type' >myIdentity</data-lsp></span><span style=\"color: #000000\">: &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8Avjx4AbIYgC22AJLpMMHIwLEyVOu30tEAXlJN955JqzYJQA'>Try</a></div></pre>\n<p>또한 타입 변수의 수와 타입 변수가 사용되는 방식에 따라 타입의 제네릭 타입 매개변수에 다른 이름을 사용할 수도 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='let myIdentity: &lt;Input>(arg: Input) => Input' >myIdentity</data-lsp></span><span style=\"color: #000000\">: &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in &lt;Input>(arg: Input): Input' >Input</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Input' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in &lt;Input>(arg: Input): Input' >Input</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Input in &lt;Input>(arg: Input): Input' >Input</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8Avjx4AbIYgC22AJLpMMHI1xqwREFArjG+w1BaIAvKUTmjN5JqzYJQA'>Try</a></div></pre>\n<p>제네릭 타입을 객체 리터럴 타입의 함수 호출 시그니처로 작성할 수도 있습니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myIdentity: &lt;Type>(arg: Type) => Type' >myIdentity</data-lsp></span><span style=\"color: #000000\">: { &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABDAJgUzLKBPAPAFWwAc0A+ACgEMAnAcwC5FCSBKR5tRAbwChFFqaKCGpIatANw8Avjx4AbIYgC22AJLpMMHIy6ICxMlTrtDbJocTTEAXmSas2CUA'>Try</a></div></pre>\n<p>이것들로 첫 번째 제네릭 인터페이스를 작성할 수 있습니다.\n앞서 예제의 객체 리터럴을 인터페이스로 가져옵니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GenericIdentityFn' >GenericIdentityFn</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in &lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myIdentity: GenericIdentityFn' >myIdentity</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GenericIdentityFn' >GenericIdentityFn</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgOIRNYCCSATDMYMATwDERkBvAKGWQB4AVEgBwgD4AKOKAcwBcyFuwCUQkRADcNAL40aMAK4gERAPaVgBcMRLM2nHvwmHxww9TrIoEMEqiVefGfJoAbO8gC2JfIT0hdEwobH9dUgpkAF5kbQDSKSA'>Try</a></div></pre>\n<p>비슷한 예제에서, 제네릭 매개변수를 전체 인터페이스의 매개변수로 옮기고 싶을지도 모릅니다.\n이를 통해 제네릭 타입을 확인할 수 있습니다 (예 -  <code>Dictionary</code> 가 아닌 <code>Dictionary&#x3C;string></code>).\n이렇게 하면 인터페이스의 다른 모든 멤버가 타입 매개변수를 볼 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GenericIdentityFn&lt;Type>' >GenericIdentityFn</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in GenericIdentityFn&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in GenericIdentityFn&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in GenericIdentityFn&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in identity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myIdentity: GenericIdentityFn&lt;number>' >myIdentity</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GenericIdentityFn&lt;Type>' >GenericIdentityFn</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #001080\"><data-lsp lsp='function identity&lt;Type>(arg: Type): Type' >identity</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgOIRNYCCSATDMYMATwDEQAeAFRIAcIA+ZAbwChlkAKOKAcwBcyWgwCUQkRADcbAL5s2MAK4gERAPYhkwAuGIka9Jj34Sj44UdYdkUCGCVQtvPjPlsANveQBbEvkJ9IXRMKGwAvVIKShAlHwAjaGYAXm1dIlIpIA'>Try</a></div></pre>\n<p>예제에 아주 작은 변화가 있었습니다.\n제네릭 함수를 작성하는 것 대신 제네릭 타입의 일부인 비-제네릭 함수 시그니처를 가집니다.\n<code>GenericIdentityFn</code> 함수를 사용할 때, 시그니처가 사용할 것을 효과적으로 제한할 특정한 타입 인수가 필요합니다 (여기서는 <code>number</code>).\n타입 매개변수를 호출 시그니처에 바로 넣을 때와 인터페이스 자체에 넣을 때를 이해하는 것은 타입의 제네릭 부분을 설명하는 데 도움이 됩니다.</p>\n<p>제네릭 인터페이스 외에도 제네릭 클래스를 만들 수 있습니다.\n제네릭 열거형과 네임스페이스는 만들 수 없습니다.</p>\n<h1 id=\"제네릭-클래스-generic-classes\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-generic-classes\" aria-label=\"제네릭 클래스 generic classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 클래스 (Generic Classes)</h1>\n<p>제네릭 클래스와 제네릭 인터페이스는 형태가 비슷합니다.\n제네릭 클래스는 클래스 이름 뒤에 꺾쇠괄호(<code>&#x3C;></code>) 안쪽에 제네릭 타입 매개변수 목록을 가집니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class GenericNumber&lt;NumType>' >GenericNumber</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) NumType in GenericNumber&lt;NumType>' >NumType</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) GenericNumber&lt;NumType>.zeroValue: NumType' >zeroValue</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) NumType in GenericNumber&lt;NumType>' >NumType</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) GenericNumber&lt;NumType>.add: (x: NumType, y: NumType) => NumType' >add</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: NumType' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) NumType in GenericNumber&lt;NumType>' >NumType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: NumType' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) NumType in GenericNumber&lt;NumType>' >NumType</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) NumType in GenericNumber&lt;NumType>' >NumType</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myGenericNumber: GenericNumber&lt;number>' >myGenericNumber</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor GenericNumber&lt;number>(): GenericNumber&lt;number>' >GenericNumber</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myGenericNumber: GenericNumber&lt;number>' >myGenericNumber</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GenericNumber&lt;number>.zeroValue: number' >zeroValue</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let myGenericNumber: GenericNumber&lt;number>' >myGenericNumber</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) GenericNumber&lt;number>.add: (x: number, y: number) => number' >add</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgDieAdngogHICuAtgEZ0A8zLAKgJ4AHPAD5QAbwKhQALzoB7AGo4meNDwHCA3FNCYAJvrQAKAB7rWmvABpQ-C3yF4AlKAC8YjU50BfAgWw8aFAWfipaeh4OWHdQWgB3Sho6JCiualZokWNnHVDwlMZMugA6OVglFTxYgAY8sOTI4tgSg31Y9CZqZHh5alAzW35XSWlYIKZYftNQAGo7Xy0gA'>Try</a></div></pre>\n<p>이것은 <code>GenericNumber</code> 클래스의 문자 그대로 사용하지만 <code>number</code> 타입만 쓰도록 제한하는 것은 없습니다.\n대신 <code>string</code>이나 훨씬 복잡한 객체를 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let stringNumeric: GenericNumber&lt;string>' >stringNumeric</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor GenericNumber&lt;string>(): GenericNumber&lt;string>' >GenericNumber</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let stringNumeric: GenericNumber&lt;string>' >stringNumeric</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GenericNumber&lt;string>.zeroValue: string' >zeroValue</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let stringNumeric: GenericNumber&lt;string>' >stringNumeric</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) GenericNumber&lt;string>.add: (x: string, y: string) => string' >add</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: string' >y</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: string' >y</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let stringNumeric: GenericNumber&lt;string>' >stringNumeric</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) GenericNumber&lt;string>.add: (x: string, y: string) => string' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let stringNumeric: GenericNumber&lt;string>' >stringNumeric</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GenericNumber&lt;string>.zeroValue: string' >zeroValue</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"test\"</span><span style=\"color: #000000\">));</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgDieAdngogHICuAtgEZ0A8zLAKgJ4AHPAD5QAbwKhQALzoB7AGo4meNDwHCA3FNCYAJvrQAKAB7rWmvABpQ-C3yF4AlKAC8YjU50BfAiFAAWmDEJmhgwIJsPGhQGARqAHMeOiR3UFoAd0oaVMZWDlhOePgkkWNnHRKklPoAOjlYJRU8dIAiNqq4UuTWPLqDfXT0JmpkeHlqUDNbfldJaVgYplgp01AAajtfHSJJyHlouux5RONq3pZ+wfPumr76xubsVVs26DwYNudKoA'>Try</a></div></pre>\n<p>인터페이스와 마찬가지로 클래스 자체에 타입 매개변수를 넣으면 클래스의 모든 프로퍼티가 동일한 타입으로 동작하는 것을 확인할 수 있습니다.</p>\n<p><a href=\"./classes.md\">클래스</a>에서 다뤘던 것처럼 클래스는 두 가지 타입을 가집니다: 정적 측면과 인스턴스 측면.\n제네릭 클래스는 정적 측면이 아닌 인스턴스 측면에서만 제네릭이므로 클래스로 작업할 때 정적 멤버는 클래스의 타입 매개변수를 쓸 수 없습니다.</p>\n<h1 id=\"제네릭-제약조건-generic-constraints\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4-generic-constraints\" aria-label=\"제네릭 제약조건 generic constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 제약조건 (Generic Constraints)</h1>\n<p>앞쪽의 예제를 기억한다면 특정 타입들로만 동작하는 제네릭 함수를 만들고 싶을 수 있습니다.\n앞서 <code>loggingIdentity</code> 예제에서 <code>arg</code>의 프로퍼티 <code>.length</code>에 접근하기를 원했지만, 컴파일러는 모든 타입에서 <code>.length</code> 프로퍼티를 가짐을 증명할 수 없으므로 경고합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Type>(arg: Type): Type' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >length</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'length' does not exist on type 'Type'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'length' does not exist on type 'Type'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQAzAVwDsBjAFwEs5jQAbOAc0cuMYEkATSYq8gTwA8AFX4AHSAD4AFAENojVKIkBKJeMigA3rlChSNRHDqQAdA0ZyF5no3IALFQG5doaJHKFoteYxcBfIA'>Try</a></div></pre>\n<p>any와 모든 타입에서 동작하는 대신에, <code>.length</code> 프로퍼티가 있는 any와 모든 타입들에서 작동하는 것으로 제한하고 싶습니다.\n타입이 이 멤버가 있는 한 허용하지만, 최소한 <code>.length</code> 가 있어야 합니다.\n그렇게 하려면 <code>Type</code> 가 무엇이 될 수 있는지에 대한 제약 조건을 나열해야 합니다.</p>\n<p>이를 위해 우리의 제약조건이 명시하는 인터페이스를 만듭니다.\n여기 하나의 프로퍼티 <code>.length</code>를 가진 인터페이스를 생성하였고, 우리의 제약사항을 <code>extends</code> 키워드로 표현한 인터페이스를 이용해 명시합니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Lengthwise' >Lengthwise</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Lengthwise.length: number' >length</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Type extends Lengthwise>(arg: Type): Type' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type extends Lengthwise>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Lengthwise' >Lengthwise</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type extends Lengthwise' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type extends Lengthwise>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in loggingIdentity&lt;Type extends Lengthwise>(arg: Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type extends Lengthwise' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Lengthwise.length: number' >length</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Now we know it has a .length property, so no more error</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Type extends Lengthwise' >arg</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgDIRAczACwO7ADOKA3gFDLIA2G2OAXMiAK4C2ARtANxkC+ZZGMxAIwwAPYhq4zJlCYAkgBMMYsAE8APABV1ABxQQAHpBBLCaWrgLEAfAAo4UTI10GAlK-2kKyBJMJxGgA6KhlHZ1CrHHcuZAB6eOQAOXE8ZDwUAGsQNORgMGQcOAs4ZCisXGQ9KHEDKA0AGmRApnFkVnEoQyhaqF9usGYoKSdMHl4gA'>Try</a></div></pre>\n<p>제네릭 함수는 이제 제한되어 있기 때문에 모든 타입에 대해서는 동작하지 않습니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;Lengthwise>(arg: Lengthwise): Lengthwise' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>3</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'Lengthwise'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'Lengthwise'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKADKREDmJAFgO4GJ0DeeoUABsmrNqiIBXALYAjGAG48AXzx5ykotRIE4RYXGbNizAJIATJjpIBPADwAVGwAc6kAB5ki5xA1HsuHgA+AApKaGZUJ1cASiiXPgFQaj1EOBEAOiFDMIis-zYYpUFoSBJJaH1w5iVVEFAAWibqSRImhrxsoxMLKwJbEIwioA'>Try</a></div></pre>\n<p>대신 필요한 프로퍼티들이 있는 타입의 값을 전달해야 합니다:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function loggingIdentity&lt;{&#10;    length: number;&#10;    value: number;&#10;}>(arg: {&#10;    length: number;&#10;    value: number;&#10;}): {&#10;    length: number;&#10;    value: number;&#10;}' >loggingIdentity</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) value: number' >value</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgDIRAczACwO7ADOKA3gFDLIA2G2OAXMiAK4C2ARtANxkC+ZZGMxAIwwAPYhq4zJlCYAkgBMMYsAE8APABV1ABxQQAHpBBLCaWrgLEAfAAo4UTI10GAlK-2kKyBJMJxGgA6KhlHZ1CrHHceSigIMGYoKSdMHn4AekzkAFp8hGYwfNyyMNl5ZVVgDXsSamjGAEYABgAaZAA3OCpmCEYAZmReWKA'>Try</a></div></pre>\n<h2 id=\"제네릭-제약조건에서-타입-매개변수-사용-using-type-parameters-in-generic-constraints\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9-using-type-parameters-in-generic-constraints\" aria-label=\"제네릭 제약조건에서 타입 매개변수 사용 using type parameters in generic constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 제약조건에서 타입 매개변수 사용 (Using Type Parameters in Generic Constraints)</h2>\n<p>다른 타입 매개변수로 제한된 타입 매개변수를 선언할 수 있습니다.\n이름이 있는 객체에서 프로퍼티를 가져오고 싶은 경우를 예로 들어 봅시다.\n실수로 <code>obj</code>에 존재하지 않는 프로퍼티를 가져오지 않도록 하기 위해 두 가지 타입에 제약조건을 두었습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >getProperty</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Key in getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >Key</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >Type</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: Key extends keyof Type' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Key in getProperty&lt;Type, Key extends keyof Type>(obj: Type, key: Key): Type[Key]' >Key</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: Key extends keyof Type' >key</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}' >x</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: number' >b</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) c: number' >c</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) d: number' >d</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function getProperty&lt;{&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}, \"a\">(obj: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}, key: \"a\"): number' >getProperty</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let x: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function getProperty&lt;{&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}, \"a\" | \"b\" | \"c\" | \"d\">(obj: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}, key: \"a\" | \"b\" | \"c\" | \"d\"): number' >getProperty</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let x: {&#10;    a: number;&#10;    b: number;&#10;    c: number;&#10;    d: number;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&quot;m&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"m\"' is not assignable to parameter of type '\"a\" | \"b\" | \"c\" | \"d\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"m\"' is not assignable to parameter of type '\"a\" | \"b\" | \"c\" | \"d\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAOaQUAK8ADjBQJ4A8AKlw4AaUAGlIXUJAAeFSCQAmiUAGsJcAqAEcAfAAo4AIwBWqbZBFquqcVwCUoAN55QoaEyLQ6R4wG0rALoA3HgAvnh4ADZMoNKgALxOoACGqACMIoaoaCJkqBgiCqhYoKEheIws7JxcetIiAETJDXYhlaxwHNDcdY0Ati1BQA'>Try</a></div></pre>\n<h2 id=\"제네릭에서-클래스-타입-사용-using-class-types-in-generics\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9-using-class-types-in-generics\" aria-label=\"제네릭에서 클래스 타입 사용 using class types in generics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭에서 클래스 타입 사용 (Using Class Types in Generics)</h2>\n<p>제네릭을 사용하는 TypeScript에서 팩토리를 생성할 때 생성자 함수로 클래스 타입을 참조해야 합니다. 예를 들면:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function create&lt;Type>(c: {&#10;    new (): Type;&#10;}): Type' >create</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in create&lt;Type>(c: new () => Type): Type' >Type</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: new () => Type' >c</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in create&lt;Type>(c: new () => Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> }): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in create&lt;Type>(c: new () => Type): Type' >Type</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) c: new () => Type' >c</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBATgUwIZTQHgCoCeADmgHwAUEAXIgN6JhoDui5AlDYSYgL4eJc0dAFCJE6KCBRJGLCOwDcwnkA'>Try</a></div></pre>\n<p>고급 예제에서는 prototype 프로퍼티를 사용하여 생성자 함수와 클래스 타입의 인스턴스 사이의 관계를 유추하고 제한합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class BeeKeeper' >BeeKeeper</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BeeKeeper.hasMask: boolean' >hasMask</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class ZooKeeper' >ZooKeeper</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ZooKeeper.nametag: string' >nametag</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Animal.numLegs: number' >numLegs</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Bee' >Bee</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Bee.keeper: BeeKeeper' >keeper</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='class BeeKeeper' >BeeKeeper</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Lion' >Lion</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Lion.keeper: ZooKeeper' >keeper</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='class ZooKeeper' >ZooKeeper</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createInstance&lt;A extends Animal>(c: new () => A): A' >createInstance</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) A in createInstance&lt;A extends Animal>(c: new () => A): A' >A</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Animal' >Animal</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) c: new () => A' >c</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) A in createInstance&lt;A extends Animal>(c: new () => A): A' >A</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) A in createInstance&lt;A extends Animal>(c: new () => A): A' >A</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) c: new () => A' >c</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function createInstance&lt;Lion>(c: new () => Lion): Lion' >createInstance</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Lion' >Lion</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Lion.keeper: ZooKeeper' >keeper</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ZooKeeper.nametag: string' >nametag</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 타입검사!</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function createInstance&lt;Bee>(c: new () => Bee): Bee' >createInstance</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Bee' >Bee</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='(property) Bee.keeper: BeeKeeper' >keeper</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) BeeKeeper.hasMask: boolean' >hasMask</data-lsp></span><span style=\"color: #000000\">;  </span><span style=\"color: #008000\">// 타입검사!</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFCLaaSSgBCeeA0tQA56ygDeBooAFqQLKkDWaAEYB7EdjyYAdgG4CAXwJESZUAC0xdPI2ZsOUzAFs80TAHM0MBFLNzFy0uQCCU+IZyt2oKQFdDAGTwzSDRfQyEmOyViR0pqUDwAD2g8KQATZ1d3bE8OfgYmNCpaAtgoh1V-eBEpBOTUjNAXNw89UHztQvVNUvL0HylkatrEWEkUgEkpGGlEPAAeJzqU9MyW7AA+AApEULwAd1AtgEpQAF4NpuO0Jbax6B9YWqkD0EQT8tHxvCmZwbwtlUascAHQdHQggzGUy2UAgUCAAYXAKHjgACawA1AwBCIhjTCTaamf5bYqg8FMEHcSB8SD8GQceHI9EYoA'>Try</a></div></pre>\n<p>이 패턴은 <a href=\"/docs/handbook/mixins.html\">mixins</a> 디자인 패턴을 만드는 데에 사용되었습니다.</p>","headings":[{"value":"제네릭의 Hello World (Hello World of Generics)","depth":1},{"value":"제네릭 타입 변수 작업 (Working with Generic Type Variables)","depth":1},{"value":"제네릭 타입 (Generic Types)","depth":1},{"value":"제네릭 클래스 (Generic Classes)","depth":1},{"value":"제네릭 제약조건 (Generic Constraints)","depth":1},{"value":"제네릭 제약조건에서 타입 매개변수 사용 (Using Type Parameters in Generic Constraints)","depth":2},{"value":"제네릭에서 클래스 타입 사용 (Using Class Types in Generics)","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/2/generics.html","title":"Generics","disable_toc":null,"handbook":null,"oneline":"Types which take parameters","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Creating Types from Types","oneline":"An overview of the ways in which you can create more types from existing types.","permalink":"/docs/handbook/2/types-from-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Keyof Type Operator","oneline":"타입 컨텍스트에서 keyof 연산자 사용하기","permalink":"/ko/docs/handbook/2/keyof-types.html"}}}},"pageContext":{"id":"1-generics","slug":"/ko/docs/handbook/2/generics.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/Type Manipulation/Generics.md","previousID":"99c63e12-66ea-5084-a976-6ea19d7295f0","nextID":"9fc9101d-ecac-50f0-b6fe-cdc1fb65754f","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}