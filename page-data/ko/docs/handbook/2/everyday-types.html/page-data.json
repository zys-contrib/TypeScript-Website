{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/everyday-types.html","result":{"data":{"markdownRemark":{"id":"b2e6a8bc-ba8c-505b-9e9b-2b3442c2509e","excerpt":"이번 장에서는 JavaScript 코드에서 찾아볼 수 있는 가장 흔한 타입들을 다루고, 이 타입들을 TypeScript…","html":"<p>이번 장에서는 JavaScript 코드에서 찾아볼 수 있는 가장 흔한 타입들을 다루고, 이 타입들을 TypeScript에서 어떻게 기술하는지 각각의 대응하는 방식에 대하여 설명하겠습니다.\r\n이 문서에서 빠짐없이 전부 다루고자 하는 것이 아니며, 타입을 만들고 사용하는 더 많은 방법들은 이후 이어지는 장에서 다룰 것입니다.</p>\n<p>타입은 단지 타입 표기 이외에도 훨씬 다양한 <em>위치</em>에 나타날 수 있습니다.\r\n타입 자체에 대하여 배우는 것과 더불어, 새로운 구조체를 만들고자 할 때 타입을 참조하는 경우들에 대하여 알아볼 것입니다.</p>\n<p>우선 JavaScript 또는 TypeScript 코드를 작성할 때 가장 기본적이면서 흔히 만날 수 있는 타입들을 다시 살펴보는 데에서 시작해보겠습니다.\r\n이 타입들은 이후에 다루는 보다 복잡한 타입을 이루는 핵심 구성 요소입니다.</p>\n<h2 id=\"원시-타입--string-number-그리고-boolean\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85--string-number-%EA%B7%B8%EB%A6%AC%EA%B3%A0-boolean\" aria-label=\"원시 타입  string number 그리고 boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시 타입 : <code>string</code>, <code>number</code>, 그리고 <code>boolean</code></h2>\n<p>JavaScript에서 아주 흔하게 사용되는 세 가지의 <a href=\"https://developer.mozilla.org/ko/docs/Glossary/Primitive\">원시 타입</a>으로 <code>string</code>, <code>number</code>, 그리고 <code>boolean</code>이 있습니다.\r\n이 타입들은 TypeScript에서 각자 대응하는 타입이 존재합니다.\r\n아마도 예상하셨듯이, 이 타입들은 JavaScript에서 각 타입별 값에 <code>typeof</code> 연산자를 사용하였을 때 얻을 수 있는 것과 동일한 이름을 가집니다.</p>\n<ul>\n<li><code>string</code>은 <code>\"Hello, world\"</code>와 같은 문자열 값을 나타냅니다</li>\n<li><code>number</code>은  <code>42</code>와 같은 숫자를 나타냅니다. JavaScript는 정수를 위한 런타임 값을 별도로 가지지 않으므로, <code>int</code> 또는 <code>float</code>과 같은 것은 존재하지 않습니다. 모든 수는 단순히 <code>number</code>입니다</li>\n<li><code>boolean</code>은 <code>true</code>와 <code>false</code>라는 두 가지 값만을 가집니다</li>\n</ul>\n<blockquote>\n<p><code>String</code>, <code>Number</code>, <code>Boolean</code>와 같은 (대문자로 시작하는) 타입은 유효한 타입이지만, 코드상에서 이러한 특수 내장 타입을 사용하는 경우는 극히 드뭅니다. <em>항상</em> <code>string</code>, <code>number</code>, <code>boolean</code> 타입을 사용하세요.</p>\n</blockquote>\n<h2 id=\"배열\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열</h2>\n<p><code>[1, 2, 3]</code>과 같은 배열의 타입을 지정할 때 <code>number[]</code> 구문을 사용할 수 있습니다. 이 구문은 모든 타입에서 사용할 수 있습니다(예를 들어, <code>string[]</code>은 문자열의 배열입니다).\r\n위 타입은 <code>Array&#x3C;number></code>와 같은 형태로 적을 수 있으며, 동일한 의미를 가집니다.\r\n<code>T&#x3C;U></code> 구문에 대한 내용은 <em>제네릭</em> 을 다룰 때 좀 더 알아보겠습니다.</p>\n<blockquote>\n<p><code>[number]</code>는 전혀 다른 의미를 가집니다. <em>튜플 타입</em> 부분을 참조하세요.</p>\n</blockquote>\n<h2 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code></h2>\n<p>TypeScript는 또한 <code>any</code>라고 불리는 특별한 타입을 가지고 있으며, 특정 값으로 인하여 타입 검사 오류가 발생하는 것을 원하지 않을 때 사용할 수 있습니다.</p>\n<p>어떤 값의 타입이 <code>any</code>이면, 해당 값에 대하여 임의의 속성에 접근할 수 있고(이때 반환되는 값의 타입도 <code>any</code>입니다), 함수인 것처럼 호출할 수 있고, 다른 임의 타입의 값에 할당하거나(받거나), 그 밖에도 구문적으로 유효한 것이라면 무엇이든 할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// 아래 이어지는 코드들은 모두 오류 없이 정상적으로 실행됩니다.</span></div><div class='line'><span style=\"color: #008000\">// `any`를 사용하면 추가적인 타입 검사가 비활성화되며,</span></div><div class='line'><span style=\"color: #008000\">// 당신이 TypeScript보다 상황을 더 잘 이해하고 있다고 가정합니다.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >foo</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >bar</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let obj: any' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBA9gRgVgLggQwHYE8IF4IG8IAeSADBAL4DcAsAFAD0dEgIqOAZ7RIC7jgLaOADk4ClNEgFXnAOy2ATlsAC4xEAVXYAUWiIBIxwBqdEQGOj7CIFQJwIMDgQAnAPOOAdDoiATocCRq4EoWwBNNgE6aAdLQYQABmnSPAPp0RANQOBKscAaq4BcuiEAU2cAAGu1AD3GIQAGFwFDxiEAAms8QiEARPsAdNcBGQcAVNcAMFsAHLoAae0ZAT6bAA6G1ABV0AAcQAGUAYwAnAEsasEAXnqsITUBLNcARcYhAFWaIQAzxjkAXVd9AA5qIQAjxqzmQ9UBLVes7Glg4GwAzKCgACgBKai34E7PtmxhkZuwIAEZiYiv4B4AiAAsQYGAoD5nRpQVAAZ0gqCQqAArgBbGAge44bYUIA'>Try</a></div></pre>\n<p><code>any</code> 타입은 코드상의 특정 라인에 문제가 없다고 TypeScript를 안심시킨다는 목적 단지 하나 때문에 긴 타입을 새로 정의하고 싶지 않을 때 유용하게 사용할 수 있습니다.</p>\n<h3 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h3>\n<p>타입이 지정되지 않은 값에 대하여 TypeScript가 문맥으로부터 그 타입을 추론해낼 수 없다면, 컴파일러는 <code>any</code> 타입을 부여하는 것이 기본 동작입니다.</p>\n<p>하지만 이런 상황은 보통 선호되지 않습니다. 왜냐하면 <code>any</code>는 타입 검사가 이루어지지 않기 때문입니다.\r\n컴파일러 플래그 <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a>를 사용하면 암묵적으로 <code>any</code>로 간주하는 모든 경우에 오류를 발생시킵니다.</p>\n<h2 id=\"변수에-대한-타입-표기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%97%90-%EB%8C%80%ED%95%9C-%ED%83%80%EC%9E%85-%ED%91%9C%EA%B8%B0\" aria-label=\"변수에 대한 타입 표기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수에 대한 타입 표기</h2>\n<p><code>const</code>, <code>var</code>, 또는 <code>let</code> 등을 사용하여 변수를 선언할 때, 변수의 타입을 명시적으로 지정하기 위하여 타입 표기를 추가할 수 있으며 이는 선택 사항입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myName: string' >myName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgngcgQyiAXBAzmATgSwHYDmEAvBAEQCCwOAxiGQNwCwAUAPRsRfdcB6-A-hEADC4FDxiIB0VwAx1QA'>Try</a></div></pre>\n<blockquote>\n<p>TypeScript는 <code>int x = 0;</code>과 같이 “타입을 왼쪽에 쓰는” 식의 표기법을 사용하지 않습니다.\r\n타입 표기는 항상 타입의 대상 <em>뒤쪽에</em> 위치합니다.</p>\n</blockquote>\n<p>하지만 대부분의 경우, 타입 표기는 필요하지 않습니다.\r\n가능하다면 TypeScript는 자동으로 코드 내의 있는 타입들을 <em>추론</em>하고자 시도합니다.\r\n예를 들어, 변수의 타입은 해당 변수의 초깃값의 타입을 바탕으로 추론됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 타입 표기가 필요하지 않습니다. &apos;myName&apos;은 &apos;string&apos; 타입으로 추론됩니다.</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let myName: string' >myName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEgGFxQ8dQdFcBjrAANaQIquBSxwGquAHJ0gpUcK1DgE02AnTQHSgDkAtgJ4ByAhpQKbmAC4xQM4AuATgJYA7AObkIkQDzjgHQ7QgFNnABh2BKFuIkAsACgANky6gaDZqAC8oAEQBBDXwDGTEwG4gA'>Try</a></div></pre>\n<p>대부분의 경우 추론 규칙을 명시적으로 학습하지 않아도 됩니다.\r\n이제 막 TypeScript를 시작하는 단계라면, 가능한 타입 표기를 적게 사용하도록 해보세요. 코드 흐름을 완전히 파악하는 데에 타입이 그다지 많이 필요하지 않다는 사실에 놀라실 겁니다.</p>\n<h2 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h2>\n<p>함수는 JavaScript에서 데이터를 주고 받는 주요 수단입니다.\r\nTypeScript에서는 함수의 입력 및 출력 타입을 지정할 수 있습니다.</p>\n<h3 id=\"매개변수-타입-표기\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85-%ED%91%9C%EA%B8%B0\" aria-label=\"매개변수 타입 표기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 타입 표기</h3>\n<p>함수를 선언할 때, 함수가 허용할 매개변수 타입을 선언하기 위하여 각 매개변수 뒤에 타입을 표기할 수 있습니다.\r\n매개변수 타입은 매개변수 이름 뒤에 표기합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 매개변수 타입 표기</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(name: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">() + </span><span style=\"color: #A31515\">\"!!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEhPOwcGsAZ7Awh1ADC4UPHSB0VwDHUFgBQAzArgHYDGALgJYD2hoA5gE4CmjpAFIQIYC2jAXKAGdS9coVoBKUAG8coUCDmKlyxQD11G9bNDFqAygBtGAOgOVarAEQAJRgbMAaUJdABqUJx7HSlAKoAHf0Z6AGEOAUZWSXdLAEJYy3EAbhwAXyA'>Try</a></div></pre>\n<p>매개변수에 타입이 표기되었다면, 해당 함수에 대한 인자는 검사가 이루어집니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 만약 실행되면 런타임 오류가 발생하게 됩니다!</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(name: string): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>42</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAsAFAAmkAxgDYCG0koAZgK4B2pALgJZxOgDmNkrABRNKAW0ipEraOyY8AlKgBucdkQDchEKAC0e0g1Z6dWsIBnOwL6joQCdDgSNXAGC2AXLtCAH9sADC4BDx0IBIxwBqdgABrQQBwewF2BwA1VwBia0EBKFsAJpsATpoBCQj5IAUEsNHl1IA'>Try</a></div></pre>\n<blockquote>\n<p>매개변수에 타입을 표기하지 않았더라도, 여전히 TypeScript는 올바른 개수의 인자가 전달되었는지 여부를 검사합니다.</p>\n</blockquote>\n<h3 id=\"반환-타입-표기\" style=\"position:relative;\"><a href=\"#%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85-%ED%91%9C%EA%B8%B0\" aria-label=\"반환 타입 표기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반환 타입 표기</h3>\n<p>반환 타입 또한 표기할 수 있습니다.\r\n반환 타입은 매개변수 목록 뒤에 표기합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getFavoriteNumber(): number' >getFavoriteNumber</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQGIEMBucBOMUqAciALYBGq+AFAJQBciYF1+iA3gLABQiiAPSCBoseIliAejNky+A-OhD4kAJgBsAbj4BfIA'>Try</a></div></pre>\n<p>변수의 타입 표기와 마찬가지로, 반환 타입은 표기하지 않아도 되는 것이 일반적입니다. 왜냐하면 TypeScript가 해당 함수에 들어있는 <code>return</code> 문을 바탕으로 반환 타입을 추론할 것이기 때문입니다.\r\n위 예시에서 사용된 타입 표기는 큰 의미를 갖지 않습니다.\r\n때에 따라 문서화를 목적으로, 또는 코드의 잘못된 수정을 미연에 방지하고자, 혹은 지극히 개인적인 선호에 의하여 명시적인 타입 표기를 수행하는 코드도 존재합니다.</p>\n<h3 id=\"익명-함수\" style=\"position:relative;\"><a href=\"#%EC%9D%B5%EB%AA%85-%ED%95%A8%EC%88%98\" aria-label=\"익명 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>익명 함수</h3>\n<p>익명 함수는 함수 선언과는 조금 다릅니다.\r\n함수가 코드상에서 위치한 곳을 보고 해당 함수가 어떻게 호출될지 알아낼 수 있다면, TypeScript는 해당 함수의 매개 변수에 자동으로 타입을 부여합니다.</p>\n<p>아래는 그 예시입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 아래 코드에는 타입 표기가 전혀 없지만, TypeScript는 버그를 감지할 수 있습니다.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Eve\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 함수에 대한 문맥적 타입 부여</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUppercase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 화살표 함수에도 문맥적 타입 부여는 적용됩니다</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const names: string[]' >names</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUppercase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><span class=\"code\">2551</span></span><span class=\"error-behind\">Property 'toUppercase' does not exist on type 'string'. Did you mean 'toUpperCase'?</span><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYMEYCwAoEUQEVHAM9tEBV5wHZbAF0cBSm0QAYXBQ8dEB0VwBjrAAGtEBAJwADXQgMdHAA5OAZzoA0oACoBPAA6QAygGNoAS3kAXBoBCewB+1gH07QgBBqRgA1XQgDCHQgCPHArUOAJpsAnTQDoCKuADtEW0F4BDAFtIRFAAXlAAbQAiAEEAG3UVSBipGIAhOAAjNNAYgFEAN1SAXQBuAgIiQAtVqxpQQABmwB1V0EAObsBTzsBACaZWQADewBvRgkCQxFcAMwQCgJUACwAKcYBXLxUtdW9QecQASlAAbwJQUE8fOATIVwS4AHNt1y04AFV5RWgVAMRIeZ2dyvwAL5-KqEMCAFTXAC0DbFAdRogBHm9rdXqgQYMLqASrHAJQtLmGwVCEymMwW2z24QAfAcjidvIhzpdrncxo8Xm8Pl8fsDAX8gA'>Try</a></div></pre>\n<p>매개 변수 <code>s</code>에는 타입이 표기되지 않았음에도 불구하고, TypeScript는 <code>s</code>의 타입을 알아내기 위하여 배열의 추론된 타입과 더불어 <code>forEach</code> 함수의 타입을 활용하였습니다.</p>\n<p>이 과정은 <em>문맥적 타입 부여</em>라고 불리는데, 왜냐하면 함수가 실행되는 <em>문맥</em>을 통하여 해당 함수가 가져야 하는 타입을 알 수 있기 때문입니다.\r\n추론 규칙과 비슷하게, 이 과정이 어떻게 일어나는지를 명시적으로 배울 필요는 없지만, 이것이 <em>실제로 일어나는 과정</em>이라는 것을 이해하면 타입 표기가 불필요한 경우를 구분하는 데에 도움이 됩니다.\r\n값이 발생하는 문맥이 해당 값의 타입에 영향을 끼치는 예시들은 이후에 살펴보도록 하겠습니다.</p>\n<h2 id=\"객체-타입\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\" aria-label=\"객체 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 타입</h2>\n<p>원시 타입을 제외하고 가장 많이 마주치는 타입은 <em>객체 타입</em>입니다.\r\n객체는 프로퍼티를 가지는 JavaScript 값을 말하는데, 대부분의 경우가 이에 해당하죠!\r\n객체 타입을 정의하려면, 해당 객체의 프로퍼티들과 각 프로퍼티의 타입들을 나열하기만 하면 됩니다.</p>\n<p>예를 들어, 아래 함수는 좌표로 보이는 객체를 인자로 받고 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 매개 변수의 타입은 객체로 표기되고 있습니다.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: {&#10;    x: number;&#10;    y: number;&#10;}): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: {&#10;    x: number;&#10;    y: number;&#10;}' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: {&#10;    x: number;&#10;    y: number;&#10;}): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEhPOwcGtQBnsDCHAa46QAwuFDxwAuOkLg1gWmcDodogOiuAMdYBgtgBzWiAR44K1DgE02AnTQHQCwAUAGYCuAdgMYAXAJYB7HqAAOAJyE8BAYREipAEwAUEgQC5QAb1AAPHTy4BbAEYBTKQG5QAT2NmrU0AF8AlHvahQIXwGBQcG+AHrhEZFR0RE+oHxiAM4iADaWTCkiAOZqAEQAKgAWlvFKqrIAhgKWAOSJhqAAbhUpXCVC9bmgANSSAkwGHjZxCTzJaRnZeUUlCcoqldV1Dk0tbaAdoF29mkz2Q+xu7NKyCmXq+kagAMwANA46AOzuQ0A'>Try</a></div></pre>\n<p>위에서 매개변수는 <code>x</code>와 <code>y</code>라는 두 개의 프로퍼티로 이루어진 타입으로 표기되고 있는데, 두 값은 모두 <code>number</code> 타입입니다.\r\n각 프로퍼티를 구분할 때 <code>,</code> 또는 <code>;</code>를 사용할 수 있고, 가장 마지막에 위치한 구분자의 표기는 선택 사항입니다.</p>\n<p>각 프로퍼티의 타입 표기 또한 선택 사항입니다.\r\n만약 타입을 지정하지 않는다면, 해당 프로퍼티는 <code>any</code> 타입으로 간주합니다.</p>\n<h3 id=\"옵셔널-프로퍼티\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%85%94%EB%84%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"옵셔널 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵셔널 프로퍼티</h3>\n<p>객체 타입은 일부 또는 모든 프로퍼티의 타입을 선택적인 타입, 즉 <em>옵셔널</em>로 지정할 수 있습니다.\r\n프로퍼티 이름 뒤에 <code>?</code>를 붙이면 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// 둘 다 OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Bob\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alice\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Alisson\"</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAcgQwLYCmAFHAEYBWAXIgN6LAyoDOU1L6YA5gNyIA2OFgH42UDp0QBfAJS0AsAChEiAPQrEAOi2LJitYkAaLYkAnTYgDyAaUVoM2fMToNmrRACIAQmVdTp3axztCIkdGFmpXAEE+GAgCVwAafkEXSOimJgRvGW4gA'>Try</a></div></pre>\n<p>JavaScript에서는 존재하지 않는 프로퍼티에 접근하였을 때, 런타임 오류가 발생하지 않고 <code>undefined</code> 값을 얻게 됩니다.\r\n이 때문에 옵셔널 프로퍼티를 <em>읽었을</em> 때, 해당 값을 사용하기에 앞서 <code>undefined</code>인지 여부를 확인해야 합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printName(obj: {&#10;    first: string;&#10;    last?: string;&#10;}): void' >printName</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) first: string' >first</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 오류 - `obj.last`의 값이 제공되지 않는다면 프로그램이 멈추게 됩니다!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>'obj.last' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'obj.last' is possibly 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string' >last</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 최신 JavaScript 문법을 사용하였을 때 또 다른 안전한 코드</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: {&#10;    first: string;&#10;    last?: string | undefined;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) last?: string | undefined' >last</data-lsp></span><span style=\"color: #000000\">?.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMaCwAoAMwFcA7AYwBcBLOU0AB2mtMoDkBDAW0gAo4ARgCtUAb1CFqSSqkSVmpAOYBuUABsOcgPyz5LRaAC+ASlCiCoUCFCASMcAanaAC0oAAaChAOg1yXgDXHQgEg1gC7joIA4E4CvNYAYLYADk6CAUqOAKU2AJ02ALl2ggCCrgDodgB+1gBXtIYASXYAps4AxNaCAlC2AE01JAIQWoOR0iHBqkF5wivzCXpqUHpRwAKoMDDAAwpp8xsbK9dSEoF2e3pSgNQC866BkACaQkqSQO6bm+JaW1gDyANL1lo2kza3tne49cv1DI+OTvNOzZyMBHq1kAOrOAA6HQAApDgANw4AGVyMwGKtABzdgFSewAi46BADUDgEqxwAaq4AAMZxgBlW0CABDbQElAB6doEAEqOAEAnADqroEAKvOAHZb6g8nm01B0lu9KFpPsNRtAJogpjMCIYgA'>Try</a></div></pre>\n<h2 id=\"유니언-타입\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%96%B8-%ED%83%80%EC%9E%85\" aria-label=\"유니언 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니언 타입</h2>\n<p>TypeScript의 타입 시스템에서는 기존의 타입을 기반으로 다양한 연산자를 사용하여 새로운 타입을 만들 수 있습니다.\r\n몇몇 타입들을 사용하는 법을 알았으니, 이제 이 타입들을 <em>조합하여</em> 흥미로운 방식으로 사용해볼 시간입니다.</p>\n<h3 id=\"유니언-타입-정의하기\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%96%B8-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-label=\"유니언 타입 정의하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니언 타입 정의하기</h3>\n<p>타입을 조합하는 첫 번째 방법은 <em>유니언</em> 타입을 사용하는 것입니다.\r\n유니언 타입은 서로 다른 두 개 이상의 타입들을 사용하여 만드는 것으로, 유니언 타입의 값은 타입 조합에 사용된 타입 중 <em>무엇이든 하나</em>를 타입으로 가질 수 있습니다.\r\n조합에 사용된 각 타입을 유니언 타입의 <em>멤버</em>라고 부릅니다.</p>\n<p>문자열 또는 숫자를 받을 수 있는 함수를 작성해보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Your ID is: \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">101</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"202\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">// 오류</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) myID: number' >myID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">22342</span><span style=\"color: #000000\"> });</span></div><span class=\"error\"><span>Argument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAsAFABmArgHYDGALgJZxmgAO0NZVAkgCYAUNnqZEgFsARjFAAfUIiosyAcwCUoAN6FQoCvURwANpAB0uuPO4AiAJpwS0UOwAioGilBnQAaiedFAbkIBfQhBQAHkAaUJmVg4eAEYABljfILBwyLkY8zR4tDNkgmDAEjHADU706K5uFVAhAE8HVDRMLDRQf18gA'>Try</a></div></pre>\n<h3 id=\"유니언-타입-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%96%B8-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"유니언 타입 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니언 타입 사용하기</h3>\n<p>유니언 타입에 맞는 값을 <em>제공하는</em> 것은 간단합니다. 유니언 타입의 멤버 중 하나에 해당하는 타입을 제공하면 됩니다.\r\n유니언 타입인 값이 코드상에 <em>존재할 때</em>, 이를 어떻게 사용해야 할까요?</p>\n<p>TypeScript에서 유니언을 다룰 때는 해당 유니언 타입의 <em>모든</em> 멤버에 대하여 유효한 작업일 때에만 허용됩니다.\r\n예를 들어 <code>string | number</code>라는 유니언 타입의 경우, <code>string</code> 타입에만 유효한 메서드는 사용할 수 없습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-err><data-lsp lsp='any' >toUpperCase</data-lsp></data-err></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'toUpperCase' does not exist on type 'string | number'.\n  Property 'toUpperCase' does not exist on type 'number'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4CwAoAMwFcA7AYwBcBLOU0AB2mtMoEkATACmo9VOIBbAEYxQAH1CJKzUgHMAlKADeBUKHJ1EcADaQAdDrhyeHfZTgBVBgxgBhAIaJIXBQoDcBAL5A'>Try</a></div></pre>\n<p>이를 해결하려면 코드상에서 유니언을 <em>좁혀야</em> 하는데, 이는 타입 표기가 없는 JavaScript에서 벌어지는 일과 동일합니다.\r\n<em>좁히기</em>란 TypeScript가 코드 구조를 바탕으로 어떤 값을 보다 구체적인 타입으로 추론할 수 있을 때 발생합니다.</p>\n<p>예를 들어, TypeScript는 오직 <code>string</code> 값만이 <code>typeof</code> 연산의 결괏값으로 <code>\"string\"</code>을 가질 수 있다는 것을 알고 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printId(id: number | string): void' >printId</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string | number' >id</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 이 분기에서 id는 &apos;string&apos; 타입을 가집니다</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 여기에서 id는 &apos;number&apos; 타입을 가집니다</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwE4zFAkgEwBQw4BciYIAtgEYCmqiAPogM5TpgDmAlIgN4CwAKESIYwRHigBPZNThjCiALzLEAIhZt2q7vyHDEAegOJALuOJAIb2AGOsALo4BxBkTkApTYgDkGjOxeJAAwuBQ8cAi44iAADWAi5OAE02AJ02CgvqIEAhMcAA21AB0SXDsBDipUHAAqsgyqADCAIZM1HicnADcMYgAvojUSZW8DcJGiIA3ozb2hM4uZFS0Xn6BoZGdcQnJaRlZhHUNjYKNQA'>Try</a></div></pre>\n<p>또 다른 예시는 <code>Array.isArray</code>와 같은 함수를 사용하는 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function welcomePeople(x: string[] | string): void' >welcomePeople</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | string[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ArrayConstructor.isArray(arg: any): arg is any[]' >isArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | string[]' >x</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 여기에서 &apos;x&apos;는 &apos;string[]&apos; 타입입니다</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string | undefined): string' >join</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\" and \"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 여기에서 &apos;x&apos;는 &apos;string&apos; 타입입니다</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Welcome lone traveler \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwKYBsJwLaoAqpwAO6qAFAB4BciAzlAE4xgDmA2gLqIA+djzLAJSIA3gFgAUIkQxgiMgEEGDAIYBPAHQxaS1WsqDh4qdMQB6M4kA3o4AY6wAujgHEHEAcgrPAKU0v6TVp2eJAAYXAUPGgwAmmwBOmyVNELDBaOFINdDgWMgAiAAkMZIAaRDTEAGpECg0AKzhmdMQVMAATfMMAbijEAF9EDFpUUVbpC2t7J1cPL35Wf2CwyJNpWPjE5NS0gHUMLFxEZLAexhUANwxUBnyiksEWkzbJNqA'>Try</a></div></pre>\n<p><code>else</code> 분기 문에서는 별도 처리를 하지 않아도 된다는 점에 유의하시기 바랍니다. <code>x</code>의 타입이 <code>string[]</code>가 아니라면, <code>x</code>의 타입은 반드시 <code>string</code>일 것입니다.</p>\n<p>때로는 유니언의 모든 멤버가 무언가 공통점을 가질 수도 있습니다.\r\n에를 들어, 배열과 문자열은 둘 다 <code>slice</code> 메서드를 내장합니다.\r\n유니언의 모든 멤버가 어떤 프로퍼티를 공통으로 가진다면, 좁히기 없이도 해당 프로퍼티를 사용할 수 있게 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 반환 타입은 &apos;number[] | string&apos;으로 추론됩니다</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getFirstThree(x: number[] | string): string | number[]' >getFirstThree</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number[]' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) slice(start?: number | undefined, end?: number | undefined): string | number[]' >slice</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEgwewNNdQBhcUPHAC46A5AOwK4FsBGBTATgNoC6oAPqAM4Au+AlqgObKA844DodogKbOAGHYJQtgE02ATpoCwAKABm6VAGNqdAPapQjXNQBidfDQAqAC3y5cACgAeALlAYcBEuSq0GjAJSgA3mNCgD1dPiUmAOkoAGzppYwAGABpQAGYnAG4xAF8gA'>Try</a></div></pre>\n<blockquote>\n<p>유니언은 의미상 <em>합집합</em>을 뜻하는데, 실제로는 유니언 타입이 프로퍼티들의 <em>교집합</em>을 가리키는 것처럼 보여 헷갈리게 느낄 수 있습니다.\r\n이는 지극히 우연이 아닙니다. <em>유니언</em>이라는 명칭은 타입 이론에서 비롯된 것입니다.\r\n<code>number | string</code> <em>유니언</em> 타입은 각각의 타입을 가지는 <em>값들에 대하여</em> 합집합을 취하여 구성됩니다.\r\n두 집합과 각각의 집합에 대한 특성이 주어졌을 때, 두 집합의 <em>유니언</em>에는 각각의 특성들의 <em>교집합</em>만이 적용된다는 점에 유의하시기 바랍니다.\r\n예를 들어, 한 방에는 모자를 쓰고 키가 큰 사람들이 있고 다른 방에는 모자를 쓰고 스페인어를 사용하는 사람들이 있다고 합시다. 이때 두 방을 합친다면, <em>모든</em> 사람들에 대하여 우리가 알 수 있는 사실은 바로 누구나 반드시 모자를 쓰고 있다는 것입니다.</p>\n</blockquote>\n<h2 id=\"타입-별칭\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%AD\" aria-label=\"타입 별칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 별칭</h2>\n<p>지금까지는 객체 타입과 유니언 타입을 사용할 때 직접 해당 타입을 표기하였습니다.\r\n이는 편리하지만, 똑같은 타입을 한 번 이상 재사용하거나 또 다른 이름으로 부르고 싶은 경우도 존재합니다.</p>\n<p><em>타입 별칭</em>은 바로 이런 경우를 위하여 존재하며, <em>타입</em>을 위한 <em>이름</em>을 제공합니다.\r\n타입 별칭의 구문은 아래와 같습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 앞서 사용한 예제와 동일한 코드입니다</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACg9gSwHbCgXigbwLACgpQAeAXFEgK4C2ARhAE4DceBIpFN9TuAvl3gPT8ogPVHAOINRANQOBKscA6q1EAQY4BwJwAJjUQJvNgH3G5gFXnAOy2BQ8cATTYBOmvADNySAMbAEcJFDB1kwAMJw4dACYAKMMFJ4FwBKLGYoK3sAZzgAGwgAOli4AHMfACIAFQALaEjPL2QAQ2AIAHIooigANyLY8mgESvSoAGpHYATCYK4CSKQY+KTUjJy8j29i0oqoEBq6hqgmqBb2-wSQHrxuPDwnF3cCn0wiUgBGAAYLgBpZ86uobh6gA'>Try</a></div></pre>\n<p>타입 별칭을 사용하면 단지 객체 타입뿐이 아닌 모든 타입에 대하여 새로운 이름을 부여할 수 있습니다.\r\n예를 들어, 아래와 같이 유니언 타입에 대하여 타입 별칭을 부여할 수도 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ID = string | number' >ID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAkgIlAvFAdgVwLYCMICcoA+UAzsLgJYoDmA3EA'>Try</a></div></pre>\n<p>타입 별칭은 <em>단지</em> 별칭에 지나지 않는다는 점에 유의하시기 바랍니다. 즉, 타입 별칭을 사용하여도 동일 타입에 대하여 각기 구별되는 “여러 버전”을 만드는 것은 아닙니다.\r\n별칭을 사용하는 것은, 별도로 이름 붙인 타입을 새로 작성하는 것입니다.\r\n다시 말해, 아래 코드는 틀린 것처럼 <em>보일 수</em> 있지만, TypeScript에서는 이것이 정상인데 그 이유는 각각의 타입들이 동일 타입에 대한 별칭들이기 때문입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type UserInputSanitizedString = string' >UserInputSanitizedString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitizeInput(str: string): UserInputSanitizedString' >sanitizeInput</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type UserInputSanitizedString = string' >UserInputSanitizedString</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitize(str: string): string' >sanitize</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: string' >str</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 보안 처리를 마친 입력을 생성</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let userInput: string' >userInput</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function sanitizeInput(str: string): UserInputSanitizedString' >sanitizeInput</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='function getInput(): string' >getInput</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 물론 새로운 문자열을 다시 대입할 수도 있습니다</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let userInput: string' >userInput</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"new input\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwHMQMBJVAB2QwAoBKALngGcMYtUCBuAWAChRIsBCnTY8zKKizYAXiGosYjRewINmrVT14B6HfAC0RsFSMG+GAJ7kEAVSYgYZShgDKk6VjnBXmjvABeDTYObT4RTFx8Jg9ZEGcqBVZlPzVGe0cEt1ivEB9U+ABvPnh4OAxkGGicuSSYWm0AXz4+PXhAF57ACVH4QAyZwBrOwB9O+EAJzsAdOfhAUPHAUg7AEXH4QF2BwEZBvghieGQHJwoqQIkpOKzqIlJtmloGlt19QB5uwAMO+EAJgcAdDsAWsfhADm7ABPHAF9G5wBOmwA7Q-BAADNE0ABqvwQAYQ4AR5vggAjxwCtQ4AJpr+fA2mVOuwARKgQAB3eDsFxYzhAA'>Try</a></div></pre>\n<h2 id=\"인터페이스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스</h2>\n<p><em>인터페이스 선언</em>은 객체 타입을 만드는 또 다른 방법입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s x value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"The coordinate&apos;s y value is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) pt: Point' >pt</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printCoord(pt: Point): void' >printCoord</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwLABQyyAHgFzIgCuAtgEbQDchxAnhdfU4QL6GEwqIBGGDoQyAA5QsAYXTooAEwAUksBQxYAlLhbIE4gM7oANhAB0p9AHMVAIgAqACxSHFS0HEgByI6WQANzhTKhRgf3tkAGopMAsSbWYiA2MzS2s7J1dUjy9ff1YgkLDkCOQo2PULViTefgJpOQVlFRxSCgBGAAZugBpkdmQe7uQeJKA'>Try</a></div></pre>\n<p>타입 별칭을 사용한 경우와 마찬가지로, 위 예시 코드는 마치 타입이 없는 임의의 익명 객체를 사용하는 것처럼 동작합니다.\r\nTypeScript는 오직 <code>printCoord</code>에 전달된 값의 <em>구조</em>에만 관심을 가집니다. 즉, 예측된 프로퍼티를 가졌는지 여부만을 따집니다.\r\n이처럼, 타입이 가지는 구조와 능력에만 관심을 가진다는 점은 TypeScript가 <em>구조적</em> 타입 시스템이라고 불리는 이유입니다.</p>\n<h3 id=\"타입-별칭과-인터페이스의-차이점\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%AD%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"타입 별칭과 인터페이스의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 별칭과 인터페이스의 차이점</h3>\n<p>타입 별칭과 인터페이스는 매우 유사하며, 대부분의 경우 둘 중 하나를 자유롭게 선택하여 사용할 수 있습니다.\r\n<code>interface</code>가 가지는 대부분의 기능은 <code>type</code>에서도 동일하게 사용 가능합니다. 이 둘의 가장 핵심적인 차이는, 타입은 새 프로퍼티를 추가하도록 개방될 수 없는 반면, 인터페이스의 경우 항상 확장될 수 있다는 점입니다.</p>\n<table class='full-width-table'>\r\n  <tbody>\r\n    <tr>\r\n      <th><code>인터페이스</code></th>\r\n      <th><code>타입</code></th>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <p>인터페이스 확장하기</p>\r\n        <code><pre>\r\ninterface Animal {\r\n  name: string\r\n}<br/>\r\ninterface Bear extends Animal {\r\n  honey: boolean\r\n}<br/>\r\nconst bear = getBear()\r\nbear.name\r\nbear.honey\r\n        </pre></code>\r\n      </td>\r\n      <td>\r\n        <p>교집합을 통하여 타입 확장하기</p>\r\n        <code><pre>\r\ntype Animal = {\r\n  name: string\r\n}<br/>\r\ntype Bear = Animal & {\r\n  honey: Boolean\r\n}<br/>\r\nconst bear = getBear();\r\nbear.name;\r\nbear.honey;\r\n        </pre></code>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        <p>기존의 인터페이스에 새 필드를 추가하기</p>\r\n        <code><pre>\r\ninterface Window {\r\n  title: string\r\n}<br/>\r\ninterface Window {\r\n  ts: TypeScriptAPI\r\n}<br/>\r\nconst src = 'const a = \"Hello World\"';\r\nwindow.ts.transpileModule(src, {});\r\n        </pre></code>\r\n      </td>\r\n      <td>\r\n        <p>타입은 생성된 뒤에는 달라질 수 없다</p>\r\n        <code><pre>\r\ntype Window = {\r\n  title: string\r\n}<br/>\r\ntype Window = {\r\n  ts: TypeScriptAPI\r\n}<br/>\r\n<span style=\"color: #A31515\"> // Error: Duplicate identifier 'Window'.</span><br/>\r\n        </pre></code>\r\n      </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\n<p>위 개념에 대하여서는 이후에 이어지는 장에서 좀 더 자세히 배우므로, 지금 위 내용을 잘 이해하지 못하였더라도 걱정하지 마세요.</p>\n<ul>\n<li>TypeScript 4.2 이전 버전에서는, 타입 별칭 이름이 오류 메시지에 <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA\">나타날 수 있고</a>, 때로는 동등한 익명 타입을 대신하여 나타날 수 있습니다(이는 경우에 따라 바람직할 수도 있고 아닐 수도 있습니다). 인터페이스는 항상 오류 메시지에 이름이 나타납니다.</li>\n<li>타입 별칭은 <a href=\"/play?#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA\">선언 병합에 포함될 수 없지만, 인터페이스는 포함될 수 있습니다</a>.</li>\n<li>인터페이스는 <a href=\"/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\">오직 객체의 모양을 선언하는 데에만 사용되며, 기존의 원시 타입에 별칭을 부여하는 데에는 사용할 수는 없습니다</a>.</li>\n<li>인터페이스의 이름은 <a href=\"/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA\">항상 있는 그대로</a> 오류 메시지에 나타납니다. 단, 이는 <em>오직</em> 코드상에서 해당 인터페이스가 이름으로 사용되었을 때에만 해당합니다.</li>\n</ul>\n<p>대부분의 경우 개인적 선호에 따라 인터페이스와 타입 중에서 선택할 수 있으며, 필요하다면 TypeScript가 다른 선택을 제안할 것입니다. 잘 모르겠다면, 우선 <code>interface</code>를 사용하고 이후 문제가 발생하였을 때 <code>type</code>을 사용하기 바랍니다.</p>\n<h2 id=\"타입-단언\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8\" aria-label=\"타입 단언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 단언</h2>\n<p>때로는 TypeScript보다 당신이 어떤 값의 타입에 대한 정보를 더 잘 아는 경우도 존재합니다.</p>\n<p>예를 들어 코드상에서 <code>document.getElementById</code>가 사용되는 경우, TypeScript는 이때 <code>HTMLElement</code> 중에 <em>무언가</em>가 반환된다는 것만을 알 수 있는 반면에, 당신은 페이지 상에서 사용되는 ID로는 언제나 <code>HTMLCanvasElement</code>가 반환된다는 사실을 이미 알고 있을 수도 있습니다.</p>\n<p>이런 경우, <em>타입 단언</em>을 사용하면 타입을 좀 더 구체적으로 명시할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myCanvas: HTMLCanvasElement' >myCanvas</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface HTMLCanvasElement' >HTMLCanvasElement</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgExGAFc4BTMKAOgHMyoBRAGzPMoCEEBJfACgCI4KAJZgA+sDSYI-AJQwsMABIAVALIAZVBizNWFKAG4gA'>Try</a></div></pre>\n<p>타입 표기와 마찬가지로, 타입 단언은 컴파일러에 의하여 제거되며 코드의 런타임 동작에는 영향을 주지 않습니다.</p>\n<p>꺾쇠괄호를 사용하는 것 또한 (코드가 <code>.tsx</code> 파일이 아닌 경우) 가능하며, 이는 동일한 의미를 가집니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const myCanvas: HTMLCanvasElement' >myCanvas</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface HTMLCanvasElement' >HTMLCanvasElement</data-lsp></span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"main_canvas\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgTwMIEMwDcURgXhgHgAkAVAWQBlUMsBRAGwFM4GwoA+AExGAFdnWAdAHMGUekxZQAQggCSHABQAiOCgCWYAPrA0mCEoCUAbiA'>Try</a></div></pre>\n<blockquote>\n<p>기억하세요: 타입 단언은 컴파일 시간에 제거되므로, 타입 단언에 관련된 검사는 런타임 중에 이루어지지 않습니다.\r\n타입 단언이 틀렸더라도 예외가 발생하거나 <code>null</code>이 생성되지 않을 것입니다.</p>\n</blockquote>\n<p>TypeScript에서는 <em>보다 구체적인</em> 또는 <em>덜 구체적인</em> 버전의 타입으로 변환하는 타입 단언만이 허용됩니다.\r\n이러한 규칙은 아래와 같은 “불가능한” 강제 변환을 방지합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span><span class=\"code\">2352</span></span><span class=\"error-behind\">Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYCsaCwAoAYzgDtEAXUAD1AF5QAiAC0gBtW4HQBDRUEgK4BbAEYwA3EA'>Try</a></div></pre>\n<p>이 규칙이 때로는 지나치게 보수적으로 작용하여, 복잡하기는 하지만 유효할 수 있는 강제 변환이 허용되지 않기도 합니다.\r\n이런 경우, 두 번의 단언을 사용할 수 있습니다. <code>any</code>(또는 이후에 소개할 <code>unknown</code>)로 우선 변환한 뒤, 그다음 원하는 타입으로 변환하면 됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: T' >a</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='const expr: any' >expr</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T = {&#10;    a: 1;&#10;    b: 2;&#10;    c: 3;&#10;}' >T</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iAHgBxgC54oUBPAbgFgAoDMvBAFXgF54BvE4gRgvgBGxAEz8wxAMzwAvtRoB6efAC0qsAFcMq5bWTosUNvAAUuAiTQlyASgvwmFIA'>Try</a></div></pre>\n<h2 id=\"리터럴-타입\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%83%80%EC%9E%85\" aria-label=\"리터럴 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴 타입</h2>\n<p><code>string</code>과 <code>number</code>와 같은 일반적인 타입 이외에도, <em>구체적인</em> 문자열과 숫자 값을 타입 위치에서 지정할 수 있습니다.</p>\n<p>이를 이해하려면, JavaScript에서 변수 선언에 제공되는 다양한 방법들을 떠올려보시기 바랍니다. <code>var</code>와 <code>let</code> 모두 변수에 저장 가능한 값의 종류를 변경할 수 있으며, <code>const</code>는 이것이 불가능합니다. 이러한 특징들은 TypeScript가 리터럴 값을 위한 타입을 생성하는 방식에 그대로 반영됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' >changingString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' >changingString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// 변수 `changingString`은 어떤 문자열이든 모두 나타낼 수 있으며,</span></div><div class='line'><span style=\"color: #008000\">// 이는 TypeScript의 타입 시스템에서 문자열 타입 변수를 다루는 방식과 동일합니다.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let changingString: string' style='border-bottom: solid 2px lightgrey;'>changingString</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let changingString: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const constantString: \"Hello World\"' >constantString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// 변수 `constantString`은 오직 단 한 종류의 문자열만 나타낼 수 있으며,</span></div><div class='line'><span style=\"color: #008000\">// 이는 리터럴 타입의 표현 방식입니다.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const constantString: \"Hello World\"' style='border-bottom: solid 2px lightgrey;'>constantString</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const constantString: \"Hello World\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAxgFghgOwOYEtkGUwCc1IgXggCIAJEYYAewgHVKtgATIgbgFgAoWRVDbXAsQDywAIcQAsgFcEjSq04B6RREADPYAwhiAANuyXJhzItgAXGIgFtHAJa0RAHN2AE8cAvo4BdxwActEQBVdgBRaIgDIbAAwuAehohNQAjxwB5xwAcugBolFUdAFKaIABUATwAHEHQoHFSwQA1xiF9AUPGIQB2hwBKhwB1FwAXRwBxBmwcC4o1AH06IQBOmwAuOhMBKHsBdocAfmohATebAH3HAS1XACaa2gDpOXV4kA1x2DmUIAD0Afk45ygQAZ0goPcPEMCXkQVJyKlp6JgVVlQ1tY4OwM4ukEwhAEjHAQcmIIALpoggB1ViCAUInABqd+Ts9kAM50+AJBCBhKIxCDxCCAGs7AAyLgBf2xr5QA6K4AQNYgfUKU1mXBOHwQ534yBWay2QA'>Try</a></div></pre>\n<p>리터럴 타입은 그 자체만으로는 그다지 유의미하지 않습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: \"hello\"' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let x: \"hello\"' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #001080\"><data-err><data-lsp lsp='let x: \"hello\"' >x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"howdy\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '\"howdy\"' is not assignable to type '\"hello\"'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '\"howdy\"' is not assignable to type '\"hello\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oLACgAbSAF1AA9UAiAC0gILktAF5Qa6HKBufEUAeQDS+Miza16jHnj4A6eSLE04AdwAmAT25A'>Try</a></div></pre>\n<p>단 하나의 값만을 가질 수 있는 변수는 그다지 쓸모가 없죠!</p>\n<p>하지만 리터럴을 유니언과 <em>함께 사용하면</em>, 보다 유용한 개념들을 표현할 수 있게 됩니다. 예를 들어, 특정 종류의 값들만을 인자로 받을 수 있는 함수를 정의하는 경우가 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) alignment: \"left\" | \"right\" | \"center\"' >alignment</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"right\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"center\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, world\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"left\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function printText(s: string, alignment: \"left\" | \"right\" | \"center\"): void' >printText</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"G&apos;day, mate\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\"><data-err>&quot;centre&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAsAFABmArgHYDGALgJZxmgAO0NZVAKpAB5UAUKoRFRZkA5gBpQAQwA2NUWQC2kNqgBEMyESprQAH1BqWogBY79hiiqow1ASlABvQqFAhQAOi+EAvoWasHNx8agASkDIycJIA7ggyACZqkhpaOnYA3P4iQTy8agDiAOQJUgCekopSNsmW1tCQ9hlAA'>Try</a></div></pre>\n<p>숫자 리터럴 타입 또한 같은 방식으로 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function compare(a: string, b: string): -1 | 0 | 1' >compare</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: string' >a</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: string' >b</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> : -</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbADgQwE4FMAUmAXIgM5TYxgDmANIgEYnmU0CUJAtAIyIA+iAAz9EvAN4BYAFCJEeKCGxJMiALzrGiAPxDEJFQD5NO3l24BuaQF8gA'>Try</a></div></pre>\n<p>물론, 리터럴이 아닌 타입과도 함께 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Options | \"auto\"' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Options' >Options</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) Options.width: number' >width</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"auto\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function configure(x: Options | \"auto\"): void' >configure</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\"><data-err>&quot;automatic&quot;</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAsAFACWAdgC4wBmAhgMaSgDyADmUXCYqAN6GigB3IgBMyAC1QkArgFsARjADchAL6FKUkrTYdQtDpSIBzKdEgAKAB6oWOzqAA+oAETUpZOM4CUPPqBCgAHTBqoT6JIYmZubcgiLiqACMAAzJoCpeygThkaYWru6emWEGxnnmBR4y1Gy03opAA'>Try</a></div></pre>\n<p>또 하나의 리터럴 타입이 있습니다. 바로 불 리터럴 타입입니다.\r\n불 리터럴에는 오직 두 개의 타입만이 존재하며, 이는 익히 예상하셨듯이 <code>true</code>와 <code>false</code>입니다.\r\n<code>boolean</code> 타입 자체는 사실 단지 <code>true | false</code> 유니언 타입의 별칭입니다.</p>\n<h3 id=\"리터럴-추론\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4-%EC%B6%94%EB%A1%A0\" aria-label=\"리터럴 추론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴 추론</h3>\n<p>객체를 사용하여 변수를 초기화하면, TypeScript는 해당 객체의 프로퍼티는 이후에 그 값이 변화할 수 있다고 가정합니다.\r\n예를 들어, 아래와 같은 코드를 작성하는 경우를 보겠습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    counter: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) counter: number' >counter</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const someCondition: boolean' >someCondition</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    counter: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) counter: number' >counter</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3mpBbEAwqsAJYYmoBc8ARkkhCFCgNwCwAUAPRfwC0AsAFcMAvp2TosSGgCt4AXngBvREiEoMIGNQAM8AL7sOJAGbwAFDnxEUpcqgCUKzvHgzZAOmQatMRfAAjMYGQA'>Try</a></div></pre>\n<p>기존에 값이 <code>0</code>이었던 필드에 <code>1</code>을 대입하였을 때 TypeScript는 이를 오류로 간주하지 않습니다.\r\n이를 달리 말하면 <code>obj.counter</code>는 반드시 <code>number</code> 타입을 가져야 하며, <code>0</code> 리터럴 타입을 가질 수 없다는 의미입니다. 왜냐하면 타입은 <em>읽기</em> 및 <em>쓰기</em> 두 동작을 결정하는 데에 사용되기 때문입니다.</p>\n<p>동일한 사항이 문자열에도 적용됩니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: string' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: string;&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: string' >method</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAsAFAAmkAxgDYCG0koAZgK4B2pALgJZxOgAWlTRcpABKkAI4NIiVgAoG0cqmnR2TAOYAaUAFtIrHnCKoARAHEAogBVjoAD6hjABQDyAZWsBKVADc47IgDchCCgALThpAys4aGEpFzSoDRioAC8oADeoPKKDjysrAAOKCCQAB6U2oVCAHTx2sZauvqGJhbWoAC+QQR8AkKiElKyyTU5WqPNBkQeAUA'>Try</a></div></pre>\n<p>위 예시에서 <code>req.method</code>는 <code>string</code>으로 추론되지, <code>\"GET\"</code>으로 추론되지 않습니다. <code>req</code>의 생성 시점과 <code>handleRequest</code>의 호출 시점 사이에도 얼마든지 코드 평가가 발생할 수 있고, 이때 <code>req.method</code>에 <code>\"GUESS\"</code>와 같은 새로운 문자열이 대입될 수도 있으므로, TypeScript는 위 코드에 오류가 있다고 판단합니다.</p>\n<p>이러한 경우를 해결하는 데에는 두 가지 방법이 있습니다.</p>\n<ol>\n<li>\n<p>둘 중에 한 위치에 타입 단언을 추가하여 추론 방식을 변경할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 수정 1:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// 수정 2</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: string' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    url: string;&#10;    method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAspVgIQAlEAR2RAGcMAKZGCALngZi1QHMAaeAFsQGAjmAcARAHEAogBUp8AD7wpABQDyAZSUBKDgDccWYAG4AsACgA9LfgBaZ2GQZnjm-fiAMIcCoE-AAjGw2YHgM8HBU8AC88ADe8Czs6gQYGAAOdGz2IAAeUEIZZAB0YUJSgiJiEtLySvBQdOr1ygC+VnYO-vAATDZEJGSUNPRMUSXJghPV4sCNzbKKUvrmQA'>Try</a></div></pre>\n<p>수정 1은 <code>req.method</code>가 항상 <em>리터럴 타입</em> <code>\"GET\"</code>이기를 의도하며, 이에 따라 해당 필드에 <code>\"GUESS\"</code>와 같은 값이 대입되는 경우를 미연에 방지하겠다”는 것을 의미합니다.\r\n수정 2는 “무슨 이유인지, <code>req.method</code>가 <code>\"GET\"</code>을 값으로 가진다는 사실을 알고 있다”는 것을 의미합니다.</p>\n</li>\n<li>\n<p><code>as const</code>를 사용하여 객체 전체를 리터럴 타입으로 변환할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) url: \"https://example.com\"' >url</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://example.com\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"GET\"</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-lsp lsp='type const = {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >const</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function handleRequest(url: string, method: \"GET\" | \"POST\"): void' >handleRequest</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) url: \"https://example.com\"' >url</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='const req: {&#10;    readonly url: \"https://example.com\";&#10;    readonly method: \"GET\";&#10;}' >req</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) method: \"GET\"' >method</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwAspVgIQAlEAR2RAGcMAKZGCALngZi1QHMAaeAFsQGAjmAcARAHEAogBUp8AD7wpABQDyAZSUBKDgDccWYAG4AsACgA9LfgBaZ2GQZnjm2DwN4cKvAAvPAA3vAs7OoEGBgADnRs9iAAHlBCsWQAdN5CUoIiYhLS8krwAL7wUHTw3qgMVtZEJGSUNPRM-pkRgp0F4sD65kA'>Try</a></div></pre>\n</li>\n</ol>\n<p><code>as const</code> 접미사는 일반적인 <code>const</code>와 유사하게 작동하는데, 해당 객체의 모든 프로퍼티에 <code>string</code> 또는 <code>number</code>와 같은 보다 일반적인 타입이 아닌 리터럴 타입의 값이 대입되도록 보장합니다.</p>\n<h2 id=\"null과-undefined\" style=\"position:relative;\"><a href=\"#null%EA%B3%BC-undefined\" aria-label=\"null과 undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>null</code>과 <code>undefined</code></h2>\n<p>JavaScript에는 빈 값 또는 초기화되지 않은 값을 가리키는 두 가지 원시값이 존재합니다. 바로 <code>null</code>과 <code>undefined</code>입니다.</p>\n<p>TypeScript에는 각 값에 대응하는 동일한 이름의 두 가지 <em>타입</em>이 존재합니다. 각 타입의 동작 방식은 <code>strictNullChecks</code> 옵션의 설정 여부에 따라 달라집니다.</p>\n<h3 id=\"strictnullchecks가-설정되지-않았을-때\" style=\"position:relative;\"><a href=\"#strictnullchecks%EA%B0%80-%EC%84%A4%EC%A0%95%EB%90%98%EC%A7%80-%EC%95%8A%EC%95%98%EC%9D%84-%EB%95%8C\" aria-label=\"strictnullchecks가 설정되지 않았을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code>가 설정되지 않았을 때</h3>\n<p><code>strictNullChecks</code>가 <em>설정되지 않았다면</em>, 어떤 값이 <code>null</code> 또는 <code>undefined</code>일 수 있더라도 해당 값에 평소와 같이 접근할 수 있으며, <code>null</code>과 <code>undefined</code>는 모든 타입의 변수에 대입될 수 있습니다.\r\n이는 Null 검사를 하지 않는 언어(C#, Java 등)의 동작 방식과 유사합니다.\r\nNull 검사의 부재는 버그의 주요 원인이 되기도 합니다. 별다른 이유가 없다면, 코드 전반에 걸쳐 <code>strictNullChecks</code> 옵션을 설정하는 것을 항상 권장합니다.</p>\n<h3 id=\"strictnullchecks-설정되었을-때\" style=\"position:relative;\"><a href=\"#strictnullchecks-%EC%84%A4%EC%A0%95%EB%90%98%EC%97%88%EC%9D%84-%EB%95%8C\" aria-label=\"strictnullchecks 설정되었을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code> 설정되었을 때</h3>\n<p><code>strictNullChecks</code>가 <em>설정되었다면</em>, 어떤 값이 <code>null</code> 또는 <code>undefined</code>일 때, 해당 값과 함께 메서드 또는 프로퍼티를 사용하기에 앞서 해당 값을 테스트해야 합니다.\r\n옵셔널 프로퍼티를 사용하기에 앞서 <code>undefined</code> 여부를 검사하는 것과 마찬가지로, <em>좁히기</em>를 통하여 <code>null</code>일 수 있는 값에 대한 검사를 수행할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function doSomething(x: string | undefined): void' >doSomething</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | undefined' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | undefined' >x</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 아무 것도 하지 않는다</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toUpperCase(): string' >toUpperCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAEzgZTgWwKZQBYxgDmAFAB4BciAzlAE6FGIA+i4y2wh2yAlIgG8AsAChEiGMETlEAXnlswHLmB79hY8YgD02xIBFRwCzdiQME1gEebEgDVXAA5OJAUqOAUpsAnTaPEBfRNgA21bINdaEAjUcF7YAHRecKQARAAS3lEANIgxiADUiGThUHAAqgAOBdh0AMIAhr4kvLwA3AFuom5AA'>Try</a></div></pre>\n<h3 id=\"null-아님-단언-연산자-접미사-\" style=\"position:relative;\"><a href=\"#null-%EC%95%84%EB%8B%98-%EB%8B%A8%EC%96%B8-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%A0%91%EB%AF%B8%EC%82%AC-\" aria-label=\"null 아님 단언 연산자 접미사  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null 아님 단언 연산자 (접미사 <code>!</code>)</h3>\n<p>TypeScript에서는 명시적인 검사를 하지 않고도 타입에서 <code>null</code>과 <code>undefined</code>를 제거할 수 있는 특별한 구문을 제공합니다.\r\n표현식 뒤에 <code>!</code>를 작성하면 해당 값이 <code>null</code> 또는 <code>undefined</code>가 아니라고 타입 단언하는 것입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function liveDangerously(x?: number | undefined): void' >liveDangerously</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 오류 없음</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number | undefined' >x</data-lsp></span><span style=\"color: #000000\">!.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toFixed(fractionDigits?: number | undefined): string' >toFixed</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgNwKYBECGYDmGATnCAM7ICeAFAB4D8AXImCALYBGxiAPouABMMwGGAwCAlIgDeAWABQiRAHpliQCRjgDU7EgMdHAMuMKlEBGTjIMAOmRx8dAIQWocAGIxa46hIkBuBQF8gA'>Try</a></div></pre>\n<p>다른 타입 단언과 마찬가지로 이 구문은 코드의 런타임 동작을 변화시키지 않으므로, <code>!</code> 연산자는 반드시 해당 값이 <code>null</code> 또는 <code>undefined</code>가 <em>아닌</em> 경우에만 사용해야 합니다.</p>\n<h2 id=\"열거형\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95\" aria-label=\"열거형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형</h2>\n<p>열거형은 TypeScript가 JavaScript에 추가하는 기능으로, 어떤 값이 <em>이름이 있는 상수 집합</em>에 속한 값 중 하나일 수 있도록 제한하는 기능입니다. 대부분의 TypeScript 기능과 달리, 이 기능은 JavaScript에 타입 수준이 <em>아닌</em>, 언어와 런타임 수준에 추가되는 기능입니다. 따라서 열거형이 무엇인지는 알 필요가 있겠으나, 그 사용법을 명확하게 파악하지 않았다면 실제 사용은 보류하는 것이 좋습니다. 열거형에 대한 자세한 내용을 확인하려면 <a href=\"https://www.typescriptlang.org/ko/docs/handbook/enums.html\">열거형 문서</a>를 읽어보시기 바랍니다.</p>\n<h2 id=\"자주-사용되지-않는-원시형-타입\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9B%90%EC%8B%9C%ED%98%95-%ED%83%80%EC%9E%85\" aria-label=\"자주 사용되지 않는 원시형 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자주 사용되지 않는 원시형 타입</h2>\n<p>앞서 언급한 타입 이외에, 타입 시스템에 존재하는 나머지 JavaScript 원시 타입들을 다루도록 하겠습니다.\r\n물론, 여기서 깊게 다루지는 않을 것입니다.</p>\n<h4 id=\"bigint\" style=\"position:relative;\"><a href=\"#bigint\" aria-label=\"bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>bigint</code></h4>\n<p>ES2020 이후, 아주 큰 정수를 다루기 위한 원시 타입이 JavaScript에 추가되었습니다. 바로 <code>bigint</code>입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// BigInt 함수를 통하여 bigint 값을 생성</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const oneHundred: bigint' >oneHundred</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">bigint</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var BigInt: BigIntConstructor&#10;(value: string | number | bigint | boolean) => bigint' >BigInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 리터럴 구문을 통하여 bigint 값을 생성</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const anotherHundred: bigint' >anotherHundred</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">bigint</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #0000FF\">n</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcpEGcBMAGXBYAKCJFACEBLeASQDtJRALVcAwhwH07RBWxcA1VwG9HQAjKhXqhASDWARcdCBdgcCMg0QDGAe1oYGyxAAkArrQAmsRLrSD4whgF5yVOpAAUARhw4AlAG4iJMIBrOwAyLgF-bQQBtawA5uyW4+EzMxSVkFZVVQaFpFSAALRFhtPQMjASERS0ccWlcgA'>Try</a></div></pre>\n<p>BigInt에 대한 더 자세한 내용은 <a href=\"(/docs/handbook/release-notes/typescript-3-2.html#bigint)\">TypeScript 3.2 릴리즈 노트</a>에서 확인할 수 있습니다.</p>\n<h4 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>symbol</code></h4>\n<p><code>symbol</code>은 전역적으로 고유한 참조값을 생성하는 데에 사용할 수 있는 원시 타입이며, <code>Symbol()</code> 함수를 통하여 생성할 수 있습니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const firstName: typeof firstName' >firstName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const secondName: typeof secondName' >secondName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Symbol: SymbolConstructor&#10;(description?: string | number | undefined) => symbol' >Symbol</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"name\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const firstName: typeof firstName' >firstName</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const secondName: typeof secondName' >secondName</data-lsp></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 절대로 일어날 수 없습니다</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AsAFADGcAdogC6gBmAlkhQHICGAtpKALygDKAnqwBGcADYAKAESk2kCQEoA3IRLkqiSCoAmLdl14Dh4qTPlKChWtVBi6DHR06PQ6rfbmgA3oVCgQoQBATgADNgDodoIA+44Ato4AFDaCAGEOggGOjgK1DgBNNgCdNhAC+QA'>Try</a></div></pre>\n<p>Symbol에 대한 더 자세한 내용은 <a href=\"https://www.typescriptlang.org/ko/docs/handbook/symbols.html\">심벌 문서</a>에서 확인할 수 있습니다.</p>","headings":[{"value":"원시 타입 : string, number, 그리고 boolean","depth":2},{"value":"배열","depth":2},{"value":"any","depth":2},{"value":"noImplicitAny","depth":3},{"value":"변수에 대한 타입 표기","depth":2},{"value":"함수","depth":2},{"value":"매개변수 타입 표기","depth":3},{"value":"반환 타입 표기","depth":3},{"value":"익명 함수","depth":3},{"value":"객체 타입","depth":2},{"value":"옵셔널 프로퍼티","depth":3},{"value":"유니언 타입","depth":2},{"value":"유니언 타입 정의하기","depth":3},{"value":"유니언 타입 사용하기","depth":3},{"value":"타입 별칭","depth":2},{"value":"인터페이스","depth":2},{"value":"타입 별칭과 인터페이스의 차이점","depth":3},{"value":"타입 단언","depth":2},{"value":"리터럴 타입","depth":2},{"value":"리터럴 추론","depth":3},{"value":"null과 undefined","depth":2},{"value":"strictNullChecks가 설정되지 않았을 때","depth":3},{"value":"strictNullChecks 설정되었을 때","depth":3},{"value":"Null 아님 단언 연산자 (접미사 !)","depth":3},{"value":"열거형","depth":2},{"value":"자주 사용되지 않는 원시형 타입","depth":2},{"value":"bigint","depth":4},{"value":"symbol","depth":4}],"frontmatter":{"permalink":"/ko/docs/handbook/2/everyday-types.html","title":"Everyday Types","disable_toc":null,"handbook":null,"oneline":"언어의 원시 타입들.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"The Basics","oneline":"TypeScript를 배우는 첫 걸음: 기본 타입.","permalink":"/ko/docs/handbook/2/basic-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Narrowing","oneline":"Understand how TypeScript uses JavaScript knowledge to reduce the amount of type syntax in your projects.","permalink":"/docs/handbook/2/narrowing.html"}}}},"pageContext":{"id":"1-everyday-types","slug":"/ko/docs/handbook/2/everyday-types.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/Everyday Types.md","previousID":"84c3a91b-0a74-5acf-b280-e01525725874","nextID":"02637503-46d1-5d11-b2cc-807fa5837668","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}