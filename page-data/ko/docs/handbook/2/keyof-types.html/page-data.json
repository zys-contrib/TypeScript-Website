{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/2/keyof-types.html","result":{"data":{"markdownRemark":{"id":"fca7aa75-1174-56e3-acaa-2d4ae1d6fef2","excerpt":"keyof 타입 연산자 keyof 연산자는 객체 타입에서 객체의 키 값들을 숫자나 문자열 리터럴 유니언을 생성합니다.\n아래 타입 P는 “x” | “y”와 동일한 타입입니다. 만약 타입이 string이나 number 인덱스 시그니쳐를 가지고 있다면, keyof…","html":"<h2 id=\"keyof-타입-연산자\" style=\"position:relative;\"><a href=\"#keyof-%ED%83%80%EC%9E%85-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"keyof 타입 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>keyof</code> 타입 연산자</h2>\n<p><code>keyof</code> 연산자는 객체 타입에서 객체의 키 값들을 숫자나 문자열 리터럴 유니언을 생성합니다.\n아래 타입 P는 “x” | “y”와 동일한 타입입니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type P = keyof Point' style='border-bottom: solid 2px lightgrey;'>P</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type P = keyof Point</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACg9gSwHbCgXigbygDwFxRICuAtgEYQBOA3FCAceVVAL7UBQoks6UA1hBBwAZrEQoOAeklRZAPQD8QA'>Try</a></div></pre>\n<p>만약 타입이 <code>string</code>이나 <code>number</code> 인덱스 시그니쳐를 가지고 있다면, <code>keyof</code>는 해당 타입을 리턴합니다.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Arrayish = {&#10;    [n: number]: unknown;&#10;}' >Arrayish</data-lsp></span><span style=\"color: #000000\"> = { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = number' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Arrayish = {&#10;    [n: number]: unknown;&#10;}' >Arrayish</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Mapish = {&#10;    [k: string]: boolean;&#10;}' >Mapish</data-lsp></span><span style=\"color: #000000\"> = { [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type M = string | number' style='border-bottom: solid 2px lightgrey;'>M</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Mapish = {&#10;    [k: string]: boolean;&#10;}' >Mapish</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type M = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAggTnAhiAlgZwBZQLxQN5QDaAdgFxTECuAtgEYRwC65lxA1sQPYDuxUAvgG4AUKEiwcUNhBCcAZrATJ0GEQHo1ULQD0A-MNHhoAWURgVkgoTbk0wOCmIBzZlFqdOAGwiI+Qw+LGktKyCqbmmOqaOrpAA'>Try</a></div></pre>\n<p>위 예제에서 주목할 점은 <code>M</code>은 <code>string | number</code>라는 점입니다. — JavaScript 객체 키는 항상 문자열을 강제하기 때문에, <code>obj[0]</code>은 <code>obj[\"0\"]</code>과 동일합니다.</p>\n<p><code>keyof</code> 타입은 우리가 추후에 학습할 매핑된 타입과 함께 사용할 때 특히 유용합니다.</p>","headings":[{"value":"keyof 타입 연산자","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/2/keyof-types.html","title":"Keyof Type Operator","disable_toc":null,"handbook":null,"oneline":"타입 컨텍스트에서 keyof 연산자 사용하기","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Generics","oneline":"Types which take parameters","permalink":"/ko/docs/handbook/2/generics.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Typeof Type Operator","oneline":"타입 컨텍스트에서 typeof 연산자 사용하기.","permalink":"/ko/docs/handbook/2/typeof-types.html"}}}},"pageContext":{"id":"1-keyof-type-operator","slug":"/ko/docs/handbook/2/keyof-types.html","repoPath":"/packages/documentation/copy/ko/handbook-v2/Type Manipulation/Keyof Type Operator.md","previousID":"ec2336a8-ed9b-5ddd-a72d-432df993fbde","nextID":"6bbe87ed-33ce-5636-b323-6a7ef15e94fa","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}