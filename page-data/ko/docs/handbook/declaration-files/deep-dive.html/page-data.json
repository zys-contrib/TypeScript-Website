{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/declaration-files/deep-dive.html","result":{"data":{"markdownRemark":{"id":"d82156b3-637c-5e00-b657-66937c65a726","excerpt":"정의 파일 이론: 심층 분석 (Definition File Theory: A Deep Dive) 원하는 API 형태를 제공하는 모듈을 만드는 것은 까다로울 수 있습니다.\n예를 들어, new…","html":"<h2 id=\"정의-파일-이론-심층-분석-definition-file-theory-a-deep-dive\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A1%A0-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-definition-file-theory-a-deep-dive\" aria-label=\"정의 파일 이론 심층 분석 definition file theory a deep dive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의 파일 이론: 심층 분석 (Definition File Theory: A Deep Dive)</h2>\n<p>원하는 API 형태를 제공하는 모듈을 만드는 것은 까다로울 수 있습니다.\n예를 들어, <code>new</code>의 사용에 따라 호출할 때 다른 타입을 생성하는 모듈을 원할 수 있고,\n계층에 노출 된 다양한 명명된 타입을 가지고 있으며,\n모듈 객체에 대한 여러 프로퍼티도 가질 수 있습니다.</p>\n<p>이 가이드에서는, 익숙한 API를 노출하는 복잡한 정의 파일에 대해 작성하는 도구를 제공합니다.\n또한 옵션이 다양하기 때문에 여기서는 모듈 (또는 UMD) 라이브러리에 중점을 둡니다.</p>\n<h2 id=\"주요-컨셉-key-concepts\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EC%BB%A8%EC%85%89-key-concepts\" aria-label=\"주요 컨셉 key concepts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 컨셉 (Key Concepts)</h2>\n<p>TypeScript 작동 방식에 대해 여러 주요 개념을 이해하여\n정의의 형태를 만드는 방법을 완전히 이해할 수 있습니다.</p>\n<h3 id=\"타입-types\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-types\" aria-label=\"타입 types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 (Types)</h3>\n<p>이 가이드를 읽고 있다면, 아마도 TypeScript의 타입에 대해 이미 알고 있을 것입니다.\n보다 명확하게하기 위해, 다음과 같이 <em>타입</em>이 도입됩니다:</p>\n<ul>\n<li>타입 별칭 선언 (<code>type sn = number | string;</code>)</li>\n<li>인터페이스 선언 (<code>interface I { x: number[]; }</code>)</li>\n<li>클래스 선언 (<code>class C { }</code>)</li>\n<li>열거형 선언 (<code>enum E { A, B, C }</code>)</li>\n<li>타입을 가리키는 <code>import</code> 선언</li>\n</ul>\n<p>이러한 각 선언 형태는 새로운 타입 이름을 만듭니다.</p>\n<h3 id=\"값-values\" style=\"position:relative;\"><a href=\"#%EA%B0%92-values\" aria-label=\"값 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값 (Values)</h3>\n<p>타입과 마찬가지로 값이 무엇인지 이미 알고 있을 것입니다.\n값은 표현식에서 참조할 수 있는 런타임 이름입니다.\n예를 들어 <code>let x = 5;</code>에서는 <code>x</code>라고 불리는 값을 생성합니다.</p>\n<p>다시 명확하게 말하자면, 다음과 같이 값을 만듭니다:</p>\n<ul>\n<li><code>let</code>, <code>const</code>, 그리고 <code>var</code> 선언</li>\n<li>값을 포함하는 <code>네임스페이스</code> 또는 <code>모듈</code> 선언</li>\n<li><code>열거형</code> 선언</li>\n<li><code>클래스</code> 선언</li>\n<li>값을 참조하는 <code>import</code> 선언</li>\n<li><code>함수</code> 선언</li>\n</ul>\n<h3 id=\"네임스페이스-namespaces\" style=\"position:relative;\"><a href=\"#%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-namespaces\" aria-label=\"네임스페이스 namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네임스페이스 (Namespaces)</h3>\n<p>타입은 <em>네임스페이스</em> 안에 존재할 수 있습니다.\n예를 들어, <code>let x: A.B.C</code> 이란 선언이 있다면,\n타입 <code>C</code>는 <code>A.B</code> 네임스페이스에서 온 것 입니다.</p>\n<p>이 구별은 미묘하지만 중요합니다 — 여기서 <code>A.B</code>는 타입이거나 값일 필요는 없습니다.</p>\n<h2 id=\"간단한-조합-하나의-이름-여러-의미-simple-combinations-one-name-multiple-meanings\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%A1%B0%ED%95%A9-%ED%95%98%EB%82%98%EC%9D%98-%EC%9D%B4%EB%A6%84-%EC%97%AC%EB%9F%AC-%EC%9D%98%EB%AF%B8-simple-combinations-one-name-multiple-meanings\" aria-label=\"간단한 조합 하나의 이름 여러 의미 simple combinations one name multiple meanings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 조합: 하나의 이름, 여러 의미 (Simple Combinations: One name, multiple meanings)</h2>\n<p><code>A</code>라는 이름이 있으면, <code>A</code>에 대해 타입, 값 또는 네임스페이스라는 세 가지 다른 의미를 찾을 수 있습니다.\n이름을 해석하는 방법은 사용하는 컨텍스트에 따라 다릅니다.\n예를 들어 <code>let m: A.A = A;</code> 선언에서,\n<code>A</code>는 먼저 네임스페이스로 사용 된 다음, 타입의 이름으로, 그 다음 값으로 사용됩니다.\n즉 완전히 다른 선언을 의미할 수 있습니다!</p>\n<p>약간은 혼란스러워 보이지만, 과하게 사용하지 않는 한 실제로 매우 편리합니다.\n결합 동작의 유용한 측면을 살펴 보겠습니다.</p>\n<h3 id=\"내부-조합-built-in-combinations\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EC%A1%B0%ED%95%A9-built-in-combinations\" aria-label=\"내부 조합 built in combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 조합 (Built-in Combinations)</h3>\n<p>영리한 사람이라면, <em>타입</em>과 <em>값</em> 목록에서 <code>클래스</code>가 둘 다 나온 것을 눈치챘을 것입니다.\n<code>class C { }</code> 선언은 두 가지를 만듭니다:\n클래스 인스턴스의 형태를 나타내는 <em>타입</em> <code>C</code>와\n클래스 생성자를 나타내는 <em>값</em> <code>C</code> 입니다.\n열거형 선언도 비슷하게 동작합니다.</p>\n<h3 id=\"사용자-조합-user-combinations\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A1%B0%ED%95%A9-user-combinations\" aria-label=\"사용자 조합 user combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 조합 (User Combinations)</h3>\n<p>모듈 파일 <code>foo.d.ts</code>을 작성했습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">SomeVar</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그 다음 사용했습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'./foo'</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SomeVar</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>잘 작동하지만, <code>SomeType</code>과 <code>SomeVar</code>는 이름이 같도록\n밀접하게 관련되어 있다고 상상할 수 있습니다.\n결합을 사용하여 같은 이름 <code>Bar</code>로 두 가지 다른 객체 (값과 타입)를 표시 할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이 경우 사용하는 코드를 구조 분해할 수 있는 아주 좋은 기회입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'./foo'</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>여기서도 <code>Bar</code>를 타입과 값으로 사용했습니다.\n<code>Bar</code> 값을 <code>Bar</code> 타입으로 선언할 필요가 없다는 점을 유의하세요 — 저 둘은 독립적입니다.</p>\n<h2 id=\"고급-결합-advanced-combinations\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EA%B8%89-%EA%B2%B0%ED%95%A9-advanced-combinations\" aria-label=\"고급 결합 advanced combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고급 결합 (Advanced Combinations)</h2>\n<p>선언은 여러 개의 선언에 걸쳐 결합될 수 있습니다.\n예를 들어, <code>class C { }</code>와 <code>interface C { }</code> 같이 결합할 수 있으며 둘 다 <code>C</code> 타입에 프로퍼티를 추가합니다.</p>\n<p>충돌을 일으키지 않는다면 충분히 합법적입니다.\n일반적인 경험 법칙은 값의 이름이 <code>네임스페이스</code>로 선언되지 않는 한 항상 같은 이름의 다른 값과 충돌하고,\n타입 별칭 선언(<code>type s = string</code>)으로 선언 된 경우 타입이 충돌하며,\n네임스페이스와는 절대로 충돌하지 않는 것입니다.</p>\n<p>어떻게 사용되는지 살펴보겠습니다.</p>\n<h3 id=\"인터페이스를-사용하여-추가하기-adding-using-an-interface\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-adding-using-an-interface\" aria-label=\"인터페이스를 사용하여 추가하기 adding using an interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>인터페이스</code>를 사용하여 추가하기 (Adding using an <code>interface</code>)</h3>\n<p><code>인터페이스</code>에 다른 <code>인터페이스</code> 선언을 사용하여 멤버를 추가할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... 다른 위치 ...</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = ...;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 성공</span></div></code></div></pre>\n<p>클래스와도 같이 동작합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... 다른 위치 ...</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = ...;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 성공</span></div></code></div></pre>\n<p>단, 타입 별칭 (<code>type s = string;</code>)에는 인터페이스를 사용해서 추가할 수 없습니다.</p>\n<h3 id=\"네임스페이스를-사용하여-추가하기-adding-using-a-namespace\" style=\"position:relative;\"><a href=\"#%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0-adding-using-a-namespace\" aria-label=\"네임스페이스를 사용하여 추가하기 adding using a namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>네임스페이스</code>를 사용하여 추가하기 (Adding using a <code>namespace</code>)</h3>\n<p><code>네임스페이스</code> 선언은 충돌을 일으키지 않는 방식으로 새로운 타입, 값 그리고 네임스페이스를 추가할 수 있습니다.</p>\n<p>예를 들어, 클래스에 정적 멤버를 추가할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... 다른 위치 ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div></code></div></pre>\n<p>위 예제에서 <code>C</code>의 <em>정적</em> 측면(생성자 함수)에 값을 추가했습니다.\n<em>값</em>을 추가 했고 모든 값에 대한 컨테이너가 다르기 때문입니다.\n(타입은 네임스페이스에 포함되고 네임스페이스는 다른 네임스페이스에 포함됩니다).</p>\n<p>네임스페이스 타입을 클래스에 추가할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... 다른 위치 ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\"> { }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div></code></div></pre>\n<p>이 예제에서 <code>namespace</code> 선언을 작성할 때까지 네임스페이스 <code>C</code>는 없었습니다.\n네임스페이스 <code>C</code>는 클래스에 의해 생성된 <code>C</code>의 값 또는 타입과 충돌하지 않습니다.</p>\n<p>마지막으로 <code>namespace</code> 선언을 사용하여 다양한 병합을 할 수 있습니다.\n특히 현실적인 예는 아니지만, 흥미로운 동작을 확인할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Y</span><span style=\"color: #000000\"> { }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Z</span><span style=\"color: #000000\"> { }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ... 다른 위치 ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">Y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Z</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> { }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>위 예제에서 첫 번째 블록은 다음 이름의 의미를 만듭니다:</p>\n<ul>\n<li>값 <code>X</code> (<code>네임스페이스</code> 선언은 값 <code>Z</code>를 포함하기 때문입니다)</li>\n<li>네임스페이스 <code>X</code> (<code>네임스페이스</code> 선언은 타입 <code>Y</code>를 포함하기 때문입니다)</li>\n<li><code>X</code> 네임스페이스 안의 타입 <code>Y</code></li>\n<li><code>X</code> 네임스페이스 안의 타입 <code>Z</code> (클래스의 인스턴스 형태)</li>\n<li><code>X</code> 값의 프로퍼티인 값 <code>Z</code> (클래스의 생성자 함수)</li>\n</ul>\n<p>두 번째 블록은 다음 이름의 의미를 만듭니다:</p>\n<ul>\n<li><code>X</code> 값의 프로퍼티인 값 <code>Y</code> (<code>number</code> 타입)</li>\n<li>네임스페이스 <code>Z</code></li>\n<li><code>X</code> 값의 프로퍼티인 값 <code>Z</code></li>\n<li><code>X.Z</code> 네임스페이스 안의 타입 <code>C</code></li>\n<li><code>X.Z</code> 값의 프로퍼티인 값 <code>C</code></li>\n<li>타입 <code>X</code></li>\n</ul>\n<h2 id=\"export--or-import-사용하기-using-with-export--or-import\" style=\"position:relative;\"><a href=\"#export--or-import-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-using-with-export--or-import\" aria-label=\"export  or import 사용하기 using with export  or import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>export =</code> or <code>import</code> 사용하기 (Using with <code>export =</code> or <code>import</code>)</h2>\n<p>중요한 규칙은 <code>export</code>와 <code>import</code> 선언이 대상의 <em>모든 의미</em> 를 내보내거나 가져온다는 것 입니다.</p>\n<!-- TODO: Write more on that. -->","headings":[{"value":"정의 파일 이론: 심층 분석 (Definition File Theory: A Deep Dive)","depth":2},{"value":"주요 컨셉 (Key Concepts)","depth":2},{"value":"타입 (Types)","depth":3},{"value":"값 (Values)","depth":3},{"value":"네임스페이스 (Namespaces)","depth":3},{"value":"간단한 조합: 하나의 이름, 여러 의미 (Simple Combinations: One name, multiple meanings)","depth":2},{"value":"내부 조합 (Built-in Combinations)","depth":3},{"value":"사용자 조합 (User Combinations)","depth":3},{"value":"고급 결합 (Advanced Combinations)","depth":2},{"value":"인터페이스를 사용하여 추가하기 (Adding using an interface)","depth":3},{"value":"네임스페이스를 사용하여 추가하기 (Adding using a namespace)","depth":3},{"value":"export = or import 사용하기 (Using with export = or import)","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/declaration-files/deep-dive.html","title":"Deep Dive","disable_toc":null,"handbook":null,"oneline":"How do d.ts files work, a deep dive","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Do's and Don'ts","oneline":"Recommendations for writing d.ts files","permalink":"/ko/docs/handbook/declaration-files/do-s-and-don-ts.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Publishing","oneline":"How to get your d.ts files to users","permalink":"/ko/docs/handbook/declaration-files/publishing.html"}}}},"pageContext":{"id":"6-deep-dive","slug":"/ko/docs/handbook/declaration-files/deep-dive.html","repoPath":"/packages/documentation/copy/ko/declaration-files/Deep Dive.md","previousID":"dca35cc9-765a-56ca-8c7a-67b8e75fa8fd","nextID":"30128e36-d12b-57b6-b460-1811608ecf6d","lang":"ko","modifiedTime":"2024-10-21T12:35:09.553Z"}},"staticQueryHashes":[]}