{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/jsdoc-supported-types.html","result":{"data":{"markdownRemark":{"id":"849908be-286b-540b-b157-6b578e33a5ca","excerpt":"아래 목록은 JavaScript 파일에 타입 정보 제공을 위해 JSDoc 어노테이션을 사용할 때\n현재 지원되는 구성의 개요를 다룹니다. 아래 명시적으로 나열되지 않은 태그(예 @async)는 아직 지원되지 않습니다. @type @param (or @arg or @argument…","html":"<p>아래 목록은 JavaScript 파일에 타입 정보 제공을 위해 JSDoc 어노테이션을 사용할 때\n현재 지원되는 구성의 개요를 다룹니다.</p>\n<p>아래 명시적으로 나열되지 않은 태그(예 <code>@async</code>)는 아직 지원되지 않습니다.</p>\n<ul>\n<li><a href=\"#type\"><code>@type</code></a></li>\n<li><a href=\"#param-and-returns\"><code>@param</code></a> (or <a href=\"#param-and-returns\"><code>@arg</code></a> or <a href=\"#param-and-returns\"><code>@argument</code></a>)</li>\n<li><a href=\"#param-and-returns\"><code>@returns</code></a> (or <a href=\"#param-and-returns\"><code>@return</code></a>)</li>\n<li><a href=\"#typedef-callback-and-param\"><code>@typedef</code></a></li>\n<li><a href=\"#typedef-callback-and-param\"><code>@callback</code></a></li>\n<li><a href=\"#template\"><code>@template</code></a></li>\n<li><a href=\"#constructor\"><code>@class</code></a> (or <a href=\"#constructor\"><code>@constructor</code></a>)</li>\n<li><a href=\"#this\"><code>@this</code></a></li>\n<li><a href=\"#extends\"><code>@extends</code></a> (or <a href=\"#extends\"><code>@augments</code></a>)</li>\n<li><a href=\"#enum\"><code>@enum</code></a></li>\n</ul>\n<h4 id=\"class-extensions\" style=\"position:relative;\"><a href=\"#class-extensions\" aria-label=\"class extensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>class</code> extensions</h4>\n<ul>\n<li><a href=\"#jsdoc-property-modifiers\">Property Modifiers</a> <code>@public</code>, <code>@private</code>, <code>@protected</code>, <code>@readonly</code></li>\n</ul>\n<p>The meaning is usually the same, or a superset, of the meaning of the tag given at <a href=\"https://jsdoc.app\">jsdoc.app</a>.\nThe code below describes the differences and gives some example usage of each tag.</p>\n<p><strong>Note:</strong> You can use <a href=\"/play?useJavaScript=truee=4#example/jsdoc-support\">the playground to explore JSDoc support</a>.</p>\n<h2 id=\"type\" style=\"position:relative;\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@type</code></h2>\n<p>“@type” 태그를 사용하여 타입의 이름을 참조할 수 있습니다 (다음 경우 중 하나인 원시 타입과 TypeScript에 정의되어있거나 JSDoc “@typedef” 태그로 정의되어있거나).\n당신은 대부분 JSDoc 타입들이나 TypeScript 타입을 사용할 것입니다,<a href=\"/docs/handbook/basic-types.html\">기존에 많이 사용하는 <code>string</code></a>부터 <a href=\"/docs/handbook/advanced-types.html\">조건부 타입인 고급 타입</a>까지.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Window}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">win</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{PromiseLike&lt;string&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">promisedString</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// DOM 프로퍼티를 사용하여 HTML 요소를 지정할 수 있습니다</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{HTMLElement}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myElement</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">querySelector</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">selector</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">element</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dataset</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">myData</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>@type</code> 을 이용하여 유니언 타입을 지정할 수 있습니다. 예를 들어 어떤 것은 string 또는 boolean 일 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(string | boolean)}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sb</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>괄호는 유니언 타입에 대한 선택 사항입니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | boolean}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sb</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>다양한 구문을 통하여 배열 타입을 지정할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number[]}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ns</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Array.&lt;number&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nds</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Array&lt;number&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nas</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>또한 객체 리터럴 타입들도 지정할 수 있습니다.\n예를 들어, 오브젝트에 프로퍼티 ‘a’ (string) 와 ‘b’ (number)을 사용한 경우 다음 구문을 사용합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number }}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">var9</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>당신은 JSDoc 구문이나 TypeScript 구문을 사용하여 문자열 및 숫자 인덱스 맵과 배열과 비슷한 오브젝트를 표시할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 맵 같은 object는 임의의 `string` 프로퍼티들을 `number`로 바꿔줍니다.</span></div><div class='line'><span style=\"color: #008000\"> *</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object.&lt;string, number&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">stringToNumber</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object.&lt;number, object&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arrayLike</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>앞의 두 타입은 TypeScript의 타입인 <code>{ [x: string]: number }</code> 와 <code>{ [x: number]: any }</code>를 동일합니다. 컴파일러는 이 두 구문을 모두 이해합니다.</p>\n<p>TypeScript나 클로저 구문을 사용하여 함수 타입을 지정할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function(string, boolean): number}</span><span style=\"color: #008000\"> 클로저 구문 */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sbn</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(s: string, b: boolean) =&gt; number}</span><span style=\"color: #008000\"> TypeScript 구문 */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sbn2</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>혹은 특정하지 않은 <code>Function</code> 타입을 사용할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Function}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fn7</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fn6</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>클로저의 다른 타입들 또한 작동합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{*}</span><span style=\"color: #008000\"> - 'any' 타입으로 쓸 수 있습니다</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">star</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{?}</span><span style=\"color: #008000\"> - 알 수 없는 타입 ('any'와 같습니다)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">question</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h3 id=\"형변환-casts\" style=\"position:relative;\"><a href=\"#%ED%98%95%EB%B3%80%ED%99%98-casts\" aria-label=\"형변환 casts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형변환 (Casts)</h3>\n<p>TypeScript는 클로저 구문을 차용합니다.\n이렇게 하면 괄호로 묶인 표현식 앞에 <code>@type</code> 태그를 추가하여 다른 유형으로 형변환할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | string}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numberOrString</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">random</span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">typeAssertedNumber</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">numberOrString</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h3 id=\"타입-가져오기-import-types\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-import-types\" aria-label=\"타입 가져오기 import types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 가져오기 (Import types)</h3>\n<p>다른 파일에서 사용하고 있는 타입들은 import 선언을 통하여 가져올 수 있습니다.\n이 구문은 TypeScript에 따라 다르며 JSDoc 표준과 다릅니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: types.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pet</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @filename: main.js</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #008000\"> { import(\"./types\").Pet }</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">walk</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Walking </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">p</span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">...`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>가져온 타입들 또한 별칭 선언에서 사용할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: types.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pet</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #008000\">// @filename: main.js</span></div><div class='line'><span style=\"color: #008000\">// ---cut---</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{ import(\"./types\").Pet }</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Pet</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Pet}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myPet</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">myPet</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>만약 알 수 없는 타입이거나 너무 큰 타입일 경우 모듈에서 얻어온 값의 타입을 사용할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: accounts.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">userAccount</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Name\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">address:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"An address\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">postalCode:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">country:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">planet:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">system:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">galaxy:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">universe:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #008000\">// @filename: main.js</span></div><div class='line'><span style=\"color: #008000\">// ---cut---</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{typeof import(\"./accounts\").userAccount }</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./accounts\"</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\">userAccount</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h2 id=\"param-과-returns\" style=\"position:relative;\"><a href=\"#param-%EA%B3%BC-returns\" aria-label=\"param 과 returns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@param</code> 과 <code>@returns</code></h2>\n<p><code>@param</code>은 타입 구문인 <code>@type</code>과 동일하게 사용합니다, 하지만 매개변수 이름을 추가할 수 있습니다.\n매개변수는 이름 주변에 대괄호와 함께 선택적으로 선언됩니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 매개변수들은 다양한 구문형식으로 선언될 수 있습니다</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\">  </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - string 매개변수.</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #008000\"> - 선택적 매개변수 (클로저 구문)</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[p3]</span><span style=\"color: #008000\"> - 또다른 선택적 매개변수 (JSDoc 구문).</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[p4</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">\"test\"]</span><span style=\"color: #008000\"> - 기본값과 선택적 매개변수</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> 이것은 결과 값입니다</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">stringsStringStrings</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">p2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">p3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">p4</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// TODO</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>마찬가지로, 함수의 반환형일 경우:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{PromiseLike&lt;string&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ps</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number }}</span><span style=\"color: #008000\"> - May use '</span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\">' as well as '</span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\">'</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ab</span><span style=\"color: #000000\">() {}</span></div></code></div></pre>\n<h2 id=\"typedef-callback-and-param\" style=\"position:relative;\"><a href=\"#typedef-callback-and-param\" aria-label=\"typedef callback and param permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@typedef</code>, <code>@callback</code>, and <code>@param</code></h2>\n<p><code>@typedef</code> 는 복잡한 타입을 정의할 때 사용합니다.\n마치 <code>@param</code>과 비슷하게 동작합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType</span><span style=\"color: #008000\"> - 새로운 타입인 'SpecialType'을 생성합니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop1</span><span style=\"color: #008000\"> - SpecialType의 string 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop2</span><span style=\"color: #008000\"> - SpecialType의 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop3</span><span style=\"color: #008000\"> - SpecialType의 선택적 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@prop</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[prop4]</span><span style=\"color: #008000\"> - SpecialType의 선택적 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@prop</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[prop5</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">42]</span><span style=\"color: #008000\"> - SpecialType의 기본값이 존재하는 선택적 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SpecialType}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">specialTypeObject</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">specialTypeObject</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop3</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>object</code> 혹은 <code>Object</code>를 첫 번째 줄에 사용할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{object}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType1</span><span style=\"color: #008000\"> - 새로운 타입인 'SpecialType'을 생성합니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop1</span><span style=\"color: #008000\"> - SpecialType의 string 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop2</span><span style=\"color: #008000\"> - SpecialType의 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop3</span><span style=\"color: #008000\"> - SpecialType의 선택적 number 프로퍼티</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SpecialType1}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">specialTypeObject1</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>@param</code> 은 한 번만 사용하는 타입과 비슷한 구문을 허용합니다.\n포함된 프로퍼티의 이름은 파라미터의 이름을 접두사로 사용해야 합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options</span><span style=\"color: #008000\"> - 위의 SpecialType와 비슷합니다.</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop1</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop2</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop3</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[options.prop4]</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[options.prop5</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">42]</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">special</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop4</span><span style=\"color: #000000\"> || </span><span style=\"color: #098658\">1001</span><span style=\"color: #000000\">) + </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop5</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>@callback</code>은 <code>@typedef</code>와 비슷합니다. 하지만 이것은 object 타입 대신 특정한 function 타입을 지정합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@callback</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Predicate</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[index]</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{boolean}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Predicate}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ok</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> !(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> % </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>물론, 이런 타입들은 TypeScript 구문에서 <code>@typedef</code> 단 한 줄로 선언할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ prop1: string, prop2: string, prop3?: number }}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(data: string, index?: number) =&gt; boolean}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Predicate</span><span style=\"color: #008000\"> */</span></div></code></div></pre>\n<h2 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@template</code></h2>\n<p><code>@template</code> 태그를 사용하여 제네릭 함수를 선언할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{T}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> - 제네릭 매개변수는 리턴 타입과 같게 됩니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{T}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">id</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">id</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">id</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">id</span><span style=\"color: #000000\">({});</span></div></code></div></pre>\n<p>콤마 혹은 여러 태그를 통하여 여러 타입의 매개변수를 선언할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T,U,V</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">W,X</span></div><div class='line'><span style=\"color: #008000\"> */</span></div></code></div></pre>\n<p>또한 특정한 매개변수 앞에 타입을 지정할 수 있습니다.\n매개변수 중 오직 첫 번째 매개변수만 제한됩니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> {string} K - K는 string 혹은 string 리터럴이어야 합니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> {{ serious(): string }} Seriousalizable - serious 메서드가 있어야 합니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{K}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">key</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Seriousalizable}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">object</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">seriousalize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">object</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ????</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>제네릭 클래스 혹은 타입 선언은 지원되지 않습니다.</p>\n<h2 id=\"클래스-classes\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-classes\" aria-label=\"클래스 classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 (Classes)</h2>\n<p>클래스는 ES6 클래스로 선언할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 프로퍼티 타입은 추론될 수 있습니다</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 또는 명시적으로 선언할 수도 있습니다</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | null}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">title</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 만약 다른 곳에 선언되어 있다면 어노테이션으로 표기할 수 있습니다.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">size</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 오류가 난다면, 이니셜 라이저는 string을 예상합니다</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">s</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// C는 new 와 함께 호출되어야합니다</span></div><div class='line'><span style=\"color: #008000\">// 하지만 이건 JavaScript이고, 이것은 허용되며</span></div><div class='line'><span style=\"color: #008000\">// 'any'로 간주됩니다.</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>다음 섹션에 설명된 대로 생성자 함수를 선언할 수 있습니다:</p>\n<h2 id=\"constructor\" style=\"position:relative;\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@constructor</code></h2>\n<p>컴파일러는 속성 할당을 기반으로 생성자 함수를 추론합니다, 하지만 <code>@constructor</code> 태그를 사용하면 더 엄격한 검사와 제안 사항을 확인할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @checkJs</span></div><div class='line'><span style=\"color: #008000\">// @errors: 2345 2348</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@constructor</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 프로퍼티 타입은 추론될 수 있습니다</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 또는 명시적으로 선언할 수도 있습니다</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | null}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">title</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 만약 다른 곳에 선언되어 있다면 어노테이션으로 표기할 수 있습니다.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">size</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">data</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">s</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">size</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">c</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">size</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<blockquote>\n<p>Note: 오류 메시지는 <a href=\"/docs/handbook/tsconfig-json.html\">a JSConfig</a> 및 <a href=\"/tsconfig#checkJs\"><code>checkJs</code></a>가 활성화된 상태에서만 JS 코드 베이스에 나타납니다.</p>\n</blockquote>\n<p><code>@constructor</code>를 사용하면 생성자 함수 <code>C</code>안에 <code>this</code>가 있는지 검사하므로, <code>initialize</code> 메서드에 대한 제안사항을 받으며 만약 인자로 숫자를 넘긴다면 오류가 발생합니다. 또한 <code>C</code>를 생성하지 않고 호출만 한다면 에디터에서 경고를 표시할 수 있습니다.</p>\n<p>유감스럽게도, 이는 호출가능한 생성자 함수는 <code>@constructor</code>를 사용하지 못함을 의미합니다.</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@this</code></h2>\n<p>컴파일러는 코드가 동작할 컨텍스트가 있다면 보통 <code>this</code>의 타입을 파악할 수 있습니다. 그렇지 않은 경우, <code>@this</code>를 사용하여 명확하게 <code>this</code>의 타입을 지정할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@this</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{HTMLElement}</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{*}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">e</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">callbackForLater</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">clientHeight</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">parseInt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 잘 작동해야 합니다!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"extends\" style=\"position:relative;\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@extends</code></h2>\n<p>Javascript 클래스를 제네릭 기반 클래스로부터 상속(extend)하면, 매개변수가 어떤 타입이 되어야 하는지 지정할 곳이 없습니다. <code>@extends</code> 태그는 이러한 타입 매개변수를 위한 위치를 제공합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@extends</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Set&lt;T&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SortableSet</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Set</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>@extends</code>는 클래스에서만 작동합니다. 현재까지, 생성자 함수가 클래스를 상속할 수 있는 방법은 없습니다.</p>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@enum</code></h2>\n<p><code>@enum</code> 태그는 멤버가 모두 지정된 객체 리터럴을 만들 수 있게 도와줍니다. Javascript 대부분의 객체 리터럴과 달리, 이 태그는 다른 멤버를 허용하지 않습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@enum</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">JSDocState</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">BeginningOfLine:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">SawAsterisk:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">SavingComments:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">JSDocState</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SawAsterisk</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>@enum</code>은 TypeScript의 <code>enum</code>과 상당히 다르고, 더 간단합니다. 하지만 TypeScript의 열거형(enum)과 달리, <code>@enum</code>은 어떠한 타입도 가질 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@enum</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function(number): number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">MathFuncs</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">add1</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">id</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> -</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">sub1</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">MathFuncs</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">add1</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h2 id=\"추가-예제-more-examples\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EC%98%88%EC%A0%9C-more-examples\" aria-label=\"추가 예제 more examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가 예제 (More examples)</h2>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// ---cut---</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">someObj</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">param1</span><span style=\"color: #008000\"> - 프로퍼티 할당 문서를 참조하세요</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">x</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">param1</span><span style=\"color: #000000\">) {},</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 변수 할당 문서를 참조하세요</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Window}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">someFunc</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 클래스 메서드</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">greeting</span><span style=\"color: #008000\"> 사용할 인사말</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sayHi</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">greeting</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hi!\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 화살표 함수 표현식</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> - 곱하는 수</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">myArrow</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * JSX의 무상태 함수형 컴포넌트(SFC)에도 작동합니다</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{a: string, b: number}}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">test</span><span style=\"color: #008000\"> - Some param</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sfc</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">test</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #0000FF\">{</span><span style=\"color: #001080\">test</span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">charAt</span><span style=\"color: #000000FF\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000FF\">)</span><span style=\"color: #0000FF\">}</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 매개변수는 클로저 구문을 사용하면 클래스 생성자로 사용할 수 있습니다.</span></div><div class='line'><span style=\"color: #008000\"> *</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{new(...args: any[]): object}}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">C</span><span style=\"color: #008000\"> - The class to register</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">registerClass</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">C</span><span style=\"color: #000000\">) {}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - '나머지' 문자열 인수들의 배열 ('any' 타입으로 취급됨)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn10</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">) {}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - '나머지' 문자열 인수들의 배열 ('any' 타입으로 취급됨)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn9</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">join</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"지원하지-않는다고-알려진-패턴-patterns-that-are-known-not-to-be-supported\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4%EA%B3%A0-%EC%95%8C%EB%A0%A4%EC%A7%84-%ED%8C%A8%ED%84%B4-patterns-that-are-known-not-to-be-supported\" aria-label=\"지원하지 않는다고 알려진 패턴 patterns that are known not to be supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지원하지 않는다고 알려진 패턴 (Patterns that are known NOT to be supported)</h2>\n<p>Value space 안의 객체를 타입으로 태그하는 것은 객체가 마치 생성자 함수처럼 타입을 생성하지 않는 이상 작동하지 않습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">aNormalFunction</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{aNormalFunction}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">wrong</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 'typeof'를 대신 사용하세요:</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{typeof aNormalFunction}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">right</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>접미사(Postfix)는 선택적(Optional) 프로퍼티를 구체화하지 않는 객체 리터럴 타입의 프로퍼티 타입과 같습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number= }}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">wrong</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 프로퍼티 이름 대신 물음표 접미사를 사용하세요:</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b?: number }}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">right</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>strictNullCheck</code>가 활성화 중인 경우에만 널러블(Nullable) 타입이 의미가 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{?number}</span></div><div class='line'><span style=\"color: #008000\"> * With strictNullChecks: true  -- number | null</span></div><div class='line'><span style=\"color: #008000\"> * With strictNullChecks: false -- number</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">nullable</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>유니언 타입을 사용해도 됩니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | null}</span></div><div class='line'><span style=\"color: #008000\"> * With strictNullChecks: true  -- number | null</span></div><div class='line'><span style=\"color: #008000\"> * With strictNullChecks: false -- number</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">unionNullable</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>널러블 타입이 아닌 경우에는 아무 의미가 없으며 원래 타입으로 취급합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{!number}</span></div><div class='line'><span style=\"color: #008000\"> * 타입 number를 가집니다</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">normal</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>JSDoc의 타입 체계와 달리, TypeScript는 타입이 오직 null을 포함하거나 하지 않는다 표시할 수 있습니다.\n널러블은 명확하게 구분되지 않습니다 — 만약 strictNullChecks가 활성화 중이라면, <code>number</code>는 널러블하지 않습니다.\n반대의 경우, <code>number</code>는 널러블합니다.</p>\n<h3 id=\"지원하지-않는-태그-unsupported-tags\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%83%9C%EA%B7%B8-unsupported-tags\" aria-label=\"지원하지 않는 태그 unsupported tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지원하지 않는 태그 (Unsupported tags)</h3>\n<p>TypeScript는 지원하지 않는 JSDoc 태그를 무시합니다.</p>\n<p>태그 지원을 위한 오픈 이슈가 아래에 있습니다:</p>\n<ul>\n<li><code>@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code>@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code>@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code>@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code>{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/35524\">issue #35524</a>)</li>\n</ul>\n<h2 id=\"js-class-extensions\" style=\"position:relative;\"><a href=\"#js-class-extensions\" aria-label=\"js class extensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS Class extensions</h2>\n<h3 id=\"jsdoc-property-modifiers\" style=\"position:relative;\"><a href=\"#jsdoc-property-modifiers\" aria-label=\"jsdoc property modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDoc Property Modifiers</h3>\n<p>From TypeScript 3.8 onwards, you can use JSDoc to modify the properties in a class. First are the accessibility modifiers: <code>@public</code>, <code>@private</code>, and <code>@protected</code>.\nThese tags work exactly like <code>public</code>, <code>private</code>, and <code>protected</code> respectively work in TypeScript.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@private</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: any' >identifier</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Car.printIdentifier(): void' >printIdentifier</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Car(): Car' >Car</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'identifier' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'identifier' is private and only accessible within class 'Car'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUCBAC6IC0AxgBaTkDWee5ANgIaKKgDCL0oA3nlChycAHaIi0AK7kiCABQBKfoKGhgAKg0QADtACWANxZFIoDcFVCilfYgB0+gCaRRRfQDN9MUAF5QOAAMgQDcqgC+DEJ6+m4Aki5unt7QSipqwmKIcEyQ9kxwAObyNnaOie5eMIphQpGRjFlEwn6gopAA7lw8SmEi4jl5BcXk5a6VKTVAA'>Try</a></div></pre>\n<ul>\n<li><code>@public</code> is always implied and can be left off, but means that a property can be reached from anywhere.</li>\n<li><code>@private</code> means that a property can only be used within the containing class.</li>\n<li><code>@protected</code> means that a property can only be used within the containing class, and all derived subclasses, but not on dissimilar instances of the containing class.</li>\n</ul>\n<p>Next, we’ve also added the <code>@readonly</code> modifier to ensure that a property is only ever written to during initialization.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@readonly</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: any' >identifier</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Car.printIdentifier(): void' >printIdentifier</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Car(): Car' >Car</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUCBAC6IC0AxgBaTkDWee5ANgIaKKgDCL0oA3nlChycAHaIi0AK7kiCABQBKfoKGhgAKg0RokFgBMxTAJ6gNwVUKKUAlogB0N-ZFFEbAMxsxQAXlABGHBwAblUAXwYhAAdoG1cASWdXDy9oJRU1YTFEOCZIeyY4AHN5aztHJLdPGEVQoQiIxmyiYV9QUUgAdy4eJVCRcVz8wpLyCpcq1NqgA'>Try</a></div></pre>","headings":[{"value":"class extensions","depth":4},{"value":"@type","depth":2},{"value":"형변환 (Casts)","depth":3},{"value":"타입 가져오기 (Import types)","depth":3},{"value":"@param 과 @returns","depth":2},{"value":"@typedef, @callback, and @param","depth":2},{"value":"@template","depth":2},{"value":"클래스 (Classes)","depth":2},{"value":"@constructor","depth":2},{"value":"@this","depth":2},{"value":"@extends","depth":2},{"value":"@enum","depth":2},{"value":"추가 예제 (More examples)","depth":2},{"value":"지원하지 않는다고 알려진 패턴 (Patterns that are known NOT to be supported)","depth":2},{"value":"지원하지 않는 태그 (Unsupported tags)","depth":3},{"value":"JS Class extensions","depth":2},{"value":"JSDoc Property Modifiers","depth":3}],"frontmatter":{"permalink":"/ko/docs/handbook/jsdoc-supported-types.html","title":"JSDoc Reference","disable_toc":null,"handbook":null,"oneline":"What JSDoc does TypeScript-powered JavaScript support?","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Type Checking JavaScript Files","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/ko/docs/handbook/type-checking-javascript-files.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Creating .d.ts Files from .js files","oneline":"How to add d.ts generation to JavaScript projects","permalink":"/ko/docs/handbook/declaration-files/dts-from-js.html"}}}},"pageContext":{"id":"7-jsdoc-reference","slug":"/ko/docs/handbook/jsdoc-supported-types.html","repoPath":"/packages/documentation/copy/ko/javascript/JSDoc Reference.md","previousID":"02e6794b-6a42-578f-b1bd-26216d6b015d","nextID":"4f9ddc73-ed1a-5b1f-83fc-b2ab470d09f0","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}