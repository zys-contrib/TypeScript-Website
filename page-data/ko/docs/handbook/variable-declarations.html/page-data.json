{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/variable-declarations.html","result":{"data":{"markdownRemark":{"id":"b14ba5fc-63c9-5eaf-afa2-bc5d210f77a3","excerpt":"let과 const는 JavaScript에서 비교적 새로운 두 가지 유형의 변수 선언입니다.\n앞에서 언급했듯이, let은 var와 어느 정도 유사하지만, 사용자가 JavaScript에서 자주 마주치는 결함을 피할 수 있게 해줍니다.\nconst는 let…","html":"<p><code>let</code>과 <code>const</code>는 JavaScript에서 비교적 새로운 두 가지 유형의 변수 선언입니다.\n<a href=\"./basic-types.md#let%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\">앞에서 언급했듯이</a>, <code>let</code>은 <code>var</code>와 어느 정도 유사하지만, 사용자가 JavaScript에서 자주 마주치는 결함을 피할 수 있게 해줍니다.\n<code>const</code>는 <code>let</code>의 기능이 강화된 것으로 변수에 재할당을 방지합니다.</p>\n<p>TypeScript는 JavaScript의 상위 집합이므로, 당연히 <code>let</code>과 <code>const</code>를 지원합니다.\n여기서는 새로운 선언 방식들과 왜 그 방식들이 <code>var</code>보다 선호되는지를 더 자세히 설명합니다.</p>\n<p>JavaScript를 아무렇게나 사용하고 있었다면, 다음 섹션이 기억을 새로 고치도록 도와줄 것입니다.\nJavaScript에서 <code>var</code> 선언의 단점들에 대해 모두 알고 있다면 쉽게 넘어갈 수 있습니다.</p>\n<h1 id=\"var-선언-var-declarations\" style=\"position:relative;\"><a href=\"#var-%EC%84%A0%EC%96%B8-var-declarations\" aria-label=\"var 선언 var declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>var</code> 선언 (<code>var</code> declarations)</h1>\n<p>기존 JavaScript에서는 변수 선언을 할 때 <code>var</code> 키워드를 사용했습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>알다시피, <code>a</code>라는 변수를 <code>10</code>이라는 값으로 선언했습니다.</p>\n<p>또한, 변수를 함수 내부에 선언할 수도 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">message</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello, world!\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그리고, 같은 변수를 다른 함수 안에서 접근할 수도 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// '11'을 반환</span></div></code></div></pre>\n<p>위 예제에서, <code>g</code>는 <code>f</code> 안에 선언된 <code>a</code>를 잡아 둡니다.\n언제든 <code>g</code>가 호출될 때, <code>a</code>의 값은 <code>f</code> 안의 <code>a</code> 값을 가리킵니다.\n<code>f</code>가 실행되면서 <code>g</code>가 한번 호출된 후에도, <code>a</code>에 접근해 수정할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// '2' 반환</span></div></code></div></pre>\n<h2 id=\"스코프-규칙-scoping-rules\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EA%B7%9C%EC%B9%99-scoping-rules\" aria-label=\"스코프 규칙 scoping rules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 규칙 (Scoping rules)</h2>\n<p><code>var</code> 선언은 다른 언어와 다른 이상한 스코프 규칙들을 가지고 있습니다.\n아래 예제를 살펴보겠습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">shouldInitialize</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">shouldInitialize</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// '10' 반환</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 'undefined' 반환</span></div></code></div></pre>\n<p>이 예제에서, 어떤 분들은 머뭇거릴 수도 있습니다.\n변수 <code>x</code>는 <em><code>if</code> 블록 안에 선언되어 있지만</em>, 블록의 바깥에서도 이 변수에 접근할 수 있습니다.\n이 이유는 <code>var</code>선언은 이를 감싸고 있는 블록과 관계없이 이를 감싸고 있는 함수, 모듈, 네임스페이스, 전역 스코프에서 접근할 수 있기 때문입니다.\n어떤 이는 이를 <em><code>var</code>-스코프</em> 혹은 <em>함수 스코프</em>라고 부릅니다.\n매개 변수 또한 함수 스코프입니다.</p>\n<p>이런 스코프 규칙은 몇 가지 실수를 유발할 수 있습니다.\n더욱 문제를 심각하게 하는 것은 변수를 여러 번 선언하는 것이 에러가 아니라는 것입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sumMatrix</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[][]) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>아마 쉽게 찾을 수 있겠지만, <code>i</code>가 같은 함수 스코프의 변수를 참조하고 있기 때문에 <code>for</code>-loop 안에서 실수로 변수 <code>i</code>를 덮어쓸 수도 있습니다\n경험 많은 개발자는 바로 알아차리겠지만, 비슷한 종류의 버그는 코드 리뷰를 거치며 좌절의 원인이 되기도 합니다.</p>\n<h2 id=\"변수-캡쳐링의-단점-variable-capturing-quirks\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%BA%A1%EC%B3%90%EB%A7%81%EC%9D%98-%EB%8B%A8%EC%A0%90-variable-capturing-quirks\" aria-label=\"변수 캡쳐링의 단점 variable capturing quirks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 캡쳐링의 단점 (Variable capturing quirks)</h2>\n<p>다음 코드의 출력 결과를 예상해 보세요:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">); }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>익숙하지 않은 분들을 위해 말씀드리자면, <code>setTimeout</code>은 특정 밀리 초 후에 함수를 실행합니다.(다른 작업의 실행이 멈추는 것을 기다리며)</p>\n<p>준비됐나요? 살펴보겠습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">text</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">10\n10\n10\n10\n10\n10\n10\n10\n10\n10</span></div></code></div></pre>\n<p>많은 JavaScript 개발자들은 이런 동작에 익숙한 편이지만, 만약 놀랐더라도 당신 혼자만 놀란 것은 아닙니다.\n많은 사람들이 출력 결과가 다음과 같을 거라고 생각합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">text</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</span></div></code></div></pre>\n<p>앞서 변수 캡쳐링에 대해 언급했던 부분을 기억하나요?\n<code>setTimout</code>에 전달하는 모든 함수 표현식은 사실 같은 스코프에서 같은 <code>i</code>를 참조합니다.</p>\n<p>잠시, 이게 무슨 뜻인지 생각해 보세요.\n<code>setTimeout</code>은 함수를 몇 밀리 초 후에 실행 시키겠지만. <em>항상</em><code>for</code>루프가 실행을 멈추고 난 뒤에 실행됩니다.\n<code>for</code> 루프가 실행을 중지했을 때, <code>i</code>의 값은 <code>10</code>입니다.\n따라서 매번 주어진 함수가 호출될 때마다 <code>10</code>을 출력할 것입니다.</p>\n<p>일반적으로 이를 동작하게 하는 방법은 즉시 실행 함수(IIFE - an Immediately Invoked Function Expression)를 사용해 매 반복마다 <code>i</code>를 잡아두는 것입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 현재 값으로 함수를 호출시켜</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 현재 상태의 'i'를 잡아둔다.</span></div><div class='line'><span style=\"color: #000000\">    (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">); }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    })(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이런 이상해 보이는 패턴이 사실 일반적인 패턴입니다.\n매개변수에 <code>i</code>가 <code>for</code> 루프의 <code>i</code>를 감춰 버립니다. 하지만 이름을 같게 했기 때문에 루프의 실행 부를 크게 수정할 필요가 없습니다.</p>\n<h1 id=\"let-선언-let-declarations\" style=\"position:relative;\"><a href=\"#let-%EC%84%A0%EC%96%B8-let-declarations\" aria-label=\"let 선언 let declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>let</code> 선언 (<code>let</code> declarations)</h1>\n<p>이제, <code>var</code>에  몇 가지 문제점에 대해 알게 되었는데, 이런 이유 때문에 <code>let</code>을 도입하게 되었습니다.\n사용되는 키워드를 빼고는 <code>let</code> 문은 <code>var</code>와 동일한 방법으로 작성됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">hello</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>주요한 차이점은 구문 보단 의미에 있는데, 이제 이 내용을 살펴볼 것입니다.</p>\n<h2 id=\"블록-스코프-block-scoping\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84-block-scoping\" aria-label=\"블록 스코프 block scoping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블록 스코프 (Block-scoping)</h2>\n<p>변수가 <code>let</code>을 이용해 선언되었을 때, 이는 <em>렉시컬 스코핑(lexical-scoping)</em> 혹은 <em>블록 스코핑(block-scoping)</em> 이라 불리는 것을 사용합니다.\n<code>var</code>로 선언된 변수가 이를 포함한 함수까지 흘러나오는 것과 달리, 블록-스코프 변수들은 이를 가장 가깝게 감싸고 있는 블록 혹은 <code>for</code>-루프 밖에서 접근할 수 없습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 'a'를 참조할 수 있습니다.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 오류: 'b'는 여기서 존재하지 않습니다.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>여기, 두 지역 변수 <code>a</code>와 <code>b</code>가 있습니다.\n<code>a</code>의 스코프는 <code>f</code>의 블록으로 한정되지만, <code>b</code>는 이를 감싸고 있는 <code>if</code>문의 블록까지로 한정됩니다.</p>\n<p><code>catch</code> 문에 선언된 변수 또한 비슷한 스코프 규칙을 가집니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"oh no!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Oh well.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 오류: 'e'는 여기서 존재하지 않습니다.</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>또 다른 블록-스코프 변수의 특징은 변수들이 선언되기 전에 읽거나, 쓰는 것이 불가능하다는 것입니다.\n이 변수들은 스코프에 걸쳐 “존재”하지만, 선언되는 부분 전까지 모든 부분들이 <em>temploral dead zone</em>입니다.\n이것은 <code>let</code>문 이전에 변수들에 접근할 수 없다는 정교한 방식이며, 다행히 TypeScript가 알려줍니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">++; </span><span style=\"color: #008000\">// `a`가 선언되기 전에 잘못된 사용.</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>주의할 점은 여전히 선언되기 전에 블록-스코프 변수를 <em>잡아둘</em> 수 있다는 것입니다.\n선언되기 전에 함수를 실행하는 것이 안된 다는 것만 알아두면 됩니다.\nES2015를 대상으로한, 최신 런타임은 오류를 던질 것입니다; 하지만 현재 TypeScript에서는 허용되며, 오류를 보고하지 않습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 'a' 캡처는 성공</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// `a`가 선언되기 전에 `foo` 를 호출</span></div><div class='line'><span style=\"color: #008000\">// 런타임에 오류를 던질 것 입니다.</span></div><div class='line'><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>temporal dead zone에 더 자세한 설명은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Mozilla Developer Network</a>를 살펴보세요.</p>\n<h2 id=\"재선언과-쉐도잉-re-declarations-and-shadowing\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%84%A0%EC%96%B8%EA%B3%BC-%EC%89%90%EB%8F%84%EC%9E%89-re-declarations-and-shadowing\" aria-label=\"재선언과 쉐도잉 re declarations and shadowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재선언과 쉐도잉 (Re-declarations and Shadowing)</h2>\n<p><code>var</code>로 선언하면 얼마나 변수를 많이 선언하는지는 중요하지 않다고 했습니다. 단 하나만 생성됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>위 예제를 보면 모든 <code>x</code>의 선언은 사실 같은 <code>x</code>를 가르치며, 이는 유효합니다.\n이건 종종 버그의 원인이 됩니다.\n고맙게도, <code>let</code>선언은 이것을 허용하지 않습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 오류: 'x'를 같은 스코프에 선언할 수 없습니다.</span></div></code></div></pre>\n<p>TypeScript가 문제를 알려주기 때문에, 변수를 반드시 블록 범위로 지정할 필요는 없습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 오류: 매개 변수 선언을 방해합니다.</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 오류: `x`를 중복해서 선언할 수 없습니다.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>블록-스코프 변수가 함수-스코프 변수로 선언될 수 없다는 것은 아닙니다.\n블록 스코프 변수는 단지 별개의 다른 블록에 선언되어야 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">condition</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// '0' 반환</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);  </span><span style=\"color: #008000\">// '100' 반환</span></div></code></div></pre>\n<p>더 중첩된 스코프에서 바깥 스코프의 변수 이름을 사용하는 것을 <em>shadowing</em>이라고 합니다.\n<em>shadowing</em>은 양날의 검이라고 할 수 있는데, 이는 실수로 방생되어 특정 버그를 일으키거나, 혹은 특정 버그를 막기 위해 쓰이기 때문입니다.\n예를 들어, 위에서 사용했던 <code>sumMatrix</code> 함수를 <code>let</code> 을 이용해서 작성했다고 생각해 봅시다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sumMatrix</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[][]) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">matrix</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\">currentRow</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sum</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이 루프는 합을 올바르게 계산할 것입니다. 왜냐하면 안쪽 루프의 <code>i</code> 가 바깥 루프의 <code>i</code>를 가리기 때문입니다.</p>\n<p><em>보통</em> 더 명확한 코드 작성을 위해 shadowing 사용을 피합니다.\n하지만 shadowing의 이점을 활용할 수 있는 적합한 상황이 있으므로, 최선의 판단을 내려야 합니다.</p>\n<h2 id=\"블록-스코프-변수-캡쳐링-block-scoped-variable-capturing\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84-%EB%B3%80%EC%88%98-%EC%BA%A1%EC%B3%90%EB%A7%81-block-scoped-variable-capturing\" aria-label=\"블록 스코프 변수 캡쳐링 block scoped variable capturing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블록 스코프 변수 캡쳐링 (Block-scoped variable capturing)</h2>\n<p><code>var</code> 선언에 변수 캡쳐링을 하는 것을 처음 보았을 때, 변수가 한번 캡쳐되면 어떻게 동작하는지 간단히 살펴보았습니다.\n이를 더 잘 이해해 보면, 스코프가 각각 실행될 때마다 변수의 “환경”을 만듭니다.\n변수의 환경과 캡쳐된 변수들은 심지어 스코프가 포함한 모든 것이 실행을 종료한 후에도 존재합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">theCityThatAlwaysSleeps</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">getCity</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Seattle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">getCity</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">city</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getCity</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>city</code>를 해당 환경 안에 캡쳐했기 때문에, <code>if</code> 블록의 실행이 완료되었음에도 여전히 <code>city</code>에 접근할 수 있습니다.</p>\n<p>앞의 <code>setTimeout</code> 예제에서, <code>for</code> 루프가 매번 반복될 때마다 변수를 캡쳐하기 위해서 IIFE를 사용했던 것을 떠올려 봅시다.\n실제론, 캡처된 변수를 위해 새로운 변수 환경을 만드는 것이었습니다.\n이는 약간의 고통스러운 일이지만, 다행히, 타입스크립트 에서는 그렇게 할필요가 없습니다.</p>\n<p><code>let</code> 선언은 루프의 일부로 선언될 때 동작이 크게 다릅니다.\n이 선언은 루프 자체에 새로운 환경을 만드는 대신, <code>반복마다</code> 새로운 환경을 만들어 냅니다.\n어쨋든 이건 IIFE를 통해 하고 있었던 동작이므로, 이전 <code>setTimeout</code>예제를 <code>let</code>선언만 사용해서 바꿀수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> ; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">); }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그리고 예상 했던 대로, 다음과 같은 결과가 출력됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">text</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</span></div></code></div></pre>\n<h1 id=\"const-선언-const-declarations\" style=\"position:relative;\"><a href=\"#const-%EC%84%A0%EC%96%B8-const-declarations\" aria-label=\"const 선언 const declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>const</code> 선언 (<code>const</code> declarations)</h1>\n<p><code>const</code> 선언은 변수를 선언하는 또 다른 방법입니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">numLivesForCat</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>이 방법은 <code>let</code> 선언과 비슷하지만 그 이름에서 말해주듯이, 일단 바인딩 되면 값을 변경할 수 없습니다.\n다른 말로 <code>const</code>는 <code>let</code>과 같은 스코프 규칙을 가지고 있지만, 재할당 할 수 없습니다.</p>\n<p>이를 <code>const</code>가 참조하는 값이 <em>불변</em>이라고 혼동하면 안 됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">numLivesForCat</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">kitty</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Aurora\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">numLives:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numLivesForCat</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 오류</span></div><div class='line'><span style=\"color: #001080\">kitty</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Danielle\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">numLives:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numLivesForCat</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 모두 \"성공\"</span></div><div class='line'><span style=\"color: #001080\">kitty</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Rory\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">kitty</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Kitty\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">kitty</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Cat\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">kitty</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">numLives</span><span style=\"color: #000000\">--;</span></div></code></div></pre>\n<p>위와 같은 상황을 피하기 위해 특별한 조치를 취하지 않는 한, <code>const</code> 변수의 내부 상태는 여전히 수정 가능합니다.\n다행히, TypeScript를 사용하면 객체의 멤버가 <code>읽기 전용(readonly)</code>이라고 지정할 수 있습니다.\n<a href=\"./interfaces.md\">Interfaces 챕터</a>에 자세히 설명되어 있습니다.</p>\n<h1 id=\"let-vs-const\" style=\"position:relative;\"><a href=\"#let-vs-const\" aria-label=\"let vs const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>let</code> vs. <code>const</code></h1>\n<p>유사한 스코프의 의미를 가지는 두 가지 유형의 변수 선언이 있기 때문에, 어느 것을 사용하는지는 스스로 선택해야 합니다.\n광범위한 질문처럼, 답은 ‘때에 따라 다르다’입니다.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">최소 권한의 원칙</a>을 적용하면, 수정하려는 선언 이외에 모든 선언은 <code>const</code>를 사용해야 합니다.\n그 이유는, 만약 변수가 수정될 필요가 없다면 같은 코드베이스에서 작업하는 다른 사람들이 자동으로 객체를 수정할 수 없어야 하고, 그들이 정말 변수에 재할당할 필요가 있는지 고려할 필요가 있습니다.\n<code>const</code>를 사용하는 것은 데이터의 흐름을 추론할 때 코드를 더 예측하기 쉽게 해줍니다.</p>\n<p>최선의 판단을 하고 해당되는 경우, 팀원들과 문제에 대해 상의하세요.</p>\n<p>이 핸드북은 대부분 <code>let</code> 선언을 사용합니다.</p>\n<h1 id=\"구조-분해-destructuring\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-destructuring\" aria-label=\"구조 분해 destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조 분해 (Destructuring)</h1>\n<p>TypeScript가 가진 또 다른 ECMAScript 2015 특징은 구조 분해입니다.\n자세한 내용은, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Mozilla Developer Network의 글</a>을 참고 하세요.\n이번 섹션에서는 간단하게 개요를 살펴보겠습니다.</p>\n<h2 id=\"배열-구조-분해-array-destructuring\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-array-destructuring\" aria-label=\"배열 구조 분해 array destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 구조 분해 (Array destructuring)</h2>\n<p>구조 분해의 가장 단순한 형태는 배열 구조 분해 할당입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">input</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 1 출력</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 2 출력</span></div></code></div></pre>\n<p>이는 <code>first</code>, <code>second</code>라는 이름의 새로운 두 변수를 생성합니다.\n이는 인덱싱을 사용하는 것과 동일하지만 더 편리합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">first</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">second</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>구조 분해 할당은 이미 선언된 변수에도 동작합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 변수를 스왑</span></div><div class='line'><span style=\"color: #000000\">[</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">] = [</span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>그리고, 함수의 매개변수에도 동작합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">]: [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]);</span></div></code></div></pre>\n<p>나머지 요소들에 대해 <code>...</code> 구문을 사용하여 변수를 생성할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 1 출력</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// [ 2, 3, 4 ] 출력</span></div></code></div></pre>\n<p>물론 JavaScript이기 때문에, 필요하지 않은 뒤따라 오는 요소들을 무시할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 1 출력</span></div></code></div></pre>\n<p>또는 그 밖에 요소들을 무시할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [, </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">, , </span><span style=\"color: #001080\">fourth</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 2 출력</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fourth</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 4 출력</span></div></code></div></pre>\n<h2 id=\"튜플-구조-분해-tuple-destructuring\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%94%8C-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-tuple-destructuring\" aria-label=\"튜플 구조 분해 tuple destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플 구조 분해 (Tuple destructuring)</h2>\n<p>튜플은 배열처럼 구조 분해됩니다; 구조 분해된 변수는 튜플 요소와 일치하는 타입을 얻게 됩니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// a: number, b: string, c: boolean</span></div></code></div></pre>\n<p>튜플의 범위를 넘어선 구조 분해는 오류입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 오류, 인덱스 3에 요소가 없습니다.</span></div></code></div></pre>\n<p>배열과 마찬가지로, 더 짧은 튜플을 얻기 위해 <code>...</code>로 튜플의 나머지를 구조 분해할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">bc</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// bc: [string, boolean]</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// d: [], 비어있는 튜플</span></div></code></div></pre>\n<p>또는 뒤따라 오는 요소나 다른 요소를 무시할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// a: number</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tuple</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// b: string</span></div></code></div></pre>\n<h2 id=\"객체-구조-분해-object-destructuring\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-object-destructuring\" aria-label=\"객체 구조 분해 object destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 구조 분해 (Object destructuring)</h2>\n<p>또한 객체를 구조 분해할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">c:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bar\"</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>이는 <code>o.a</code>, <code>o.b</code>로 부터 새로운 변수 <code>a</code>와 <code>b</code>를 생성합니다.\n필요 없다면 <code>c</code>를 건너 뛸 수 있다는 걸 알아두세요.</p>\n<p>배열 구조 분해처럼, 선언 없이 할당할 수 있습니다.:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> } = { </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">101</span><span style=\"color: #000000\"> });</span></div></code></div></pre>\n<p>이 구문을 괄호로 감싸고 있다는 것을 주의해 주세요.\nJavaScript는 보통 <code>{</code>를 블록의 시작으로 파싱 합니다.</p>\n<p>객체 안에 나머지 요소들을 <code>...</code> 구문을 사용하여 변수로 생성할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">passthrough</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">passthrough</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">passthrough</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'></div></code></div></pre>\n<h3 id=\"프로퍼티-이름-바꾸기-property-renaming\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%B4%EB%A6%84-%EB%B0%94%EA%BE%B8%EA%B8%B0-property-renaming\" aria-label=\"프로퍼티 이름 바꾸기 property renaming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 이름 바꾸기 (Property renaming)</h3>\n<p>프로퍼티들에 다른 이름을 붙히는 것도 가능합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">newName1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">newName2</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>여기서 구문이 혼란스러워지기 시작합니다.\n<code>a: newName1</code> 을 ”<code>a</code>를 <code>newName1</code> 로” 와 같이 읽을 수 있습니다.\n여태 써왔던 것 처럼 방향은 왼쪽에서 오른쪽입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">newName1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">newName2</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>혼란스럽게도 여기서 콜론은 타입을 나타내지 않습니다.\n타입을 지정하는 경우, 전체 구조 분해 뒤에 작성해야 합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> }: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h3 id=\"기본-값-default-values\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B0%92-default-values\" aria-label=\"기본 값 default values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 값 (Default values)</h3>\n<p>기본 값은 프로퍼티가 정의되지 않았을 때 기본값을 사용하도록 하는 것입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">keepWholeObject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">wholeObject</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1001</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">wholeObject</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>예제에서 <code>b?</code>는 <code>b</code>가 선택적이라는 것을 의미합니다. 따라서 이는 <code>undefined</code> 일 수도 있습니다.\n<code>keepWholeObject</code>는 이제 <code>b</code>가 undefined 이더라도 <code>a</code>, <code>b</code> 프로퍼티와 함께 <code>wholeObject</code>라는 변수를 가집니다.</p>\n<h2 id=\"함수-선언-function-declarations\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8-function-declarations\" aria-label=\"함수 선언 function declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언 (Function declarations)</h2>\n<p>구조 분해는 함수 선언에서도 동작합니다.\n이것은 간단한 경우에는 직관적입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그러나 매개 변수에는 기본값을 명시하는 것이 더 일반적이며, 구조 분해와 함께 기본값을 제대로 사용하는 것은 까다로울 수 있습니다.\n가장 먼저, 구조 분해 패턴을 기본값 앞에 넣어야 한다는 것을 기억해야 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">=</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> } = {}): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<blockquote>\n<p>위 코드는 타입 추론의 예제이며 이후 핸드북에서 설명합니다.</p>\n</blockquote>\n<p>그런 다음, 선택적 프로퍼티를 위해 기본 초기화 대신 구조 분해될 프로퍼티에 기본 값을 주어야 한다는 걸 기억해야 합니다.\n<code>C</code> 가 <code>b</code>를 선택적으로 정의했다는 것을 기억하세요:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> } = { </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\"> }): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"yes\"</span><span style=\"color: #000000\"> }); </span><span style=\"color: #008000\">// 성공, 기본값으로 b = 0 입니다.</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 성공, 기본 값은 { a: \"\" } 이고 b = 0 입니다.</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({}); </span><span style=\"color: #008000\">// 오류, 매개 변수가 주어지면 `a`가 필요합니다.</span></div></code></div></pre>\n<p>구조 분해를 주의해서 사용하세요.\n앞에 예제에서 알 수 있듯이, 가장 간단한 구조 분해 표현식 이외의 것들은 혼란스럽습니다.\n심지어 이름 변경, 기본값, 타입 표시가 없더라도 깊게 중첩된 구조 분해는 <em>정말</em> 이해하기가 힘듭니다.\n구조 분해 표현식을 작고 간단하게 유지하세요.\n당신은 언제나 구조 분해가 만드는 과제를 당신 손으로 만들 수 있습니다.</p>\n<h2 id=\"전개-spread\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EA%B0%9C-spread\" aria-label=\"전개 spread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전개 (Spread)</h2>\n<p>전개 연산자는 구조 분해와 반대입니다.\n이는 배열을 다른 배열 안에, 혹은 객체를 다른 객체 안에 전개하도록 해줍니다.\n예를 보겠습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">first</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">second</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bothPlus</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">first</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">second</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>이는 bothPlus에 <code>[0, 1, 2, 3, 4, 5]</code>라는 값을 줍니다.\n전개는 <code>first</code>와 <code>second</code>의 얕은 복사를 만듭니다.\n이들은 전개에 의해 변하지 않습니다.</p>\n<p>또한 객체를 전개할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defaults</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">food:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"spicy\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">price:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"$$\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ambiance:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"noisy\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">search</span><span style=\"color: #000000\"> = { ...</span><span style=\"color: #001080\">defaults</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">food:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"rich\"</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>여기서 <code>search</code>는 <code>{ food: \"rich\", price: \"$$\", ambiance: \"noisy\" }</code>입니다.\n객체 전개는 배열 전개보다 훨씬 복잡합니다.\n배열 전개처럼 왼쪽에서-오른쪽으로 진행되지만 그 결과는 여전히 객체입니다.\n이는 전개 객체 안에서 나중에 오는 프로퍼티가 이전에 오는 프로퍼티를 덮어쓰는 것을 의미합니다.\n그래서 만약에 우리가 이전 예제를 마지막에 전개하도록 수정하면:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">defaults</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">food:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"spicy\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">price:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"$$\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ambiance:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"noisy\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">search</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">food:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"rich\"</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">defaults</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p><code>defaults</code>안에 <code>food</code> 프로퍼티는 <code>food: \"rich\"</code>를 덮어쓰는데, 이 경우 우리가 의도한 것은 아닙니다.</p>\n<p>객체 전개는 또한 몇몇의 놀라운 제한점이 잇습니다.\n첫째로, 이는 오직 객체\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">본인의 열거 가능한 프로퍼티</a>만 해당한다는 것입니다.\n기본적으로, 이는 객체의 인스턴스를 전개하면 메서드를 잃게 된다는 것을 뜻합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">clone</span><span style=\"color: #000000\"> = { ...</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\">clone</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div><div class='line'><span style=\"color: #001080\">clone</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 오류!</span></div></code></div></pre>\n<p>두 번째로, TypeScript 컴파일러는 제네릭 함수에서 타입 매개변수를 전개하는 것을 허용하지 않습니다.\n이 기능은 이후 버전에서 예상되는 기능입니다.</p>","headings":[{"value":"var 선언 (var declarations)","depth":1},{"value":"스코프 규칙 (Scoping rules)","depth":2},{"value":"변수 캡쳐링의 단점 (Variable capturing quirks)","depth":2},{"value":"let 선언 (let declarations)","depth":1},{"value":"블록 스코프 (Block-scoping)","depth":2},{"value":"재선언과 쉐도잉 (Re-declarations and Shadowing)","depth":2},{"value":"블록 스코프 변수 캡쳐링 (Block-scoped variable capturing)","depth":2},{"value":"const 선언 (const declarations)","depth":1},{"value":"let vs. const","depth":1},{"value":"구조 분해 (Destructuring)","depth":1},{"value":"배열 구조 분해 (Array destructuring)","depth":2},{"value":"튜플 구조 분해 (Tuple destructuring)","depth":2},{"value":"객체 구조 분해 (Object destructuring)","depth":2},{"value":"프로퍼티 이름 바꾸기 (Property renaming)","depth":3},{"value":"기본 값 (Default values)","depth":3},{"value":"함수 선언 (Function declarations)","depth":2},{"value":"전개 (Spread)","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/variable-declarations.html","title":"Variable Declaration","disable_toc":null,"handbook":null,"oneline":"How TypeScript handles variable declaration","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-variable-declaration","slug":"/ko/docs/handbook/variable-declarations.html","repoPath":"/packages/documentation/copy/ko/reference/Variable Declarations.md","lang":"ko","modifiedTime":"2024-10-21T12:35:09.561Z"}},"staticQueryHashes":[]}