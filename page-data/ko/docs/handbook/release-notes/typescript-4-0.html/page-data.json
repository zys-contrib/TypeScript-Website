{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/release-notes/typescript-4-0.html","result":{"data":{"markdownRemark":{"id":"f258be46-109a-5871-908e-87b0db987dfc","excerpt":"가변 인자 튜플 타입 (Variadic Tuple Types) 배열이나 튜플 타입 두 개를 결합하여 새로운 배열을 만드는 JavaScript의 concat 함수에 대해서 생각해봅시다. 그리고, 배열이나 튜플을 변수로 입력받아 첫 번째 원소를 제외한 나머지를 반환하는 tail…","html":"<h2 id=\"가변-인자-튜플-타입-variadic-tuple-types\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90-%ED%8A%9C%ED%94%8C-%ED%83%80%EC%9E%85-variadic-tuple-types\" aria-label=\"가변 인자 튜플 타입 variadic tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 인자 튜플 타입 (Variadic Tuple Types)</h2>\n<p>배열이나 튜플 타입 두 개를 결합하여 새로운 배열을 만드는 JavaScript의 <code>concat</code> 함수에 대해서 생각해봅시다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [...</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그리고, 배열이나 튜플을 변수로 입력받아 첫 번째 원소를 제외한 나머지를 반환하는 <code>tail</code> 함수에 대해서도 생각해봅시다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tail</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\">_</span><span style=\"color: #000000\">, ...</span><span style=\"color: #0070C1\">result</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript에서는 이 두 함수의 타입을 어떻게 정의할 수 있을까요?</p>\n<p><code>concat</code>의 경우, 이전 버전에서는 여러 개의 오버로드를 작성하는 방법이 유일했습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: []): [</span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F</span><span style=\"color: #000000\">];)</span></div></code></div></pre>\n<p>음… 네, 이 오버로드들의 두 번째 배열은 전부 비어있습니다.\n이때, <code>arr2</code>가 하나의 인자를 가지고 있는 경우를 추가해봅시다.</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">]): [</span><span style=\"color: #1C6277\">A1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">B1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">C1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">D1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">E1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">F1</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">A2</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>이런 오버로딩 함수들은 분명 비합리적입니다.\n안타깝게도, <code>tail</code> 함수를 타이핑할 때도 이와 비슷한 문제에 직면하게 됩니다.</p>\n<p>이것은 “천 개의 오버로드로 인한 죽음(death by a thousand overloads)“의 하나의 경우이며, 심지어 대부분 문제를 해결하지도 못합니다.\n우리가 작성하고자 하는 만큼의 오버로드에 한해서만 올바른 타입을 제공합니다.\n포괄적인 케이스를 만들고 싶다면, 다음과 같은 오버로드가 필요합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[], </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>그러나 위 시그니처는 튜플을 사용할 때 입력 길이나 요소 순서에 대한 어떤 것도 처리하지 않습니다.</p>\n<p>TypeScript 4.0은 타입 추론 개선을 포함한 두 가지 핵심적인 변화를 도입해 이러한 타이핑을 가능하도록 만들었습니다.</p>\n<p>첫 번째 변화는 튜플 타입 구문의 스프레드 연산자에서 제네릭 타입을 사용할 수 있다는 점입니다.\n우리가 작동하는 실제 타입을 모르더라도 튜플과 배열에 대한 고차함수를 표현할 수 있다는 뜻입니다.\n이러한 튜플 타입에서 제네릭 스프레드 연산자가 인스턴스화(혹은, 실제 타입으로 대체)되면 또 다른 배열이나 튜플 타입 세트를 생산할 수 있습니다.</p>\n<p>예를 들어, <code>tail</code> 같은 함수를 “천 개의 오버로드로 인한 죽음(death by a thousand overloads)“이슈 없이 타이핑 할 수 있게 됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">tail</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]&gt;(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\">_ignored</span><span style=\"color: #000000\">, ...</span><span style=\"color: #0070C1\">rest</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">rest</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myTuple</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">myArray</span><span style=\"color: #000000\"> = [</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">r1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">tail</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">myTuple</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//    ^ = const r1: [2, 3, 4]</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">r2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">tail</span><span style=\"color: #000000\">([...</span><span style=\"color: #001080\">myTuple</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">myArray</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//    ^ = const r2: [2, 3, 4, ...string[]]</span></div></code></div></pre>\n<p>두 번째 변화는 나머지 요소가 끝뿐만 아니라 튜플의 어느 곳에서도 발생할 수 있다는 것입니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Strings</span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Numbers</span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">StrStrNumNumBool</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #1C6277\">Strings</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">Numbers</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #008000\">//   ^ = type StrStrNumNumBool = [string, string, number, number, boolean]</span></div></code></div></pre>\n<p>이전에는, TypeScript는 다음과 같은 오류를 생성했었습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">A rest element must be last in a tuple type.</span></div></code></div></pre>\n<p>TypeScript 4.0에서는 이러한 제한이 완화되었습니다.</p>\n<p>길이가 정해지지 않은 타입을 확장하려고할 때, 결과의 타입은 제한되지 않으며, 다음 모든 요소가 결과의 나머지 요소 타입에 포함되는 점에 유의하시기 바랍니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Strings</span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Numbers</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Unbounded</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #1C6277\">Strings</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">Numbers</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #008000\">//   ^ = type Unbounded = [string, string, ...(number | boolean)[]]</span></div></code></div></pre>\n<p>이 두 가지 동작을 함께 결합하여, <code>concat</code>에 대해 타입이 제대로 정의된 시그니처를 작성할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">): [...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">] {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [...</span><span style=\"color: #001080\">arr1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>하나의 시그니처가 조금 길더라도, 반복할 필요가 없는 하나의 시그니처일 뿐이며, 모든 배열과 튜플에서 예측 가능한 행동을 제공합니다.</p>\n<p>이 기능은 그 자체만으로도 훌륭하지만, 조금 더 정교한 시나리오에서도 빛을 발합니다.\n예를 들어,<a href=\"https://en.wikipedia.org/wiki/Partial_application\">함수의 매개변수를 부분적으로 적용하여 새로운 함수를 반환하는</a> <code>partialCall</code> 함수가 있다고 생각해봅시다.\n<code>partialCall</code>은 다음과 같은 함수를 가집니다. - <code>f</code>가 예상하는 몇 가지 인수와 함께 <code>f</code>라고 지정하겠습니다.\n그 후, <code>f</code>가 여전히 필요로 하는 다른 인수를 가지고, 그것을 받을 때 <code>f</code>를 호출하는 새로운 함수를 반환합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript 4.0은 나머지 파라미터들과 튜플 원소들에 대한 추론 프로세스를 개선하여 타입을 지정할 수 있고 “그냥 동작”하도록 할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">[];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">: (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: [...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  ...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이 경우, <code>partialCall</code>은 처음에 취할 수 있는 파라미터와 할 수 없는 파라미터를 파악하고, 남은 것들은 적절히 수용하고 거부하는 함수들을 반환합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2345 2554 2554 2345</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">[];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Arr</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">&gt;(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">: (...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: [...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">R</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  ...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">headArgs</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">tailArgs</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---cut---</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">f1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">f2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"oops\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 작동합니다!</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">f3</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">partialCall</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//    ^ = const f3: (y: number, z: boolean) =&gt; void</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// f3으로 뭘 할 수 있을까요?</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 작동합니다!</span></div><div class='line'><span style=\"color: #795E26\">f3</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f3</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f3</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>가변 인자 튜플 타입은 특히 기능 구성과 관련하여 많은 새로운 흥미로운 패턴을 가능하게 합니다.\n우리는 JavaScript에 내장된 <code>bind</code> 메서드의 타입 체킹을 더 잘하기 위해 이를 활용할 수 있을 것이라고 기대합니다.\n몇 가지 다른 추론 개선 및 패턴들도 여기에 포함되어 있으며, 가변 인자 튜플에 대해 더 알아보고 싶다면, <a href=\"https://github.com/microsoft/TypeScript/pull/39094\">the pull request</a>를 참고해보세요.</p>\n<h2 id=\"라벨링된-튜플-요소-labeled-tuple-elements\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EB%B2%A8%EB%A7%81%EB%90%9C-%ED%8A%9C%ED%94%8C-%EC%9A%94%EC%86%8C-labeled-tuple-elements\" aria-label=\"라벨링된 튜플 요소 labeled tuple elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라벨링된 튜플 요소 (Labeled Tuple Elements)</h2>\n<p>튜플 타입과 매개 변수 목록에 대해 개선하는 것은 일반적인 JavaScript 관용구에 대한 타입 유효성 검사를 강화시켜주기 때문에 중요합니다 - 실제로 인수 목록을 자르고 다른 함수로 전달만 해주면 됩니다.\n나머지 매개 변수(rest parameter)에 튜플 타입을 사용할 수 있다는 생각은 아주 중요합니다.</p>\n<p>예를 들어, 튜플 타입을 나머지 매개 변수로 사용하는 다음 함수는…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">args</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>…다음 함수와 다르지 않아야 합니다…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg0</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">arg1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>…<code>foo</code>의 모든 호출자에 대해서도.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2554</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arg0</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">arg1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---cut---</span></div><div class='line'><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>그러나 차이점이 보이기 시작한 부분은: 가독성입니다.\n첫 번째 예시에서는, 첫 번째와 두 번째 요소에 대한 매개 변수 이름이 없습니다.\n타입-검사에는 전혀 영향이 없지만, 튜플 위치에 라벨이 없는 것은 사용하기 어렵게 만듭니다 - 의도를 전달하기 어렵습니다.</p>\n<p>TypeScript 4.0에서 튜플 타입에 라벨을 제공하는 이유입니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Range</span><span style=\"color: #000000\"> = [start: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, end: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>매개 변수 목록과 튜플 타입 사이의 연결을 강화하기 위해, 나머지 요소와 선택적 요소에 대한 구문이 매개 변수 목록의 구문을 반영합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = [first: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, second?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, ...rest: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]];</span></div></code></div></pre>\n<p>라벨링 된 튜플을 사용할 때는 몇 가지 규칙이 있습니다.\n하나는 튜플 요소를 라벨링 할 때, 튜플에 있는 다른 모든 요소들 역시 라벨링 되어야 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 5084</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> = [first: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>당연하게도 - 라벨은 구조 분해할 때 변수 이름을 다르게 지정할 필요가 없습니다.\n이것은 순전히 문서화와 도구를 위해 필요합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: [first: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, second: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 주의: 'first'와 'second'에 대해 이름 지을 필요 없음</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> [</span><span style=\"color: #0070C1\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #0070C1\">b</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span></div><div class='line'><span style=\"color: #008000\">//  ^ = const a: string</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span></div><div class='line'><span style=\"color: #008000\">//  ^ = const b: number</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>전반적으로, 라벨링 된 튜플은 안전한 타입 방식으로 오버로드를 구현하는 것과 튜플과 인수 목록의 패턴을 활용할 때 편리합니다.\n사실, TypeScript 에디터 지원은 가능한 경우 오버로드로 표시하려 합니다.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/signatureHelpLabeledTuples.gif\" alt=\"라벨링된 튜플의 유니언을 매개변수 목록에서처럼 두 가지 시그니처로 보여주는 시그니처 도움말\"></p>\n<p>더 알고 싶으시면, 라벨링된 튜플 요소에 대한 <a href=\"https://github.com/microsoft/TypeScript/pull/38234\">풀 리퀘스트</a>를 확인해보세요</p>\n<h2 id=\"생성자로부터-클래스-프로퍼티-타입-추론하기-class-property-inference-from-constructors\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C%EB%B6%80%ED%84%B0-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%ED%95%98%EA%B8%B0-class-property-inference-from-constructors\" aria-label=\"생성자로부터 클래스 프로퍼티 타입 추론하기 class property inference from constructors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자로부터 클래스 프로퍼티 타입 추론하기 (Class Property Inference from Constructors)</h2>\n<p>TypeScript 4.0에서는 <code>noImplicitAny</code>가 활성화되었을 때 클래스 내의 프로퍼티 타입을 결정하기 위해 제어 흐름 분석을 사용할 수 있습니다.</p>\n<!--prettier-ignore -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Square</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 이전에 any로 추론했습니다.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">area</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ^?</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ^?</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">area</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>생성자의 모든 경로가 인스턴스 멤버에 할당한 것이 아닐 경우, 프로퍼티는 잠재적으로 <code>undefined</code>가 됩니다.</p>\n<!--prettier-ignore -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2532</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Square</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ^?</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">random</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">area</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>더 많은 내용이 있는 경우(e.g. <code>initialize</code> 메서드 등이 있는 경우), <code>strictPropertyInitialization</code> 모드에서는 확정적 할당 단언(<code>!</code>)에 따라 명시적으로 타입을 선언해야 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Square</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 확정적 할당 단언</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//        v</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">!: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//         ^^^^^^^^</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 타입 표기</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">initialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">area</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>더 자세히 알고 싶다면, <a href=\"https://github.com/microsoft/TypeScript/pull/379200\">코드를 실행하는 Pull Request를 보세요</a>.</p>\n<h2 id=\"단축-할당-연산자-short-circuiting-assignment-operators\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%B6%95-%ED%95%A0%EB%8B%B9-%EC%97%B0%EC%82%B0%EC%9E%90-short-circuiting-assignment-operators\" aria-label=\"단축 할당 연산자 short circuiting assignment operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단축 할당 연산자 (Short-Circuiting Assignment Operators)</h2>\n<p>JavaScript와 많은 언어는 <em>복합 할당 (compound assignment)</em> 연산자라고 불리는 연산자 집합을 지원합니다.\n복합 할당 연산자는 두 개의 인수에 연산자를 적용한 다음 결과를 왼쪽에 할당합니다.\n이전에 아래와 같은 것을 본 적이 있을 것입니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 덧셈</span></div><div class='line'><span style=\"color: #008000\">// a = a + b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 뺄셈</span></div><div class='line'><span style=\"color: #008000\">// a = a - b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> -= </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 곱셈</span></div><div class='line'><span style=\"color: #008000\">// a = a * b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> *= </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 나눗셈</span></div><div class='line'><span style=\"color: #008000\">// a = a / b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> /= </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 지수화</span></div><div class='line'><span style=\"color: #008000\">// a = a ** b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> **= </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 왼쪽 비트 시프트</span></div><div class='line'><span style=\"color: #008000\">// a = a &lt;&lt; b</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> &lt;&lt;= </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>JavaScript의 많은 연산자에 위와 같은 할당 연산자가 있습니다!\n그러나 최근까지도 논리 <em>and</em> 연산자 (<code>&#x26;&#x26;</code>), 논리 <em>or</em> 연산자 (<code>||</code>) 및 null과 같은 것을 병합하는 연산자 (nullish coalescing) (<code>??</code>)의 세 가지 주목할만한 예외가 있었습니다.</p>\n<p>이것이 TypeScript 4.0이 새로운 할당 연산자<code>&#x26;&#x26;=</code>,<code>||=</code>및<code>??=</code>를 추가하는 새로운 ECMAScript 기능을 지원하는 이유입니다.</p>\n<p>이러한 연산자는 사용자가 다음과 같은 코드를 작성할 수 있는 모든 예를 대체하는 데 유용합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> ?? </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>혹은 아래와 비슷한 <code>if</code> 블록</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 'a ||= b'로 대체 가능</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>우리가 본(혹은 직접 작성한) 코드 패턴 중 필요한 경우에만 값을 지연 초기화시키기 위한 패턴도 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">values</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #001080\">values</span><span style=\"color: #000000\"> ?? (</span><span style=\"color: #001080\">values</span><span style=\"color: #000000\"> = [])).</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 이후</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #001080\">values</span><span style=\"color: #000000\"> ??= []).</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>(보세요, 우리가 작성한 <em>모든</em> 코드가 자랑스러운 것은 아닙니다…)</p>\n<p>드물지만 부수 효과(side-effects)가 있는 getter 또는 setter를 사용하는 경우 이러한 연산자가 필요한 경우에만 할당을 수행한다는 점에 유의할 필요가 있습니다.\n그런 의미에서 연산자의 오른쪽이 “단축 (short-circuited)“될 뿐만 아니라 할당 자체도 마찬가지입니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> ||= </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 다음 중 하나와 대략 동일함</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">());</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"https://www.typescriptlang.org/play?ts=Nightly#code/MYewdgzgLgBCBGArGBeGBvAsAKBnmA5gKawAOATiKQBQCUGO+TMokIANkQHTsgHUAiYlChFyMABYBDCDHIBXMANoBuHI2Z4A9FpgAlIqXZTgRGAFsiAQg2byJeeTAwAslKgSu5KWAAmIczoYAB4YAAYuAFY1XHwAXwAaWxgIEhgKKmoAfQA3KXYALhh4EA4iH3osWM1WCDKePkFUkTFJGTlFZRimOJw4mJwAM0VgKABLcBhB0qCqplr63n4BcjGCCVgIMd8zIjz2eXciXy7k+yhHZygFIhje7BwFzgblgBUJMdlwM3yAdykAJ6yBSQGAeMzNUTkU7YBCILgZUioOBIBGUJEAHwxUxmqnU2Ce3CWgnenzgYDMACo6pZxpYIJSOqDwSkSFCYXC0VQYFi0NMQHQVEA\">다음 예시를 실행해보세요</a> 예시를 통해 <em>항상</em> 할당을 수행하는 것과 어떻게 다른지 확인해보세요.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">obj</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">prop</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"getter has run\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 이곳을 바꿔보세요!</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">random</span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">prop</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">_val</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"setter has run\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"right side evaluated\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"This one always runs the setter\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> || </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"This one *sometimes* runs the setter\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> ||= </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>기여해주신 커뮤니티 멤버 <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> 님에게 큰 감사를 표합니다.</p>\n<p>더 자세한 내용을 보고 싶으시다면 <a href=\"https://github.com/microsoft/TypeScript/pull/37727\">이 풀 리퀘스트를 확인해보세요</a>.\n<a href=\"https://github.com/tc39/proposal-logical-assignment/\">TC39 제안 저장소에서도 이 기능을 확인할 수 있습니다.</a>.</p>\n<h2 id=\"unknown-on-catch-clause-bindings\" style=\"position:relative;\"><a href=\"#unknown-on-catch-clause-bindings\" aria-label=\"unknown on catch clause bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>unknown</code> on <code>catch</code> Clause Bindings</h2>\n<p>Since the beginning days of TypeScript, <code>catch</code> clause variables have always been typed as <code>any</code>.\nThis meant that TypeScript allowed you to do anything you wanted with them.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Do some work</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// x has type 'any' - have fun!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">++;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">yadda</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">yadda</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">yadda</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The above has some undesirable behavior if we’re trying to prevent <em>more</em> errors from happening in our error-handling code!\nBecause these variables have the type <code>any</code> by default, they lack any type-safety which could have errored on invalid operations.</p>\n<p>That’s why TypeScript 4.0 now lets you specify the type of <code>catch</code> clause variables as <code>unknown</code> instead.\n<code>unknown</code> is safer than <code>any</code> because it reminds us that we need to perform some sorts of type-checks before operating on our values.</p>\n<!--prettier-ignore -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2571</span></div><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Can't access values on unknowns</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// We've narrowed 'e' down to the type 'string'.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>While the types of <code>catch</code> variables won’t change by default, we might consider a new <code>--strict</code> mode flag in the future so that users can opt in to this behavior.\nIn the meantime, it should be possible to write a lint rule to force <code>catch</code> variables to have an explicit annotation of either <code>: any</code> or <code>: unknown</code>.</p>\n<p>For more details you can <a href=\"https://github.com/microsoft/TypeScript/pull/39015\">peek at the changes for this feature</a>.</p>\n<h2 id=\"custom-jsx-factories\" style=\"position:relative;\"><a href=\"#custom-jsx-factories\" aria-label=\"custom jsx factories permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom JSX Factories</h2>\n<p>When using JSX, a <a href=\"https://reactjs.org/docs/fragments.html\"><em>fragment</em></a> is a type of JSX element that allows us to return multiple child elements.\nWhen we first implemented fragments in TypeScript, we didn’t have a great idea about how other libraries would utilize them.\nNowadays most other libraries that encourage using JSX and support fragments have a similar API shape.</p>\n<p>In TypeScript 4.0, users can customize the fragment factory through the new <code>jsxFragmentFactory</code> option.</p>\n<p>As an example, the following <code>tsconfig.json</code> file tells TypeScript to transform JSX in a way compatible with React, but switches each factory invocation to <code>h</code> instead of <code>React.createElement</code>, and uses <code>Fragment</code> instead of <code>React.Fragment</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #CD3131\">compilerOptions</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #CD3131\">target</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #CD3131\">module</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #CD3131\">jsx</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #CD3131\">jsxFactory</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #CD3131\">jsxFragmentFactory</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Fragment\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In cases where you need to have a different JSX factory on a per-file basis<!-- (maybe you like to ship React, Preact, and Inferno to give a blazing fast experience) -->, you can take advantage of the new <code>/** @jsxFrag */</code> pragma comment.\nFor example, the following…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @noErrors</span></div><div class='line'><span style=\"color: #008000\">// Note: these pragma comments need to be written</span></div><div class='line'><span style=\"color: #008000\">// with a JSDoc-style multiline syntax to take effect.</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxFrag</span><span style=\"color: #008000\"> Fragment */</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Header</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Welcome</span><span style=\"color: #800000\">&lt;/h1&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>…will get transformed to this output JavaScript…</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @noErrors</span></div><div class='line'><span style=\"color: #008000\">// @showEmit</span></div><div class='line'><span style=\"color: #008000\">// Note: these pragma comments need to be written</span></div><div class='line'><span style=\"color: #008000\">// with a JSDoc-style multiline syntax to take effect.</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxFrag</span><span style=\"color: #008000\"> Fragment */</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Header</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Welcome</span><span style=\"color: #800000\">&lt;/h1&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>We’d like to extend a big thanks to community member <a href=\"https://github.com/nojvek\">Noj Vek</a> for sending this pull request and patiently working with our team on it.</p>\n<p>You can see that <a href=\"https://github.com/microsoft/TypeScript/pull/38720\">the pull request</a> for more details!</p>\n<h2 id=\"speed-improvements-in-build-mode-with---noemitonerror\" style=\"position:relative;\"><a href=\"#speed-improvements-in-build-mode-with---noemitonerror\" aria-label=\"speed improvements in build mode with   noemitonerror permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Speed Improvements in <code>build</code> mode with <code>--noEmitOnError</code></h2>\n<p>Previously, compiling a program after a previous compile with errors under <code>--incremental</code> would be extremely slow when using the <code>--noEmitOnError</code> flag.\nThis is because none of the information from the last compilation would be cached in a <code>.tsbuildinfo</code> file based on the <code>--noEmitOnError</code> flag.</p>\n<p>TypeScript 4.0 changes this which gives a great speed boost in these scenarios, and in turn improves <code>--build</code> mode scenarios (which imply both <code>--incremental</code> and <code>--noEmitOnError</code>).</p>\n<p>For details, <a href=\"https://github.com/microsoft/TypeScript/pull/38853\">read up more on the pull request</a>.</p>\n<h2 id=\"--incremental-with---noemit\" style=\"position:relative;\"><a href=\"#--incremental-with---noemit\" aria-label=\"  incremental with   noemit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--incremental</code> with <code>--noEmit</code></h2>\n<p>TypeScript 4.0 allows us to use the <code>--noEmit</code> flag when while still leveraging <code>--incremental</code> compiles.\nThis was previously not allowed, as <code>--incremental</code> needs to emit a <code>.tsbuildinfo</code> files; however, the use-case to enable faster incremental builds is important enough to enable for all users.</p>\n<p>For more details, you can <a href=\"https://github.com/microsoft/TypeScript/pull/39122\">see the implementing pull request</a>.</p>\n<h2 id=\"editor-improvements\" style=\"position:relative;\"><a href=\"#editor-improvements\" aria-label=\"editor improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editor Improvements</h2>\n<p>The TypeScript compiler doesn’t only power the editing experience for TypeScript itself in most major editors - it also powers the JavaScript experience in the Visual Studio family of editors and more.\nFor that reason, much of our work focuses on improving editor scenarios - the place you spend most of your time as a developer.</p>\n<p>Using new TypeScript/JavaScript functionality in your editor will differ depending on your editor, but</p>\n<ul>\n<li>Visual Studio Code supports <a href=\"https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript\">selecting different versions of TypeScript</a>. Alternatively, there’s the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">JavaScript/TypeScript Nightly Extension</a> to stay on the bleeding edge (which is typically very stable).</li>\n<li>Visual Studio 2017/2019 have [the SDK installers above] and <a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">MSBuild installs</a>.</li>\n<li>Sublime Text 3 supports <a href=\"https://github.com/microsoft/TypeScript-Sublime-Plugin#note-using-different-versions-of-typescript\">selecting different versions of TypeScript</a></li>\n</ul>\n<p>You can check out a partial <a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\">list of editors that have support for TypeScript</a> to learn more about whether your favorite editor has support to use new versions.</p>\n<h3 id=\"convert-to-optional-chaining\" style=\"position:relative;\"><a href=\"#convert-to-optional-chaining\" aria-label=\"convert to optional chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Convert to Optional Chaining</h3>\n<p>Optional chaining is a recent feature that’s received a lot of love.\nThat’s why TypeScript 4.0 brings a new refactoring to convert common patterns to take advantage of <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#optional-chaining\">optional chaining</a> and <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#nullish-coalescing\">nullish coalescing</a>!</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/convertToOptionalChain-4-0.gif\" alt=\"Converting a &#x26;&#x26; a.b.c &#x26;&#x26; a.b.c.d.e.f() to a?.b.c?.d.e.f.()\"></p>\n<p>Keep in mind that while this refactoring doesn’t <em>perfectly</em> capture the same behavior due to subtleties with truthiness/falsiness in JavaScript, we believe it should capture the intent for most use-cases, especially when TypeScript has more precise knowledge of your types.</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/39135\">check out the pull request for this feature</a>.</p>\n<h3 id=\"-deprecated--support\" style=\"position:relative;\"><a href=\"#-deprecated--support\" aria-label=\" deprecated  support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/** @deprecated */</code> Support</h3>\n<p>TypeScript’s editing support now recognizes when a declaration has been marked with a <code>/** @deprecated *</code> JSDoc comment.\nThat information is surfaced in completion lists and as a suggestion diagnostic that editors can handle specially.\nIn an editor like VS Code, deprecated values are typically displayed a strike-though style <del>like this</del>.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/06/deprecated_4-0.png\" alt=\"Some examples of deprecated declarations with strikethrough text in the editor\"></p>\n<p>This new functionality is available thanks to <a href=\"https://github.com/Kingwl\">Wenlu Wang</a>.\nSee <a href=\"https://github.com/microsoft/TypeScript/pull/38523\">the pull request</a> for more details.</p>\n<h3 id=\"partial-semantic-mode-at-startup\" style=\"position:relative;\"><a href=\"#partial-semantic-mode-at-startup\" aria-label=\"partial semantic mode at startup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partial Semantic Mode at Startup</h3>\n<p>We’ve heard a lot from users suffering from long startup times, especially on bigger projects.\nThe culprit is usually a process called <em>program construction</em>.\nThis is the process of starting with an initial set of root files, parsing them, finding their dependencies, parsing those dependencies, finding those dependencies’ dependencies, and so on.\nThe bigger your project is, the longer you’ll have to wait before you can get basic editor operations like go-to-definition or quick info.</p>\n<p>That’s why we’ve been working on a new mode for editors to provide a <em>partial</em> experience until the full language service experience has loaded up.\nThe core idea is that editors can run a lightweight partial server that only looks at the current files that the editor has open.</p>\n<p>It’s hard to say precisely what sorts of improvements you’ll see, but anecdotally, it used to take anywhere between <em>20 seconds to a minute</em> before TypeScript would become fully responsive on the Visual Studio Code codebase.\nIn contrast, <strong>our new partial semantic mode seems to bring that delay down to just a few seconds</strong>.\nAs an example, in the following video, you can see two side-by-side editors with TypeScript 3.9 running on the left and TypeScript 4.0 running on the right.</p>\n<video loop autoplay muted style=\"width:100%;height:100%;\" src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/partialModeFast.mp4\">\n</video>\n<p>When restarting both editors on a particularly large codebase, the one with TypeScript 3.9 can’t provide completions or quick info at all.\nOn the other hand, the editor with TypeScript 4.0 can <em>immediately</em> give us a rich experience in the current file we’re editing, despite loading the full project in the background.</p>\n<p>Currently the only editor that supports this mode is <a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> which has some UX improvements coming up in <a href=\"http://code.visualstudio.com/insiders\">Visual Studio Code Insiders</a>.\nWe recognize that this experience may still have room for polish in UX and functionality, and we have <a href=\"https://github.com/microsoft/TypeScript/issues/39035\">a list of improvements</a> in mind.\nWe’re looking for more feedback on what you think might be useful.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/issues/37713\">see the original proposal</a>, <a href=\"https://github.com/microsoft/TypeScript/pull/38561\">the implementing pull request</a>, along with <a href=\"https://github.com/microsoft/TypeScript/issues/39035\">the follow-up meta issue</a>.</p>\n<h3 id=\"smarter-auto-imports\" style=\"position:relative;\"><a href=\"#smarter-auto-imports\" aria-label=\"smarter auto imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smarter Auto-Imports</h3>\n<p>Auto-import is a fantastic feature that makes coding a lot easier; however, every time auto-import doesn’t seem to work, it can throw users off a lot.\nOne specific issue that we heard from users was that auto-imports didn’t work on dependencies that were written in TypeScript - that is, until they wrote at least one explicit import somewhere else in their project.</p>\n<p>Why would auto-imports work for <code>@types</code> packages, but not for packages that ship their own types?\nIt turns out that auto-imports only work on packages your project <em>already</em> includes.\nBecause TypeScript has some quirky defaults that automatically add packages in <code>node_modules/@types</code> to your project, <em>those</em> packages would be auto-imported.\nOn the other hand, other packages were excluded because crawling through all your <code>node_modules</code> packages can be <em>really</em> expensive.</p>\n<p>All of this leads to a pretty lousy getting started experience for when you’re trying to auto-import something that you’ve just installed but haven’t used yet.</p>\n<p>TypeScript 4.0 now does a little extra work in editor scenarios to include the packages you’ve listed in your <code>package.json</code>’s <code>dependencies</code> (and <code>peerDependencies</code>) fields.\nThe information from these packages is only used to improve auto-imports, and doesn’t change anything else like type-checking.\nThis allows us to provide auto-imports for all of your dependencies that have types, without incurring the cost of a complete <code>node_modules</code> search.</p>\n<p>In the rare cases when your <code>package.json</code> lists more than ten typed dependencies that haven’t been imported yet, this feature automatically disables itself to prevent slow project loading.\nTo force the feature to work, or to disable it entirely, you should be able to configure your editor.\nFor Visual Studio Code, this is the “Include Package JSON Auto Imports” (or <code>typescript.preferences.includePackageJsonAutoImports</code>) setting.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/configurePackageJsonAutoImports4-0.png\" alt=\"Configuring &#x27;include package JSON auto imports&#x27;\">\nFor more details, you can see the <a href=\"https://github.com/microsoft/TypeScript/issues/37812\">proposal issue</a> along with <a href=\"https://github.com/microsoft/TypeScript/pull/38923\">the implementing pull request</a>.</p>\n<h2 id=\"our-new-website\" style=\"position:relative;\"><a href=\"#our-new-website\" aria-label=\"our new website permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our New Website</h2>\n<p><a href=\"https://www.typescriptlang.org/\">The TypeScript website</a> has recently been rewritten from the ground up and rolled out!</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/ts-web.png\" alt=\"A screenshot of the new TypeScript website\"></p>\n<p><a href=\"https://devblogs.microsoft.com/typescript/announcing-the-new-typescript-website/\">We already wrote a bit about our new site</a>, so you can read up more there; but it’s worth mentioning that we’re still looking to hear what you think!\nIf you have questions, comments, or suggestions, you can <a href=\"https://github.com/microsoft/TypeScript-Website\">file them over on the website’s issue tracker</a>.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Our <code>lib.d.ts</code> declarations have changed - most specifically, types for the DOM have changed.\nThe most notable change may be the removal of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/origin\"><code>document.origin</code></a> which only worked in old versions of IE and Safari\nMDN recommends moving to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin\"><code>self.origin</code></a>.</p>\n<h3 id=\"properties-overriding-accessors-and-vice-versa-is-an-error\" style=\"position:relative;\"><a href=\"#properties-overriding-accessors-and-vice-versa-is-an-error\" aria-label=\"properties overriding accessors and vice versa is an error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties Overriding Accessors (and vice versa) is an Error</h3>\n<p>Previously, it was only an error for properties to override accessors, or accessors to override properties, when using <code>useDefineForClassFields</code>; however, TypeScript now always issues an error when declaring a property in a derived class that would override a getter or setter in the base class.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 1049 2610</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2611</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">prop</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>See more details on <a href=\"https://github.com/microsoft/TypeScript/pull/37894\">the implementing pull request</a>.</p>\n<h3 id=\"operands-for-delete-must-be-optional\" style=\"position:relative;\"><a href=\"#operands-for-delete-must-be-optional\" aria-label=\"operands for delete must be optional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operands for <code>delete</code> must be optional</h3>\n<p>When using the <code>delete</code> operator in <code>strictNullChecks</code>, the operand must now be <code>any</code>, <code>unknown</code>, <code>never</code>, or be optional (in that it contains <code>undefined</code> in the type).\nOtherwise, use of the <code>delete</code> operator is an error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @errors: 2790</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Thing</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">delete</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>See more details on <a href=\"https://github.com/microsoft/TypeScript/pull/37921\">the implementing pull request</a>.</p>\n<h3 id=\"usage-of-typescripts-node-factory-is-deprecated\" style=\"position:relative;\"><a href=\"#usage-of-typescripts-node-factory-is-deprecated\" aria-label=\"usage of typescripts node factory is deprecated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage of TypeScript’s Node Factory is Deprecated</h3>\n<p>Today TypeScript provides a set of “factory” functions for producing AST Nodes; however, TypeScript 4.0 provides a new node factory API.\nAs a result, for TypeScript 4.0 we’ve made the decision to deprecate these older functions in favor of the new ones.</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/35282\">read up on the relevant pull request for this change</a>.</p>","headings":[{"value":"가변 인자 튜플 타입 (Variadic Tuple Types)","depth":2},{"value":"라벨링된 튜플 요소 (Labeled Tuple Elements)","depth":2},{"value":"생성자로부터 클래스 프로퍼티 타입 추론하기 (Class Property Inference from Constructors)","depth":2},{"value":"단축 할당 연산자 (Short-Circuiting Assignment Operators)","depth":2},{"value":"unknown on catch Clause Bindings","depth":2},{"value":"Custom JSX Factories","depth":2},{"value":"Speed Improvements in build mode with --noEmitOnError","depth":2},{"value":"--incremental with --noEmit","depth":2},{"value":"Editor Improvements","depth":2},{"value":"Convert to Optional Chaining","depth":3},{"value":"/** @deprecated */ Support","depth":3},{"value":"Partial Semantic Mode at Startup","depth":3},{"value":"Smarter Auto-Imports","depth":3},{"value":"Our New Website","depth":2},{"value":"Breaking Changes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"Properties Overriding Accessors (and vice versa) is an Error","depth":3},{"value":"Operands for delete must be optional","depth":3},{"value":"Usage of TypeScript’s Node Factory is Deprecated","depth":3}],"frontmatter":{"permalink":"/ko/docs/handbook/release-notes/typescript-4-0.html","title":"TypeScript 4.0","disable_toc":null,"handbook":null,"oneline":"TypeScript 4.0 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-4.0","slug":"/ko/docs/handbook/release-notes/typescript-4-0.html","repoPath":"/packages/documentation/copy/ko/release-notes/TypeScript 4.0.md","lang":"ko","modifiedTime":"2024-10-21T12:35:09.565Z"}},"staticQueryHashes":[]}