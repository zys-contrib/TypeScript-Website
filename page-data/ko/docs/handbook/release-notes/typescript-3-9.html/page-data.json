{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/release-notes/typescript-3-9.html","result":{"data":{"markdownRemark":{"id":"becc0021-ee32-5394-8c0d-cb5494abe2a0","excerpt":"추론과 Promise.all 개선 (Improvements in Inference and Promise.all) 최신 버전의 TypeScript(약 3.7)는 Promise.all 및 Promise.race와 같은 함수 선언이 업데이트되었습니다.\n안타깝게도, 특히 null…","html":"<h2 id=\"추론과-promiseall-개선-improvements-in-inference-and-promiseall\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EB%A1%A0%EA%B3%BC-promiseall-%EA%B0%9C%EC%84%A0-improvements-in-inference-and-promiseall\" aria-label=\"추론과 promiseall 개선 improvements in inference and promiseall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추론과 <code>Promise.all</code> 개선 (Improvements in Inference and <code>Promise.all</code>)</h2>\n<p>최신 버전의 TypeScript(약 3.7)는 <code>Promise.all</code> 및 <code>Promise.race</code>와 같은 함수 선언이 업데이트되었습니다.\n안타깝게도, 특히 <code>null</code> 또는 <code>undefined</code>와 값을 혼합할 때, 약간의 회귀가 발생했습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Lion</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">roar</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Seal</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">singKissFromARose</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">visitZoo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">lionExhibit</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Lion</span><span style=\"color: #000000\">&gt;, </span><span style=\"color: #001080\">sealExhibit</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Seal</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">lion</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">seal</span><span style=\"color: #000000\">] = </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">all</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">lionExhibit</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">sealExhibit</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lion</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">roar</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 오 이런</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~</span></div><div class='line'><span style=\"color: #008000\">// 객체는 아마도 'undefined' 일 것입니다.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이 동작은 이상합니다!\n<code>sealExhibit</code>가 <code>undefined</code>를 포함하는 것은 어떻게든 <code>lion</code> 타입에 <code>undefined</code>를 주입합니다.</p>\n<p><a href=\"https://github.com/jablko\">Jack Bates</a>의 <a href=\"https://github.com/microsoft/TypeScript/pull/34501\">pull request</a> 덕분에, TypeScript 3.9의 추론 프로세스가 개선되었습니다.\n위 오류는 더 이상 발생하지 않습니다.\n<code>Promise</code>와 관련된 문제로 인해 이전 버전의 TypeScript에서 고생했다면, 3.9를 사용하는 것이 좋습니다.</p>\n<h3 id=\"awaited-타입은-무엇입니까-what-about-the-awaited-type\" style=\"position:relative;\"><a href=\"#awaited-%ED%83%80%EC%9E%85%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9E%85%EB%8B%88%EA%B9%8C-what-about-the-awaited-type\" aria-label=\"awaited 타입은 무엇입니까 what about the awaited type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>awaited</code> 타입은 무엇입니까? (What About the <code>awaited</code> Type?)</h3>\n<p>이슈 트래커와 설계 회의 노트를 봐왔다면, <a href=\"https://github.com/microsoft/TypeScript/pull/35998\"><code>awaited</code> 라는 새로운 연산자</a>에 대한 일부 작업을 알고 있을 것입니다.\n이 타입 연산자의 목표는 JavaScript에서 <code>Promise</code>를 푸는 방식을 정확하게 모델링 하는 것입니다.</p>\n<p>처음에는 TypeScript 3.9에서 <code>awaited</code>을 제공할 것으로 예상했지만, 기존 코드 베이스와 함께 초기 TypeScript 빌드를 실행함으로써 모든 사용자에게 원활하게 배포하기 전에 이 기능에 더 많은 설계 작업이 필요하다는 사실을 알았습니다.\n결과적으로, 더 확실해질 때까지 메인 브랜치에서 이 기능을 빼기로 결정했습니다.\n이 기능에 대해 더 많은 실험을 할 예정이지만, 이번 릴리스에서는 제공하지 않습니다.</p>\n<h2 id=\"속도-향상-speed-improvements\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EB%8F%84-%ED%96%A5%EC%83%81-speed-improvements\" aria-label=\"속도 향상 speed improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속도 향상 (Speed Improvements)</h2>\n<p>TypeScript 3.9는 많은 새로운 속도 향상 기능이 포함되어 있습니다.\n우리 팀은 material-ui 및 styled-components와 같은 패키지를 사용할 때 편집 / 컴파일 속도가 매우 열악한 것을 확인한 후 성능에 중점을 두었습니다.\n거대한 유니언, 인터섹션, 조건별 타입 그리고 매핑된 타입과 관련된 특정 병리학적 사례를 최적화하는 다양한 pull request로 심층 분석했습니다.</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36576\">https://github.com/microsoft/TypeScript/pull/36576</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36590\">https://github.com/microsoft/TypeScript/pull/36590</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36607\">https://github.com/microsoft/TypeScript/pull/36607</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36622\">https://github.com/microsoft/TypeScript/pull/36622</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36754\">https://github.com/microsoft/TypeScript/pull/36754</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/pull/36696\">https://github.com/microsoft/TypeScript/pull/36696</a></li>\n</ul>\n<p>이러한 각 pull request는 특정 코드 베이스에서 컴파일 시간이 약 5-10% 단축됩니다.\n전체적으로 material-ui의 컴파일 시간이 약 40% 단축되었습니다!</p>\n<p>또한 에디터 시나리오에서 파일 이름 변경 기능이 일부 변경되었습니다.\n우리는 Visual Studio Code 팀으로부터 파일 이름을 바꿀 때 어떤 import 문을 업데이트해야 하는지 파악하는데 5초에서 10초가 소요될 수 있다고 들었습니다.\nTypeScript 3.9는 <a href=\"https://github.com/microsoft/TypeScript/pull/37055\">컴파일러 및 언어 서비스가 파일 조회를 캐싱 하는 방식의 내부 변경</a>을 통해 이 문제를 해결합니다.</p>\n<p>여전히 개선의 여지가 있지만, 이 작업이 모든 사람들에게 보다 빠른 경험으로 이어지기를 바랍니다!</p>\n<h2 id=\"-ts-expect-error-주석--ts-expect-error-comments\" style=\"position:relative;\"><a href=\"#-ts-expect-error-%EC%A3%BC%EC%84%9D--ts-expect-error-comments\" aria-label=\" ts expect error 주석  ts expect error comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>// @ts-expect-error</code> 주석 (<code>// @ts-expect-error</code> Comments)</h2>\n<p>TypeScript로 라이브러리를 작성하고 퍼블릭 API의 일부분으로 <code>doStuff</code>라는 함수를 export 한다고 상상해보세요.\nTypeScript 사용자가 타입-체크 오류를 받을 수 있도록 <code>doStuff</code> 함수의 타입은 두 개의 <code>string</code>을 갖는다고 선언하지만, 또한 JavaScript 사용자에게 유용한 오류를 제공하기 위해 런타임 오류 체크를 합니다 (개발 빌드 시에만 가능).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doStuff</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">abc</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">xyz</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">assert</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">abc</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">assert</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">xyz</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 어떤 작업을 하세요</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그래서 TypeScript 사용자는 함수를 잘못 사용할 경우 유용한 빨간 오류 밑줄과 오류 메시지를 받게 되며, JavaScript 사용자는 단언 오류를 얻게 됩니다.\n이러한 작동을 테스트하기 위해서, 유닛 테스트를 작성하겠습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">expect</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doStuff</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">456</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}).</span><span style=\"color: #795E26\">toThrow</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>불행히도 위의 테스트가 TypeScript에서 작성된다면, TypeScript는 오류를 발생시킬 것입니다!</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">doStuff</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">456</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//          ~~~</span></div><div class='line'><span style=\"color: #008000\">// 오류: 'number' 타입은 'string' 타입에 할당할 수 없습니다.</span></div></code></div></pre>\n<p>그래서 TypeScript 3.9는 새로운 기능을 도입했습니다: <code>// @ts-expect-error</code> 주석.\n라인 앞에 <code>// @ts-expect-error</code> 주석이 붙어 있을 경우, TypeScript는 해당 오류를 보고하는 것을 멈춥니다;\n그러나 오류가 존재하지 않으면, TypeScript는 <code>// @ts-expect-error</code>가 필요하지 않다고 보고할 것입니다.</p>\n<p>간단한 예로, 다음 코드는 괜찮습니다</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">47</span><span style=\"color: #000000\"> * </span><span style=\"color: #A31515\">\"octopus\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>그러나 다음 코드는</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>오류로 이어질 것입니다</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Unused '@ts-expect-error' directive.</span></div></code></div></pre>\n<p>이 기능을 구현한 컨트리뷰터, <a href=\"https://github.com/JoshuaKGoldberg\">Josh Goldberg</a>에게 큰 감사를 드립니다.\n자세한 내용은 <a href=\"https://github.com/microsoft/TypeScript/pull/36014\">the <code>ts-expect-error</code> pull request</a>를 참고하세요.</p>\n<h3 id=\"ts-ignore-또는-ts-expect-error-ts-ignore-or-ts-expect-error\" style=\"position:relative;\"><a href=\"#ts-ignore-%EB%98%90%EB%8A%94-ts-expect-error-ts-ignore-or-ts-expect-error\" aria-label=\"ts ignore 또는 ts expect error ts ignore or ts expect error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ts-ignore</code> 또는 <code>ts-expect-error</code>? (<code>ts-ignore</code> or <code>ts-expect-error</code>?)</h3>\n<p>어떤 점에서는 <code>// @ts-expect-error</code>가 <code>// @ts-ignore</code>과 유사하게 억제 주석(suppression comment)으로 작용할 수 있습니다.\n차이점은 <code>// @ts-ignore</code>는 다음 행에 오류가 없을 경우 아무것도 하지 않는다는 것입니다.</p>\n<p>기존 <code>// @ts-ignore</code> 주석을 <code>// @ts-expect-error</code>로 바꾸고 싶은 마음이 들 수 있으며, 향후 코드에 무엇이 적합한지 궁금할 수 있습니다.\n전적으로 당신과 당신 팀의 선택이지만, 우리는 어떤 상황에서 어떤 것을 선택할 것인지에 대한 몇 가지 아이디어를 가지고 있습니다.</p>\n<p>다음 경우라면 <code>ts-expect-error</code>를 선택하세요:</p>\n<ul>\n<li>타입 시스템이 작동에 대한 오류를 발생시키는 테스트 코드 작성을 원하는 경우</li>\n<li>수정이 빨리 이루어지길 원하며 빠른 해결책이 필요한 경우</li>\n<li>오류가 발생한 코드가 다시 유효해지면 바로 억제 주석을 삭제하길 원하는 혁신적인 팀이 이끄는 적당한-크기의 프로젝트에서 작업하는 경우</li>\n</ul>\n<p>다음 경우라면 <code>ts-ignore</code>를 선택하세요:</p>\n<ul>\n<li>더 큰 프로젝트를 갖고 있고 코드에서 발생한 새로운 오류의 명확한 책임자를 찾기 힘든 경우</li>\n<li>TypeScript의 두 가지 버전 사이에서 업그레이드하는 중이고, 한 버전에서는 코드 오류가 발생하지만 나머지 버전에서는 그렇지 않은 경우</li>\n<li>솔직히 어떤 옵션 더 나은지 결정할 시간이 없는 경우</li>\n</ul>\n<h2 id=\"조건문에서-호출되지-않은-함수-체크-uncalled-function-checks-in-conditional-expressions\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%97%90%EC%84%9C-%ED%98%B8%EC%B6%9C%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%ED%95%A8%EC%88%98-%EC%B2%B4%ED%81%AC-uncalled-function-checks-in-conditional-expressions\" aria-label=\"조건문에서 호출되지 않은 함수 체크 uncalled function checks in conditional expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문에서 호출되지 않은 함수 체크 (Uncalled Function Checks in Conditional Expressions)</h2>\n<p>TypeScript 3.7에서 함수 호출을 잊어버렸을 경우 오류를 보고하기 위해 <em>호출되지 않은 함수 체크</em>를 도입했습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">hasImportantPermissions</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 이런!</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">hasImportantPermissions</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #008000\">//  ~~~~~~~~~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// hasImportantPermissions 함수가 항상 정의되어 있기 때문에, 이 조건문은 항상 true를 반환합니다.</span></div><div class='line'><span style=\"color: #008000\">// 대신 이것을 호출하려 하셨나요?</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">deleteAllTheImportantFiles</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>그러나, 이 오류는 <code>if</code> 문의 조건에만 적용됩니다.\n<a href=\"https://github.com/a-tarasyuk\">Alexander Tarasyuk</a>의 <a href=\"https://github.com/microsoft/TypeScript/pull/36402\">a pull request</a> 덕분에, 이 기능은 삼항 조건 연산자도 지원하게 되었습니다 (예. <code>cond ? trueExpr : falseExpr</code> 구문).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">listFilesOfDirectory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dirPath</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isDirectory</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAllFiles</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">startFileName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">result</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] = [];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">traverse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">startFileName</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">traverse</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">currentPath</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">isDirectory</span><span style=\"color: #000000\"> ?</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">//     ~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// isDirectory 함수가 항상 정의되어 있기 때문에,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 이 조건문은 항상 true를 반환합니다</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 대신 이것을 호출하려 하셨나요?</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">listFilesOfDirectory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">currentPath</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">forEach</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">traverse</span><span style=\"color: #000000\">) :</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">currentPath</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/issues/36048\">https://github.com/microsoft/TypeScript/issues/36048</a></p>\n<h2 id=\"에디터-개선-editor-improvements\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%94%94%ED%84%B0-%EA%B0%9C%EC%84%A0-editor-improvements\" aria-label=\"에디터 개선 editor improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에디터 개선 (Editor Improvements)</h2>\n<p>TypeScript 컴파일러는 주요 에디터의 TypeScript 작성 경험뿐만 아니라, Visual Studio 계열 에디터의 JavaScript 작성 경험에도 영향을 줍니다.\n에디터에서 새로운 TypeScript/JavaScript 기능을 사용하는 것은 에디터에 따라 다르겠지만</p>\n<ul>\n<li>Visual Studio Code는 <a href=\"https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript\">다른 버전의 TypeScript 선택</a>을 지원합니다. 또는, 최신으로 유지하기 위한 <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">JavaScript/TypeScript Nightly Extension</a>도 있습니다.(대체로 안정적입니다.)</li>\n<li>Visual Studio 2017/2019 에는 [SDK 설치 프로그램] 과 <a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\">MSBuild 설치</a>가 있습니다.</li>\n<li>Sublime Text 3은 <a href=\"(https://github.com/microsoft/TypeScript-Sublime-Plugin#note-using-different-versions-of-typescript)\">다른 버전의 TypeScript 선택</a>을 지원합니다.</li>\n</ul>\n<h3 id=\"javascript에서-commonjs-자동-import-commonjs-auto-imports-in-javascript\" style=\"position:relative;\"><a href=\"#javascript%EC%97%90%EC%84%9C-commonjs-%EC%9E%90%EB%8F%99-import-commonjs-auto-imports-in-javascript\" aria-label=\"javascript에서 commonjs 자동 import commonjs auto imports in javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript에서 CommonJS 자동-import (CommonJS Auto-Imports in JavaScript)</h3>\n<p>CommonJS 모듈을 사용하는 JavaScript 파일에서 자동-import 기능이 크게 개선되었습니다.</p>\n<p>이전 버전에서는, TypeScript는 항상 파일에 관계없이 ECMAScript-스타일의 import를 원한다고 가정했습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>하지만, 모든 사람이 JavaScript 파일을 쓸 때 ECMAScript-스타일의 모듈을 원하는 것은 아닙니다.\n많은 사용자가 여전히 CommonJS-스타일의 <code>require(...)</code> import를 사용하고 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>이제 TypeScript는 파일 스타일을 깔끔하고 일관되게 유지하기 위해서 사용 중인 import 유형을 자동으로 검색합니다.</p>\n<p><video src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/ERkaliGU0AA5anJ1.mp4\"></video></p>\n<p>이 변경에 대한 자세한 내용은, <a href=\"https://github.com/microsoft/TypeScript/pull/37027\">해당 pull request</a>를 참고하세요.</p>\n<h3 id=\"코드-작업-개행-유지-code-actions-preserve-newlines\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%9E%91%EC%97%85-%EA%B0%9C%ED%96%89-%EC%9C%A0%EC%A7%80-code-actions-preserve-newlines\" aria-label=\"코드 작업 개행 유지 code actions preserve newlines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 작업 개행 유지 (Code Actions Preserve Newlines)</h3>\n<p>TypeScript의 리팩터링과 빠른 수정은 종종 개행을 유지하는데 큰 역할을 하지는 않았습니다.\n기본적인 예로 다음 코드를 보겠습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">maxValue</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/*시작*/</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #001080\">maxValue</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 먼저 제곱 값을 구한다.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">square</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 제곱 값을 출력한다.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">square</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">/*끝*/</span></div></code></div></pre>\n<p>에디터에서 <code>/*시작*/</code> 에서 <code>/*끝*/</code> 까지 범위를 강조하여 새로운 함수로 추출하면, 다음과 같은 코드가 됩니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">maxValue</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">printSquares</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">printSquares</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #001080\">maxValue</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 먼저 제곱 값을 구한다.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">square</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 제곱 값을 출력한다.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">square</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/printSquaresWithoutNewlines-3.9.gif.gif\" alt=\"이전 버전의 TypeScript에선 함수로 루프 추출은. 개행을 유지하지 않습니다.\"></p>\n<p>이건 이상적이지 않습니다 - <code>for</code> 루프에서 각각의 문 사이에 빈 줄이 있었지만 리팩터링이 없애버렸습니다!\nTypeScript 3.9은 우리가 작성한 것을 보존하기 위해 조금 더 작업을 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">maxValue</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">printSquares</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">printSquares</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt;= </span><span style=\"color: #001080\">maxValue</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 먼저 제곱 값을 구한다.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">square</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 제곱값을 출력한다.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">square</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/printSquaresWithNewlines-3.9.gif.gif\" alt=\"TypeScript 3.9의 함수에 대한 루프 추출. 개행이 보존됨\"></p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/36688\">이 pull request</a>에서 구현에 대해 더 자세히 볼 수 있습니다.</p>\n<h3 id=\"누락된-반환-문-빠른-수정-quick-fixes-for-missing-return-expressions\" style=\"position:relative;\"><a href=\"#%EB%88%84%EB%9D%BD%EB%90%9C-%EB%B0%98%ED%99%98-%EB%AC%B8-%EB%B9%A0%EB%A5%B8-%EC%88%98%EC%A0%95-quick-fixes-for-missing-return-expressions\" aria-label=\"누락된 반환 문 빠른 수정 quick fixes for missing return expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>누락된 반환 문 빠른 수정 (Quick Fixes for Missing Return Expressions)</h3>\n<p>특히 화살표 함수에 중괄호를 추가할 때, 함수의 마지막 문의 값을 반환하는 것을 잊는 경우가 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 이전</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">42</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 실수 - 동일하지 않음!</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f2</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> { </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\"> }</span></div></code></div></pre>\n<p>커뮤니티 멤버인 <a href=\"https://github.com/Kingwl\">Wenlu Wang</a>의 <a href=\"https://github.com/microsoft/TypeScript/pull/26434\">pull request</a> 덕분에, TypeScript는 누락된 <code>return</code> 문을 추가하거나, 중괄호를 제거하거나, 객체 리터럴 처럼 보이는 화살표 함수 몸체에 괄호를 추가하는 빠른-수정을 제공할 수 있습니다.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/04/missingReturnValue-3-9.gif\" alt=\"TypeScript는 return 문을 추가하거나 중괄호를 제거하여 식이 반환되지 않는 오류를 수정합니다.\"></p>\n<h3 id=\"tsconfigjson-파일-솔루션-스타일-지원-support-for-solution-style-tsconfigjson-files\" style=\"position:relative;\"><a href=\"#tsconfigjson-%ED%8C%8C%EC%9D%BC-%EC%86%94%EB%A3%A8%EC%85%98-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A7%80%EC%9B%90-support-for-solution-style-tsconfigjson-files\" aria-label=\"tsconfigjson 파일 솔루션 스타일 지원 support for solution style tsconfigjson files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tsconfig.json</code> 파일 “솔루션 스타일” 지원 (Support for “Solution Style” <code>tsconfig.json</code> Files)</h3>\n<p>에디터는 파일이 어떤 설정 파일에 속하는지 파악하여 적절한 옵션을 적용할 수 있도록 하고 현재 “프로젝트”에 어떤 다른 파일이 포함되어 있는지 파악해야 합니다.\n기본적으로, TypeScript의 언어 서버가 영향을 주는 에디터는 각 상위 디렉터리를 따라 올라가 <code>tsconfig.json</code>을 찾음으로써 이 작업을 수행합니다.</p>\n<p>이 문제가 다소 실패하는 경우 중 하나는 tsconfig.json이 단순히 다른 tsconfig.json 파일을 참조하기 위해 존재할 때였습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// tsconfig.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"files\"</span><span style=\"color: #000000\">: [],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"references\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">        { </span><span style=\"color: #0451A5\">\"path\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig.shared.json\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">        { </span><span style=\"color: #0451A5\">\"path\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig.frontend.json\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">        { </span><span style=\"color: #0451A5\">\"path\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig.backend.json\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">    ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>다른 프로젝트 파일을 관리만 하는 이 파일은 어떤 환경에서는 종종 “솔루션”이라고 불립니다.\n여기서 <code>tsconfig.*.json</code> 파일 중 어떤 파일도 서버에 의해 검색되지 않지만, 현재 <code>.ts</code> 파일이 루트의 <code>tsconfig.json</code>에 언급된 프로젝트 중 하나에 속한다는 것을 언어 서버가 이해하기를 원합니다.</p>\n<p>TypeScript 3.9 는 이 설정에 대한 시나리오 수정을 지원합니다.\n더 자세한 사항은, <a href=\"https://github.com/microsoft/TypeScript/pull/37239\">이 기능을 추가한 pull request</a>를 확인하세요.</p>\n<h2 id=\"주요-변경-사항-breaking-changes\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EB%B3%80%EA%B2%BD-%EC%82%AC%ED%95%AD-breaking-changes\" aria-label=\"주요 변경 사항 breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 변경 사항 (Breaking Changes)</h2>\n<h3 id=\"선택적-체이닝과-널이-아닌-단언에서-파싱-차이점-parsing-differences-in-optional-chaining-and-non-null-assertions\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%81-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EA%B3%BC-%EB%84%90%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%8B%A8%EC%96%B8%EC%97%90%EC%84%9C-%ED%8C%8C%EC%8B%B1-%EC%B0%A8%EC%9D%B4%EC%A0%90-parsing-differences-in-optional-chaining-and-non-null-assertions\" aria-label=\"선택적 체이닝과 널이 아닌 단언에서 파싱 차이점 parsing differences in optional chaining and non null assertions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택적 체이닝과 널이 아닌 단언에서 파싱 차이점 (Parsing Differences in Optional Chaining and Non-Null Assertions)</h3>\n<p>최근에 TypeScript는 선택적 체이닝 연산자를 도입했지만, 널이 아닌 단언 연산자 (<code>!</code>)와 함께 사용하는 선택적 체이닝 (<code>?.</code>)의 동작이 매우 직관적이지 않다는 사용자 피드백을 받았습니다.</p>\n<p>구체적으로, 이전 버전에서는 코드가</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?.</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">!.</span><span style=\"color: #001080\">baz</span></div></code></div></pre>\n<p>다음 JavaScript와 동일하게 해석되었습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?.</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\">baz</span></div></code></div></pre>\n<p>위에 코드에서 괄호는 선택적 체이닝의 “단락” 동작을 중단합니다, 그래서 만약 <code>foo</code>가 <code>undefined</code>이면, <code>baz</code>에 접근하는 것은 런타임 오류를 발생시킵니다.</p>\n<p>이 동작을 지적한 바벨팀과 피드백을 준 대부분의 사용자들은 이 동작이 잘못되었다고 생각합니다.\n저희도 그렇게 생각합니다!\n<code>bar</code>의 타입에서 <code>null</code>과 <code>undefined</code>를 제거하는 것이 의도이기 때문에 가장 많이 들은 말은 <code>!</code> 연산자는 그냥 “사라져야 한다”입니다.</p>\n<p>즉, 대부분의 사람들은 원본 문장이 다음과 같이</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?.</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">baz</span></div></code></div></pre>\n<p><code>foo</code>가 <code>undefined</code>일 때, 그냥 <code>undefined</code>로 평가하는 것으로 해석되어야 한다고 생각합니다</p>\n<p>이것이 주요 변경 사항이지만, 대부분의 코드가 새로운 해석을 염두에 두고 작성되었다고 생각합니다.\n이전 동작으로 되돌리고 싶은 사용자는 <code>!</code> 연산자 왼쪽에 명시적인 괄호를 추가할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?.</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">)!.</span><span style=\"color: #001080\">baz</span></div></code></div></pre>\n<h3 id=\"-와--는-이제-유효하지-않은-jsx-텍스트-문자입니다--and--are-now-invalid-jsx-text-characters\" style=\"position:relative;\"><a href=\"#-%EC%99%80--%EB%8A%94-%EC%9D%B4%EC%A0%9C-%EC%9C%A0%ED%9A%A8%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-jsx-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%9E%90%EC%9E%85%EB%8B%88%EB%8B%A4--and--are-now-invalid-jsx-text-characters\" aria-label=\" 와  는 이제 유효하지 않은 jsx 텍스트 문자입니다  and  are now invalid jsx text characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>}</code> 와 <code>></code> 는 이제 유효하지 않은 JSX 텍스트 문자입니다 (<code>}</code> and <code>></code> are Now Invalid JSX Text Characters)</h3>\n<p>JSX 명세서에는 텍스트 위치에 <code>}</code>와 <code>></code> 문자의 사용을 금지합니다.\nTypeScript와 바벨은 이 규칙을 더 적합하게 적용하기로 결정했습니다.\n이 문자를 넣기 위한 새로운 방법은 HTML 이스케이프 코드를 사용하거나 (예를 들어, <code>&#x3C;span> 2 &#x26;gt 1 &#x3C;/div></code>) 문자열 리터럴로 표현식을 넣는 것입니다 (예를 들어, <code>&#x3C;span> 2 {\">\"} 1 &#x3C;/div</code>).</p>\n<p>다행히, <a href=\"https://github.com/bradzacher\">Brad Zacher</a>의 <a href=\"https://github.com/microsoft/TypeScript/pull/36636\">pull request</a> 덕분에, 다음 문장과 함께 오류 메시지를 받을 수 있습니다</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Unexpected token. Did you mean `{'&gt;'}` or `&gt;`?\nUnexpected token. Did you mean `{'}'}` or `&rbrace;`?</span></div></code></div></pre>\n<p>예를 들어:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">directions</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;span&gt;</span><span style=\"color: #000000\">Navigate to: Menu Bar &gt; Tools &gt; Options</span><span style=\"color: #800000\">&lt;/div&gt;</span></div><div class='line'><span style=\"color: #008000\">//                                           ~       ~</span></div><div class='line'><span style=\"color: #008000\">// Unexpected token. Did you mean `{'&gt;'}` or `&gt;`?</span></div></code></div></pre>\n<p>이 오류 메시지는 편리하고 빠른 수정과 함께 제공되고 <a href=\"https://github.com/a-tarasyuk\">Alexander Tarasyuk</a> 덕분에, 많은 오류가 있으면 <a href=\"https://github.com/microsoft/TypeScript/pull/37436\">이 변경사항을 일괄 적용 할 수 있습니다</a>.</p>\n<h3 id=\"교집합과-선택적-프로퍼티에-대한-더-엄격해진-검사-stricter-checks-on-intersections-and-optional-properties\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%84%A0%ED%83%9D%EC%A0%81-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%94-%EC%97%84%EA%B2%A9%ED%95%B4%EC%A7%84-%EA%B2%80%EC%82%AC-stricter-checks-on-intersections-and-optional-properties\" aria-label=\"교집합과 선택적 프로퍼티에 대한 더 엄격해진 검사 stricter checks on intersections and optional properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교집합과 선택적 프로퍼티에 대한 더 엄격해진 검사 (Stricter Checks on Intersections and Optional Properties)</h3>\n<p>일반적으로, <code>A &#x26; B</code>와 같은 교차 타입은 <code>A</code> 또는 <code>B</code>가 <code>C</code>에 할당할 수 있으면, <code>A &#x26; B</code>는 <code>C</code>에 할당할 수 있습니다; 하지만, 가끔 선택적 프로퍼티에서 문제가 생깁니다.\n예를 들어, 다음을 봅시다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 'number' 인 것에 주목</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 'boolean' 인것에 주목</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>이전 버전의 TypeScript에서는, <code>A</code>가 <code>C</code>와 완전히 호환되지 않지만, <code>B</code>가 <code>C</code>와 호환 <em>되었기</em> 때문에 허용되었습니다.</p>\n<p>TypeScript 3.9에서는, 교집합 안의 모든 타입이 구제적인 객체 타입이면, 타입 시스템은 모든 프로퍼티를 한 번에 고려합니다.\n결과적으로, TypeScript는 <code>A &#x26; B</code>의 <code>a</code> 프로퍼티는 <code>C</code>의 <code>a</code> 프로퍼티와 호환되지 않는다고 봅니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">'A & B' 타입은 'C' 타입에 할당할 수 없습니다.\n  'a' 프로퍼티의 타입은 호환되지 않습니다.\n    'number' 타입은 'boolean | undefined' 타입에 할당할 수 없습니다.</span></div></code></div></pre>\n<p>이 변경사항에 대한 자세한 정보는, <a href=\"https://github.com/microsoft/TypeScript/pull/37195\">해당 pull request</a>를 참조하세요.</p>\n<h3 id=\"판별-프로퍼티로-줄어든-교집합-intersections-reduced-by-discriminant-properties\" style=\"position:relative;\"><a href=\"#%ED%8C%90%EB%B3%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A1%9C-%EC%A4%84%EC%96%B4%EB%93%A0-%EA%B5%90%EC%A7%91%ED%95%A9-intersections-reduced-by-discriminant-properties\" aria-label=\"판별 프로퍼티로 줄어든 교집합 intersections reduced by discriminant properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>판별 프로퍼티로 줄어든 교집합 (Intersections Reduced By Discriminant Properties)</h3>\n<p>존재하지 않는 값을 기술하는 타입으로 끝날 수 있는 몇 가지 경우가 있습니다.\n예를 들어</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">smushObjects</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Circle</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">radius</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Square</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"square\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">sideLength</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Circle</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Square</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">smushObjects</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">kind</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>이 코드는 <code>Circle</code>과 <code>Square</code>의 교집합을 생성할 방법이 전혀 없기 때문에 약간 이상합니다 - 호환되지 않는 두 <code>kind</code> 필드가 있습니다.\n이전 버전의 TypeScript에서는, 이 코드는 허용되었고 <code>\"circle\" &#x26; \"square\"</code>가 <code>절대(never)</code> 존재할 수 없는 값의 집합을 기술했기 때문에 <code>kind</code> 자체의 타입은 <code>never</code>였습니다.</p>\n<p>TypeScript 3.9에서는, 타입 시스템이 더 공격적입니다 - <code>kind</code> 프로퍼티 때문에 <code>Circle</code>과 <code>Square</code>를 교차하는 것이 불가능하다는 것을 알고 있습니다.\n그래서 <code>z.kind</code>를 <code>never</code>로 축소하는 대신, <code>z</code> 자체(<code>Circle &#x26; Square</code>) 타입을 <code>never</code>로 축소합니다.\n즉 위의 코드는 다음과 같은 오류를 발생합니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">'kind' 프로퍼티는 'never' 타입에 존재하지 않습니다.</span></div></code></div></pre>\n<p>관찰한 대부분의 오류는 잘못된 타입 선언과 일치하는 것으로 보입니다.\n자세한 내용은 <a href=\"https://github.com/microsoft/TypeScript/pull/36696\">원문 pull request</a>를 보세요.</p>\n<h3 id=\"getterssetters는-더-이상-열거하지-않습니다-getterssetters-are-no-longer-enumerable\" style=\"position:relative;\"><a href=\"#getterssetters%EB%8A%94-%EB%8D%94-%EC%9D%B4%EC%83%81-%EC%97%B4%EA%B1%B0%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4-getterssetters-are-no-longer-enumerable\" aria-label=\"getterssetters는 더 이상 열거하지 않습니다 getterssetters are no longer enumerable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getters/Setters는 더 이상 열거하지 않습니다 (Getters/Setters are No Longer Enumerable)</h3>\n<p>이전 버전의 TypeScript에서, 클래스의 <code>get</code>과 <code>set</code> 접근자는 열거 가능한 방법으로 방출되었습니다; 하지만, <code>get</code>과 <code>set</code>은 열거할 수 없다는 ECMAScript 사양을 따르지 않았습니다.\n결과적으로, ES5와 ES2015를 타겟팅 하는 TypeScript 코드는 동작이 다를 수 있습니다.</p>\n<p>깃허브 사용자 <a href=\"https://github.com/pathurs\">pathurs</a>의 <a href=\"https://github.com/microsoft/TypeScript/pull/32264\">pull request</a> 덕분에, TypeScript 3.9는 이와 관련하여 ECMAScript와 더 밀접하게 호환됩니다.</p>\n<h3 id=\"any로-확장된-타입-매개변수는-더-이상-any-처럼-행동하지-않음-type-parameters-that-extend-any-no-longer-act-as-any\" style=\"position:relative;\"><a href=\"#any%EB%A1%9C-%ED%99%95%EC%9E%A5%EB%90%9C-%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%8A%94-%EB%8D%94-%EC%9D%B4%EC%83%81-any-%EC%B2%98%EB%9F%BC-%ED%96%89%EB%8F%99%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C-type-parameters-that-extend-any-no-longer-act-as-any\" aria-label=\"any로 확장된 타입 매개변수는 더 이상 any 처럼 행동하지 않음 type parameters that extend any no longer act as any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>any</code>로 확장된 타입 매개변수는 더 이상 <code>any</code> 처럼 행동하지 않음 (Type Parameters That Extend <code>any</code> No Longer Act as <code>any</code>)</h3>\n<p>이전 버전의 TypeScript에서 <code>any</code>로 제한된 타입 매개변수는 <code>any</code>로 다룰 수 있었습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">spfjgerijghoied</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 오류가 아님!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>이는 실수였습니다, 그래서 TypeScript 3.9에서는 더 보수적인 접근을 취하고 이런 의심스러운 작업에 대해 오류를 발생시킵니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">arg</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">spfjgerijghoied</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//  ~~~~~~~~~~~~~~~</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 'spfjgerijghoied' 프로퍼티는 'T' 타입에 존재하지 않습니다.</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"export-은-항상-유지됩니다-export--is-always-retained\" style=\"position:relative;\"><a href=\"#export-%EC%9D%80-%ED%95%AD%EC%83%81-%EC%9C%A0%EC%A7%80%EB%90%A9%EB%8B%88%EB%8B%A4-export--is-always-retained\" aria-label=\"export 은 항상 유지됩니다 export  is always retained permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>export *</code>은 항상 유지됩니다 (<code>export *</code> is Always Retained)</h3>\n<p>이전 TypeScript 버전에서 <code>export * from \"foo\"</code> 같은 선언은 <code>foo</code>가 어떠한 값도 export 하지 않으면 JavaScript 출력에서 제외되었습니다.\n이런 내보내기는 타입-지향적이고 바벨에서 에뮬레이트 될 수 없기 때문에 문제가 됩니다.\nTypeScrip 3.9는 이런 <code>export *</code> 선언을 항상 내보냅니다.\n실제로 이 변화가 기존 코드를 깨뜨릴 것이라고 생각하지 않습니다.</p>\n<h3 id=\"더-많은-libdomdts-개선-more-libdomdts-refinements\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%A7%8E%EC%9D%80-libdomdts-%EA%B0%9C%EC%84%A0-more-libdomdts-refinements\" aria-label=\"더 많은 libdomdts 개선 more libdomdts refinements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 많은 libdom.d.ts 개선 (More libdom.d.ts refinements)</h3>\n<p>Web IDL 파일에서 바로 TypeScript의 내장 .d.ts. 라이브러리 (lib.d.ts 및 제품군)가 생성될 수 있도록 DOM 규격의 TypeScript의 내장 .d.ts. 라이브러리를 옮기는 작업을 계속 진행하고 있습니다.\n그 결과 미디어 액세스와 관련된 일부 벤더별 타입이 제거되었습니다.</p>\n<p>프로젝트의 ambient *.d.ts 파일에 이 파일을 추가하면 다시 복구할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLVideoElement</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">msFrameStep</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">forward</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">msInsertVideoEffect</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">activatableClassId</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">effectRequired</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">config</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">msSetVideoRectangle</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">left</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">top</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">right</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">bottom</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">webkitEnterFullScreen</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">webkitEnterFullscreen</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">webkitExitFullScreen</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">webkitExitFullscreen</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">msHorizontalMirror</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">msIsLayoutOptimalForPlayback</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">msIsStereo3D</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">msStereo3DPackingMode</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">msStereo3DRenderMode</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">msZoom</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">onMSVideoFormatChanged</span><span style=\"color: #000000\">: ((</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLVideoElement</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ev</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Event</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">onMSVideoFrameStepCompleted</span><span style=\"color: #000000\">: ((</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLVideoElement</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ev</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Event</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">onMSVideoOptimalLayoutChanged</span><span style=\"color: #000000\">: ((</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLVideoElement</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ev</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Event</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">webkitDisplayingFullscreen</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">webkitSupportsFullscreen</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MediaError</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">msExtendedCode</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">MS_MEDIA_ERR_ENCRYPTED</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>","headings":[{"value":"추론과 Promise.all 개선 (Improvements in Inference and Promise.all)","depth":2},{"value":"awaited 타입은 무엇입니까? (What About the awaited Type?)","depth":3},{"value":"속도 향상 (Speed Improvements)","depth":2},{"value":"// @ts-expect-error 주석 (// @ts-expect-error Comments)","depth":2},{"value":"ts-ignore 또는 ts-expect-error? (ts-ignore or ts-expect-error?)","depth":3},{"value":"조건문에서 호출되지 않은 함수 체크 (Uncalled Function Checks in Conditional Expressions)","depth":2},{"value":"에디터 개선 (Editor Improvements)","depth":2},{"value":"JavaScript에서 CommonJS 자동-import (CommonJS Auto-Imports in JavaScript)","depth":3},{"value":"코드 작업 개행 유지 (Code Actions Preserve Newlines)","depth":3},{"value":"누락된 반환 문 빠른 수정 (Quick Fixes for Missing Return Expressions)","depth":3},{"value":"tsconfig.json 파일 “솔루션 스타일” 지원 (Support for “Solution Style” tsconfig.json Files)","depth":3},{"value":"주요 변경 사항 (Breaking Changes)","depth":2},{"value":"선택적 체이닝과 널이 아닌 단언에서 파싱 차이점 (Parsing Differences in Optional Chaining and Non-Null Assertions)","depth":3},{"value":"} 와 > 는 이제 유효하지 않은 JSX 텍스트 문자입니다 (} and > are Now Invalid JSX Text Characters)","depth":3},{"value":"교집합과 선택적 프로퍼티에 대한 더 엄격해진 검사 (Stricter Checks on Intersections and Optional Properties)","depth":3},{"value":"판별 프로퍼티로 줄어든 교집합 (Intersections Reduced By Discriminant Properties)","depth":3},{"value":"Getters/Setters는 더 이상 열거하지 않습니다 (Getters/Setters are No Longer Enumerable)","depth":3},{"value":"any로 확장된 타입 매개변수는 더 이상 any 처럼 행동하지 않음 (Type Parameters That Extend any No Longer Act as any)","depth":3},{"value":"export *은 항상 유지됩니다 (export * is Always Retained)","depth":3},{"value":"더 많은 libdom.d.ts 개선 (More libdom.d.ts refinements)","depth":3}],"frontmatter":{"permalink":"/ko/docs/handbook/release-notes/typescript-3-9.html","title":"TypeScript 3.9","disable_toc":null,"handbook":null,"oneline":"TypeScript 3.9 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-3.9","slug":"/ko/docs/handbook/release-notes/typescript-3-9.html","repoPath":"/packages/documentation/copy/ko/release-notes/TypeScript 3.9.md","lang":"ko","modifiedTime":"2024-10-21T12:35:09.565Z"}},"staticQueryHashes":[]}