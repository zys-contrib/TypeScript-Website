{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/intro-to-js-ts.html","result":{"data":{"markdownRemark":{"id":"d2af67e4-8961-53cc-b45a-6e3ca2aecb8e","excerpt":"TypeScript의 타입 시스템은 코드베이스로 작업할 때 엄격함의 레벨이 다릅니다 오직 JavaScript 코드의 추론을 기반으로 하는 타입 시스템 JSDoc를 통한 JavaScript에서의 Incremental typing JavaScript에서의 // @ts-check…","html":"<p>TypeScript의 타입 시스템은 코드베이스로 작업할 때 엄격함의 레벨이 다릅니다</p>\n<ul>\n<li>오직 JavaScript 코드의 추론을 기반으로 하는 타입 시스템</li>\n<li><a href=\"/docs/handbook/jsdoc-supported-types.html\">JSDoc를 통한</a> JavaScript에서의 Incremental typing</li>\n<li>JavaScript에서의 <code>// @ts-check</code> 사용</li>\n<li>TypeScript 코드</li>\n<li><a href=\"/tsconfig#strict\"><code>strict</code></a>이 활성화된 TypeScript</li>\n</ul>\n<p>각 단계는 타입시스템을 더 안전하게 만들지만, 반드시 모든 프로젝트가 이 수준에 맞는 검증을 필요로 하는 것은 아닙니다.</p>\n<h2 id=\"javascript를-활용한-typescript-typescript-with-javascript\" style=\"position:relative;\"><a href=\"#javascript%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-typescript-typescript-with-javascript\" aria-label=\"javascript를 활용한 typescript typescript with javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript를 활용한 TypeScript (TypeScript with JavaScript)</h2>\n<p>이는 자동 완성, 심벌로 이동 및 이름 바꾸기와 같은 리팩토링 툴을 제공하기 위해서 TypeScript를 사용하는 에디터를 사용할 때 유용합니다.\n<a href=\"/\">홈페이지</a>에는 TypeScript 플러그인들이 있는 편집자 목록이 있습니다.</p>\n<h2 id=\"jsdoc을-통하여-js에-타입-힌트-제공하기-providing-type-hints-in-js-via-jsdoc\" style=\"position:relative;\"><a href=\"#jsdoc%EC%9D%84-%ED%86%B5%ED%95%98%EC%97%AC-js%EC%97%90-%ED%83%80%EC%9E%85-%ED%9E%8C%ED%8A%B8-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0-providing-type-hints-in-js-via-jsdoc\" aria-label=\"jsdoc을 통하여 js에 타입 힌트 제공하기 providing type hints in js via jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDoc을 통하여 JS에 타입 힌트 제공하기 (Providing Type Hints in JS via JSDoc)</h2>\n<p><code>.js</code> 파일에서는, 종종 타입들을 유추할 수 있습니다. 타입들을 유추할 수 없는 경우, JSDoc 구문을 사용하여 구체적으로 알릴 수 있습니다.</p>\n<p>JSDoc 주석은 선언 앞에 위치하며 특정 선언의 타입을 설정하는 데 사용됩니다. 예를 들어:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공?!</span></div></code></div></pre>\n<p>지원되는 JSDoc 패턴의 전체 목록은 <a href=\"/docs/handbook/jsdoc-supported-types.html\">JSDoc가 지원하는 타입에서</a> 찾을 수 있습니다.</p>\n<h2 id=\"ts-check\" style=\"position:relative;\"><a href=\"#ts-check\" aria-label=\"ts check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@ts-check</code></h2>\n<p>이전 코드 예시의 마지막 줄은 TypeScript에서 오류를 발생시키지만, JS 프로젝트에서는 기본적으로 오류를 발생시키지 않습니다.\nJavaScript 파일에서 오류를 실행하려면 다음을 추가해야 합니다: <code>.js</code> 파일의 첫 번째 줄에 <code>// @ts-check</code>를 추가하여 TypeScript가 이를 오류로 올리도록 해야 합니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'><span style=\"color: #008000\">// @errors: 2322</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공 아님</span></div></code></div></pre>\n<p>만일 오류를 추가하려는 JavaScript 파일이 많은 경우, <a href=\"/docs/handbook/tsconfig-json.html\"><code>jsconfig.json</code></a> 역시 사용할 수 있습니다.\n파일에 <code>// @ts-nocheck</code> 코멘트를 추가하면 일부 파일 확인을 건너뛸 수 있습니다.</p>\n<p>TypeScript는 우리가 동의하지 않는 오류들을 제공할 수도 있는데, 이 경우 특정 줄 맨앞에 <code>// @ts-ignore</code> 또는 <code>// @ts-expect-error</code>를 추가하여 그 줄의 오류를 무시할 수 있습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// 성공 아님</span></div></code></div></pre>\n<p>JavaScript를 TypeScript로 해석하는 방법에 대한 자세한 내용은 <a href=\"/docs/handbook/type-checking-javascript-files.html\">TS Type이 JS를 체크하는 방법</a>을 참고하시기 바랍니다.</p>","headings":[{"value":"JavaScript를 활용한 TypeScript (TypeScript with JavaScript)","depth":2},{"value":"JSDoc을 통하여 JS에 타입 힌트 제공하기 (Providing Type Hints in JS via JSDoc)","depth":2},{"value":"@ts-check","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/intro-to-js-ts.html","title":"JS Projects Utilizing TypeScript","disable_toc":null,"handbook":null,"oneline":"How to add type checking to JavaScript files using TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"Type Checking JavaScript Files","oneline":"How to add type checking to JavaScript files using TypeScript","permalink":"/ko/docs/handbook/type-checking-javascript-files.html"}}}},"pageContext":{"id":"7-js-projects-utilizing-typescript","slug":"/ko/docs/handbook/intro-to-js-ts.html","repoPath":"/packages/documentation/copy/ko/javascript/Intro to JS with TS.md","nextID":"02e6794b-6a42-578f-b1bd-26216d6b015d","lang":"ko","modifiedTime":"2024-10-21T12:35:09.557Z"}},"staticQueryHashes":[]}