{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ko/docs/handbook/triple-slash-directives.html","result":{"data":{"markdownRemark":{"id":"2d7ee809-98ca-54ed-82cb-139e130ae0b4","excerpt":"트리플-슬래시 지시어는 단일 XML…","html":"<p>트리플-슬래시 지시어는 단일 XML 태그를 포함한 한 줄 주석입니다.\n주석의 내용은 컴파일러 지시어로 사용됩니다.</p>\n<p>트리플-슬래시 지시어는 <strong>오직</strong> 포함된 파일의 상단에서만 유효합니다.\n다른 트리플-슬래시 지시어를 포함한 트리플-슬래시 지시어는 한 줄 또는 여러 줄 주석 앞에만 있을 수 있습니다.\n만약 문이나 선언 뒤에 나오면 보통 한 줄 주석으로 여겨지며 어떤 특별한 의미도 갖지 않습니다.</p>\n<h2 id=\"-reference-path-\" style=\"position:relative;\"><a href=\"#-reference-path-\" aria-label=\" reference path  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference path=\"...\" /></code></h2>\n<p><code>/// &#x3C;reference path=\"...\" /></code>지시어는 가장 일반적인 트리플-슬래시 지시어입니다.\n이 지시어는 파일 간의 <em>의존성</em> 선언으로 사용됩니다.</p>\n<p>트리플-슬래시 참조는 컴파일러에게 추가 파일을 컴파일 과정에 포함할 것을 지시합니다.</p>\n<p>또한 <code>--out</code>이나 <code>--outFile</code>을 사용할 때 출력을 정렬하는 메서드로 사용됩니다.\n파일은 전처리 통과 후 입력과 동일한 순서로 출력 파일 위치에 생성됩니다.</p>\n<h3 id=\"입력-파일-전처리-preprocessing-input-files\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%B2%98%EB%A6%AC-preprocessing-input-files\" aria-label=\"입력 파일 전처리 preprocessing input files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 파일 전처리 (Preprocessing input files)</h3>\n<p>컴파일러는 모든 트리플-슬래시 참조 지시어를 분석하기 위해 입력 파일에 대해 전처리를 수행합니다.\n이 과정 동안, 추가 파일이 컴파일에 추가됩니다.</p>\n<p>이 과정은 <em>root files</em> 집합에서 시작됩니다;\n이 루트 파일은 명령 줄이나 <code>tsconfig.json</code>파일의 <code>\"files\"</code> 목록에 있는 파일 이름입니다.\n이러한 파일은 지정된 순서대로 전처리됩니다.\n목록에 파일을 추가하기 전에,  파일에 있는 모든 트리플-슬래시 참조가 처리되고, 그 대상들이 포함됩니다.\n트리플-슬래시 참조는 파일에서 보이는 순서대로 깊이 우선으로 처리됩니다.</p>\n<p>루트가 없는 경우, 트리플-슬래시 참조 경로는 이를 포함하고 있는 파일을 기준으로 처리됩니다.</p>\n<h3 id=\"오류-errors\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-errors\" aria-label=\"오류 errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 (Errors)</h3>\n<p>존재하지 않는 파일을 참조하는 것은 오류입니다.\n자기 자신에 대한 트리플-슬래시 참조를 갖는 파일은 오류입니다.</p>\n<h3 id=\"--noresolve-사용하기-using---noresolve\" style=\"position:relative;\"><a href=\"#--noresolve-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-using---noresolve\" aria-label=\"  noresolve 사용하기 using   noresolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--noResolve</code> 사용하기 (Using <code>--noResolve</code>)</h3>\n<p>컴파일러 플래그 <code>--noResolve</code>가 지정되면, 트리플-슬래시 참조는 무시됩니다; 새 파일을 추가하거나, 제공된 파일의 순서를 바꾸지 않습니다.</p>\n<h2 id=\"-reference-types-\" style=\"position:relative;\"><a href=\"#-reference-types-\" aria-label=\" reference types  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference types=\"...\" /></code></h2>\n<p><em>의존성</em> 선언 역할을 하는  <code>/// &#x3C;reference path=\"...\" /></code> 지시어와 유사하게,  <code>/// &#x3C;reference types=\"...\" /></code>  지시어는 패키지의 의존성을 선언합니다.</p>\n<p>패키지 이름을 처리하는 과정은  <code>import</code>문에서 모듈 이름을 처리하는 과정과 유사합니다.\n트리플-슬래시-참조-타입 지시어를 선언 패키지의 <code>import</code>로 생각하면 이해하기 쉽습니다.</p>\n<p>예를 들어, 선언 파일에  <code>/// &#x3C;reference types=\"node\" /></code>를 포함하는 것은 <code>@types/node/index.d.ts</code>에 선언된 이름을 사용한다고 하는 것이고;\n따라서 이 패키지는 선언 파일과 함께 컴파일에 포함되어야 합니다.</p>\n<p>이 지시어는  <code>d.ts</code> 파일을 직접 작성할 때만 사용하세요.</p>\n<p>컴파일 중 생성된 선언 파일의 경우, 컴파일러는 자동으로  <code>/// &#x3C;reference types=\"...\" /></code>를 추가합니다;<br>\n<code>/// &#x3C;reference types=\"...\" /></code>는 오직 결과 파일이 참조된 패키지의 선언문을 사용하는 경우에만 생성된 파일 안에 추가됩니다.</p>\n<p><code>.ts</code> 파일에서  <code>@types</code> 패키지의 의존성을 선언하기 위해서는, 명령 줄에서  <code>--types</code>를 사용하거나 <code>tsconfig.json</code>를 사용하세요.\n<a href=\"/docs/handbook/tsconfig-json.html#types-typeroots-and-types\">using <code>@types</code>, <code>typeRoots</code> and <code>types</code> in <code>tsconfig.json</code> files</a> 에서 세부 사항을 확인하세요.</p>\n<h2 id=\"-reference-lib-\" style=\"position:relative;\"><a href=\"#-reference-lib-\" aria-label=\" reference lib  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference lib=\"...\" /></code></h2>\n<p>이 지시어는 파일이 명시적으로 기존 내장 <em>lib</em> 파일을 포함하게 합니다..</p>\n<p>내장 <em>lib</em> 파일은 <em>tsconfig.json</em>의 <code>\"lib\"</code> 컴파일러 옵션과 같은 방식으로 참조됩니다 (예.<code>lib=\"lib.es2015.d.ts\"</code> 가 아닌 <code>lib=\"es2015\"</code> 사용 등).</p>\n<p>내장 타입에 의존하는 선언 파일 작성자에게는 트리플-슬래시-참조 lib 지시어를 사용하는 것이 권장됩니다(내장 타입 : DOM APIs 또는 <code>Symbol</code>이나 <code>Iterable</code>과 같은 내장 JS 런-타임 생성자) 이전에는 이런 .d.ts 파일은 이러한 타입의 전달/중복 선언을 추가했어야 한다.</p>\n<p>예를 들어, 컴파일에서 파일 중 하나에  <code>/// &#x3C;reference lib=\"es2017.string\" /></code>를 추가한 것은  <code>--lib es2017.string</code>으로 컴파일하는 것과 같습니다.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">lib</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"es2017.string\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">padStart</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"-reference-no-default-libtrue\" style=\"position:relative;\"><a href=\"#-reference-no-default-libtrue\" aria-label=\" reference no default libtrue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;reference no-default-lib=\"true\"/></code></h2>\n<p>이 지시어는 파일을 <em>기본 라이브러리</em>라고 표시합니다.\n<code>lib.d.ts</code>와 이를 변형한 것들의 맨 상단에서 볼 수 있습니다.</p>\n<p>이 지시어는 컴파일러 기본 라이브러리(예.  <code>lib.d.ts</code>) 를 컴파일에 포함시키지 <em>않도록</em>  지시합니다.\n명령 줄에 <code>--noLib</code>을 넘겨주는 것과 비슷한 영향을 줍니다.</p>\n<p>또한 <code>--skipDefaultLibCheck</code>를 넘겨주면, 컴파일러가  <code>/// &#x3C;reference no-default-lib=\"true\"/></code>을 갖는 파일은 검사하지 않는다는 것을 유의하세요.</p>\n<h2 id=\"-amd-module-\" style=\"position:relative;\"><a href=\"#-amd-module-\" aria-label=\" amd module  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;amd-module /></code></h2>\n<p>기본적으로 AMD 모듈은 익명으로 생성됩니다.\n이는 모듈로 만들어내는 과정에서 다른 도구(예. <code>r.js</code>)를 사용할 경우 문제가 생길 수 있습니다.</p>\n<p><code>amd-module</code> 지시어는 컴파일러에게 선택적으로 모듈 이름을 넘길 수 있도록 해줍니다:</p>\n<h5 id=\"amdmodulets\" style=\"position:relative;\"><a href=\"#amdmodulets\" aria-label=\"amdmodulets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>amdModule.ts</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">///</span><span style=\"color: #800000\">&lt;amd-module</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"NamedModule\"</span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p><code>define</code> 호출의 일부로 <code>NamedModule</code> 이름을 모듈에 할당하는 결과를 줄 것입니다:</p>\n<h5 id=\"amdmodulejs\" style=\"position:relative;\"><a href=\"#amdmodulejs\" aria-label=\"amdmodulejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>amdModule.js</h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"NamedModule\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  })();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\"> = </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<h2 id=\"-amd-dependency-\" style=\"position:relative;\"><a href=\"#-amd-dependency-\" aria-label=\" amd dependency  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>/// &#x3C;amd-dependency /></code></h2>\n<blockquote>\n<p><strong>Note</strong>: 이 지시어는 deprecated 되었습니다. 대신 <code>import \"moduleName\";</code> 문을 사용하세요.</p>\n</blockquote>\n<p><code>/// &#x3C;amd-dependency path=\"x\" /></code>는 컴파일러에게 결과 모듈의 require 호출에 추가해야 하는 TS가 아닌 모듈의 의존성에 대해 알려줍니다.</p>\n<p>The <code>amd-dependency</code> 지시어는 선택적으로  <code>name</code> 프로퍼티를 갖습니다; 이로 인해 amd-dependency에 선택적으로 이름을 전달할 수 있습니다:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;amd-dependency</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"legacy/moduleA\"</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"moduleA\"</span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">moduleA</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">MyType</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">moduleA</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">callStuff</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>생성된 JS 코드:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"legacy/moduleA\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">moduleA</span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">moduleA</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">callStuff</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>","headings":[{"value":"/// <reference path=\"...\" />","depth":2},{"value":"입력 파일 전처리 (Preprocessing input files)","depth":3},{"value":"오류 (Errors)","depth":3},{"value":"--noResolve 사용하기 (Using --noResolve)","depth":3},{"value":"/// <reference types=\"...\" />","depth":2},{"value":"/// <reference lib=\"...\" />","depth":2},{"value":"/// <reference no-default-lib=\"true\"/>","depth":2},{"value":"/// <amd-module />","depth":2},{"value":"amdModule.ts","depth":5},{"value":"amdModule.js","depth":5},{"value":"/// <amd-dependency />","depth":2}],"frontmatter":{"permalink":"/ko/docs/handbook/triple-slash-directives.html","title":"Triple-Slash Directives","disable_toc":null,"handbook":null,"oneline":"How to use triple slash directives in TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-triple-slash-directives","slug":"/ko/docs/handbook/triple-slash-directives.html","repoPath":"/packages/documentation/copy/ko/reference/Triple-Slash Directives.md","lang":"ko","modifiedTime":"2024-10-21T12:35:09.561Z"}},"staticQueryHashes":[]}