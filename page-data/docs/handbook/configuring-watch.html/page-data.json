{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/configuring-watch.html","result":{"data":{"markdownRemark":{"id":"0f74ecc7-2ff0-5caa-9099-a82ce23514fc","excerpt":"As of TypeScript 3.8 and onward, the Typescript compiler exposes configuration which controls how it watches files and directories. Prior to this version…","html":"<p>As of TypeScript 3.8 and onward, the Typescript compiler exposes configuration which controls how it watches files and directories. Prior to this version, configuration required the use of environment variables which are still available.</p>\n<h2 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p>The <code>--watch</code> implementation of the compiler relies on Node’s <code>fs.watch</code> and <code>fs.watchFile</code>. Each of these methods has pros and cons.</p>\n<p><code>fs.watch</code> relies on file system events to broadcast changes in the watched files and directories. The implementation of this command is OS dependent and unreliable - on many operating systems, it does not work as expected. Additionally, some operating systems limit the number of watches which can exist simultaneously (e.g. some flavors of <a href=\"https://man7.org/linux/man-pages/man7/inotify.7.html\">Linux</a>). Heavy use of <code>fs.watch</code> in large codebases has the potential to exceed these limits and result in undesirable behavior. However, because this implementation relies on an events-based model, CPU use is comparatively light. The compiler typically uses <code>fs.watch</code> to watch directories (e.g. source directories included by compiler configuration files and directories in which module resolution failed, among others). TypeScript uses these to augment potential failures in individual file watchers. However, there is a key limitation of this strategy: recursive watching of directories is supported on Windows and macOS, but not on Linux. This suggested a need for additional strategies for file and directory watching.</p>\n<p><code>fs.watchFile</code> uses polling and thus costs CPU cycles. However, <code>fs.watchFile</code> is by far the most reliable mechanism available to subscribe to the events from files and directories of interest. Under this strategy, the TypeScript compiler typically uses <code>fs.watchFile</code> to watch source files, config files, and files which appear missing based on reference statements. This means that the degree to which CPU usage will be higher when using <code>fs.watchFile</code> depends directly on number of files watched in the codebase.</p>\n<h2 id=\"configuring-file-watching-using-a-tsconfigjson\" style=\"position:relative;\"><a href=\"#configuring-file-watching-using-a-tsconfigjson\" aria-label=\"configuring file watching using a tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring file watching using a <code>tsconfig.json</code></h2>\n<p>The suggested method of configuring watch behavior is through the new <code>watchOptions</code> section of <code>tsconfig.json</code>. We provide an example configuration below. See the following section for detailed descriptions of the settings available.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Some typical compiler options</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2020\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#moduleResolution'><data-lsp lsp=\"Specify how TypeScript looks up a file from a given module specifier.\">moduleResolution</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"node\"</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// NEW: Options for file/directory watching</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Use native file system events for files and directories</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#watchFile'><data-lsp lsp=\"Specify how the TypeScript watch mode works.\">watchFile</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"useFsEvents\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#watchDirectory'><data-lsp lsp=\"Specify how directories are watched on systems that lack recursive file-watching functionality.\">watchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"useFsEvents\"</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Poll files for updates more frequently</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// when they're updated a lot.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#fallbackPolling'><data-lsp lsp=\"Specify what approach the watcher should use if the system runs out of native file watchers.\">fallbackPolling</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dynamicPriority\"</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Don't coalesce watch notification</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory'><data-lsp lsp=\"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\">synchronousWatchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Finally, two additional settings for reducing the amount of possible</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// files to track  work from these directories</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeDirectories'><data-lsp lsp=\"Remove a list of directories from the watch process.\">excludeDirectories</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"**/node_modules\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"_build\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeFiles'><data-lsp lsp=\"Remove a list of files from the watch mode's processing.\">excludeFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"build/fileWhichChangesOften.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For further details, see <a href=\"/docs/handbook/release-notes/typescript-3-8.html#better-directory-watching-on-linux-and-watchoptions\">the release notes for Typescript 3.8</a>.</p>\n<h2 id=\"configuring-file-watching-using-environment-variable-tsc_watchfile\" style=\"position:relative;\"><a href=\"#configuring-file-watching-using-environment-variable-tsc_watchfile\" aria-label=\"configuring file watching using environment variable tsc_watchfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring file watching using environment variable <code>TSC_WATCHFILE</code></h2>\n<!-- prettier-ignore -->\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PriorityPollingInterval</code></td>\n<td>Use <code>fs.watchFile</code>, but use different polling intervals for source files, config files and missing files</td>\n</tr>\n<tr>\n<td><code>DynamicPriorityPolling</code></td>\n<td>Use a dynamic queue where frequently modified files are polled at shorter intervals, and unchanged files are polled less frequently</td>\n</tr>\n<tr>\n<td><code>UseFsEvents</code></td>\n<td>Use <code>fs.watch</code>. On operating systems that limit the number of active watches, fall back to <code>fs.watchFile</code> when a watcher fails to be created.</td>\n</tr>\n<tr>\n<td><code>UseFsEventsWithFallbackDynamicPolling</code></td>\n<td>Use <code>fs.watch</code>. On operating systems that limit the number of active watches, fall back to dynamic polling queues (as explained in <code>DynamicPriorityPolling</code>)</td>\n</tr>\n<tr>\n<td><code>UseFsEventsOnParentDirectory</code></td>\n<td>Use <code>fs.watch</code> on the <em>parent</em> directories of included files (yielding a compromise that results in lower CPU usage than pure <code>fs.watchFile</code> but potentially lower accuracy).</td>\n</tr>\n<tr>\n<td>default (no value specified)</td>\n<td>If environment variable <code>TSC_NONPOLLING_WATCHER</code> is set to true, use <code>UseFsEventsOnParentDirectory</code>. Otherwise, watch files using <code>fs.watchFile</code> with <code>250ms</code> as the timeout for any file.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"configuring-directory-watching-using-environment-variable-tsc_watchdirectory\" style=\"position:relative;\"><a href=\"#configuring-directory-watching-using-environment-variable-tsc_watchdirectory\" aria-label=\"configuring directory watching using environment variable tsc_watchdirectory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring directory watching using environment variable <code>TSC_WATCHDIRECTORY</code></h2>\n<p>For directory watches on platforms which don’t natively allow recursive directory watching (i.e. non macOS and Windows operating systems) is supported through recursively creating directory watchers for each child directory using different options selected by <code>TSC_WATCHDIRECTORY</code>.</p>\n<p><strong>NOTE:</strong> On platforms which support native recursive directory watching, the value of <code>TSC_WATCHDIRECTORY</code> is ignored.</p>\n<!-- prettier-ignore -->\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RecursiveDirectoryUsingFsWatchFile</code></td>\n<td>Use <code>fs.watchFile</code> to watch included directories and child directories.</td>\n</tr>\n<tr>\n<td><code>RecursiveDirectoryUsingDynamicPriorityPolling</code></td>\n<td>Use a dynamic polling queue to poll changes to included directories and child directories.</td>\n</tr>\n<tr>\n<td>default (no value specified)</td>\n<td>Use <code>fs.watch</code> to watch included directories and child directories.</td>\n</tr>\n</tbody>\n</table>","headings":[{"value":"Background","depth":2},{"value":"Configuring file watching using a tsconfig.json","depth":2},{"value":"Configuring file watching using environment variable TSC_WATCHFILE","depth":2},{"value":"Configuring directory watching using environment variable TSC_WATCHDIRECTORY","depth":2}],"frontmatter":{"permalink":"/docs/handbook/configuring-watch.html","title":"Configuring Watch","disable_toc":null,"handbook":null,"oneline":"How to configure the watch mode of TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"8-configuring-watch","slug":"/docs/handbook/configuring-watch.html","repoPath":"/packages/documentation/copy/en/project-config/Configuring Watch.md","lang":"en","modifiedTime":"2024-10-21T12:33:11.305Z"}},"staticQueryHashes":[]}