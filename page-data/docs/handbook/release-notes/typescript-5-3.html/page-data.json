{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-3.html","result":{"data":{"markdownRemark":{"id":"6cd254c5-bc33-532f-b667-e2cd07496a07","excerpt":"Import Attributes TypeScript 5.3 supports the latest updates to the import attributes proposal. One use-case of import attributes is to provide information…","html":"<h2 id=\"import-attributes\" style=\"position:relative;\"><a href=\"#import-attributes\" aria-label=\"import attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import Attributes</h2>\n<p>TypeScript 5.3 supports the latest updates to the <a href=\"https://github.com/tc39/proposal-import-attributes\">import attributes</a> proposal.</p>\n<p>One use-case of import attributes is to provide information about the expected format of a module to the runtime.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// We only want this to be interpreted as JSON,</span></div><div class='line'><span style=\"color: #008000\">// not a runnable/malicious JavaScript file with a `.json` extension.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./something.json\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">with</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: \"</span><span style=\"color: #001080\">json</span><span style=\"color: #000000\">\" };</span></div></code></div></pre>\n<p>The contents of these attributes are not checked by TypeScript since they’re host-specific, and are simply left alone so that browsers and runtimes can handle them (and possibly error).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// TypeScript is fine with this.</span></div><div class='line'><span style=\"color: #008000\">// But your browser? Probably not.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo.js\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">with</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\">: \"</span><span style=\"color: #001080\">fluffy</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bunny</span><span style=\"color: #000000\">\" };</span></div></code></div></pre>\n<p>Dynamic <code>import()</code> calls can also use import attributes through a second argument.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">obj</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./something.json\"</span><span style=\"color: #000000\">, {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">with:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"json\"</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>The expected type of that second argument is defined by a type called <code>ImportCallOptions</code>, which by default just expects a property called <code>with</code>.</p>\n<p>Note that import attributes are an evolution of an earlier proposal called <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#import-assertions\">“import assertions”, which were implemented in TypeScript 4.5</a>.\nThe most obvious difference is the use of the <code>with</code> keyword over the <code>assert</code> keyword.\nBut the less-visible difference is that runtimes are now free to use attributes to guide the resolution and interpretation of import paths, whereas import assertions could only assert some characteristics after loading a module.</p>\n<p>Over time, TypeScript will be deprecating the old syntax for import assertions in favor of the proposed syntax for import attributes.\nExisting code using <code>assert</code> should migrate towards the <code>with</code> keyword.\nNew code that needs an import attribute should use <code>with</code> exclusively.</p>\n<p>We’d like to thank <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/54242\">implementing this proposal</a>!\nAnd we’d also like to call out <a href=\"https://github.com/Kingwl\">Wenlu Wang</a> for their implementation of <a href=\"https://github.com/microsoft/TypeScript/pull/40698\">import assertions</a>!</p>\n<h2 id=\"stable-support-resolution-mode-in-import-types\" style=\"position:relative;\"><a href=\"#stable-support-resolution-mode-in-import-types\" aria-label=\"stable support resolution mode in import types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stable Support <code>resolution-mode</code> in Import Types</h2>\n<p>In TypeScript 4.7, TypeScript added support for a <code>resolution-mode</code> attribute in <code>/// &#x3C;reference types=\"...\" /></code> to control whether a specifier should be resolved via <code>import</code> or <code>require</code> semantics.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// &lt;reference types=\"pkg\" resolution-mode=\"require\" /&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// or</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/// &lt;reference types=\"pkg\" resolution-mode=\"import\" /&gt;</span></div></code></div></pre>\n<p>A corresponding field was added to import assertions on type-only imports as well;\nhowever, it was only supported in nightly versions of TypeScript.\nThe rationale was that in spirit, import <em>assertions</em> were not intended to guide module resolution.\nSo this feature was shipped experimentally in a nightly-only mode to get more feedback.</p>\n<p>But given that <em><a href=\"#import-attributes\">import attributes</a></em> can guide resolution, and that we’ve seen reasonable use-cases, TypeScript 5.3 now supports the <code>resolution-mode</code> attribute for <code>import type</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Resolve `pkg` as if we were importing with a `require()`</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">TypeFromRequire</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">with</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    \"</span><span style=\"color: #001080\">resolution</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">mode</span><span style=\"color: #000000\">\": \"</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">\"</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Resolve `pkg` as if we were importing with an `import`</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">TypeFromImport</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">with</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    \"</span><span style=\"color: #001080\">resolution</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">mode</span><span style=\"color: #000000\">\": \"</span><span style=\"color: #001080\">import</span><span style=\"color: #000000\">\"</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MergedType</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeFromRequire</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TypeFromImport</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p>These import attributes can also be used on <code>import()</code> types.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeFromRequire</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">with:</span><span style=\"color: #000000\"> { </span><span style=\"color: #A31515\">\"resolution-mode\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\"> } }).</span><span style=\"color: #001080\">TypeFromRequire</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeFromImport</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">with:</span><span style=\"color: #000000\"> { </span><span style=\"color: #A31515\">\"resolution-mode\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"import\"</span><span style=\"color: #000000\"> } }).</span><span style=\"color: #001080\">TypeFromImport</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MergedType</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeFromRequire</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">TypeFromImport</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/55725\">check out the change here</a></p>\n<h2 id=\"resolution-mode-supported-in-all-module-modes\" style=\"position:relative;\"><a href=\"#resolution-mode-supported-in-all-module-modes\" aria-label=\"resolution mode supported in all module modes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>resolution-mode</code> Supported in All Module Modes</h2>\n<p>Previously, using <code>resolution-mode</code> was only allowed under the <code>moduleResolution</code> options <code>node16</code> and <code>nodenext</code>.\nTo make it easier to look up modules specifically for type purposes, <code>resolution-mode</code> now works appropriately in all other <code>moduleResolution</code> options like <code>bundler</code>, <code>node10</code>, and simply doesn’t error under <code>classic</code>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/55725\">see the implementing pull request</a>.</p>\n<h2 id=\"switch-true-narrowing\" style=\"position:relative;\"><a href=\"#switch-true-narrowing\" aria-label=\"switch true narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>switch (true)</code> Narrowing</h2>\n<p>TypeScript 5.3 now can perform narrowing based on conditions in each <code>case</code> clause within a <code>switch (true)</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// 'x' is a 'string' here</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// falls through...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">isArray</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">):</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// 'x' is a 'string | any[]' here.</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// falls through...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">          </span><span style=\"color: #008000\">// 'x' is 'unknown' here.</span></div><div class='line'><span style=\"color: #000000\">          </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/55991\">This feature</a> was spearheaded <a href=\"https://github.com/microsoft/TypeScript/pull/53681\">initial work</a> by <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a>\nWe’d like to extend a “thank you!” for this contribution.</p>\n<h2 id=\"narrowing-on-comparisons-to-booleans\" style=\"position:relative;\"><a href=\"#narrowing-on-comparisons-to-booleans\" aria-label=\"narrowing on comparisons to booleans permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Narrowing On Comparisons to Booleans</h2>\n<p>Occasionally you may find yourself performing a direct comparison with <code>true</code> or <code>false</code> in a condition.\nUsually these are unnecessary comparisons, but you might prefer it as a point of style, or to avoid certain issues around JavaScript truthiness.\nRegardless, previously TypeScript just didn’t recognize such forms when performing narrowing.</p>\n<p>TypeScript 5.3 now keeps up and understands these expressions when narrowing variables.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyType</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">isA</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">MyType</span><span style=\"color: #000000\">): </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">someFn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">MyType</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">isA</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// works!</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>We’d like to thank <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a> for <a href=\"https://github.com/microsoft/TypeScript/pull/53681\">the pull request</a> that implemented this.</p>\n<h2 id=\"instanceof-narrowing-through-symbolhasinstance\" style=\"position:relative;\"><a href=\"#instanceof-narrowing-through-symbolhasinstance\" aria-label=\"instanceof narrowing through symbolhasinstance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>instanceof</code> Narrowing Through <code>Symbol.hasInstance</code></h2>\n<p>A slightly esoteric feature of JavaScript is that it is possible to override the behavior of the <code>instanceof</code> operator.\nTo do so, the value on the right side of the <code>instanceof</code> operator needs to have a specific method named by <code>Symbol.hasInstance</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Weirdo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">hasInstance</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">testedValue</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// wait, what?</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">testedValue</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Thing</span><span style=\"color: #000000\">() </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Weirdo</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Weirdo</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>To better model this behavior in <code>instanceof</code>, TypeScript now checks if such a <code>[Symbol.hasInstance]</code> method exists and is declared as a type predicate function.\nIf it does, the tested value on the left side of the <code>instanceof</code> operator will be narrowed appropriately by that type predicate.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PointLike</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PointLike</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">distanceFromOrigin</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">sqrt</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> + </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> ** </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">hasInstance</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">): </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">is</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PointLike</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> !!</span><span style=\"color: #001080\">val</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"x\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\"> && </span><span style=\"color: #A31515\">\"y\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\"> &&</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">val</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Point</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Can access both of these - correct!</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Can't access this - we have a 'PointLike',</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// but we don't *actually* have a 'Point'.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">distanceFromOrigin</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>As you can see in this example, <code>Point</code> defines its own <code>[Symbol.hasInstance]</code> method.\nIt actually acts as a custom type guard over a separate type called <code>PointLike</code>.\nIn the function <code>f</code>, we were able to narrow <code>value</code> down to a <code>PointLike</code> with <code>instanceof</code>, but <em>not</em> a <code>Point</code>.\nThat means that we can access the properties <code>x</code> and <code>y</code>, but not the method <code>distanceFromOrigin</code>.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/55052\">read up on this change here</a>.</p>\n<h2 id=\"checks-for-super-property-accesses-on-instance-fields\" style=\"position:relative;\"><a href=\"#checks-for-super-property-accesses-on-instance-fields\" aria-label=\"checks for super property accesses on instance fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checks for <code>super</code> Property Accesses on Instance Fields</h2>\n<p>In JavaScript, it’s possible to access a declaration in a base class through the <code>super</code> keyword.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Base method called!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Derived method called!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Derived</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// Prints:</span></div><div class='line'><span style=\"color: #008000\">//   Derived method called!</span></div><div class='line'><span style=\"color: #008000\">//   Base method called!</span></div></code></div></pre>\n<p>This is different from writing something like <code>this.someMethod()</code>, since that could invoke an overridden method.\nThis is a subtle distinction, made more subtle by the fact that often the two can be interchangeable if a declaration is never overridden at all.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"someMethod called!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someOtherMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// These act identically.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Derived</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">someOtherMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// Prints:</span></div><div class='line'><span style=\"color: #008000\">//   someMethod called!</span></div><div class='line'><span style=\"color: #008000\">//   someMethod called!</span></div></code></div></pre>\n<p>The problem is using them interchangeably is that <code>super</code> only works on members declared on the prototype — <em>not</em> instance properties.\nThat means that if you wrote <code>super.someMethod()</code>, but <code>someMethod</code> was defined as a field, you’d get a runtime error!</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"someMethod called!\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Derived</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Base</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">someOtherMethod</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">super</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">someMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Derived</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">someOtherMethod</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// 💥</span></div><div class='line'><span style=\"color: #008000\">// Doesn't work because 'super.someMethod' is 'undefined'.</span></div></code></div></pre>\n<p>TypeScript 5.3 now more-closely inspects <code>super</code> property accesses/method calls to see if they correspond to class fields.\nIf they do, we’ll now get a type-checking error.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/54056\">This check</a> was contributed thanks to <a href=\"https://github.com/Jack-Works\">Jack Works</a>!</p>\n<h2 id=\"interactive-inlay-hints-for-types\" style=\"position:relative;\"><a href=\"#interactive-inlay-hints-for-types\" aria-label=\"interactive inlay hints for types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactive Inlay Hints for Types</h2>\n<p>TypeScript’s inlay hints now support jumping to the definition of types!\nThis makes it easier to casually navigate your code.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/10/clickable-inlay-hints-for-types-5-3-beta.gif\" alt=\"Ctrl-clicking an inlay hint to jump to the definition of a parameter type.\"></p>\n<p>See more at <a href=\"https://github.com/microsoft/TypeScript/pull/55141\">the implementation here</a>.</p>\n<h2 id=\"settings-to-prefer-type-auto-imports\" style=\"position:relative;\"><a href=\"#settings-to-prefer-type-auto-imports\" aria-label=\"settings to prefer type auto imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Settings to Prefer <code>type</code> Auto-Imports</h2>\n<p>Previously when TypeScript generated auto-imports for something in a type position, it would add a <code>type</code> modifier based on your settings.\nFor example, when getting an auto-import on <code>Person</code> in the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Person</span></div></code></div></pre>\n<p>TypeScript’s editing experience would usually add an import for <code>Person</code> as:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Person</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./types\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Person</span></div></code></div></pre>\n<p>and under certain settings like <code>verbatimModuleSyntax</code>, it would add the <code>type</code> modifier:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Person</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./types\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Person</span></div></code></div></pre>\n<p>However, maybe your codebase isn’t able to use some of these options; or you just have a preference for explicit <code>type</code> imports when possible.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/56090\">With a recent change</a>, TypeScript now enables this to be an editor-specific option.\nIn Visual Studio Code, you can enable it in the UI under “TypeScript › Preferences: Prefer Type Only Auto Imports”, or as the JSON configuration option <code>typescript.preferences.preferTypeOnlyAutoImports</code></p>\n<!--\n## Triggerable Refactor to Convert to Template String\n\nhttps://github.com/microsoft/TypeScript/pull/54647\n\n-->\n<h2 id=\"optimizations-by-skipping-jsdoc-parsing\" style=\"position:relative;\"><a href=\"#optimizations-by-skipping-jsdoc-parsing\" aria-label=\"optimizations by skipping jsdoc parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizations by Skipping JSDoc Parsing</h2>\n<p>When running TypeScript via <code>tsc</code>, the compiler will now avoid parsing JSDoc.\nThis drops parsing time on its own, but also reduces memory usage to store comments along with time spent in garbage collection.\nAll-in-all, you should see slightly faster compiles and quicker feedback in <code>--watch</code> mode.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/52921\">The specific changes can be viewed here</a>.</p>\n<p>Because not every tool using TypeScript will need to store JSDoc (e.g. typescript-eslint and Prettier), this parsing strategy has been surfaced as part of the API itself.\nThis can enable these tools to gain the same memory and speed improvements we’ve brought to the TypeScript compiler.\nThe new options for comment parsing strategy are described in <code>JSDocParsingMode</code>.\nMore information is available <a href=\"https://github.com/microsoft/TypeScript/pull/55739\">on this pull request</a>.</p>\n<h2 id=\"optimizations-by-comparing-non-normalized-intersections\" style=\"position:relative;\"><a href=\"#optimizations-by-comparing-non-normalized-intersections\" aria-label=\"optimizations by comparing non normalized intersections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizations by Comparing Non-Normalized Intersections</h2>\n<p>In TypeScript, unions and intersections always follow a specific form, where intersections can’t contain union types.\nThat means that when we create an intersection over a union like <code>A &#x26; (B | C)</code>, that intersection will be normalized into <code>(A &#x26; B) | (A &#x26; C)</code>.\nStill, in some cases the type system will maintain the original form for display purposes.</p>\n<p>It turns out that the original form can be used for some clever fast-path comparisons between types.</p>\n<p>For example, let’s say we have <code>SomeType &#x26; (Type1 | Type2 | ... | Type99999NINE)</code> and we want to see if that’s assignable to <code>SomeType</code>.\nRecall that we don’t really have an intersection as our source type — we have a union that looks like <code>(SomeType &#x26; Type1) | (SomeType &#x26; Type2) | ... |(SomeType &#x26; Type99999NINE)</code>.\nWhen checking if a union is assignable to some target type, we have to check if <em>every</em> member of the union is assignable to the target type, and that can be very slow.</p>\n<p>In TypeScript 5.3, we peek at the original intersection form that we were able to tuck away.\nWhen we compare the types, we do a quick check to see if the target exists in any constituent of the source intersection.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/55851\">see this pull request</a>.</p>\n<h2 id=\"consolidation-between-tsserverlibraryjs-and-typescriptjs\" style=\"position:relative;\"><a href=\"#consolidation-between-tsserverlibraryjs-and-typescriptjs\" aria-label=\"consolidation between tsserverlibraryjs and typescriptjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consolidation Between <code>tsserverlibrary.js</code> and <code>typescript.js</code></h2>\n<p>TypeScript itself ships two library files: <code>tsserverlibrary.js</code> and <code>typescript.js</code>.\nThere are certain APIs available only in <code>tsserverlibrary.js</code> (like the <code>ProjectService</code> API), which may be useful to some importers.\nStill, the two are distinct bundles with have a lot of overlap, duplicating code in the package.\nWhat’s more, it can be challenging to consistently use one over the other due to auto-imports or muscle memory.\nAccidentally loading both modules is far too easy, and code may not work properly on a different instance of the API.\nEven if it does work, loading a second bundle increases resource usage.</p>\n<p>Given this, we’ve decided to consolidate the two.\n<code>typescript.js</code> now contains what <code>tsserverlibrary.js</code> used to contain, and <code>tsserverlibrary.js</code> now simply re-exports <code>typescript.js</code>.\nComparing the before/after of this consolidation, we saw the following reduction in package size:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Before</th>\n<th>After</th>\n<th>Diff</th>\n<th>Diff (percent)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Packed</td>\n<td>6.90 MiB</td>\n<td>5.48 MiB</td>\n<td>-1.42 MiB</td>\n<td>-20.61%</td>\n</tr>\n<tr>\n<td>Unpacked</td>\n<td>38.74 MiB</td>\n<td>30.41 MiB</td>\n<td>-8.33 MiB</td>\n<td>-21.50%</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Before</th>\n<th>After</th>\n<th>Diff</th>\n<th>Diff (percent)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lib/tsserverlibrary.d.ts</code></td>\n<td>570.95 KiB</td>\n<td>865.00 B</td>\n<td>-570.10 KiB</td>\n<td>-99.85%</td>\n</tr>\n<tr>\n<td><code>lib/tsserverlibrary.js</code></td>\n<td>8.57 MiB</td>\n<td>1012.00 B</td>\n<td>-8.57 MiB</td>\n<td>-99.99%</td>\n</tr>\n<tr>\n<td><code>lib/typescript.d.ts</code></td>\n<td>396.27 KiB</td>\n<td>570.95 KiB</td>\n<td>+174.68 KiB</td>\n<td>+44.08%</td>\n</tr>\n<tr>\n<td><code>lib/typescript.js</code></td>\n<td>7.95 MiB</td>\n<td>8.57 MiB</td>\n<td>+637.53 KiB</td>\n<td>+7.84%</td>\n</tr>\n</tbody>\n</table>\n<p>In other words, this is over a 20.5% reduction in package size.</p>\n<p>For more information, you can <a href=\"https://github.com/microsoft/TypeScript/pull/55273\">see the work involved here</a>.</p>\n<h2 id=\"breaking-changes-and-correctness-improvements\" style=\"position:relative;\"><a href=\"#breaking-changes-and-correctness-improvements\" aria-label=\"breaking changes and correctness improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes and Correctness Improvements</h2>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Types generated for the DOM may have an impact on your codebase.\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/55798\">see the DOM updates for TypeScript 5.3</a>.</p>\n<h3 id=\"checks-for-super-accesses-on-instance-properties\" style=\"position:relative;\"><a href=\"#checks-for-super-accesses-on-instance-properties\" aria-label=\"checks for super accesses on instance properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checks for <code>super</code> Accesses on Instance Properties</h3>\n<p>TypeScript 5.3 now detects when the declaration referenced by a <code>super.</code> property access is a class field and issues an error.\nThis prevents errors that might occur at runtime.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/54056\">See more on this change here</a>.</p>","headings":[{"value":"Import Attributes","depth":2},{"value":"Stable Support resolution-mode in Import Types","depth":2},{"value":"resolution-mode Supported in All Module Modes","depth":2},{"value":"switch (true) Narrowing","depth":2},{"value":"Narrowing On Comparisons to Booleans","depth":2},{"value":"instanceof Narrowing Through Symbol.hasInstance","depth":2},{"value":"Checks for super Property Accesses on Instance Fields","depth":2},{"value":"Interactive Inlay Hints for Types","depth":2},{"value":"Settings to Prefer type Auto-Imports","depth":2},{"value":"Optimizations by Skipping JSDoc Parsing","depth":2},{"value":"Optimizations by Comparing Non-Normalized Intersections","depth":2},{"value":"Consolidation Between tsserverlibrary.js and typescript.js","depth":2},{"value":"Breaking Changes and Correctness Improvements","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"Checks for super Accesses on Instance Properties","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-3.html","title":"TypeScript 5.3","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.3 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.3","slug":"/docs/handbook/release-notes/typescript-5-3.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.3.md","lang":"en","modifiedTime":"2024-10-21T12:33:11.313Z"}},"staticQueryHashes":[]}