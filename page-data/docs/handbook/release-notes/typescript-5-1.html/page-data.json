{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-1.html","result":{"data":{"markdownRemark":{"id":"b96379c7-8928-5d4f-988e-de5bfdafb5c2","excerpt":"Easier Implicit Returns for undefined-Returning Functions In JavaScript, if a function finishes running without hitting a return, it returns the value undefined…","html":"<h2 id=\"easier-implicit-returns-for-undefined-returning-functions\" style=\"position:relative;\"><a href=\"#easier-implicit-returns-for-undefined-returning-functions\" aria-label=\"easier implicit returns for undefined returning functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easier Implicit Returns for <code>undefined</code>-Returning Functions</h2>\n<p>In JavaScript, if a function finishes running without hitting a <code>return</code>, it returns the value <code>undefined</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no return</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// x = undefined</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>However, in previous versions of TypeScript, the <em>only</em> functions that could have absolutely no return statements were <code>void</code>- and <code>any</code>-returning functions.\nThat meant that even if you explicitly said “this function returns <code>undefined</code>” you were forced to have at least one return statement.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ✅ fine - we inferred that 'f1' returns 'void'</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f1</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ✅ fine - 'void' doesn't need a return statement</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f2</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ✅ fine - 'any' doesn't need a return statement</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f3</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ❌ error!</span></div><div class='line'><span style=\"color: #008000\">// A function whose declared type is neither 'void' nor 'any' must return a value.</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f4</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This could be a pain if some API expected a function returning <code>undefined</code> - you would need to have either at least one explicit return of <code>undefined</code> or a <code>return</code> statement <em>and</em> an explicit annotation.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// ❌ error!</span></div><div class='line'><span style=\"color: #008000\">// Argument of type '() =&gt; void' is not assignable to parameter of type '() =&gt; undefined'.</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #008000\">// ❌ error!</span></div><div class='line'><span style=\"color: #008000\">// A function whose declared type is neither 'void' nor 'any' must return a value.</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">((): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #008000\">// ❌ error!</span></div><div class='line'><span style=\"color: #008000\">// Argument of type '() =&gt; void' is not assignable to parameter of type '() =&gt; undefined'.</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #008000\">// ✅ works</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #008000\">// ✅ works</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">((): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>This behavior was frustrating and confusing, especially when calling functions outside of one’s control.\nUnderstanding the interplay between inferring <code>void</code> over <code>undefined</code>, whether an <code>undefined</code>-returning function needs a <code>return</code> statement, etc. seems like a distraction.</p>\n<p>First, TypeScript 5.1 now allows <code>undefined</code>-returning functions to have no return statement.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ✅ Works in TypeScript 5.1!</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f4</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ✅ Works in TypeScript 5.1!</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">((): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>Second, if a function has no return expressions and is being passed to something expecting a function that returns <code>undefined</code>, TypeScript infers <code>undefined</code> for that function’s return type.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ✅ Works in TypeScript 5.1!</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//                 ^ return type is undefined</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// no returns</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #008000\">// ✅ Works in TypeScript 5.1!</span></div><div class='line'><span style=\"color: #795E26\">takesFunction</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">//                 ^ return type is undefined</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<p>To address another similar pain-point, under TypeScript’s <code>--noImplicitReturns</code> option, functions returning <em>only</em> <code>undefined</code> now have a similar exception to <code>void</code>, in that not every single code path must end in an explicit <code>return</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ✅ Works in TypeScript 5.1 under '--noImplicitReturns'!</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\">Math</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">random</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do some stuff...</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, you can read up on <a href=\"https://github.com/microsoft/TypeScript/issues/36288\">the original issue</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/53607\">the implementing pull request</a>.</p>\n<h2 id=\"unrelated-types-for-getters-and-setters\" style=\"position:relative;\"><a href=\"#unrelated-types-for-getters-and-setters\" aria-label=\"unrelated types for getters and setters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unrelated Types for Getters and Setters</h2>\n<p>TypeScript 4.3 made it possible to say that a <code>get</code> and <code>set</code> accessor pair might specify two different types.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Serializer</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">value</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">box</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Serializer</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Allows writing a 'boolean'</span></div><div class='line'><span style=\"color: #001080\">box</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Comes out as a 'string'</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">box</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toUpperCase</span><span style=\"color: #000000\">());</span></div></code></div></pre>\n<p>Initially we required that the <code>get</code> type had to be a subtype of the <code>set</code> type.\nThis meant that writing</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">box</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">box</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>would always be valid.</p>\n<p>However, there are plenty of existing and proposed APIs that have completely unrelated types between their getters and setters.\nFor example, consider one of the most common examples - the <code>style</code> property in the DOM and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule\"><code>CSSStyleRule</code></a> API.\nEvery style rule has <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/style\">a <code>style</code> property</a> that is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\"><code>CSSStyleDeclaration</code></a>;\nhowever, if you try to write to that property, it will only work correctly with a string!</p>\n<p>TypeScript 5.1 now allows completely unrelated types for <code>get</code> and <code>set</code> accessor properties, provided that they have explicit type annotations.\nAnd while this version of TypeScript does not yet change the types for these built-in interfaces, <code>CSSStyleRule</code> can now be defined in the following way:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">CSSStyleRule</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** Always reads as a `CSSStyleDeclaration` */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">style</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">CSSStyleDeclaration</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** Can only write a `string` here. */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">style</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">newValue</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This also allows other patterns like requiring <code>set</code> accessors to accept only “valid” data, but specifying that <code>get</code> accessors may return <code>undefined</code> if some underlying state hasn’t been initialized yet.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SafeBox</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Only accepts strings!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">set</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">value</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">newValue</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Must check for 'undefined'!</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">value</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#value</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In fact, this is similar to how optional properties are checked under <code>--exactOptionalProperties</code>.</p>\n<p>You can read up more on <a href=\"https://github.com/microsoft/TypeScript/pull/53417\">the implementing pull request</a>.</p>\n<h2 id=\"decoupled-type-checking-between-jsx-elements-and-jsx-tag-types\" style=\"position:relative;\"><a href=\"#decoupled-type-checking-between-jsx-elements-and-jsx-tag-types\" aria-label=\"decoupled type checking between jsx elements and jsx tag types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoupled Type-Checking Between JSX Elements and JSX Tag Types</h2>\n<p>One pain point TypeScript had with JSX was its requirements on the type of every JSX element’s tag.</p>\n<p>For context, a JSX element is either of the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// A self-closing JSX tag</span></div><div class='line'><span style=\"color: #800000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'><span style=\"color: #008000\">// A regular element with an opening/closing tag</span></div><div class='line'><span style=\"color: #800000\">&lt;</span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #800000\">&gt;&lt;/</span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #800000\">&gt;</span></div></code></div></pre>\n<p>When type-checking <code>&#x3C;Foo /></code> or <code>&#x3C;Bar>&#x3C;/Bar></code>, TypeScript always looks up a namespace called <code>JSX</code> and fetches a type out of it called <code>Element</code> - or more directly, it looks up <code>JSX.Element</code>.</p>\n<p>But to check whether <code>Foo</code> or <code>Bar</code> themselves were valid to use as tag names, TypeScript would roughly just grab the types returned or constructed by <code>Foo</code> or <code>Bar</code> and check for compatibility with <code>JSX.Element</code> (or another type called <code>JSX.ElementClass</code> if the type is constructable).</p>\n<p>The limitations here meant that components could not be used if they returned or “rendered” a more broad type than just <code>JSX.Element</code>.\nFor example, a JSX library might be fine with a component returning <code>string</code>s or <code>Promise</code>s.</p>\n<p>As a more concrete example, <a href=\"https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md\">React is considering adding limited support for components that return <code>Promise</code>s</a>, but existing versions of TypeScript cannot express that without someone drastically loosening the type of <code>JSX.Element</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;div&gt;&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">element</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//             ~~~</span></div><div class='line'><span style=\"color: #008000\">// 'Foo' cannot be used as a JSX component.</span></div><div class='line'><span style=\"color: #008000\">//   Its return type 'Promise&lt;Element&gt;' is not a valid JSX element.</span></div></code></div></pre>\n<p>To provide libraries with a way to express this, TypeScript 5.1 now looks up a type called <code>JSX.ElementType</code>.\n<code>ElementType</code> specifies precisely what is valid to use as a tag in a JSX element.\nSo it might be typed today as something like</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementType</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// All the valid lowercase tags</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicAttributes</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Function components</span></div><div class='line'><span style=\"color: #000000\">        (</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Element</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Class components</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementClass</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicAttributes</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*...*/</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/*...*/</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementClass</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/*...*/</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/eps1lon\">Sebastian Silbermann</a> who contributed <a href=\"https://github.com/microsoft/TypeScript/pull/51328\">this change</a>!</p>\n<h2 id=\"namespaced-jsx-attributes\" style=\"position:relative;\"><a href=\"#namespaced-jsx-attributes\" aria-label=\"namespaced jsx attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Namespaced JSX Attributes</h2>\n<p>TypeScript now supports namespaced attribute names when using JSX.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Both of these are equivalent:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">a</span><span style=\"color: #000000\">:</span><span style=\"color: #EE0000\">b</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;</span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">a</span><span style=\"color: #000000\"> </span><span style=\"color: #CD3131\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">b</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FooProps</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"a:b\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FooProps</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #0000FF\">{</span><span style=\"color: #001080\">props</span><span style=\"color: #000000FF\">[</span><span style=\"color: #A31515\">\"a:b\"</span><span style=\"color: #000000FF\">]</span><span style=\"color: #0000FF\">}</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Namespaced tag names are looked up in a similar way on <code>JSX.IntrinsicAttributes</code> when the first segment of the name is a lowercase name.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// In some library's code or in an augmentation of that library:</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        [</span><span style=\"color: #A31515\">\"a:b\"</span><span style=\"color: #000000\">]: { </span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// In our code:</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #800000\">&lt;a</span><span style=\"color: #000000\">:</span><span style=\"color: #800000\">b</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">prop</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">/&gt;</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/53799\">This contribution</a> was provided thanks to <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a>.</p>\n<h2 id=\"typeroots-are-consulted-in-module-resolution\" style=\"position:relative;\"><a href=\"#typeroots-are-consulted-in-module-resolution\" aria-label=\"typeroots are consulted in module resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>typeRoots</code> Are Consulted In Module Resolution</h2>\n<p>When TypeScript’s specified module lookup strategy is unable to resolve a path, it will now resolve packages relative to the specified <code>typeRoots</code>.</p>\n<p>See <a href=\"https://github.com/microsoft/TypeScript/pull/51715\">this pull request</a> for more details.</p>\n<h2 id=\"move-declarations-to-existing-files\" style=\"position:relative;\"><a href=\"#move-declarations-to-existing-files\" aria-label=\"move declarations to existing files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Move Declarations to Existing Files</h2>\n<p>In addition to moving declarations to new files, TypeScript now ships a preview feature for moving declarations to existing files as well.\nYou can try this functionality out in a recent version of Visual Studio Code.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/05/moveToFile-5.1-preview.gif\" alt=\"Moving a function &#x27;getThanks&#x27; to an existing file in the workspace.\"></p>\n<p>Keep in mind that this feature is currently in preview, and we are seeking further feedback on it.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/53542\">https://github.com/microsoft/TypeScript/pull/53542</a></p>\n<h2 id=\"linked-cursors-for-jsx-tags\" style=\"position:relative;\"><a href=\"#linked-cursors-for-jsx-tags\" aria-label=\"linked cursors for jsx tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linked Cursors for JSX Tags</h2>\n<p>TypeScript now supports <em>linked editing</em> for JSX tag names.\nLinked editing (occasionally called “mirrored cursors”) allows an editor to edit multiple locations at the same time automatically.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/04/linkedEditingJsx-5.1-1.gif\" alt=\"An example of JSX tags with linked editing modifying a JSX fragment and a div element.\"></p>\n<p>This new feature should work in both TypeScript and JavaScript files, and can be enabled in Visual Studio Code Insiders.\nIn Visual Studio Code, you can either edit the <code>Editor: Linked Editing</code> option in the Settings UI:</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/04/linkedEditing-5.1-vscode-ui-1.png\" alt=\"Visual Studio Code&#x27;s Editor: Linked Editing&#x60; option\"></p>\n<p>or configure <code>editor.linkedEditing</code> in your JSON settings file:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"editor.linkedEditing\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This feature will also be supported by Visual Studio 17.7 Preview 1.</p>\n<p>You can take a look at <a href=\"https://github.com/microsoft/TypeScript/pull/53284\">our implementation of linked editing</a> here!</p>\n<h2 id=\"snippet-completions-for-param-jsdoc-tags\" style=\"position:relative;\"><a href=\"#snippet-completions-for-param-jsdoc-tags\" aria-label=\"snippet completions for param jsdoc tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snippet Completions for <code>@param</code> JSDoc Tags</h2>\n<p>TypeScript now provides snippet completions when typing out a <code>@param</code> tag in both TypeScript and JavaScript files.\nThis can help cut down on some typing and jumping around text as you document your code or add JSDoc types in JavaScript.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/04/paramTagSnippets-5-1-1.gif\" alt=\"An example of completing JSDoc param comments on an &#x27;add&#x27; function.\"></p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/53260\">check out how this new feature was implemented on GitHub</a>.</p>\n<h2 id=\"optimizations\" style=\"position:relative;\"><a href=\"#optimizations\" aria-label=\"optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimizations</h2>\n<h3 id=\"avoiding-unnecessary-type-instantiation\" style=\"position:relative;\"><a href=\"#avoiding-unnecessary-type-instantiation\" aria-label=\"avoiding unnecessary type instantiation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoiding Unnecessary Type Instantiation</h3>\n<p>TypeScript 5.1 now avoids performing type instantiation within object types that are known not to contain references to outer type parameters.\nThis has the potential to cut down on many unnecessary computations, and reduced the type-checking time of <a href=\"https://github.com/mui/material-ui/tree/b0351248fb396001a30330daac86d0e0794a0c1d/docs\">material-ui’s docs directory</a> by over 50%.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/53246\">see the changes involved for this change on GitHub</a>.</p>\n<h3 id=\"negative-case-checks-for-union-literals\" style=\"position:relative;\"><a href=\"#negative-case-checks-for-union-literals\" aria-label=\"negative case checks for union literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Negative Case Checks for Union Literals</h3>\n<p>When checking if a source type is part of a union type, TypeScript will first do a fast look-up using an internal type identifier for that source.\nIf that look-up fails, then TypeScript checks for compatibility against every type within the union.</p>\n<p>When relating a literal type to a union of purely literal types, TypeScript can now avoid that full walk against every other type in the union.\nThis assumption is safe because TypeScript always interns/caches literal types - though there are some edge cases to handle relating to “fresh” literal types.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/53192\">This optimization</a> was able to reduce the type-checking time of <a href=\"https://github.com/microsoft/TypeScript/issues/53191\">the code in this issue</a> from about 45 seconds to about 0.4 seconds.</p>\n<h3 id=\"reduced-calls-into-scanner-for-jsdoc-parsing\" style=\"position:relative;\"><a href=\"#reduced-calls-into-scanner-for-jsdoc-parsing\" aria-label=\"reduced calls into scanner for jsdoc parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reduced Calls into Scanner for JSDoc Parsing</h3>\n<p>When older versions of TypeScript parsed out a JSDoc comment, they would use the scanner/tokenizer to break the comment into fine-grained tokens and piece the contents back together.\nThis could be helpful for normalizing comment text, so that multiple spaces would just collapse into one;\nbut it was extremely “chatty” and meant the parser and scanner would jump back and forth very often, adding overhead to JSDoc parsing.</p>\n<p>TypeScript 5.1 has moved more logic around breaking down JSDoc comments into the scanner/tokenizer.\nThe scanner now returns larger chunks of content directly to the parser to do as it needs.</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/53081\">These changes</a> have brought down the parse time of several 10Mb mostly-prose-comment JavaScript files by about half.\nFor a more realistic example, our performance suite’s snapshot of <a href=\"https://github.com/statelyai/xstate\">xstate</a> dropped about 300ms of parse time, making it faster to load and analyze.</p>\n<h2 id=\"breaking-changes\" style=\"position:relative;\"><a href=\"#breaking-changes\" aria-label=\"breaking changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes</h2>\n<h3 id=\"es2020-and-nodejs-1417-as-minimum-runtime-requirements\" style=\"position:relative;\"><a href=\"#es2020-and-nodejs-1417-as-minimum-runtime-requirements\" aria-label=\"es2020 and nodejs 1417 as minimum runtime requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2020 and Node.js 14.17 as Minimum Runtime Requirements</h3>\n<p>TypeScript 5.1 now ships JavaScript functionality that was introduced in ECMAScript 2020.\nAs a result, at minimum TypeScript must be run in a reasonably modern runtime.\nFor most users, this means TypeScript now only runs on Node.js 14.17 and later.</p>\n<p>If you try running TypeScript 5.1 under an older version of Node.js such as Node 10 or 12, you may see an error like the following from running either <code>tsc.js</code> or <code>tsserver.js</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">node_modules/typescript/lib/tsserver.js:2406\n  for (let i = startIndex ?? 0; i &lt; array.length; i++) {\n                           ^\n \nSyntaxError: Unexpected token '?'\n    at wrapSafe (internal/modules/cjs/loader.js:915:16)\n    at Module._compile (internal/modules/cjs/loader.js:963:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)\n    at Module.load (internal/modules/cjs/loader.js:863:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:708:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:60:12)\n    at internal/main/run_main_module.js:17:47</span></div></code></div></pre>\n<p>Additionally, if you try installing TypeScript you’ll get something like the following error messages from npm:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">npm WARN EBADENGINE Unsupported engine {\nnpm WARN EBADENGINE   package: 'typescript@5.1.1-rc',\nnpm WARN EBADENGINE   required: { node: '&gt;=14.17' },\nnpm WARN EBADENGINE   current: { node: 'v12.22.12', npm: '8.19.2' }\nnpm WARN EBADENGINE }</span></div></code></div></pre>\n<p>from Yarn:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">error typescript@5.1.1-rc: The engine \"node\" is incompatible with this module. Expected version \"&gt;=14.17\". Got \"12.22.12\"\nerror Found incompatible module.</span></div></code></div></pre>\n<!-- or from pnpm -->\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/53291\">See more information around this change here</a>.</p>\n<h3 id=\"explicit-typeroots-disables-upward-walks-for-node_modulestypes\" style=\"position:relative;\"><a href=\"#explicit-typeroots-disables-upward-walks-for-node_modulestypes\" aria-label=\"explicit typeroots disables upward walks for node_modulestypes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicit <code>typeRoots</code> Disables Upward Walks for <code>node_modules/@types</code></h3>\n<p>Previously, when the <code>typeRoots</code> option was specified in a <code>tsconfig.json</code> but resolution to any <code>typeRoots</code> directories had failed, TypeScript would still continue walking up parent directories, trying to resolve packages within each parent’s <code>node_modules/@types</code> folder.</p>\n<p>This behavior could prompt excessive look-ups and has been disabled in TypeScript 5.1.\nAs a result, you may begin to see errors like the following based on entries in your <code>tsconfig.json</code>’s <code>types</code> option or <code>/// &#x3C;reference ></code> directives</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">error TS2688: Cannot find type definition file for 'node'.\nerror TS2688: Cannot find type definition file for 'mocha'.\nerror TS2688: Cannot find type definition file for 'jasmine'.\nerror TS2688: Cannot find type definition file for 'chai-http'.\nerror TS2688: Cannot find type definition file for 'webpack-env\"'.</span></div></code></div></pre>\n<p>The solution is typically to add specific entries for <code>node_modules/@types</code> to your <code>typeRoots</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"mocha\"</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// Keep whatever you had around before.</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"./some-custom-types/\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// You might need your local 'node_modules/@types'.</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"./node_modules/@types\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// You might also need to specify a shared 'node_modules/@types'</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// if you're using a \"monorepo\" layout.</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #A31515\">\"../../node_modules/@types\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        ]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>More information is available <a href=\"https://github.com/microsoft/TypeScript/pull/51715\">on the original change on our issue tracker</a>.</p>","headings":[{"value":"Easier Implicit Returns for undefined-Returning Functions","depth":2},{"value":"Unrelated Types for Getters and Setters","depth":2},{"value":"Decoupled Type-Checking Between JSX Elements and JSX Tag Types","depth":2},{"value":"Namespaced JSX Attributes","depth":2},{"value":"typeRoots Are Consulted In Module Resolution","depth":2},{"value":"Move Declarations to Existing Files","depth":2},{"value":"Linked Cursors for JSX Tags","depth":2},{"value":"Snippet Completions for @param JSDoc Tags","depth":2},{"value":"Optimizations","depth":2},{"value":"Avoiding Unnecessary Type Instantiation","depth":3},{"value":"Negative Case Checks for Union Literals","depth":3},{"value":"Reduced Calls into Scanner for JSDoc Parsing","depth":3},{"value":"Breaking Changes","depth":2},{"value":"ES2020 and Node.js 14.17 as Minimum Runtime Requirements","depth":3},{"value":"Explicit typeRoots Disables Upward Walks for node_modules/@types","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-1.html","title":"TypeScript 5.1","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.1 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.1","slug":"/docs/handbook/release-notes/typescript-5-1.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.1.md","lang":"en","modifiedTime":"2024-10-21T12:33:11.313Z"}},"staticQueryHashes":[]}