{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/release-notes/typescript-5-2.html","result":{"data":{"markdownRemark":{"id":"44be5a2a-933d-5262-958c-5c6999fbc9db","excerpt":"using Declarations and Explicit Resource Management TypeScript 5.2 adds support for the upcoming Explicit Resource Management feature in ECMAScript.\nLet’s…","html":"<h2 id=\"using-declarations-and-explicit-resource-management\" style=\"position:relative;\"><a href=\"#using-declarations-and-explicit-resource-management\" aria-label=\"using declarations and explicit resource management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>using</code> Declarations and Explicit Resource Management</h2>\n<p>TypeScript 5.2 adds support for the upcoming <a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a> feature in ECMAScript.\nLet’s explore some of the motivations and understand what the feature brings us.</p>\n<p>It’s common to need to do some sort of “clean-up” after creating an object.\nFor example, you might need to close network connections, delete temporary files, or just free up some memory.</p>\n<p>Let’s imagine a function that creates a temporary file, reads and writes to it for various operations, and then closes and deletes it.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">path</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// use file...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This is fine, but what happens if we need to perform an early exit?</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">path</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// use file...</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">someCondition</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do some more work...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>We’re starting to see some duplication of clean-up which can be easy to forget.\nWe’re also not guaranteed to close and delete the file if an error gets thrown.\nThis could be solved by wrapping this all in a <code>try</code>/<code>finally</code> block.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">path</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// use file...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">someCondition</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #008000\">// do some more work...</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>While this is more robust, it’s added quite a bit of “noise” to our code.\nThere are also other foot-guns we can run into if we start adding more clean-up logic to our <code>finally</code> block — for example, exceptions preventing other resources from being disposed.\nThis is what the <a href=\"https://github.com/tc39/proposal-explicit-resource-management\">explicit resource management</a> proposal aims to solve.\nThe key idea of the proposal is to support resource disposal — this clean-up work we’re trying to deal with — as a first class idea in JavaScript.</p>\n<p>This starts by adding a new built-in <code>symbol</code> called <code>Symbol.dispose</code>, and we can create objects with methods named by <code>Symbol.dispose</code>.\nFor convenience, TypeScript defines a new global type called <code>Disposable</code> which describes these.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TempFile</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Disposable</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// other methods</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\">]() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Later on we can call those methods.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TempFile</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\">]();</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Moving the clean-up logic to <code>TempFile</code> itself doesn’t buy us much;\nwe’ve basically just moved all the clean-up work from the <code>finally</code> block into a method, and that’s always been possible.\nBut having a well-known “name” for this method means that JavaScript can build other features on top of it.</p>\n<p>That brings us to the first star of the feature: <code>using</code> declarations!\n<code>using</code> is a new keyword that lets us declare new fixed bindings, kind of like <code>const</code>.\nThe key difference is that variables declared with <code>using</code> get their <code>Symbol.dispose</code> method called at the end of the scope!</p>\n<p>So we could simply have written our code like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TempFile</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// use file...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">someCondition</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do some more work...</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Check it out — no <code>try</code>/<code>finally</code> blocks!\nAt least, none that we see.\nFunctionally, that’s exactly what <code>using</code> declarations will do for us, but we don’t have to deal with that.</p>\n<p>You might be familiar with <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/using\"><code>using</code> declarations in C#</a>, <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-with-statement\"><code>with</code> statements in Python</a>, or <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\"><code>try</code>-with-resource declarations in Java</a>.\nThese are all similar to JavaScript’s new <code>using</code> keyword, and provide a similar explicit way to perform a “tear-down” of an object at the end of a scope.</p>\n<p><code>using</code> declarations do this clean-up at the very end of their containing scope or right before an “early return” like a <code>return</code> or a <code>throw</code>n error.\nThey also dispose in a first-in-last-out order like a stack.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Disposable</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Creating </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">id</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\">]() {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Disposing </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">id</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"e\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Unreachable.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Never created, never disposed.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// Creating a</span></div><div class='line'><span style=\"color: #008000\">// Creating b</span></div><div class='line'><span style=\"color: #008000\">// Creating c</span></div><div class='line'><span style=\"color: #008000\">// Creating d</span></div><div class='line'><span style=\"color: #008000\">// Disposing d</span></div><div class='line'><span style=\"color: #008000\">// Disposing c</span></div><div class='line'><span style=\"color: #008000\">// Creating e</span></div><div class='line'><span style=\"color: #008000\">// Disposing e</span></div><div class='line'><span style=\"color: #008000\">// Disposing b</span></div><div class='line'><span style=\"color: #008000\">// Disposing a</span></div></code></div></pre>\n<p><code>using</code> declarations are supposed to be resilient to exceptions;\nif an error is thrown, it’s rethrown after disposal.\nOn the other hand, the body of your function might execute as expected, but the <code>Symbol.dispose</code> might throw.\nIn that case, that exception is rethrown as well.</p>\n<p>But what happens if both the logic before and during disposal throws an error?\nFor those cases, <code>SuppressedError</code> has been introduced as a new subtype of <code>Error</code>.\nIt features a <code>suppressed</code> property that holds the last-thrown error, and an <code>error</code> property for the most-recently thrown error.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ErrorA</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"ErrorA\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ErrorB</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"ErrorB\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">throwy</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\">]() {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ErrorA</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Error from </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">id</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">throwy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ErrorB</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"oops!\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// SuppressedError</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// An error was suppressed during disposal.</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// ErrorA</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Error from a</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">suppressed</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// ErrorB</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">suppressed</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">message</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// oops!</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>You might have noticed that we’re using synchronous methods in these examples.\nHowever, lots of resource disposal involves <em>asynchronous</em> operations, and we need to wait for those to complete before we continue running any other code.</p>\n<p>That’s why there is also a new <code>Symbol.asyncDispose</code>, and it brings us to the next star of the show — <code>await using</code> declarations.\nThese are similar to <code>using</code> declarations, but the key is that they look up whose disposal must be <code>await</code>ed.\nThey use a different method named by <code>Symbol.asyncDispose</code>, though they can operate on anything with a <code>Symbol.dispose</code> as well.\nFor convenience, TypeScript also introduces a global type called <code>AsyncDisposable</code> that describes any object with an asynchronous dispose method.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Do fake work for half a second.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">500</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">AsyncDisposable</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Constructing </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">id</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">asyncDispose</span><span style=\"color: #000000\">]() {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Disposing (async) </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">id</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doWork</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">        },</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"e\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Unreachable.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Never created, never disposed.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">await</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">loggy</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">func</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// Constructing a</span></div><div class='line'><span style=\"color: #008000\">// Constructing b</span></div><div class='line'><span style=\"color: #008000\">// Constructing c</span></div><div class='line'><span style=\"color: #008000\">// Constructing d</span></div><div class='line'><span style=\"color: #008000\">// Disposing (async) d</span></div><div class='line'><span style=\"color: #008000\">// Disposing (async) c</span></div><div class='line'><span style=\"color: #008000\">// Constructing e</span></div><div class='line'><span style=\"color: #008000\">// Disposing (async) e</span></div><div class='line'><span style=\"color: #008000\">// Disposing (async) b</span></div><div class='line'><span style=\"color: #008000\">// Disposing (async) a</span></div></code></div></pre>\n<p>Defining types in terms of <code>Disposable</code> and <code>AsyncDisposable</code> can make your code much easier to work with if you expect others to do tear-down logic consistently.\nIn fact, lots of existing types exist in the wild which have a <code>dispose()</code> or <code>close()</code> method.\nFor example, the Visual Studio Code APIs even define <a href=\"https://code.visualstudio.com/api/references/vscode-api#Disposable\">their own <code>Disposable</code> interface</a>.\nAPIs in the browser and in runtimes like Node.js, Deno, and Bun might also choose to use <code>Symbol.dispose</code> and <code>Symbol.asyncDispose</code> for objects which already have clean-up methods, like file handles, connections, and more.</p>\n<p>Now maybe this all sounds great for libraries, but a little bit heavy-weight for your scenarios.\nIf you’re doing a lot of ad-hoc clean-up, creating a new type might introduce a lot of over-abstraction and questions about best-practices.\nFor example, take our <code>TempFile</code> example again.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TempFile</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Disposable</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// other methods</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\">]() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Close the file and delete it.</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#handle</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">#path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TempFile</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// use file...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">someCondition</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do some more work...</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>All we wanted was to remember to call two functions — but was this the best way to write it?\nShould we be calling <code>openSync</code> in the constructor, create an <code>open()</code> method, or pass in the handle ourselves?\nShould we expose a method for every possible operation we need to perform, or should we just make the properties public?</p>\n<p>That brings us to the final stars of the feature: <code>DisposableStack</code> and <code>AsyncDisposableStack</code>.\nThese objects are useful for doing both one-off clean-up, along with arbitrary amounts of cleanup.\nA <code>DisposableStack</code> is an object that has several methods for keeping track of <code>Disposable</code> objects, and can be given functions for doing arbitrary clean-up work.\nWe can also assign them to <code>using</code> variables because — get this — <em>they’re also <code>Disposable</code></em>!\nSo here’s how we could’ve written the original example.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doSomeWork</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">path</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\".some_temp_file\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">file</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">openSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"w+\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">using</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">cleanup</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">DisposableStack</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">cleanup</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defer</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">closeSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">file</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">unlinkSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">path</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// use file...</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #795E26\">someCondition</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do some more work...</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here, the <code>defer()</code> method just takes a callback, and that callback will be run once <code>cleanup</code> is disposed of.\nTypically, <code>defer</code> (and other <code>DisposableStack</code> methods like <code>use</code> and <code>adopt</code>)\nshould be called immediately after creating a resource.\nAs the name suggests, <code>DisposableStack</code> disposes of everything it keeps track of like a stack, in a first-in-last-out order, so <code>defer</code>ing immediately after creating a value helps avoid odd dependency issues.\n<code>AsyncDisposableStack</code> works similarly, but can keep track of <code>async</code> functions and <code>AsyncDisposable</code>s, and is itself an <code>AsyncDisposable.</code></p>\n<p>The <code>defer</code> method is similar in many ways to the <code>defer</code> keyword in <a href=\"https://go.dev/tour/flowcontrol/12\">Go</a>, <a href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/statements/#Defer-Statement\">Swift</a>, <a href=\"https://ziglang.org/documentation/master/#defer\">Zig</a>, <a href=\"https://odin-lang.org/docs/overview/#defer-statement\">Odin</a>, and others, where the conventions should be similar.</p>\n<p>Because this feature is so recent, most runtimes will not support it natively.\nTo use it, you will need runtime polyfills for the following:</p>\n<ul>\n<li><code>Symbol.dispose</code></li>\n<li><code>Symbol.asyncDispose</code></li>\n<li><code>DisposableStack</code></li>\n<li><code>AsyncDisposableStack</code></li>\n<li><code>SuppressedError</code></li>\n</ul>\n<p>However, if all you’re interested in is <code>using</code> and <code>await using</code>, you should be able to get away with only polyfilling the built-in <code>symbol</code>s.\nSomething as simple as the following should work for most cases:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">dispose</span><span style=\"color: #000000\"> ??= </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Symbol.dispose\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">asyncDispose</span><span style=\"color: #000000\"> ??= </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Symbol.asyncDispose\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>You will also need to set your compilation <code>target</code> to <code>es2022</code> or below, and configure your <code>lib</code> setting to either include <code>\"esnext\"</code> or <code>\"esnext.disposable\"</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"lib\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"esnext.disposable\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"dom\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information on this feature, <a href=\"https://github.com/microsoft/TypeScript/pull/54505\">take a look at the work on GitHub</a>!</p>\n<h2 id=\"decorator-metadata\" style=\"position:relative;\"><a href=\"#decorator-metadata\" aria-label=\"decorator metadata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decorator Metadata</h2>\n<p>TypeScript 5.2 implements <a href=\"https://github.com/tc39/proposal-decorator-metadata\">an upcoming ECMAScript feature called decorator metadata</a>.</p>\n<p>The key idea of this feature is to make it easy for decorators to create and consume metadata on any class they’re used on or within.</p>\n<p>Whenever decorator functions are used, they now have access to a new <code>metadata</code> property on their context object.\nThe <code>metadata</code> property just holds a simple object.\nSince JavaScript lets us add properties arbitrarily, it can be used as a dictionary that is updated by each decorator.\nAlternatively, since every <code>metadata</code> object will be identical for each decorated portion of a class, it can be used as a key into a <code>Map</code>.\nAfter all decorators on or in a class get run, that object can be accessed on the class via <code>Symbol.metadata</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Record</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">PropertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">setMetadata</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">_target</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeClass</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    @</span><span style=\"color: #001080\">setMetadata</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    @</span><span style=\"color: #001080\">setMetadata</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">accessor</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    @</span><span style=\"color: #001080\">setMetadata</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() { }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">ourMetadata</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">SomeClass</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">JSON</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">stringify</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ourMetadata</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #008000\">// { \"bar\": true, \"baz\": true, \"foo\": true }</span></div></code></div></pre>\n<p>This can be useful in a number of different scenarios.\nMetadata could possibly be attached for lots of uses like debugging, serialization, or performing dependency injection with decorators.\nSince metadata objects are created per decorated class, frameworks can either privately use them as keys into a <code>Map</code> or <code>WeakMap</code>, or tack properties on as necessary.</p>\n<p>For example, let’s say we wanted to use decorators to keep track of which properties and accessors are serializable when using <code>JSON.stringify</code> like so:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">serialize</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsonify</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./serializer\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Person</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">firstName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">lastName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    @</span><span style=\"color: #001080\">serialize</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    @</span><span style=\"color: #001080\">serialize</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fullName</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\">firstName</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> </span><span style=\"color: #0000FF\">${</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\">lastName</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">toJSON</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">jsonify</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">firstName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">lastName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">age</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Here, the intent is that only <code>age</code> and <code>fullName</code> should be serialized because they are marked with the <code>@serialize</code> decorator.\nWe define a <code>toJSON</code> method for this purpose, but it just calls out to <code>jsonify</code> which uses the metadata that <code>@serialize</code> created.</p>\n<p>Here’s an example of how the module <code>./serialize.ts</code> might be defined:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">serializables</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassAccessorDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassGetterDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassFieldDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    ;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">serialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">_target</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">static</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">private</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Can only serialize public instance members.\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"symbol\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Cannot serialize symbol-named properties.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">propNames</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">        (</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">serializables</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">) ??= [];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">jsonify</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">metadata</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">constructor</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">propNames</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">?.[</span><span style=\"color: #001080\">serializables</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"No members marked with @serialize.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">pairStrings</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strKey</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">JSON</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">stringify</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strValue</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">JSON</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">stringify</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">)[</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">strKey</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">: </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">strValue</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`{ </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">pairStrings</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">join</span><span style=\"color: #000000FF\">(</span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000FF\">)</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> }`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This module has a local <code>symbol</code> called <code>serializables</code> to store and retrieve the names of properties marked <code>@serializable</code>.\nIt stores a list of these property names on the metadata on each invocation of <code>@serializable</code>.\nWhen <code>jsonify</code> is called, the list of properties is fetched off of the metadata and used to retrieve the actual values from the instance, eventually serializing those names and values.</p>\n<p>Using a <code>symbol</code> technically makes this data accessible to others.\nAn alternative might be to use a <code>WeakMap</code> using the metadata object as a key.\nThis keeps data private and happens to use fewer type assertions in this case, but is otherwise similar.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">serializables</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">WeakMap</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassAccessorDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassGetterDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    | </span><span style=\"color: #1C6277\">ClassFieldDecoratorContext</span></div><div class='line'><span style=\"color: #000000\">    ;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">serialize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">_target</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Context</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">static</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">private</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Can only serialize public instance members.\"</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> !== </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Can only serialize string properties.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">serializables</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">serializables</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">set</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\"> = []);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">jsonify</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">metadata</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">constructor</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">propNames</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">serializables</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">get</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Error</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"No members marked with @serialize.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">pairStrings</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">propNames</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strKey</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">JSON</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">stringify</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">strValue</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">JSON</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">stringify</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">instance</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">)[</span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">]);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">strKey</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">: </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">strValue</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">`{ </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">pairStrings</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">join</span><span style=\"color: #000000FF\">(</span><span style=\"color: #A31515\">\", \"</span><span style=\"color: #000000FF\">)</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\"> }`</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>As a note, these implementations don’t handle subclassing and inheritance.\nThat’s left as an exercise to you (and you might find that it is easier in one version of the file than the other!).</p>\n<p>Because this feature is still fresh, most runtimes will not support it natively.\nTo use it, you will need a polyfill for <code>Symbol.metadata</code>.\nSomething as simple as the following should work for most cases:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> ??= </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Symbol.metadata\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>You will also need to set your compilation <code>target</code> to <code>es2022</code> or below, and configure your <code>lib</code> setting to either include <code>\"esnext\"</code> or <code>\"esnext.decorators\"</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"lib\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"esnext.decorators\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"dom\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>We’d like to thank <a href=\"https://github.com/a-tarasyuk\">Oleksandr Tarasiuk</a> for contributing <a href=\"https://github.com/microsoft/TypeScript/pull/54657\">the implementation of decorator metadata</a> for TypeScript 5.2!</p>\n<!-- TODO: Why is there a conditional type around the existence of `Symbol.metadata`? -->\n<h2 id=\"named-and-anonymous-tuple-elements\" style=\"position:relative;\"><a href=\"#named-and-anonymous-tuple-elements\" aria-label=\"named and anonymous tuple elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Named and Anonymous Tuple Elements</h2>\n<p>Tuple types have supported optional labels or names for each element.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pair</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [first: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, second: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>These labels don’t change what you’re allowed to do with them — they’re solely to help with readability and tooling.</p>\n<p>However, TypeScript previously had a rule that tuples could not mix and match between labeled and unlabeled elements.\nIn other words, either no element could have a label in a tuple, or all elements needed one.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ✅ fine - no labels</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pair1</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ✅ fine - all fully labeled</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pair2</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [first: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, second: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ❌ previously an error</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Pair3</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [first: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #008000\">//                         ~</span></div><div class='line'><span style=\"color: #008000\">// Tuple members must all have names</span></div><div class='line'><span style=\"color: #008000\">// or all not have names.</span></div></code></div></pre>\n<p>This could be annoying for rest elements where we’d be forced to just add a label like <code>rest</code> or <code>tail</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// ❌ previously an error</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TwoOrMore_A</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [first: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, second: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[]];</span></div><div class='line'><span style=\"color: #008000\">//                                          ~~~~~~</span></div><div class='line'><span style=\"color: #008000\">// Tuple members must all have names</span></div><div class='line'><span style=\"color: #008000\">// or all not have names.</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ✅</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TwoOrMore_B</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; = [first: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, second: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, rest: ...</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">[]];</span></div></code></div></pre>\n<p>It also meant that this restriction had to be enforced internally in the type system, meaning TypeScript would lose labels.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HasLabels</span><span style=\"color: #000000\"> = [a: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, b: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HasNoLabels</span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Merged</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #1C6277\">HasNoLabels</span><span style=\"color: #000000\">, ...</span><span style=\"color: #1C6277\">HasLabels</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #008000\">//   ^ [number, number, string, string]</span></div><div class='line'><span style=\"color: #008000\">//</span></div><div class='line'><span style=\"color: #008000\">//     'a' and 'b' were lost in 'Merged'</span></div></code></div></pre>\n<p>In TypeScript 5.2, the all-or-nothing restriction on tuple labels has been lifted.\nThe language can now also preserve labels when spreading into an unlabeled tuple.</p>\n<p>We’d like to extend our thanks to <a href=\"https://github.com/JoshuaKGoldberg\">Josh Goldberg</a> and <a href=\"https://github.com/Andarist\">Mateusz Burzyński</a> who <a href=\"https://github.com/microsoft/TypeScript/pull/53356\">collaborated to lift this restriction</a>.</p>\n<h2 id=\"easier-method-usage-for-unions-of-arrays\" style=\"position:relative;\"><a href=\"#easier-method-usage-for-unions-of-arrays\" aria-label=\"easier method usage for unions of arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easier Method Usage for Unions of Arrays</h2>\n<p>In previous versions on TypeScript, calling a method on a union of arrays could end in pain.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">array</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[];</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">array</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">filter</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> !!</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//    ~~~~~~ error!</span></div><div class='line'><span style=\"color: #008000\">// This expression is not callable.</span></div><div class='line'><span style=\"color: #008000\">//   Each member of the union type '...' has signatures,</span></div><div class='line'><span style=\"color: #008000\">//   but none of those signatures are compatible</span></div><div class='line'><span style=\"color: #008000\">//   with each other.</span></div></code></div></pre>\n<p>In this example, TypeScript would try to see if each version of <code>filter</code> is compatible across <code>string[]</code> and <code>number[]</code>.\nWithout a coherent strategy, TypeScript threw its hands in the air and said “I can’t make it work”.</p>\n<p>In TypeScript 5.2, before giving up in these cases, unions of arrays are treated as a special case.\nA new array type is constructed out of each member’s element type, and then the method is invoked on that.</p>\n<p>Taking the above example, <code>string[] | number[]</code> is transformed into <code>(string | number)[]</code> (or <code>Array&#x3C;string | number></code>), and <code>filter</code> is invoked on that type.\nThere is a slight caveat which is that <code>filter</code> will produce an <code>Array&#x3C;string | number></code> instead of a <code>string[] | number[]</code>;\nbut for a freshly produced value there is less risk of something “going wrong”.</p>\n<p>This means lots of methods like <code>filter</code>, <code>find</code>, <code>some</code>, <code>every</code>, and <code>reduce</code> should all be invokable on unions of arrays in cases where they were not previously.</p>\n<p>You can <a href=\"https://github.com/microsoft/TypeScript/pull/53489\">read up more details on the implementing pull request</a>.</p>\n<h2 id=\"type-only-import-paths-with-typescript-implementation-file-extensions\" style=\"position:relative;\"><a href=\"#type-only-import-paths-with-typescript-implementation-file-extensions\" aria-label=\"type only import paths with typescript implementation file extensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-Only Import Paths with TypeScript Implementation File Extensions</h2>\n<p>TypeScript now allows both declaration <em>and</em> implementation file extensions to be included in type-only import paths, regardless of whether <code>allowImportingTsExtensions</code> is enabled.</p>\n<p>This means that you can now write <code>import type</code> statements that use <code>.ts</code>, <code>.mts</code>, <code>.cts</code>, and <code>.tsx</code> file extensions.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">JustAType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./justTypes.ts\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JustAType</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>It also means that <code>import()</code> types, which can be used in both TypeScript and JavaScript with JSDoc, can use those file extensions.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{import(\"./justTypes.ts\").JustAType}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">param</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">param</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/54746\">see the change here</a>.</p>\n<h2 id=\"comma-completions-for-object-members\" style=\"position:relative;\"><a href=\"#comma-completions-for-object-members\" aria-label=\"comma completions for object members permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comma Completions for Object Members</h2>\n<p>It can be easy to forget to add a comma when adding a new property to an object.\nPreviously, if you forgot a comma and requested auto-completion, TypeScript would confusingly give poor unrelated completion results.</p>\n<p>TypeScript 5.2 now gracefully provides object member completions when you’re missing a comma.\nBut to just skip past hitting you with a syntax error, it will <em>also</em> auto-insert the missing comma.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/06/comma-completions-5-2-beta.gif\" alt=\"Properties in an object literal are completed despite missing a comma after a prior property. When the property name is completed, the missing comma is automatically inserted.\"></p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/52899\">see the implementation here</a>.</p>\n<h2 id=\"inline-variable-refactoring\" style=\"position:relative;\"><a href=\"#inline-variable-refactoring\" aria-label=\"inline variable refactoring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline Variable Refactoring</h2>\n<p>TypeScript 5.2 now has a refactoring to inline the contents of a variable to all usage sites.</p>\n<p><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/06/inline-variable-5-2-beta.gif\" alt=\"A variable called &#x27;path&#x27; initialized to a string, having both of its usages replaced\">.</p>\n<p>Using the “inline variable” refactoring will eliminate the variable and replace all the variable’s usages with its initializer.\nNote that this may cause that initializer’s side-effects to run at a different time, and as many times as the variable has been used.</p>\n<p>For more details, <a href=\"https://github.com/microsoft/TypeScript/pull/54281\">see the implementing pull request</a>.</p>\n<!-- Inlay Parameter Hints -->\n<h2 id=\"optimized-checks-for-ongoing-type-compatibility\" style=\"position:relative;\"><a href=\"#optimized-checks-for-ongoing-type-compatibility\" aria-label=\"optimized checks for ongoing type compatibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optimized Checks for Ongoing Type Compatibility</h2>\n<p>Because TypeScript is a structural type system, types occasionally need to be compared in a member-wise fashion;\nhowever, recursive types add some issues here.\nFor example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">A</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">B</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>When checking whether the type <code>A</code> is compatible with the type <code>B</code>, TypeScript will end up checking whether the types of <code>value</code> in <code>A</code> and <code>B</code> are respectively compatible.\nAt this point, the type system needs to stop checking any further and proceed to check other members.\nTo do this, the type system has to track when any two types are already being related.</p>\n<p>Previously TypeScript already kept a stack of type pairs, and iterated through that to determine whether those types are being related.\nWhen this stack is shallow that’s not a problem; but when the stack isn’t shallow, that, uh, <a href=\"https://accidentallyquadratic.tumblr.com/\">is a problem</a>.</p>\n<p>In TypeScript 5.3, a simple <code>Set</code> helps tracks this information.\nThis reduced the time spent on a reported test case that used the <a href=\"https://github.com/drizzle-team/drizzle-orm\">drizzle</a> library by over 33%!</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Benchmark 1: old\n  Time (mean ± σ):      3.115 s ±  0.067 s    [User: 4.403 s, System: 0.124 s]\n  Range (min … max):    3.018 s …  3.196 s    10 runs\n \nBenchmark 2: new\n  Time (mean ± σ):      2.072 s ±  0.050 s    [User: 3.355 s, System: 0.135 s]\n  Range (min … max):    1.985 s …  2.150 s    10 runs\n \nSummary\n  'new' ran\n    1.50 ± 0.05 times faster than 'old'</span></div></code></div></pre>\n<p><a href=\"https://github.com/microsoft/TypeScript/pull/55224\">Read more on the change here</a>.</p>\n<h2 id=\"breaking-changes-and-correctness-fixes\" style=\"position:relative;\"><a href=\"#breaking-changes-and-correctness-fixes\" aria-label=\"breaking changes and correctness fixes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking Changes and Correctness Fixes</h2>\n<p>TypeScript strives not to unnecessarily introduce breaks;\nhowever, occasionally we must make corrections and improvements so that code can be better-analyzed.</p>\n<h3 id=\"libdts-changes\" style=\"position:relative;\"><a href=\"#libdts-changes\" aria-label=\"libdts changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>lib.d.ts</code> Changes</h3>\n<p>Types generated for the DOM may have an impact on your codebase.\nFor more information, <a href=\"https://github.com/microsoft/TypeScript/pull/54725\">see the DOM updates for TypeScript 5.2</a>.</p>\n<h3 id=\"labeledelementdeclarations-may-hold-undefined-elements\" style=\"position:relative;\"><a href=\"#labeledelementdeclarations-may-hold-undefined-elements\" aria-label=\"labeledelementdeclarations may hold undefined elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>labeledElementDeclarations</code> May Hold <code>undefined</code> Elements</h3>\n<p>In order <a href=\"https://github.com/microsoft/TypeScript/pull/53356\">to support a mixture of labeled and unlabeled elements</a>, TypeScript’s API has changed slightly.\nThe <code>labeledElementDeclarations</code> property of <code>TupleType</code> may hold <code>undefined</code> for at each position where an element is unlabeled.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  interface TupleType {</span></div><div class='line'><span style=\"color: #A31515\">-     labeledElementDeclarations?: readonly (NamedTupleMember | ParameterDeclaration)[];</span></div><div class='line'><span style=\"color: #098658\">+     labeledElementDeclarations?: readonly (NamedTupleMember | ParameterDeclaration | undefined)[];</span></div><div class='line'><span style=\"color: #000000\">  }</span></div></code></div></pre>\n<h3 id=\"module-and-moduleresolution-must-match-under-recent-nodejs-settings\" style=\"position:relative;\"><a href=\"#module-and-moduleresolution-must-match-under-recent-nodejs-settings\" aria-label=\"module and moduleresolution must match under recent nodejs settings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>module</code> and <code>moduleResolution</code> Must Match Under Recent Node.js settings</h3>\n<p>The <code>--module</code> and <code>--moduleResolution</code> options each support a <code>node16</code> and <code>nodenext</code> setting.\nThese are effectively “modern Node.js” settings that should be used on any recent Node.js project.\nWhat we’ve found is that when these two options don’t agree on whether they are using Node.js-related settings, projects are effectively misconfigured.</p>\n<p>In TypeScript 5.2, when using <code>node16</code> or <code>nodenext</code> for either of the <code>--module</code> and <code>--moduleResolution</code> options, TypeScript now requires the other to have a similar Node.js-related setting.\nIn cases where the settings diverge, you’ll likely get an error message like either</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Option 'moduleResolution' must be set to 'NodeNext' (or left unspecified) when option 'module' is set to 'NodeNext'.</span></div></code></div></pre>\n<p>or</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Option 'module' must be set to 'Node16' when option 'moduleResolution' is set to 'Node16'.</span></div></code></div></pre>\n<p>So for example <code>--module esnext --moduleResolution node16</code> will be rejected — but you may be better off just using <code>--module nodenext</code> alone, or <code>--module esnext --moduleResolution bundler</code>.</p>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/54567\">see the change here</a>.</p>\n<h3 id=\"consistent-export-checking-for-merged-symbols\" style=\"position:relative;\"><a href=\"#consistent-export-checking-for-merged-symbols\" aria-label=\"consistent export checking for merged symbols permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consistent Export Checking for Merged Symbols</h3>\n<p>When two declarations merge, they must agree in whether they are both exported.\nDue to a bug, TypeScript missed specific cases in ambient contexts, like in declaration files or <code>declare module</code> blocks.\nFor example, it would not issue an error on a case like the following, where <code>replaceInFile</code> is declared once as an exported function, and one as an un-exported namespace.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'replace-in-file'</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">replaceInFile</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">config</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">replaceInFile</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">config</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In an ambient module, adding an <code>export { ... }</code> or a similar construct like <code>export default ...</code> implicitly changes whether all declarations are automatically exported.\nTypeScript now recognizes these unfortunately confusing semantics more consistently, and issues an error on the fact that all declarations of <code>replaceInFile</code> need to agree in their modifiers, and will issue the following error:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Individual declarations in merged declaration 'replaceInFile' must be all exported or all local.</span></div></code></div></pre>\n<p>For more information, <a href=\"https://github.com/microsoft/TypeScript/pull/54659\">see the change here</a>.</p>","headings":[{"value":"using Declarations and Explicit Resource Management","depth":2},{"value":"Decorator Metadata","depth":2},{"value":"Named and Anonymous Tuple Elements","depth":2},{"value":"Easier Method Usage for Unions of Arrays","depth":2},{"value":"Type-Only Import Paths with TypeScript Implementation File Extensions","depth":2},{"value":"Comma Completions for Object Members","depth":2},{"value":"Inline Variable Refactoring","depth":2},{"value":"Optimized Checks for Ongoing Type Compatibility","depth":2},{"value":"Breaking Changes and Correctness Fixes","depth":2},{"value":"lib.d.ts Changes","depth":3},{"value":"labeledElementDeclarations May Hold undefined Elements","depth":3},{"value":"module and moduleResolution Must Match Under Recent Node.js settings","depth":3},{"value":"Consistent Export Checking for Merged Symbols","depth":3}],"frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-5-2.html","title":"TypeScript 5.2","disable_toc":null,"handbook":null,"oneline":"TypeScript 5.2 Release Notes","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"5-typescript-5.2","slug":"/docs/handbook/release-notes/typescript-5-2.html","repoPath":"/packages/documentation/copy/en/release-notes/TypeScript 5.2.md","lang":"en","modifiedTime":"2024-10-21T12:33:11.313Z"}},"staticQueryHashes":[]}