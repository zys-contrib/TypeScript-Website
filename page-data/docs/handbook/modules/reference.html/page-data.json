{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/modules/reference.html","result":{"data":{"markdownRemark":{"id":"295f4fe8-0a67-51cc-b9a1-102a91a90079","excerpt":"Module syntax The TypeScript compiler recognizes standard ECMAScript module syntax in TypeScript and JavaScript files and many forms of CommonJS syntax in…","html":"<h2 id=\"module-syntax\" style=\"position:relative;\"><a href=\"#module-syntax\" aria-label=\"module syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module syntax</h2>\n<p>The TypeScript compiler recognizes standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">ECMAScript module syntax</a> in TypeScript and JavaScript files and many forms of <a href=\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#commonjs-modules-are-supported\">CommonJS syntax</a> in JavaScript files.</p>\n<p>There are also a few TypeScript-specific syntax extensions that can be used in TypeScript files and/or JSDoc comments.</p>\n<h3 id=\"importing-and-exporting-typescript-specific-declarations\" style=\"position:relative;\"><a href=\"#importing-and-exporting-typescript-specific-declarations\" aria-label=\"importing and exporting typescript specific declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importing and exporting TypeScript-specific declarations</h3>\n<p>Type aliases, interfaces, enums, and namespaces can be exported from a module with an <code>export</code> modifier, like any standard JavaScript declaration:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Standard JavaScript syntax...</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #008000\">// ...extended to type declarations</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/* ... */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeInterface</span><span style=\"color: #000000\"> { </span><span style=\"color: #008000\">/* ... */</span><span style=\"color: #000000\"> }</span></div></code></div></pre>\n<p>They can also be referenced in named exports, even alongside references to standard JavaScript declarations:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">SomeInterface</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Exported types (and other TypeScript-specific declarations) can be imported with standard ECMAScript imports:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">SomeInterface</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>When using namespace imports or exports, exported types are available on the namespace when referenced in a type position:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Property 'SomeType' does not exist on type 'typeof import(\"./module.js\")'</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div></code></div></pre>\n<h3 id=\"type-only-imports-and-exports\" style=\"position:relative;\"><a href=\"#type-only-imports-and-exports\" aria-label=\"type only imports and exports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-only imports and exports</h3>\n<p>When emitting imports and exports to JavaScript, by default, TypeScript automatically elides (does not emit) imports that are only used in type positions and exports that only refer to types. Type-only imports and exports can be used to force this behavior and make the elision explicit. Import declarations written with <code>import type</code>, export declarations written with <code>export type { ... }</code>, and import or export specifiers prefixed with the <code>type</code> keyword are all guaranteed to be elided from the output JavaScript.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: main.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">SomeInterface</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">implements</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeInterface</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">C</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: main.js</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Even values can be imported with <code>import type</code>, but since they won’t exist in the output JavaScript, they can only be used in non-emitting positions:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./module.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// 'f' cannot be used as a value because it was imported using 'import type'</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">otherFunction</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {}; </span><span style=\"color: #008000\">// Ok</span></div></code></div></pre>\n<p>A type-only import declaration may not declare both a default import and named bindings, since it appears ambiguous whether <code>type</code> applies to the default import or to the entire import declaration. Instead, split the import declaration into two, or use <code>default</code> as a named binding:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">BigIntOptions</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//          ^^^^^^^^^^^^^^^^^^^^^</span></div><div class='line'><span style=\"color: #008000\">// Error: A type-only import can specify a default import or named bindings, but not both.</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">BigIntOptions</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div></code></div></pre>\n<h3 id=\"import-types\" style=\"position:relative;\"><a href=\"#import-types\" aria-label=\"import types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>import()</code> types</h3>\n<p>TypeScript provides a type syntax similar to JavaScript’s dynamic <code>import</code> for referencing the type of a module without writing an import declaration:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Access an exported type:</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">WriteFileOptions</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">).</span><span style=\"color: #1C6277\">WriteFileOptions</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Access the type of an exported value:</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">WriteFileFunction</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\">writeFile</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>This is especially useful in JSDoc comments in JavaScript files, where it’s not possible to import types otherwise:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{import(\"webpack\").Configuration}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"export--and-import--require\" style=\"position:relative;\"><a href=\"#export--and-import--require\" aria-label=\"export  and import  require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>export =</code> and <code>import = require()</code></h3>\n<p>When emitting CommonJS modules, TypeScript files can use a direct analog of <code>module.exports = ...</code> and <code>const mod = require(\"...\")</code> JavaScript syntax:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: main.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"...\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: main.js</span></div><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"...\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>This syntax was used over its JavaScript counterparts since variable declarations and property assignments could not refer to TypeScript types, whereas special TypeScript syntax could:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: a.ts</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> { </span><span style=\"color: #008000\">/* ... */</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Options</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error: 'Options' only refers to a type, but is being used as a value here.</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Options</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: b.ts</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">Options</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">options</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> = { </span><span style=\"color: #008000\">/* ... */</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// Error: 'Options' refers to a value, but is being used as a type here.</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: c.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Options</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./a\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">options</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Options</span><span style=\"color: #000000\"> = { </span><span style=\"color: #008000\">/* ... */</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// Ok</span></div></code></div></pre>\n<h3 id=\"ambient-modules\" style=\"position:relative;\"><a href=\"#ambient-modules\" aria-label=\"ambient modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ambient modules</h3>\n<p>TypeScript supports a syntax in script (non-module) files for declaring a module that exists in the runtime but has no corresponding file. These <em>ambient modules</em> usually represent runtime-provided modules, like <code>\"fs\"</code> or <code>\"path\"</code> in Node.js:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">normalize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">join</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">paths</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sep</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Once an ambient module is loaded into a TypeScript program, TypeScript will recognize imports of the declared module in other files:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 👇 Ensure the ambient module is loaded -</span></div><div class='line'><span style=\"color: #008000\">//    may be unnecessary if path.d.ts is included</span></div><div class='line'><span style=\"color: #008000\">//    by the project tsconfig.json somehow.</span></div><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"path.d.ts\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">normalize</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">join</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Ambient module declarations are easy to confuse with <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\">module augmentations</a> since they use identical syntax. This module declaration syntax becomes a module augmentation when the file is a module, meaning it has a top-level <code>import</code> or <code>export</code> statement (or is affected by <a href=\"https://www.typescriptlang.org/tsconfig#moduleDetection\"><code>--moduleDetection force</code> or <code>auto</code></a>):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Not an ambient module declaration anymore!</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"path\"</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">normalize</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">join</span><span style=\"color: #000000\">(...</span><span style=\"color: #001080\">paths</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sep</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ambient modules may use imports inside the module declaration body to refer to other modules without turning the containing file into a module (which would make the ambient module declaration a module augmentation):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"m\"</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Moving this outside \"m\" would totally change the meaning of the file!</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">SomeType</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"other\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>A <em>pattern</em> ambient module contains a single <code>*</code> wildcard character in its name, matching zero or more characters in import paths. This can be useful for declaring modules provided by custom loaders:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"*.html\"</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">content</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">content</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"the-module-compiler-option\" style=\"position:relative;\"><a href=\"#the-module-compiler-option\" aria-label=\"the module compiler option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>module</code> compiler option</h2>\n<p>This section discusses the details of each <code>module</code> compiler option value. See the <a href=\"/docs/handbook/modules/theory.html#the-module-output-format\"><em>Module output format</em></a> theory section for more background on what the option is and how it fits into the overall compilation process. In brief, the <code>module</code> compiler option was historically only used to control the output module format of emitted JavaScript files. The more recent <code>node16</code> and <code>nodenext</code> values, however, describe a wide range of characteristics of Node.js’s module system, including what module formats are supported, how the module format of each file is determined, and how different module formats interoperate.</p>\n<h3 id=\"node16-nodenext\" style=\"position:relative;\"><a href=\"#node16-nodenext\" aria-label=\"node16 nodenext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>node16</code>, <code>nodenext</code></h3>\n<p>Node.js supports both CommonJS and ECMAScript modules, with specific rules for which format each file can be and how the two formats are allowed to interoperate. <code>node16</code> and <code>nodenext</code> describe the full range of behavior for Node.js’s dual-format module system, and <strong>emit files in either CommonJS or ESM format</strong>. This is different from every other <code>module</code> option, which are runtime-agnostic and force all output files into a single format, leaving it to the user to ensure the output is valid for their runtime.</p>\n<blockquote>\n<p>A common misconception is that <code>node16</code> and <code>nodenext</code> only emit ES modules. In reality, <code>node16</code> and <code>nodenext</code> describe versions of Node.js that <em>support</em> ES modules, not just projects that <em>use</em> ES modules. Both ESM and CommonJS emit are supported, based on the <a href=\"#module-format-detection\">detected module format</a> of each file. Because <code>node16</code> and <code>nodenext</code> are the only <code>module</code> options that reflect the complexities of Node.js’s dual module system, they are the <strong>only correct <code>module</code> options</strong> for all apps and libraries that are intended to run in Node.js v12 or later, whether they use ES modules or not.</p>\n</blockquote>\n<p><code>node16</code> and <code>nodenext</code> are currently identical, with the exception that they <a href=\"#implied-and-enforced-options\">imply different <code>target</code> option values</a>. If Node.js makes significant changes to its module system in the future, <code>node16</code> will be frozen while <code>nodenext</code> will be updated to reflect the new behavior.</p>\n<h4 id=\"module-format-detection\" style=\"position:relative;\"><a href=\"#module-format-detection\" aria-label=\"module format detection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module format detection</h4>\n<ul>\n<li><code>.mts</code>/<code>.mjs</code>/<code>.d.mts</code> files are always ES modules.</li>\n<li><code>.cts</code>/<code>.cjs</code>/<code>.d.cts</code> files are always CommonJS modules.</li>\n<li><code>.ts</code>/<code>.tsx</code>/<code>.js</code>/<code>.jsx</code>/<code>.d.ts</code> files are ES modules if the nearest ancestor package.json file contains <code>\"type\": \"module\"</code>, otherwise CommonJS modules.</li>\n</ul>\n<p>The detected module format of input <code>.ts</code>/<code>.tsx</code>/<code>.mts</code>/<code>.cts</code> files determines the module format of the emitted JavaScript files. So, for example, a project consisting entirely of <code>.ts</code> files will emit all CommonJS modules by default under <code>--module nodenext</code>, and can be made to emit all ES modules by adding <code>\"type\": \"module\"</code> to the project package.json.</p>\n<h4 id=\"interoperability-rules\" style=\"position:relative;\"><a href=\"#interoperability-rules\" aria-label=\"interoperability rules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interoperability rules</h4>\n<ul>\n<li><strong>When an ES module references a CommonJS module:</strong>\n<ul>\n<li>The <code>module.exports</code> of the CommonJS module is available as a default import to the ES module.</li>\n<li>Properties (other than <code>default</code>) of the CommonJS module’s <code>module.exports</code> may or may not be available as named imports to the ES module. Node.js attempts to make them available via <a href=\"https://github.com/nodejs/cjs-module-lexer\">static analysis</a>. TypeScript cannot know from a declaration file whether that static analysis will succeed, and optimistically assumes it will. This limits TypeScript’s ability to catch named imports that may crash at runtime. See <a href=\"https://github.com/nodejs/cjs-module-lexer\">#54018</a> for more details.</li>\n</ul>\n</li>\n<li><strong>When a CommonJS module references an ES module:</strong>\n<ul>\n<li><code>require</code> cannot reference an ES module. For TypeScript, this includes <code>import</code> statements in files that are <a href=\"#module-format-detection\">detected</a> to be CommonJS modules, since those <code>import</code> statements will be transformed to <code>require</code> calls in the emitted JavaScript.</li>\n<li>A dynamic <code>import()</code> call may be used to import an ES module. It returns a Promise of the module’s Module Namespace Object (what you’d get from <code>import * as ns from \"./module.js\"</code> from another ES module).</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"emit\" style=\"position:relative;\"><a href=\"#emit\" aria-label=\"emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Emit</h4>\n<p>The emit format of each file is determined by the <a href=\"#module-format-detection\">detected module format</a> of each file. ESM emit is similar to <a href=\"#es2015-es2020-es2022-esnext\"><code>--module esnext</code></a>, but has a special transformation for <code>import x = require(\"...\")</code>, which is not allowed in <code>--module esnext</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">createRequire</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_createRequire</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"module\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">__require</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">_createRequire</span><span style=\"color: #000000\">(</span><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">meta</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>CommonJS emit is similar to <a href=\"#commonjs\"><code>--module commonjs</code></a>, but dynamic <code>import()</code> calls are not transformed. Emit here is shown with <code>esModuleInterop</code> enabled:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// transformed</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// not transformed</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) ? </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> : { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">)); </span><span style=\"color: #008000\">// transformed</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// not transformed</span></div></code></div></pre>\n<h4 id=\"implied-and-enforced-options\" style=\"position:relative;\"><a href=\"#implied-and-enforced-options\" aria-label=\"implied and enforced options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implied and enforced options</h4>\n<ul>\n<li><code>--module nodenext</code> or <code>node16</code> implies and enforces the <code>moduleResolution</code> with the same name.</li>\n<li><code>--module nodenext</code> implies <code>--target esnext</code>.</li>\n<li><code>--module node16</code> implies <code>--target es2022</code>.</li>\n<li><code>--module nodenext</code> or <code>node16</code> implies <code>--esModuleInterop</code>.</li>\n</ul>\n<h4 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li><code>node16</code> and <code>nodenext</code> are the only correct <code>module</code> options for all apps and libraries that are intended to run in Node.js v12 or later, whether they use ES modules or not.</li>\n<li><code>node16</code> and <code>nodenext</code> emit files in either CommonJS or ESM format, based on the <a href=\"#module-format-detection\">detected module format</a> of each file.</li>\n<li>Node.js’s interoperability rules between ESM and CJS are reflected in type checking.</li>\n<li>ESM emit transforms <code>import x = require(\"...\")</code> to a <code>require</code> call constructed from a <code>createRequire</code> import.</li>\n<li>CommonJS emit leaves dynamic <code>import()</code> calls untransformed, so CommonJS modules can asynchronously import ES modules.</li>\n</ul>\n<h3 id=\"es2015-es2020-es2022-esnext\" style=\"position:relative;\"><a href=\"#es2015-es2020-es2022-esnext\" aria-label=\"es2015 es2020 es2022 esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>es2015</code>, <code>es2020</code>, <code>es2022</code>, <code>esnext</code></h3>\n<h4 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li>Use <code>esnext</code> with <code>--moduleResolution bundler</code> for bundlers, Bun, and tsx.</li>\n<li>Do not use for Node.js. Use <code>node16</code> or <code>nodenext</code> with <code>\"type\": \"module\"</code> in package.json to emit ES modules for Node.js.</li>\n<li><code>import mod = require(\"mod\")</code> is not allowed in non-declaration files.</li>\n<li><code>es2020</code> adds support for <code>import.meta</code> properties.</li>\n<li><code>es2022</code> adds support for top-level <code>await</code>.</li>\n<li><code>esnext</code> is a moving target that may include support for Stage 3 proposals to ECMAScript modules.</li>\n<li>Emitted files are ES modules, but dependencies may be any format.</li>\n</ul>\n<h4 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h3 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>commonjs</code></h3>\n<h4 id=\"summary-2\" style=\"position:relative;\"><a href=\"#summary-2\" aria-label=\"summary 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li>You probably shouldn’t use this. Use <code>node16</code> or <code>nodenext</code> to emit CommonJS modules for Node.js.</li>\n<li>Emitted files are CommonJS modules, but dependencies may be any format.</li>\n<li>Dynamic <code>import()</code> is transformed to a Promise of a <code>require()</code> call.</li>\n<li><code>esModuleInterop</code> affects the output code for default and namespace imports.</li>\n</ul>\n<h4 id=\"examples-1\" style=\"position:relative;\"><a href=\"#examples-1\" aria-label=\"examples 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<blockquote>\n<p>Output is shown with <code>esModuleInterop: false</code>.</p>\n</blockquote>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">mod_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">));</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">p1:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">p2:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">p1:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">p2:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<h3 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>system</code></h3>\n<h4 id=\"summary-3\" style=\"position:relative;\"><a href=\"#summary-3\" aria-label=\"summary 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li>Designed for use with the <a href=\"https://github.com/systemjs/systemjs\">SystemJS module loader</a>.</li>\n</ul>\n<h4 id=\"examples-2\" style=\"position:relative;\"><a href=\"#examples-2\" aria-label=\"examples 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">System</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__moduleName</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">setters:</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod_1_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">mod_1_1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">mod_1_1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">execute</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"e1\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<h3 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>amd</code></h3>\n<h4 id=\"summary-4\" style=\"position:relative;\"><a href=\"#summary-4\" aria-label=\"summary 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li>Designed for AMD loaders like RequireJS.</li>\n<li>You probably shouldn’t use this. Use a bundler instead.</li>\n<li>Emitted files are AMD modules, but dependencies may be any format.</li>\n<li>Supports <code>outFile</code>.</li>\n</ul>\n<h4 id=\"examples-3\" style=\"position:relative;\"><a href=\"#examples-3\" aria-label=\"examples 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">resolve_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject_1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">resolve_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject_1</span><span style=\"color: #000000\">); });</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<h3 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>umd</code></h3>\n<h4 id=\"summary-5\" style=\"position:relative;\"><a href=\"#summary-5\" aria-label=\"summary 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<ul>\n<li>Designed for AMD or CommonJS loaders.</li>\n<li>Does not expose a global variable like most other UMD wrappers.</li>\n<li>You probably shouldn’t use this. Use a bundler instead.</li>\n<li>Emitted files are UMD modules, but dependencies may be any format.</li>\n</ul>\n<h4 id=\"examples-4\" style=\"position:relative;\"><a href=\"#examples-4\" aria-label=\"examples 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h4>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__syncRequire</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">mod_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">dynamic</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">__syncRequire</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">)) : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">resolve_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject_1</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"mod\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">resolve_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject_1</span><span style=\"color: #000000\">); });</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">z</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">dynamic</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">e1</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"default export\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code></div></pre>\n<h2 id=\"the-moduleresolution-compiler-option\" style=\"position:relative;\"><a href=\"#the-moduleresolution-compiler-option\" aria-label=\"the moduleresolution compiler option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>moduleResolution</code> compiler option</h2>\n<p>This section describes module resolution features and processes shared by multiple <code>moduleResolution</code> modes, then specifies the details of each mode. See the <a href=\"/docs/handbook/modules/theory.html#module-resolution\"><em>Module resolution</em></a> theory section for more background on what the option is and how it fits into the overall compilation process. In brief, <code>moduleResolution</code> controls how TypeScript resolves <em>module specifiers</em> (string literals in <code>import</code>/<code>export</code>/<code>require</code> statements) to files on disk, and should be set to match the module resolver used by the target runtime or bundler.</p>\n<h3 id=\"common-features-and-processes\" style=\"position:relative;\"><a href=\"#common-features-and-processes\" aria-label=\"common features and processes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common features and processes</h3>\n<h4 id=\"file-extension-substitution\" style=\"position:relative;\"><a href=\"#file-extension-substitution\" aria-label=\"file extension substitution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File extension substitution</h4>\n<p>TypeScript always wants to resolve internally to a file that can provide type information, while ensuring that the runtime or bundler can use the same path to resolve to a file that provides a JavaScript implementation. For any module specifier that would, according to the <code>moduleResolution</code> algorithm specified, trigger a lookup of a JavaScript file in the runtime or bundler, TypeScript will first try to find a TypeScript implementation file or type declaration file with the same name and analagous file extension.</p>\n<table>\n<thead>\n<tr>\n<th>Runtime lookup</th>\n<th>TypeScript lookup #1</th>\n<th>TypeScript lookup #2</th>\n<th>TypeScript lookup #3</th>\n<th>TypeScript lookup #4</th>\n<th>TypeScript lookup #5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/mod.js</code></td>\n<td><code>/mod.ts</code></td>\n<td><code>/mod.tsx</code></td>\n<td><code>/mod.d.ts</code></td>\n<td><code>/mod.js</code></td>\n<td><code>./mod.jsx</code></td>\n</tr>\n<tr>\n<td><code>/mod.mjs</code></td>\n<td><code>/mod.mts</code></td>\n<td><code>/mod.d.mts</code></td>\n<td><code>/mod.mjs</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>/mod.cjs</code></td>\n<td><code>/mod.cts</code></td>\n<td><code>/mod.d.cts</code></td>\n<td><code>/mod.cjs</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Note that this behavior is independent of the actual module specifier written in the import. This means that TypeScript can resolve to a <code>.ts</code> or <code>.d.ts</code> file even if the module specifier explicitly uses a <code>.js</code> file extension:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./mod.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Runtime lookup: \"./mod.js\"</span></div><div class='line'><span style=\"color: #008000\">// TypeScript lookup #1: \"./mod.ts\"</span></div><div class='line'><span style=\"color: #008000\">// TypeScript lookup #2: \"./mod.d.ts\"</span></div><div class='line'><span style=\"color: #008000\">// TypeScript lookup #3: \"./mod.js\"</span></div></code></div></pre>\n<p>See <a href=\"/docs/handbook/modules/theory.html#typescript-imitates-the-hosts-module-resolution-but-with-types\"><em>TypeScript imitates the host’s module resolution, but with types</em></a> for an explanation of why TypeScript’s module resolution works this way.</p>\n<h4 id=\"relative-file-path-resolution\" style=\"position:relative;\"><a href=\"#relative-file-path-resolution\" aria-label=\"relative file path resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relative file path resolution</h4>\n<p>All of TypeScript’s <code>moduleResolution</code> algorithms support referencing a module by a relative path that includes a file extension (which will be substituted according to the <a href=\"#file-extension-substitution\">rules above</a>):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: a.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: b.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {} </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./a.js\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ✅ Works in every `moduleResolution`</span></div></code></div></pre>\n<h4 id=\"extensionless-relative-paths\" style=\"position:relative;\"><a href=\"#extensionless-relative-paths\" aria-label=\"extensionless relative paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extensionless relative paths</h4>\n<p>In some cases, the runtime or bundler allows omitting a <code>.js</code> file extension from a relative path. TypeScript supports this behavior where the <code>moduleResolution</code> setting and the context indicate that the runtime or bundler supports it:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: a.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: b.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {} </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./a\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>If TypeScript determines that the runtime will perform a lookup for <code>./a.js</code> given the module specifier <code>\"./a\"</code>, then <code>./a.js</code> will undergo <a href=\"#file-extension-substitution\">extension substitution</a>, and resolve to the file <code>a.ts</code> in this example.</p>\n<p>Extensionless relative paths are not supported in <code>import</code> paths in Node.js, and are not always supported in file paths specified in package.json files. TypeScript currently never supports omitting a <code>.mjs</code>/<code>.mts</code> or <code>.cjs</code>/<code>.cts</code> file extension, even though some runtimes and bundlers do.</p>\n<h4 id=\"directory-modules-index-file-resolution\" style=\"position:relative;\"><a href=\"#directory-modules-index-file-resolution\" aria-label=\"directory modules index file resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directory modules (index file resolution)</h4>\n<p>In some cases, a directory, rather than a file, can be referenced as a module. In the simplest and most common case, this involves the runtime or bundler looking for an <code>index.js</code> file in a directory. TypeScript supports this behavior where the <code>moduleResolution</code> setting and the context indicate that the runtime or bundler supports it:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: dir/index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> {};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: b.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {} </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./dir\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>If TypeScript determines that the runtime will perform a lookup for <code>./dir/index.js</code> given the module specifier <code>\"./dir\"</code>, then <code>./dir/index.js</code> will undergo <a href=\"#file-extension-substitution\">extension substitution</a>, and resolve to the file <code>dir/index.ts</code> in this example.</p>\n<p>Directory modules may also contain a package.json file, where resolution of the <a href=\"#packagejson-main-and-types\"><code>\"main\"</code> and <code>\"types\"</code></a> fields are supported, and take precedence over <code>index.js</code> lookups. The <a href=\"#packagejson-typesversions\"><code>\"typesVersions\"</code></a> field is also supported in directory modules.</p>\n<p>Note that directory modules are not the same as <a href=\"#node_modules-package-lookups\"><code>node_modules</code> packages</a> and only support a subset of the features available to packages, and are not supported at all in some contexts.  Node.js considers them a <a href=\"https://nodejs.org/dist/latest-v20.x/docs/api/modules.html#folders-as-modules\">legacy feature</a>.</p>\n<h4 id=\"paths\" style=\"position:relative;\"><a href=\"#paths\" aria-label=\"paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>paths</code></h4>\n<h5 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h5>\n<p>TypeScript offers a way to override the compiler’s module resolution for bare specifiers with the <code>paths</code> compiler option. While the feature was originally designed to be used with the AMD module loader (a means of running modules in the browser before ESM existed or bundlers were widely used), it still has uses today when a runtime or bundler supports module resolution features that TypeScript does not model. For example, when running Node.js with <code>--experimental-network-imports</code>, you can manually specify a local type definition file for a specific <code>https://</code> import:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"nodenext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"https://esm.sh/lodash@4.17.21\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./node_modules/@types/lodash/index.d.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Typed by ./node_modules/@types/lodash/index.d.ts due to `paths` entry</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">add</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"https://esm.sh/lodash@4.17.21\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>It’s also common for apps built with bundlers to define convenience path aliases in their bundler configuration, and then inform TypeScript of those aliases with <code>paths</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleResolution\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"bundler\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"@app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h5 id=\"paths-does-not-affect-emit\" style=\"position:relative;\"><a href=\"#paths-does-not-affect-emit\" aria-label=\"paths does not affect emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>paths</code> does not affect emit</h5>\n<p>The <code>paths</code> option does <em>not</em> change the import path in the code emitted by TypeScript. Consequently, it’s very easy to create path aliases that appear to work in TypeScript but will crash at runtime:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"nodenext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"node-has-no-idea-what-this-is\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./oops.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// TypeScript: ✅</span></div><div class='line'><span style=\"color: #008000\">// Node.js: 💥</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> {} </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"node-has-no-idea-what-this-is\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>While it’s ok for bundled apps to set up <code>paths</code>, it’s very important that published libraries do <em>not</em>, since the emitted JavaScript will not work for consumers of the library without those users setting up the same aliases for both TypeScript and their bundler. Both libraries and apps can consider <a href=\"#packagejson-imports-and-self-name-imports\">package.json <code>\"imports\"</code></a> as a standard replacement for convenience <code>paths</code> aliases.</p>\n<h5 id=\"paths-should-not-point-to-monorepo-packages-or-node_modules-packages\" style=\"position:relative;\"><a href=\"#paths-should-not-point-to-monorepo-packages-or-node_modules-packages\" aria-label=\"paths should not point to monorepo packages or node_modules packages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>paths</code> should not point to monorepo packages or node_modules packages</h5>\n<p>While module specifiers that match <code>paths</code> aliases are bare specifiers, once the alias is resolved, module resolution proceeds on the resolved path as a relative path. Consequently, resolution features that happen for <a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a>, including package.json <code>\"exports\"</code> field support, do not take effect when a <code>paths</code> alias is matched. This can lead to surprising behavior if <code>paths</code> is used to point to a <code>node_modules</code> package:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #A31515\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"paths\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> [</span><span style=\"color: #A31515\">\"./node_modules/pkg/dist/index.d.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #A31515\">\"pkg/*\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> [</span><span style=\"color: #A31515\">\"./node_modules/pkg/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>While this configuration may simulate some of the behavior of package resolution, it overrides any <code>main</code>, <code>types</code>, <code>exports</code>, and <code>typesVersions</code> the package’s <code>package.json</code> file defines, and imports from the package may fail at runtime.</p>\n<p>The same caveat applies to packages referencing each other in a monorepo. Instead of using <code>paths</code> to make TypeScript artificially resolve <code>\"@my-scope/lib\"</code> to a sibling package, it’s best to use workspaces via <a href=\"https://docs.npmjs.com/cli/v7/using-npm/workspaces\">npm</a>, <a href=\"https://classic.yarnpkg.com/en/docs/workspaces/\">yarn</a>, or <a href=\"https://pnpm.io/workspaces\">pnpm</a> to symlink your packages into <code>node_modules</code>, so both TypeScript and the runtime or bundler perform real <code>node_modules</code> package lookups. This is especially important if the monorepo packages will be published to npm—the packages will reference each other via <code>node_modules</code> package lookups once installed by users, and using workspaces allows you to test that behavior during local development.</p>\n<h5 id=\"relationship-to-baseurl\" style=\"position:relative;\"><a href=\"#relationship-to-baseurl\" aria-label=\"relationship to baseurl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relationship to <code>baseUrl</code></h5>\n<p>When <a href=\"#baseurl\"><code>baseUrl</code></a> is provided, the values in each <code>paths</code> array are resolved relative to the <code>baseUrl</code>. Otherwise, they are resolved relative to the <code>tsconfig.json</code> file that defines them.</p>\n<h5 id=\"wildcard-substitutions\" style=\"position:relative;\"><a href=\"#wildcard-substitutions\" aria-label=\"wildcard substitutions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wildcard substitutions</h5>\n<p><code>paths</code> patterns can contain a single <code>*</code> wildcard, which matches any string. The <code>*</code> token can then be used in the file path values to substitute the matched string:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"@app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>When resolving an import of <code>\"@app/components/Button\"</code>, TypeScript will match on <code>@app/*</code>, binding <code>*</code> to <code>components/Button</code>, and then attempt to resolve the path <code>./src/components/Button</code> relative to the <code>tsconfig.json</code> path. The remainder of this lookup will follow the same rules as any other <a href=\"#relative-file-path-resolution\">relative path lookup</a> according to the <code>moduleResolution</code> setting.</p>\n<p>When multiple patterns match a module specifier, the pattern with the longest matching prefix before any <code>*</code> token is used:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/foo/one.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"foo/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/foo/two.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"foo/bar\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/foo/three.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>When resolving an import of <code>\"foo/bar\"</code>, all three <code>paths</code> patterns match, but the last is used because <code>\"foo/bar\"</code> is longer than <code>\"foo/\"</code> and <code>\"\"</code>.</p>\n<h5 id=\"fallbacks\" style=\"position:relative;\"><a href=\"#fallbacks\" aria-label=\"fallbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fallbacks</h5>\n<p>Multiple file paths can be provided for a path mapping. If resolution fails for one path, the next one in the array will be attempted until resolution succeeds or the end of the array is reached.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"paths\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./vendor/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./types/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h4 id=\"baseurl\" style=\"position:relative;\"><a href=\"#baseurl\" aria-label=\"baseurl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>baseUrl</code></h4>\n<blockquote>\n<p><code>baseUrl</code> was designed for use with AMD module loaders. If you aren’t using an AMD module loader, you probably shouldn’t use <code>baseUrl</code>. Since TypeScript 4.1, <code>baseUrl</code> is no longer required to use <a href=\"#paths\"><code>paths</code></a> and should not be used just to set the directory <code>paths</code> values are resolved from.</p>\n</blockquote>\n<p>The <code>baseUrl</code> compiler option can be combined with any <code>moduleResolution</code> mode and specifies a directory that bare specifiers (module specifiers that don’t begin with <code>./</code>, <code>../</code>, or <code>/</code>) are resolved from. <code>baseUrl</code> has a higher precedence than <a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a> in <code>moduleResolution</code> modes that support them.</p>\n<p>When performing a <code>baseUrl</code> lookup, resolution proceeds with the same rules as other relative path resolutions. For example, in a <code>moduleResolution</code> mode that supports <a href=\"#extensionless-relative-paths\">extensionless relative paths</a> a module specifier <code>\"some-file\"</code> may resolve to <code>/src/some-file.ts</code> if <code>baseUrl</code> is set to <code>/src</code>.</p>\n<p>Resolution of relative module specifiers are never affected by the <code>baseUrl</code> option.</p>\n<h4 id=\"node_modules-package-lookups\" style=\"position:relative;\"><a href=\"#node_modules-package-lookups\" aria-label=\"node_modules package lookups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>node_modules</code> package lookups</h4>\n<p>Node.js treats module specifiers that aren’t relative paths, absolute paths, or URLs as references to packages that it looks up in <code>node_modules</code> subdirectories. Bundlers conveniently adopted this behavior to allow their users to use the same dependency management system, and often even the same dependencies, as they would in Node.js. All of TypeScript’s <code>moduleResolution</code> options except <code>classic</code> support <code>node_modules</code> lookups. (<code>classic</code> supports lookups in <code>node_modules/@types</code> when other means of resolution fail, but never looks for packages in <code>node_modules</code> directly.) Every <code>node_modules</code> package lookup has the following structure (beginning after higher precedence bare specifier rules, like <code>paths</code>, <code>baseUrl</code>, self-name imports, and package.json <code>\"imports\"</code> lookups have been exhausted):</p>\n<ol>\n<li>For each ancestor directory of the importing file, if a <code>node_modules</code> directory exists within it:\n<ol>\n<li>If a directory with the same name as the package exists within <code>node_modules</code>:\n<ol>\n<li>Attempt to resolve types from the package directory.</li>\n<li>If a result is found, return it and stop the search.</li>\n</ol>\n</li>\n<li>If a directory with the same name as the package exists within <code>node_modules/@types</code>:\n<ol>\n<li>Attempt to resolve types from the <code>@types</code> package directory.</li>\n<li>If a result is found, return it and stop the search.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Repeat the previous search through all <code>node_modules</code> directories, but this time, allow JavaScript files as a result, and do not search in <code>@types</code> directories.</li>\n</ol>\n<p>All <code>moduleResolution</code> modes (except <code>classic</code>) follow this pattern, while the details of how they resolve from a package directory, once located, differ, and are explained in the following sections.</p>\n<h4 id=\"packagejson-exports\" style=\"position:relative;\"><a href=\"#packagejson-exports\" aria-label=\"packagejson exports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json <code>\"exports\"</code></h4>\n<p>When <code>moduleResolution</code> is set to <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>, and <code>resolvePackageJsonExports</code> is not disabled, TypeScript follows Node.js’s <a href=\"https://nodejs.org/api/packages.html#packages_package_entry_points\">package.json <code>\"exports\"</code> spec</a> when resolving from a package directory triggered by a <a href=\"#node_modules-package-lookups\">bare specifier <code>node_modules</code> package lookup</a>.</p>\n<p>TypeScript’s implementation for resolving a module specifier through <code>\"exports\"</code> to a file path follows Node.js exactly. Once a file path is resolved, however, TypeScript will still <a href=\"#file-extension-substitution\">try multiple file extensions</a> in order to prioritize finding types.</p>\n<p>When resolving through <a href=\"https://nodejs.org/api/packages.html#conditional-exports\">conditional <code>\"exports\"</code></a>, TypeScript always matches the <code>\"types\"</code> and <code>\"default\"</code> conditions if present. Additionally, TypeScript will match a versioned types condition in the form <code>\"types@{selector}\"</code> (where <code>{selector}</code> is a <code>\"typesVersions\"</code>-compatible version selector) according to the same version-matching rules implemented in <a href=\"#packagejson-typesversions\"><code>\"typesVersions\"</code></a>. Other non-configurable conditions are dependent on the <code>moduleResolution</code> mode and specified in the following sections. Additional conditions can be configured to match with the <code>customConditions</code> compiler option.</p>\n<p>Note that the presence of <code>\"exports\"</code> prevents any subpaths not explicitly listed or matched by a pattern in <code>\"exports\"</code> from being resolved.</p>\n<h5 id=\"example-subpaths-conditions-and-extension-substitution\" style=\"position:relative;\"><a href=\"#example-subpaths-conditions-and-extension-substitution\" aria-label=\"example subpaths conditions and extension substitution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: subpaths, conditions, and extension substitution</h5>\n<p>Scenario: <code>\"pkg/subpath\"</code> is requested with conditions <code>[\"types\", \"node\", \"require\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) in a package directory with the following package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\".\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./index.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./index.cjs\"</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./subpath\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./subpath/index.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./subpath/index.cjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process within the package directory:</p>\n<ol>\n<li>Does <code>\"exports\"</code> exist? <strong>Yes.</strong></li>\n<li>Does <code>\"exports\"</code> have a <code>\"./subpath\"</code> entry? <strong>Yes.</strong></li>\n<li>The value at <code>exports[\"./subpath\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"import\"</code> match this request? <strong>No.</strong></li>\n<li>Does the second condition <code>\"require\"</code> match this request? <strong>Yes.</strong></li>\n<li>Does the path <code>\"./subpath/index.cjs\"</code> have a recognized TypeScript file extension? <strong>No, so use extension substitution.</strong></li>\n<li>Via <a href=\"#file-extension-substitution\">extension substitution</a>, try the following paths, returning the first one that exists, or <code>undefined</code> otherwise:\n<ol>\n<li><code>./subpath/index.cts</code></li>\n<li><code>./subpath/index.d.cts</code></li>\n<li><code>./subpath/index.cjs</code></li>\n</ol>\n</li>\n</ol>\n<p>If <code>./subpath/index.cts</code> or <code>./subpath.d.cts</code> exists, resolution is complete. Otherwise, resolution searches <code>node_modules/@types/pkg</code> and other <code>node_modules</code> directories in an attempt to resolve types, according to the <a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a> rules. If no types are found, a second pass through all <code>node_modules</code> resolves to <code>./subpath/index.cjs</code> (assuming it exists), which counts as a successful resolution, but one that does not provide types, leading to <code>any</code>-typed imports and a <code>noImplicitAny</code> error if enabled.</p>\n<h5 id=\"example-explicit-types-condition\" style=\"position:relative;\"><a href=\"#example-explicit-types-condition\" aria-label=\"example explicit types condition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: explicit <code>\"types\"</code> condition</h5>\n<p>Scenario: <code>\"pkg/subpath\"</code> is requested with conditions <code>[\"types\", \"node\", \"import\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) in a package directory with the following package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./subpath\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types/subpath/index.d.mts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"default\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./es/subpath/index.mjs\"</span></div><div class='line'><span style=\"color: #000000\">      },</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types/subpath/index.d.cts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"default\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./cjs/subpath/index.cjs\"</span></div><div class='line'><span style=\"color: #000000\">      }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process within the package directory:</p>\n<ol>\n<li>Does <code>\"exports\"</code> exist? <strong>Yes.</strong></li>\n<li>Does <code>\"exports\"</code> have a <code>\"./subpath\"</code> entry? <strong>Yes.</strong></li>\n<li>The value at <code>exports[\"./subpath\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"import\"</code> match this request? <strong>Yes.</strong></li>\n<li>The value at <code>exports[\"./subpath\"].import</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"types\"</code> match this request? <strong>Yes.</strong></li>\n<li>Does the path <code>\"./types/subpath/index.d.mts\"</code> have a recognized TypeScript file extension? <strong>Yes, so don’t use extension substitution.</strong></li>\n<li>Return the path <code>\"./types/subpath/index.d.mts\"</code> if the file exists, <code>undefined</code> otherwise.</li>\n</ol>\n<h5 id=\"example-versioned-types-condition\" style=\"position:relative;\"><a href=\"#example-versioned-types-condition\" aria-label=\"example versioned types condition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: versioned <code>\"types\"</code> condition</h5>\n<p>Scenario: using TypeScript 4.7.5, <code>\"pkg/subpath\"</code> is requested with conditions <code>[\"types\", \"node\", \"import\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) in a package directory with the following package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./subpath\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"types@&gt;=5.2\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./ts5.2/subpath/index.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"types@&gt;=4.6\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./ts4.6/subpath/index.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsold/subpath/index.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"default\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/subpath/index.js\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process within the package directory:</p>\n<ol>\n<li>Does <code>\"exports\"</code> exist? <strong>Yes.</strong></li>\n<li>Does <code>\"exports\"</code> have a <code>\"./subpath\"</code> entry? <strong>Yes.</strong></li>\n<li>The value at <code>exports[\"./subpath\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"types@>=5.2\"</code> match this request? <strong>No, 4.7.5 is not greater than or equal to 5.2.</strong></li>\n<li>Does the second condition <code>\"types@>=4.6\"</code> match this request? <strong>Yes, 4.7.5 is greater than or equal to 4.6.</strong></li>\n<li>Does the path <code>\"./ts4.6/subpath/index.d.ts\"</code> have a recognized TypeScript file extension? <strong>Yes, so don’t use extension substitution.</strong></li>\n<li>Return the path <code>\"./ts4.6/subpath/index.d.ts\"</code> if the file exists, <code>undefined</code> otherwise.</li>\n</ol>\n<h5 id=\"example-subpath-patterns\" style=\"position:relative;\"><a href=\"#example-subpath-patterns\" aria-label=\"example subpath patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: subpath patterns</h5>\n<p>Scenario: <code>\"pkg/wildcard.js\"</code> is requested with conditions <code>[\"types\", \"node\", \"import\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) in a package directory with the following package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"type\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"module\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"./*.js\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types/*.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"default\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/*.js\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process within the package directory:</p>\n<ol>\n<li>Does <code>\"exports\"</code> exist? <strong>Yes.</strong></li>\n<li>Does <code>\"exports\"</code> have a <code>\"./wildcard.js\"</code> entry? <strong>No.</strong></li>\n<li>Does any key with a <code>*</code> in it match <code>\"./wildcard.js\"</code>? <strong>Yes, <code>\"./*.js\"</code> matches and sets <code>wildcard</code> to be the substitution.</strong></li>\n<li>The value at <code>exports[\"./*.js\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"types\"</code> match this request? <strong>Yes.</strong></li>\n<li>In <code>./types/*.d.ts</code>, replace <code>*</code> with the substitution <code>wildcard</code>. <strong><code>./types/wildcard.d.ts</code></strong></li>\n<li>Does the path <code>\"./types/wildcard.d.ts\"</code> have a recognized TypeScript file extension? <strong>Yes, so don’t use extension substitution.</strong></li>\n<li>Return the path <code>\"./types/wildcard.d.ts\"</code> if the file exists, <code>undefined</code> otherwise.</li>\n</ol>\n<h5 id=\"example-exports-block-other-subpaths\" style=\"position:relative;\"><a href=\"#example-exports-block-other-subpaths\" aria-label=\"example exports block other subpaths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: <code>\"exports\"</code> block other subpaths</h5>\n<p>Scenario: <code>\"pkg/dist/index.js\"</code> is requested in a package directory with the following package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"main\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/index.js\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/index.js\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process within the package directory:</p>\n<ol>\n<li>Does <code>\"exports\"</code> exist? <strong>Yes.</strong></li>\n<li>The value at <code>exports</code> is a string—it must be a file path for the package root (<code>\".\"</code>).</li>\n<li>Is the request <code>\"pkg/dist/index.js\"</code> for the package root? <strong>No, it has a subpath <code>dist/index.js</code>.</strong></li>\n<li>Resolution fails; return <code>undefined</code>.</li>\n</ol>\n<p>Without <code>\"exports\"</code>, the request could have succeeded, but the presence of <code>\"exports\"</code> prevents resolving any subpaths that cannot be matched through <code>\"exports\"</code>.</p>\n<h4 id=\"packagejson-typesversions\" style=\"position:relative;\"><a href=\"#packagejson-typesversions\" aria-label=\"packagejson typesversions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json <code>\"typesVersions\"</code></h4>\n<p>A <a href=\"#node_modules-package-lookups\"><code>node_modules</code> package</a> or <a href=\"#directory-modules-index-file-resolution\">directory module</a> may specify a <code>\"typesVersions\"</code> field in its package.json to redirect TypeScript’s resolution process according to the TypeScript compiler version, and for <code>node_modules</code> packages, according to the subpath being resolved. This allows package authors to include new TypeScript syntax in one set of type definitions while providing another set for backward compatibility with older TypeScript versions (through a tool like <a href=\"https://github.com/sandersn/downlevel-dts\">downlevel-dts</a>). <code>\"typesVersions\"</code> is supported in all <code>moduleResolution</code> modes; however, the field is not read in situations when <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> are read.</p>\n<h5 id=\"example-redirect-all-requests-to-a-subdirectory\" style=\"position:relative;\"><a href=\"#example-redirect-all-requests-to-a-subdirectory\" aria-label=\"example redirect all requests to a subdirectory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: redirect all requests to a subdirectory</h5>\n<p>Scenario: a module imports <code>\"pkg\"</code> using TypeScript 5.2, where <code>node_modules/pkg/package.json</code> is:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"1.0.0\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./index.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typesVersions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"&gt;=3.1\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"ts3.1/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process:</p>\n<ol>\n<li>(Depending on compiler options) Does <code>\"exports\"</code> exist? <strong>No.</strong></li>\n<li>Does <code>\"typesVersions\"</code> exist? <strong>Yes.</strong></li>\n<li>Is the TypeScript version <code>>=3.1</code>? <strong>Yes. Remember the mapping <code>\"*\": [\"ts3.1/*\"]</code>.</strong></li>\n<li>Are we resolving a subpath after the package name? <strong>No, just the root <code>\"pkg\"</code>.</strong></li>\n<li>Does <code>\"types\"</code> exist? <strong>Yes.</strong></li>\n<li>Does any key in <code>\"typesVersions\"</code> match <code>./index.d.ts</code>? <strong>Yes, <code>\"*\"</code> matches and sets <code>index.d.ts</code> to be the substitution.</strong></li>\n<li>In <code>ts3.1/*</code>, replace <code>*</code> with the substitution <code>./index.d.ts</code>: <strong><code>ts3.1/index.d.ts</code></strong>.</li>\n<li>Does the path <code>./ts3.1/index.d.ts</code> have a recognized TypeScript file extension? <strong>Yes, so don’t use extension substitution.</strong></li>\n<li>Return the path <code>./ts3.1/index.d.ts</code> if the file exists, <code>undefined</code> otherwise.</li>\n</ol>\n<h5 id=\"example-redirect-requests-for-a-specific-file\" style=\"position:relative;\"><a href=\"#example-redirect-requests-for-a-specific-file\" aria-label=\"example redirect requests for a specific file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: redirect requests for a specific file</h5>\n<p>Scenario: a module imports <code>\"pkg\"</code> using TypeScript 3.9, where <code>node_modules/pkg/package.json</code> is:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"1.0.0\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./index.d.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typesVersions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"&lt;4.0\"</span><span style=\"color: #000000\">: { </span><span style=\"color: #0451A5\">\"index.d.ts\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"index.v3.d.ts\"</span><span style=\"color: #000000\">] }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process:</p>\n<ol>\n<li>(Depending on compiler options) Does <code>\"exports\"</code> exist? <strong>No.</strong></li>\n<li>Does <code>\"typesVersions\"</code> exist? <strong>Yes.</strong></li>\n<li>Is the TypeScript version <code>&#x3C;4.0</code>? <strong>Yes. Remember the mapping <code>\"index.d.ts\": [\"index.v3.d.ts\"]</code>.</strong></li>\n<li>Are we resolving a subpath after the package name? <strong>No, just the root <code>\"pkg\"</code>.</strong></li>\n<li>Does <code>\"types\"</code> exist? <strong>Yes.</strong></li>\n<li>Does any key in <code>\"typesVersions\"</code> match <code>./index.d.ts</code>? <strong>Yes, <code>\"index.d.ts\"</code> matches.</strong></li>\n<li>Does the path <code>./index.v3.d.ts</code> have a recognized TypeScript file extension? <strong>Yes, so don’t use extension substitution.</strong></li>\n<li>Return the path <code>./index.v3.d.ts</code> if the file exists, <code>undefined</code> otherwise.</li>\n</ol>\n<h4 id=\"packagejson-main-and-types\" style=\"position:relative;\"><a href=\"#packagejson-main-and-types\" aria-label=\"packagejson main and types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json <code>\"main\"</code> and <code>\"types\"</code></h4>\n<p>If a directory’s <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> field is not read (either due to compiler options, or because it is not present, or because the directory is being resolved as a <a href=\"#directory-modules-index-file-resolution\">directory module</a> instead of a <a href=\"#node_modules-package-lookups\"><code>node_modules</code> package</a>) and the module specifier does not have a subpath after the package name or package.json-containing directory, TypeScript will attempt to resolve from these package.json fields, in order, in an attempt to find the main module for the package or directory:</p>\n<ul>\n<li><code>\"types\"</code></li>\n<li><code>\"typings\"</code> (legacy)</li>\n<li><code>\"main\"</code></li>\n</ul>\n<p>The declaration file found at <code>\"types\"</code> is assumed to be an accurate representation of the implementation file found at <code>\"main\"</code>. If <code>\"types\"</code> and <code>\"typings\"</code> are not present or cannot be resolved, TypeScript will read the <code>\"main\"</code> field and perform <a href=\"#file-extension-substitution\">extension substitution</a> to find a declaration file.</p>\n<p>When publishing a typed package to npm, it’s recommended to include a <code>\"types\"</code> field even if <a href=\"#file-extension-substitution\">extension substitution</a> or <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> make it unnecessary, because npm shows a TS icon on the package registry listing only if the package.json contains a <code>\"types\"</code> field.</p>\n<h4 id=\"package-relative-file-paths\" style=\"position:relative;\"><a href=\"#package-relative-file-paths\" aria-label=\"package relative file paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package-relative file paths</h4>\n<p>If neither <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> nor <a href=\"#packagejson-typesversions\">package.json <code>\"typesVersions\"</code></a> apply, subpaths of a bare package specifier resolve relative to the package directory, according to applicable <a href=\"#relative-file-path-resolution\">relative path</a> resolution rules. In modes that respect [package.json <code>\"exports\"</code>], this behavior is blocked by the mere presence of the <code>\"exports\"</code> field in the package’s package.json, even if the import fails to resolve through <code>\"exports\"</code>, as demonstrated in <a href=\"#example-exports-block-other-subpaths\">an example above</a>. On the other hand, if the import fails to resolve through <code>\"typesVersions\"</code>, a package-relative file path resolution is attempted as a fallback.</p>\n<p>When package-relative paths are supported, they resolve under the same rules as any other relative path considering the <code>moduleResolution</code> mode and context. For example, in <a href=\"#node16-nodenext-1\"><code>--moduleResolution nodenext</code></a>, <a href=\"#directory-modules-index-file-resolution\">directory modules</a> and <a href=\"#extensionless-relative-paths\">extensionless paths</a> are only supported in <code>require</code> calls, not in <code>import</code>s:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: module.mts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg/dist/foo\"</span><span style=\"color: #000000\">;                </span><span style=\"color: #008000\">// ❌ import, needs `.js` extension</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg/dist/foo.js\"</span><span style=\"color: #000000\">;             </span><span style=\"color: #008000\">// ✅</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"pkg/dist/foo\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// ✅ require, no extension needed</span></div></code></div></pre>\n<h4 id=\"packagejson-imports-and-self-name-imports\" style=\"position:relative;\"><a href=\"#packagejson-imports-and-self-name-imports\" aria-label=\"packagejson imports and self name imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json <code>\"imports\"</code> and self-name imports</h4>\n<p>When <code>moduleResolution</code> is set to <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>, and <code>resolvePackageJsonImports</code> is not disabled, TypeScript will attempt to resolve import paths beginning with <code>#</code> through the the <code>\"imports\"</code> field of the nearest ancestor package.json of the importing file. Similarly, when <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code> lookups</a> are enabled, TypeScript will attempt to resolve import paths beginning with the current package name—that is, the value in the <code>\"name\"</code> field of the nearest ancestor package.json of the importing file—through the <code>\"exports\"</code> field of that package.json. Both of these features allow files in a package to import other files in the same package, replacing a relative import path.</p>\n<p>TypeScript follows Node.js’s resolution algorithm for <a href=\"https://nodejs.org/api/packages.html#subpath-imports\"><code>\"imports\"</code></a> and <a href=\"https://nodejs.org/api/packages.html#self-referencing-a-package-using-its-name\">self references</a> exactly up until a file path is resolved. At that point, TypeScript’s resolution algorithm forks based on whether the package.json containing the <code>\"imports\"</code> or <code>\"exports\"</code> being resolved belongs to a <code>node_modules</code> dependency or the local project being compiled (i.e., its directory contains the tsconfig.json file for the project that contains the importing file):</p>\n<ul>\n<li>If the package.json is in <code>node_modules</code>, TypeScript will apply <a href=\"#file-extension-substitution\">extension substitution</a> to the file path if it doesn’t already have a recognized TypeScript file extension, and check for the existence of the resulting file paths.</li>\n<li>If the package.json is part of the local project, an additional remapping step is performed in order to find the <em>input</em> TypeScript implementation file that will eventually produce the output JavaScript or declaration file path that was resolved from <code>\"imports\"</code>. Without this step, any compilation that resolves an <code>\"imports\"</code> path would be referencing output files from the <em>previous compilation</em> instead of other input files that are intended to be included in the current compilation. This remapping uses the <code>outDir</code>/<code>declarationDir</code> and <code>rootDir</code> from the tsconfig.json, so using <code>\"imports\"</code> usually requires an explicit <code>rootDir</code> to be set.</li>\n</ul>\n<p>This variation allows package authors to write <code>\"imports\"</code> and <code>\"exports\"</code> fields that reference only the compilation outputs that will be published to npm, while still allowing local development to use the original TypeScript source files.</p>\n<h5 id=\"example-local-project-with-conditions\" style=\"position:relative;\"><a href=\"#example-local-project-with-conditions\" aria-label=\"example local project with conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: local project with conditions</h5>\n<p>Scenario: <code>\"/src/main.mts\"</code> imports <code>\"#utils\"</code> with conditions <code>[\"types\", \"node\", \"import\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) in a project directory with a tsconfig.json and package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// tsconfig.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleResolution\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"node16\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"resolvePackageJsonImports\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"rootDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./src\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// package.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"imports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"#utils\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/utils.d.mts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/utils.d.cts\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process:</p>\n<ol>\n<li>Import path starts with <code>#</code>, try to resolve through <code>\"imports\"</code>.</li>\n<li>Does <code>\"imports\"</code> exist in the nearest ancestor package.json? <strong>Yes.</strong></li>\n<li>Does <code>\"#utils\"</code> exist in the <code>\"imports\"</code> object? <strong>Yes.</strong></li>\n<li>The value at <code>imports[\"#utils\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"import\"</code> match this request? <strong>Yes.</strong></li>\n<li>Should we attempt to map the output path to an input path? <strong>Yes, because:</strong>\n<ul>\n<li>Is the package.json in <code>node_modules</code>? <strong>No, it’s in the local project.</strong></li>\n<li>Is the tsconfig.json within the package.json directory? <strong>Yes.</strong></li>\n</ul>\n</li>\n<li>In <code>./dist/utils.d.mts</code>, replace the <code>outDir</code> prefix with <code>rootDir</code>. <strong><code>./src/utils.d.mts</code></strong></li>\n<li>Replace the output extension <code>.d.mts</code> with the corresponding input extension <code>.mts</code>. <strong><code>./src/utils.mts</code></strong></li>\n<li>Return the path <code>\"./src/utils.mts\"</code> if the file exists.</li>\n<li>Otherwise, return the path <code>\"./dist/utils.d.mts\"</code> if the file exists.</li>\n</ol>\n<h5 id=\"example-node_modules-dependency-with-subpath-pattern\" style=\"position:relative;\"><a href=\"#example-node_modules-dependency-with-subpath-pattern\" aria-label=\"example node_modules dependency with subpath pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: <code>node_modules</code> dependency with subpath pattern</h5>\n<p>Scenario: <code>\"/node_modules/pkg/main.mts\"</code> imports <code>\"#internal/utils\"</code> with conditions <code>[\"types\", \"node\", \"import\"]</code> (determined by <code>moduleResolution</code> setting and the context that triggered the module resolution request) with the package.json:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// /node_modules/pkg/package.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"name\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"imports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"#internal/*\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/internal/*.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./dist/internal/*.cjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Resolution process:</p>\n<ol>\n<li>Import path starts with <code>#</code>, try to resolve through <code>\"imports\"</code>.</li>\n<li>Does <code>\"imports\"</code> exist in the nearest ancestor package.json? <strong>Yes.</strong></li>\n<li>Does <code>\"#internal/utils\"</code> exist in the <code>\"imports\"</code> object? <strong>No, check for pattern matches.</strong></li>\n<li>Does any key with a <code>*</code> match <code>\"#internal/utils\"</code>? <strong>Yes, <code>\"#internal/*\"</code> matches and sets <code>utils</code> to be the substitution.</strong></li>\n<li>The value at <code>imports[\"#internal/*\"]</code> is an object—it must be specifying conditions.</li>\n<li>Does the first condition <code>\"import\"</code> match this request? <strong>Yes.</strong></li>\n<li>Should we attempt to map the output path to an input path? <strong>No, because the package.json is in <code>node_modules</code>.</strong></li>\n<li>In <code>./dist/internal/*.mjs</code>, replace <code>*</code> with the substitution <code>utils</code>. <strong><code>./dist/internal/utils.mjs</code></strong></li>\n<li>Does the path <code>./dist/internal/utils.mjs</code> have a recognized TypeScript file extension? <strong>No, try extension substitution.</strong></li>\n<li>Via <a href=\"#file-extension-substitution\">extension substitution</a>, try the following paths, returning the first one that exists, or <code>undefined</code> otherwise:\n<ol>\n<li><code>./dist/internal/utils.mts</code></li>\n<li><code>./dist/internal/utils.d.mts</code></li>\n<li><code>./dist/internal/utils.mjs</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"node16-nodenext-1\" style=\"position:relative;\"><a href=\"#node16-nodenext-1\" aria-label=\"node16 nodenext 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>node16</code>, <code>nodenext</code></h3>\n<p>These modes reflect the module resolution behavior of Node.js v12 and later. (<code>node16</code> and <code>nodenext</code> are currently identical, but if Node.js makes significant changes to its module system in the future, <code>node16</code> will be frozen while <code>nodenext</code> will be updated to reflect the new behavior.) In Node.js, the resolution algorithm for ECMAScript imports is significantly different from the algorithm for CommonJS <code>require</code> calls. For each module specifier being resolved, the syntax and the <a href=\"#module-format-detection\">module format of the importing file</a> are first used to determine whether the module specifier will be in an <code>import</code> or <code>require</code> in the emitted JavaScript. That information is then passed into the module resolver to determine which resolution algorithm to use (and whether to use the <code>\"import\"</code> or <code>\"require\"</code> condition for package.json <a href=\"#packagejson-exports\"><code>\"exports\"</code></a> or <a href=\"#packagejson-imports-and-self-name-imports\"><code>\"imports\"</code></a>).</p>\n<blockquote>\n<p>TypeScript files that are <a href=\"#module-format-detection\">determined to be in CommonJS format</a> may still use <code>import</code> and <code>export</code> syntax by default, but the emitted JavaScript will use <code>require</code> and <code>module.exports</code> instead. This means that it’s common to see <code>import</code> statements that are resolved using the <code>require</code> algorithm. If this causes confusion, the <code>verbatimModuleSyntax</code> compiler option can be enabled, which prohibits the use of <code>import</code> statements that would be emitted as <code>require</code> calls.</p>\n</blockquote>\n<p>Note that dynamic <code>import()</code> calls are always resolved using the <code>import</code> algorithm, according to Node.js’s behavior. However, <code>import()</code> types are resolved according to the format of the importing file (for backward compatibility with existing CommonJS-format type declarations):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @Filename: module.mts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./mod.js\"</span><span style=\"color: #000000\">;             </span><span style=\"color: #008000\">// `import` algorithm due to file format (emitted as-written)</span></div><div class='line'><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod.js\"</span><span style=\"color: #000000\">);                   </span><span style=\"color: #008000\">// `import` algorithm due to syntax (emitted as-written)</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod.js\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// `import` algorithm due to file format</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod\"</span><span style=\"color: #000000\">);        </span><span style=\"color: #008000\">// `require` algorithm due to syntax (emitted as `require`)</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// @Filename: commonjs.cts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./mod\"</span><span style=\"color: #000000\">;                </span><span style=\"color: #008000\">// `require` algorithm due to file format (emitted as `require`)</span></div><div class='line'><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod.js\"</span><span style=\"color: #000000\">);                   </span><span style=\"color: #008000\">// `import` algorithm due to syntax (emitted as-written)</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">import</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod\"</span><span style=\"color: #000000\">);    </span><span style=\"color: #008000\">// `require` algorithm due to file format</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./mod\"</span><span style=\"color: #000000\">);        </span><span style=\"color: #008000\">// `require` algorithm due to syntax (emitted as `require`)</span></div></code></div></pre>\n<h4 id=\"implied-and-enforced-options-1\" style=\"position:relative;\"><a href=\"#implied-and-enforced-options-1\" aria-label=\"implied and enforced options 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implied and enforced options</h4>\n<ul>\n<li><code>--moduleResolution node16</code> and <code>nodenext</code> must be paired with their <a href=\"#node16-nodenext\">corresponding <code>module</code> value</a>.</li>\n</ul>\n<h4 id=\"supported-features\" style=\"position:relative;\"><a href=\"#supported-features\" aria-label=\"supported features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supported features</h4>\n<p>Features are listed in order of precedence.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>import</code></th>\n<th><code>require</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#paths\"><code>paths</code></a></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#baseurl\"><code>baseUrl</code></a></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a></td>\n<td>✅ matches <code>types</code>, <code>node</code>, <code>import</code></td>\n<td>✅ matches <code>types</code>, <code>node</code>, <code>require</code></td>\n</tr>\n<tr>\n<td><a href=\"#packagejson-imports-and-self-name-imports\">package.json <code>\"imports\"</code> and self-name imports</a></td>\n<td>✅ matches <code>types</code>, <code>node</code>, <code>import</code></td>\n<td>✅ matches <code>types</code>, <code>node</code>, <code>require</code></td>\n</tr>\n<tr>\n<td><a href=\"#packagejson-typesversions\">package.json <code>\"typesVersions\"</code></a></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#package-relative-file-paths\">Package-relative paths</a></td>\n<td>✅ when <code>exports</code> not present</td>\n<td>✅ when <code>exports</code> not present</td>\n</tr>\n<tr>\n<td><a href=\"#relative-file-path-resolution\">Full relative paths</a></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#extensionless-relative-paths\">Extensionless relative paths</a></td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"#directory-modules-index-file-resolution\">Directory modules</a></td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"bundler\" style=\"position:relative;\"><a href=\"#bundler\" aria-label=\"bundler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>bundler</code></h3>\n<p><code>--moduleResolution bundler</code> attempts to model the module resolution behavior common to most JavaScript bundlers. In short, this means supporting all the behaviors traditionally associated with Node.js’s CommonJS <code>require</code> resolution algorithm like <a href=\"#node_modules-package-lookups\"><code>node_modules</code> lookups</a>, <a href=\"#directory-modules-index-file-resolution\">directory modules</a>, and <a href=\"#extensionless-relative-paths\">extensionless paths</a>, while also supporting newer Node.js resolution features like <a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> and <a href=\"#packagejson-imports-and-self-name-imports\">package.json <code>\"imports\"</code></a>.</p>\n<p>This is very similar to the behavior of <a href=\"#node16-nodenext-1\"><code>node16</code> and <code>nodenext</code></a> resolving in CommonJS mode, but in <code>bundler</code>, the conditions used to resolve package.json <code>\"exports\"</code> and <code>\"imports\"</code> are always <code>\"types\"</code> and <code>\"import\"</code>. To understand why, let’s compare against what happens to an import in a <code>.ts</code> file in <code>nodenext</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>In <code>--module nodenext --moduleResolution nodenext</code>, the <code>--module</code> setting first <a href=\"#module-format-detection\">determines</a> whether the import will be emitted to the <code>.js</code> file as an <code>import</code> or <code>require</code> call and passes that information to TypeScript’s module resolver, which decides whether to match <code>\"import\"</code> or <code>\"require\"</code> conditions accordingly. This ensures TypeScript’s module resolution process, although working from input <code>.ts</code> files, reflects what will happen in Node.js’s module resolution process when it runs the output <code>.js</code> files.</p>\n<p>When using a bundler, on the other hand, the bundler typically processes the raw <code>.ts</code> files directly and runs its module resolution process on the untransformed <code>import</code> statement. In this scenario, it doesn’t make a lot of sense to think about how TypeScript will emit the <code>import</code>, because TypeScript isn’t being used to emit anything at all. As far as the bundler is concerned, <code>import</code>s are <code>import</code>s and <code>require</code>s are <code>require</code>s, so the conditions used to resolve package.json <code>\"exports\"</code> and <code>\"imports\"</code> are determined by the syntax seen in the input <code>.ts</code> file. Likewise, the conditions TypeScript’s module resolution process uses in <code>--moduleResolution bundler</code> are <em>also</em> determined by the input syntax in input TypeScript files—it’s just that <code>require</code> calls are not currently resolved at all:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Some library file:</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">module</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">;    </span><span style=\"color: #008000\">// Resolved with \"import\" condition</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">pkg2</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Not allowed</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">pkg</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"pkg\"</span><span style=\"color: #000000\">);   </span><span style=\"color: #008000\">// Not an error, but not resolved to anything</span></div><div class='line'><span style=\"color: #000000\">   </span><span style=\"color: #008000\">// ^? any</span></div></code></div></pre>\n<p>Since TypeScript doesn’t currently support resolving <code>require</code> calls in <code>--moduleResolution bundler</code>, everything it <em>does</em> resolve uses the <code>\"import\"</code> condition.</p>\n<h4 id=\"implied-and-enforced-options-2\" style=\"position:relative;\"><a href=\"#implied-and-enforced-options-2\" aria-label=\"implied and enforced options 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implied and enforced options</h4>\n<ul>\n<li><code>--moduleResolution bundler</code> must be paired with the <code>--module esnext</code> option.</li>\n<li><code>--moduleResolution bundler</code> implies <code>--allowSyntheticDefaultImports</code>.</li>\n</ul>\n<h4 id=\"supported-features-1\" style=\"position:relative;\"><a href=\"#supported-features-1\" aria-label=\"supported features 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supported features</h4>\n<ul>\n<li><a href=\"#paths\"><code>paths</code></a> ✅</li>\n<li><a href=\"#baseurl\"><code>baseUrl</code></a> ✅</li>\n<li><a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a> ✅</li>\n<li><a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> ✅ matches <code>types</code>, <code>import</code></li>\n<li><a href=\"#packagejson-imports-and-self-name-imports\">package.json <code>\"imports\"</code> and self-name imports</a> ✅ matches <code>types</code>, <code>import</code></li>\n<li><a href=\"#packagejson-typesversions\">package.json <code>\"typesVersions\"</code></a> ✅</li>\n<li><a href=\"#package-relative-file-paths\">Package-relative paths</a> ✅ when <code>exports</code> not present</li>\n<li><a href=\"#relative-file-path-resolution\">Full relative paths</a> ✅</li>\n<li><a href=\"#extensionless-relative-paths\">Extensionless relative paths</a> ✅</li>\n<li><a href=\"#directory-modules-index-file-resolution\">Directory modules</a> ✅</li>\n</ul>\n<h3 id=\"node10-formerly-known-as-node\" style=\"position:relative;\"><a href=\"#node10-formerly-known-as-node\" aria-label=\"node10 formerly known as node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>node10</code> (formerly known as <code>node</code>)</h3>\n<p><code>--moduleResolution node</code> was renamed to <code>node10</code> (keeping <code>node</code> as an alias for backward compatibility) in TypeScript 5.0. It reflects the CommonJS module resolution algorithm as it existed in Node.js versions earlier than v12. It should no longer be used.</p>\n<h4 id=\"supported-features-2\" style=\"position:relative;\"><a href=\"#supported-features-2\" aria-label=\"supported features 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Supported features</h4>\n<ul>\n<li><a href=\"#paths\"><code>paths</code></a> ✅</li>\n<li><a href=\"#baseurl\"><code>baseUrl</code></a> ✅</li>\n<li><a href=\"#node_modules-package-lookups\"><code>node_modules</code> package lookups</a> ✅</li>\n<li><a href=\"#packagejson-exports\">package.json <code>\"exports\"</code></a> ❌</li>\n<li><a href=\"#packagejson-imports-and-self-name-imports\">package.json <code>\"imports\"</code> and self-name imports</a> ❌</li>\n<li><a href=\"#packagejson-typesversions\">package.json <code>\"typesVersions\"</code></a> ✅</li>\n<li><a href=\"#package-relative-file-paths\">Package-relative paths</a> ✅</li>\n<li><a href=\"#relative-file-path-resolution\">Full relative paths</a> ✅</li>\n<li><a href=\"#extensionless-relative-paths\">Extensionless relative paths</a> ✅</li>\n<li><a href=\"#directory-modules-index-file-resolution\">Directory modules</a> ✅</li>\n</ul>\n<h3 id=\"classic\" style=\"position:relative;\"><a href=\"#classic\" aria-label=\"classic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>classic</code></h3>\n<p>Do not use <code>classic</code>.</p>","headings":[{"value":"Module syntax","depth":2},{"value":"Importing and exporting TypeScript-specific declarations","depth":3},{"value":"Type-only imports and exports","depth":3},{"value":"import() types","depth":3},{"value":"export = and import = require()","depth":3},{"value":"Ambient modules","depth":3},{"value":"The module compiler option","depth":2},{"value":"node16, nodenext","depth":3},{"value":"Module format detection","depth":4},{"value":"Interoperability rules","depth":4},{"value":"Emit","depth":4},{"value":"Implied and enforced options","depth":4},{"value":"Summary","depth":4},{"value":"es2015, es2020, es2022, esnext","depth":3},{"value":"Summary","depth":4},{"value":"Examples","depth":4},{"value":"commonjs","depth":3},{"value":"Summary","depth":4},{"value":"Examples","depth":4},{"value":"system","depth":3},{"value":"Summary","depth":4},{"value":"Examples","depth":4},{"value":"amd","depth":3},{"value":"Summary","depth":4},{"value":"Examples","depth":4},{"value":"umd","depth":3},{"value":"Summary","depth":4},{"value":"Examples","depth":4},{"value":"The moduleResolution compiler option","depth":2},{"value":"Common features and processes","depth":3},{"value":"File extension substitution","depth":4},{"value":"Relative file path resolution","depth":4},{"value":"Extensionless relative paths","depth":4},{"value":"Directory modules (index file resolution)","depth":4},{"value":"paths","depth":4},{"value":"Overview","depth":5},{"value":"paths does not affect emit","depth":5},{"value":"paths should not point to monorepo packages or node_modules packages","depth":5},{"value":"Relationship to baseUrl","depth":5},{"value":"Wildcard substitutions","depth":5},{"value":"Fallbacks","depth":5},{"value":"baseUrl","depth":4},{"value":"node_modules package lookups","depth":4},{"value":"package.json \"exports\"","depth":4},{"value":"Example: subpaths, conditions, and extension substitution","depth":5},{"value":"Example: explicit \"types\" condition","depth":5},{"value":"Example: versioned \"types\" condition","depth":5},{"value":"Example: subpath patterns","depth":5},{"value":"Example: \"exports\" block other subpaths","depth":5},{"value":"package.json \"typesVersions\"","depth":4},{"value":"Example: redirect all requests to a subdirectory","depth":5},{"value":"Example: redirect requests for a specific file","depth":5},{"value":"package.json \"main\" and \"types\"","depth":4},{"value":"Package-relative file paths","depth":4},{"value":"package.json \"imports\" and self-name imports","depth":4},{"value":"Example: local project with conditions","depth":5},{"value":"Example: node_modules dependency with subpath pattern","depth":5},{"value":"node16, nodenext","depth":3},{"value":"Implied and enforced options","depth":4},{"value":"Supported features","depth":4},{"value":"bundler","depth":3},{"value":"Implied and enforced options","depth":4},{"value":"Supported features","depth":4},{"value":"node10 (formerly known as node)","depth":3},{"value":"Supported features","depth":4},{"value":"classic","depth":3}],"frontmatter":{"permalink":"/docs/handbook/modules/reference.html","title":"Modules - Reference","disable_toc":null,"handbook":null,"oneline":"Module syntax and compiler options reference","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"3-modules---reference","slug":"/docs/handbook/modules/reference.html","repoPath":"/packages/documentation/copy/en/modules-reference/Reference.md","lang":"en","modifiedTime":"2024-10-21T12:33:11.301Z"}},"staticQueryHashes":[]}