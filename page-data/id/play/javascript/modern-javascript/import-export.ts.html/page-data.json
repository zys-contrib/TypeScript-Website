{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/modern-javascript/import-export.ts.html","result":{"pageContext":{"name":"Import Export","title":"Import Export","lang":"id","html":"\n JavaScript menambahkan sintaks impor dan ekspor pada tahun 2016\n dan TypeScript memiliki dukungan penuh untuk sintaks ini yang\n berfungsi untuk menghubungkan berkas dengan berkas lain dan\n pada modul eksternal lain. TypeScript memperluas sintaks\n impor dan ekspor dengan memperbolehkan tipe data untuk\n diimpor dan diekspor pada kode program.\n\n Berikut merupakan kode program untuk mengimpor sebuah modul.\n\n<code><pre>\nimport { danger, message, warn, DangerDSLType } from \"danger\";\n\n</pre></code>\n// Kode di atas berusaha mengimpor beberapa impor bernama\n dari sebuah modul NodeJS bernama `danger`. Walaupun ada \n lebih dari empat objek yang dapat diimpor, namun hanya\n empat objek tersebut yang akan diimpor.\n\n Dengan mengimpor objek secara spesifik, perkakas yang\n tersedia dapat menghapus kode-kode yang tidak dibutuhkan\n pada aplikasi Anda, dan membantu Anda untuk mengetahui\n impor apa yang digunakan pada sebuah berkas.\n\n Pada contoh di atas: `danger`, `message`. dan `warn`\n merupakan impor JavaScript - sedangkan `DangerDSLType`\n merupakan sebuah antarmuka.\n\n TypeScript mengizinkan pengembang untuk mendokumentasikan\n kode program yang mereka buat menggunakan JSDoc, sehingga\n dokumentasi juga dapat diimpor. Sebagai contoh, apabila\n Anda menyorot pada bagian-bagian kode di bawah, Anda\n dapat melihat penjelasan mengenai bagian tersebut.\n\n<code><pre>\ndanger.git.modified_files;\n\n</pre></code>\n// Apabila Anda ingin mengetahui cara untuk menyediakan\n anotasi pada dokumentasi, silahkan baca pada \n example:jsdoc-support\n\n Cara lain untuk mengimpor kode adalah dengan menggunakan\n ekspor bawaan milik modul. Berikut merupakan contoh\n dari penggunaan ekspor bawaan pada modul `debug`, yang\n mengekspos sebuah fungsi yang membuat sebuah fungsi pencatatan.\n\n<code><pre>\nimport debug from \"debug\";\nconst log = debug(\"playground\");\nlog(\"Started running code\");\n\n</pre></code>\n// Karena sifat dari ekspor bawaan yang tidak memiliki\n nama yang tetap, ekspor-ekspor bawaan dapat membingungkan\n perkakas analisis seperti dukungan _refactoring_ pada\n TypeScript, namun ekspor bawaan tetap memiliki kegunaan.\n\n Karena ada sejarah panjang dari impor dan ekspor kode\n dalam JavaScript, terdapat sebuah bagian yang membingungkan\n dari ekspor bawaan: Beberapa ekspor memiliki dokumentasi\n yang menyatakan bahwa Anda dapat menulis sebuah impor sebagai\n berikut:\n\n<code><pre>\nimport req from \"request\";\n\n</pre></code>\n// Namun, impor tersebut akan gagal, kemudian Anda menemukan\n sebuah pertanyaan pada StackOverflow yang menyarankan\n Anda untuk mengimpor seperti berikut:\n\n<code><pre>\nimport * as req from \"request\";\n\n</pre></code>\n// Dan cara tersebut akan berhasil. Alasan mengenai keberhasilan\n tersebut akan dibahas pada bagian akhir dari dokumentasi ini.\n\n Supaya dapat diimpor, kode harus dapat diekspor. Cara modern\n untuk menyatakan ekspor adalah menggunakan kata kunci `export`.\n\n<code><pre>\n/** Jumlah stiker yang tersedia */\nexport const jumlahStiker = 11;\n\n</pre></code>\n// Ekspor tersebut dapat diimpor pada berkas lain dengan cara:\n\n import { jumlahStiker } from \"./path/to/file\"\n\n Anda dapat menulis `export` sebanyak mungkin pada sebuah \n berkas sesuai keinginan Anda. Ekspor bawaan juga dapat\n dinyatakan dengan cara yang sama.\n\n<code><pre>\n/** Menghasilkan stiker untuk Anda */\nconst pembuatStiker = () => { };\nexport default pembuatStiker;\n\n</pre></code>\n// Ekspor tersebut dapat diimpor pada berkas lain dengan cara:\n\n import perolehStiker from \"./path/to/file\"\n\n Impor bawaan dapat dinamai sesuai keinginan pada berkas\n tempat bagian tersebut diimpor.\n\n Ada cara-cara lain untuk melakukan impor, namun contoh-contoh\n di atas merupakan cara-cara yang umum digunakan pada kode\n program modern. Membahas seluruh cara untuk mengimpor\n kode merupakan sebuah topik yang panjang pada buku pegangan berikut:\n\n https://www.typescriptlang.org/docs/handbook/modules.html\n\n Namun, untuk menjawab pertanyaan terakhir, apabila Anda\n melihat kode JavaScript pada contoh ini - Anda akan melihat:\n\n var pembuatStiker = function () { };\n exports.default = pembuatStiker;\n\n Kode di atas akan menetapkan properti bawaan dari objek `exports`\n menjadi `pembuatStiker`. Ada kode-kode lain yang menetapkan\n `exports` bawaan menjadi sebuah fungsi.\n\n TypeScript memilih untuk berpegang pada spesifikasi ECMAScript\n untuk menangani kasus-kasus tersebut, yaitu dengan melemparkan\n sebuah galat. Namun, terdapat opsi `esModuleInterop` pada kompilator\n untuk menangani kasus-kasus tersebut secara otomatis.\n\n Apabila Anda mengaktifkan opsi tersebut pada contoh ini, Anda\n akan melihat bahwa galat akan hilang.\n","redirectHref":"id/play/?#example/import-export"}},"staticQueryHashes":[]}