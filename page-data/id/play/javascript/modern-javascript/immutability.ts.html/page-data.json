{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/modern-javascript/immutability.ts.html","result":{"pageContext":{"name":"Immutability","title":"Immutability","lang":"id","html":" JavaScript adalah bahasa pemrograman yang memiliki\n beberapa cara untuk mendeklarasikan objek-objek yang tidak\n berubah. Cara yang paling menonjol adalah dengan menggunakan\n kata kunci `const` - yang menandakan bahwa nilai tidak akan\n berubah.\n\n<code><pre>\nconst haloDunia = \"Halo Dunia\";\n\n</pre></code>\n// Sekarang, Anda tidak dapat mengubah nilai haloDunia, TypeScript\n akan melempar sebuah galat mengenai hal tersebut, untuk\n mencegah Anda mendapatkan galat saat program dieksekusi.\n\n You cannot change helloWorld now, TypeScript will give\n you an error about this, because you would get one at\n runtime instead.\n\n<code><pre>\nhaloDunia = \"Hai Dunia\";\n\n</pre></code>\n// Mengapa Anda harus peduli pada nilai yang tidak dapat berubah?\n Alasan utamanya adalah untuk mengurangi kompleksitas pada kode\n program Anda. Apabila Anda dapat mengurangi hal-hal yang nilainya\n dapat berubah, Anda akan mengurangi hal yang harus Anda pantau.\n\n Menggunakan kata kunci `const` merupakan langkah awal yang baik,\n namun cara tersebut tidak akan sepenuhnya berhasil apabila\n digunakan untuk objek.\n\n<code><pre>\nconst objekKonstanta = {\n  pesan: \"Halo Dunia\",\n};\n\n</pre></code>\n// objekKonstanta tidak sepenuhnya konstan, karena Anda masih\n dapat mengubah beberapa bagian dari objek tersebut, sebagai\n contoh Anda dapat mengubah nilai dari `pesan`:\n\n<code><pre>\nobjekKonstanta.pesan = \"Hai Dunia\";\n\n</pre></code>\n// Kata kunci `const` menandakan objek yang ditunjuk memiliki\n nilai yang tidak akan berubah, namun bagian internal\n dari objek tersebut tetap dapat diubah. Perilaku tersebut\n dapat diubah menggunakan `Object.freeze`.\n\n<code><pre>\nconst objekKonstantaPasti = Object.freeze({\n  pesan: \"Halo Dunia\",\n});\n\n</pre></code>\n// Ketika sebuah objek dibekukan, maka Anda tidak dapat\n mengubah bagian internal dari objek tersebut. TypeScript\n akan meleparkan sebuah galat pada kasus ini:\n\n<code><pre>\nobjekKonstantaPasti.pesan = \"Hai Dunia\";\n\n// Cara tersebut juga dapat digunakan pada _array_:\n\nconst arrayYangDibekukan = Object.freeze([\"Hai\"]);\narrayYangDibekukan.push(\"Dunia\");\n\n</pre></code>\n// Menggunakan kata kunci `Object.freeze` menjamin\n bahwa nilai objek tidak akan berubah, termasuk\n internal dari objek tersebut.\n\n TypeScript memiliki beberapa _hook_ sintaks tambahan untuk\n meningkatkan kemampuan Anda ketika bekerja dengan data\n yang tidak berubah yang dapat Anda temukan pada bagian\n contoh TypeScript berikut:\n\n example:literals\n example:type-widening-and-narrowing\n","redirectHref":"id/play/?#example/immutability"}},"staticQueryHashes":[]}