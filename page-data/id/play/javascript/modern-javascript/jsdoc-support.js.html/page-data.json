{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/modern-javascript/jsdoc-support.js.html","result":{"pageContext":{"name":"JSDoc Support","title":"JSDoc Support","lang":"id","html":"\n TypeScript memiliki banyak dukungan untuk JSDoc. Bahkan\n Anda dapat membuat berkas JavaScript biasa dan menggunakan\n anotasi JSDoc untuk membuat lingkungan pengembangan yang\n kaya dukungan.\n\n Sebuah komentar JSDoc merupakan sebuah komentar lebih dari\n satu baris yang dimulai dengan dua buah bintang, kontras\n dengan komentar biasa yang dimulai dengan satu bintang. \n\n<code><pre>\n/* Ini adalah komentar biasa */\n/** Ini adalah komentar JSDoc */\n\n</pre></code>\n// Komentar JSDoc akan terhubung dengan kode JavaScript\n terdekat yang ada di bawah komentar tersebut.\n\n<code><pre>\nconst contohVariabel = \"Hai\";\n\n</pre></code>\n// Apabila Anda menyorot `contohVariabel`, Anda dapat melihat\n bahwa teks yang ada dalam JSDoc diikutsertakan.\n\n Komentar JSDoc merupakan sebuah cara untuk memberikan informasi\n mengenai tipe data pada TypeScript dan editor Anda. Mari kita\n mulai dengan menyetel sebuah tipe data dari variabel menjadi\n tipe data bawaan.\n\n Pada seluruh contoh di bawah ini, Anda dapat menyorot nama\n variabel dan pada baris selanjutnya, coba ketik [example].\n untuk melihat opsi penyelesaian otomatis.\n\n<code><pre>\n/** @type {number} */\nvar bilanganKu;\n\n</pre></code>\n// Anda dapat melihat seluruh _tag_ yang didukung pada buku\n pegangan berikut:\n\n https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc\n\n Namun, kita akan mencoba beberapa contoh umum berikut ini. Anda\n juga dapat menyalin dan menempel setiap contoh dari buku panduan\n kesini.\n\n Mengimpor tipe data dari berkas konfigurasi JavaScript:\n\n<code><pre>\n/** @type { import(\"webpack\").Config } */\nconst config = {};\n\n</pre></code>\n// Membuat tipe data yang kompleks yang dapat digunakan\n kembali di banyak tempat:\n\n<code><pre>\n/**\n * @typedef {Object} Pengguna - Akun pengguna\n * @property {string} nama - nama yang digunakan untuk menunjukkan pengguna\n * @property {number} id - sebuah ID yang unik\n */\n\n// Kemudian, Anda dapat menggunakannya sebagai nama pada `typedef`:\n\n/** @type { Pengguna } */\nconst pengguna = {};\n\n</pre></code>\n// Berikut merupakan cara untuk menyingkat definisi\n tipe data pada TypeScript, yang kemudian dapat Anda\n gunakan pada `type` dan `typedef`:\n\n<code><pre>\n/** @type {{ owner: Pengguna, nama: string }} */\nconst sumberDaya;\n\n/** @typedef {{owner: Pengguna, nama: string}} SumberDaya */\n\n/** @type {SumberDaya} */\nconst sumberDayaLain;\n\n// Mendeklarasikan fungsi yang memiliki tipe data:\n\n/**\n * Menjumlahkan dua buah bilangan\n * @param {number} a Bilangan pertama\n * @param {number} b Bilangan kedua\n * @returns {number}\n */\nfunction jumlahDuaBilangan(a, b) {\n  return a + b;\n}\n\n</pre></code>\n// Anda dapat menggunakan perkakas tipe data TypeScript,\n seperti `union`:\n\n<code><pre>\n/** @type {(string | boolean)} */\nlet stringAtauBoolean = \"\";\nstringAtauBoolean = false;\n\n</pre></code>\n// Menambahkan dokumentasi pada objek global menggunakan JSDoc\n merupakan proses yang lebih melibatkan VS Code, yang dapat \n Anda lihat melalui dokumentasi VS Code berikut:\n\n https://code.visualstudio.com/docs/nodejs/working-with-javascript#_global-variables-and-type-checking\n\n Menambahkan komentaar JSDoc pada fungsi yang Anda buat\n merupakan solusi yang menguntungkan; Anda mendapat\n dukungan perkakas yang lebih baik dan pengguna API\n Anda juga dapat menikmatinya. \n","redirectHref":"id/play/?#example/jsdoc-support"}},"staticQueryHashes":[]}