{"componentChunkName":"component---src-templates-play-example-tsx","path":"/id/play/javascript/modern-javascript/async-await.ts.html","result":{"pageContext":{"name":"Async Await","title":"Async Await","lang":"id","html":"\n JavaScript modern menambahkan sebuah cara untuk menangani _callback_\n dengan cara yang elegan melalui API berbasis Promise yang memiliki\n sintaks khusus yang mengizinkan Anda untuk menganggap kode\n program yang bersifat asinkron seperti kode program biasa\n\n Seperti fitur lainnya, Promise memiliki kekurangan dalam\n hal kompleksitas kode program: membuat sebuah fungsi\n sebagai fungsi asinkron akan membuat nilai kembalian\n dibungkus dalam Promise. Apa yang sebelumnya mengembalikan\n sebuah string, sekarang akan mengembalikan Promise<string>. \n\n<code><pre>\nconst fungsi = () => \":wave:\";\nconst fungsiAsinkron = async () => \":wave:\";\n\nconst string = fungsi();\nconst stringDalamPromise = fungsiAsinkron();\n\nstring.length;\n\n// stringDalamPromise merupakan sebuah Promise, bukan string:\n\nstringDalamPromise.length;\n\n</pre></code>\n// Anda dapat menggunakan kata kunci `await` untuk mengubah\n sebuah Promise menjadi nilai yang ditampung oleh Promise\n tersebut. Untuk saat ini, kata kunci tersebut hanya dapat\n digunakan pada fungsi asinkron.\n\n<code><pre>\nconst fungsiPembungkus = async () => {\n  const string = fungsi();\n  const stringDalamPromise = await fungsiAsinkron();\n\n  // Melalui kata kunci `await`, sekarang `stringDalamPromise`\n  // merupakan sebuah string.\n  string.length;\n  stringDalamPromise.length;\n};\n\n</pre></code>\n// Kode program yang berjalan menggunakan kata kunci `await`\n dapat melempar galat, dan hal tersebut menjadi penting\n karena galat tersebut harus ditangani pada bagian manapun.\n\n<code><pre>\nconst fungsiYangMelemparGalat = async () => {\n  throw new Error(\"Jangan panggil fungsi ini\");\n};\n\n</pre></code>\n// Anda dapat membungkus pemanggilan fungsi asinkron pada sebuah\n blok try-catch untuk menangani kasus di mana fungsi yang\n dipanggil melakukan sesuatu yang tidak diharapkan.\n\n<code><pre>\nconst menangkapFungsiAsinkron = async () => {\n  const nilaiKembalian = \"Halo dunia!\";\n  try {\n    await fungsiYangMelemparGalat();\n  } catch (error) {\n    console.error(\"fungsiYangMelemparGalat gagal dijalankan\", error);\n  }\n  return nilaiKembalian;\n};\n\n</pre></code>\n// Karena ergonomi dari API ini yang mengharuskan Anda untuk\n mengembalikan satu nilai kembalian, atau melempar galat, Anda\n sebaiknya memberikan informasi mengenai nilai-nilai yang\n terdapat pada nilai yang dikembalikan dan melempat galat\n apabila sesuatu yang benar-benar spesial terjadi.\n\n<code><pre>\nconst contohFungsiAkarKuadrat = async (masukan: any) => {\n  if (isNaN(masukan)) {\n    throw new Error(\"Masukan hanya dapat berupa angka\");\n  }\n\n  if (masukan < 0) {\n    return { sukses: false, pesan: \"Tidak bisa mencari akar bilangan negatif\" };\n  } else {\n    return { sukses: true, nilai: Math.sqrt(masukan) };\n  }\n};\n\n</pre></code>\n// Lalu pengguna fungsi tersebut dapat memeriksa respon\n dan mengetahui apa yang harus dilakukan dengan nilai kembalian\n tersebut. Walaupun contoh berikut merupakan contoh yang\n sederhana, ketika Anda mulai bekerja dengan kode\n yang berhubungan dengan jaringan, API sebaiknya didokumentasikan.\n\n<code><pre>\nconst periksaAkarKuadrat = async (nilai: number) => {\n  const respon = await contohFungsiAkarKuadrat(nilai);\n  if (respon.sukses) {\n    respon.nilai;\n  }\n};\n\n// Sintaks Async / Await mengubah kode yang seperti berikut:\n\n</pre></code>\n// getResponse(url, (response) => {\n   getResponse(response.url, (secondResponse) => {\n     const responseData = secondResponse.data\n     getResponse(responseData.url, (thirdResponse) => {\n       ...\n     })\n   })\n })\n\n Menjadi linear seperti berikut:\n\n const response = await getResponse(url)\n const secondResponse = await getResponse(response.url)\n const responseData = secondResponse.data\n const thirdResponse = await getResponse(responseData.url)\n ...\n\n Sintaks Async / Await dapat membuat kode program lebih condong\n ke sisi kiri, dan dibaca pada ritme yang konsisten.\n","redirectHref":"id/play/?#example/async-await"}},"staticQueryHashes":[]}