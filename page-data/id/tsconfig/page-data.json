{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/id/tsconfig","result":{"data":{"markdownRemark":{"id":"985959c1-8bc2-568b-b8c4-e36e1546285f","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan daftar berkas yang diijinkan untuk disertakan dalam program. Kesalahan terjadi jika salah satu berkas tidak dapat ditemukan.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {},</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span></div><div class='line'><span style=\"color: #000000\">  ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ini berguna ketika Anda hanya memiliki sejumlah berkas kecil dan tidak perlu menggunakan <em>glob</em> untuk mereferensikan banyak berkas.\nJika Anda membutuhkannya, gunakan <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Nilai <code>extends</code> adalah string yang berisi jalur ke berkas konfigurasi lain untuk mewarisi.\nJalur tersebut mungkin menggunakan resolusi gaya Node.js.</p>\n<p>Konfigurasi dari berkas dasar dimuat terlebih dahulu, kemudian diganti dengan yang ada di berkas konfigurasi pewarisan. Semua jalur relatif yang ditemukan di berkas konfigurasi akan diselesaikan secara relatif terhadap berkas konfigurasi tempat asalnya.</p>\n<p>Perlu diperhatikan bahwa <code>files</code>,<code>include</code> dan <code>exclude</code> dari berkas konfigurasi pewaris menimpa konfigurasi yang berasal dari berkas konfigurasi asal, dan sirkularitas antara berkas konfigurasi tidak diperbolehkan.</p>\n<p>Saat ini, satu-satunya properti tingkat atas yang dikecualikan dari pewarisan adalah <a href=\"#references\"><code>referensi</code></a>.</p>\n<h4 id=\"contoh\" style=\"position:relative;\"><a href=\"#contoh\" aria-label=\"contoh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh</h4>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#noImplicitAny'><data-lsp lsp=\"Enable error reporting for expressions and declarations with an implied `any` type..\">noImplicitAny</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Properti dengan jalur relatif yang ditemukan di berkas konfigurasi, yang tidak dikecualikan dari pewarisan, akan diresolusikan secara relatif terhadap berkas konfigurasi tempat asalnya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Disertakan (_Include_) - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan sebuah susunan nama berkas atau contoh berkas untuk dimasukkan ke dalam program.\nNama berkas ini diselesaikan dengan direktori yang berisi berkas <code>tsconfig.json</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Yang akan mencakup:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock</span></div></code></div></pre>\n<p><code>include</code> dan <code>exclude</code> mendukung karakter untuk membuat pola <em>global</em>:</p>\n<ul>\n<li><code>*</code> cocok dengan nol atau lebih karakter (tidak termasuk pemisah direktori)</li>\n<li><code>?</code> cocok dengan salah satu karakter (tidak termasuk pemisah direktori)</li>\n<li><code>**/</code> cocok dengan direktori apa pun yang bertingkat.</li>\n</ul>\n<p>Jika contoh umum tidak menyertakan ekstensi berkas, maka hanya berkas dengan ekstensi yang didukung yang disertakan (misalnya <code>.ts</code>,<code>.tsx</code>, dan <code>.d.ts</code> secara default, dengan<code>.js</code> dan <code>. jsx</code> jika <code>allowJs</code> disetel ke true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[]</code> if <a href=\"#files\"><code>files</code></a> is specified; <code>**/*</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan <em>array</em> nama berkas atau pola yang harus dilewati saat menyelesaikan <code>include</code>.</p>\n<p><strong>Penting</strong>: <code>exclude</code> <em>hanya</em> mengubah berkas mana yang disertakan sebagai hasil dari pengaturan <code>include</code>.\nBerkas yang ditentukan oleh <code>exclude</code> masih bisa menjadi bagian dari basis kode Anda karena pernyataan <code>import</code> dalam kode Anda, penyertaan <code>types</code>, perintah <code>/// &#x3C;reference</code>, atau ditentukan dalam daftar <code>files</code>.</p>\n<p>Ini bukan mekanisme yang <strong>mencegah</strong> berkas untuk disertakan dalam basis kode - ini hanya mengubah apa yang ditemukan oleh setelan <code>include</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>node_modules bower_components jspm_packages <a href=\"#outDir\"><code>outDir</code></a></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> Referensi - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Referensi proyek adalah cara untuk menyusun program TypeScript Anda menjadi bagian-bagian yang lebih kecil.\nMenggunakan Referensi Proyek dapat sangat meningkatkan waktu interaksi build dan editor, menerapkan pemisahan logika antar komponen, dan mengatur kode Anda dengan cara yang baru dan lebih baik.</p>\n<p>Anda dapat membaca lebih lanjut tentang bagaimana cara kerja referensi di bagian <a href=\"/docs/handbook/project-references.html\">Referensi Proyek</a> dari buku pegangan</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"pilihan---pilihan-kompiler\" style=\"position:relative;\"><a href=\"#pilihan---pilihan-kompiler\" aria-label=\"pilihan   pilihan kompiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pilihan - Pilihan Kompiler</h3>\n<p>Banyak pilihan yang membuat jumlah besar di pengaturan Typescript’s dan itu juga meliputi bagaimana bahasa seharusnya bekerja.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Type_Checking_6248\">Type Checking</a></li>\n<li><a href=\"#Modules_6244\">Modules</a></li>\n<li><a href=\"#Emit_6246\">Emit</a></li>\n<li><a href=\"#JavaScript_Support_6247\">JavaScript Support</a></li>\n<li><a href=\"#Editor_Support_6249\">Editor Support</a></li>\n<li><a href=\"#Interop_Constraints_6252\">Interop Constraints</a></li>\n<li><a href=\"#Backwards_Compatibility_6253\">Backwards Compatibility</a></li>\n<li><a href=\"#Language_and_Environment_6254\">Language and Environment</a></li>\n<li><a href=\"#Compiler_Diagnostics_6251\">Compiler Diagnostics</a></li>\n<li><a href=\"#Projects_6255\">Projects</a></li>\n<li><a href=\"#Output_Formatting_6256\">Output Formatting</a></li>\n<li><a href=\"#Completeness_6257\">Completeness</a></li>\n<li><a href=\"#Command_line_Options_6171\">Baris Perintah</a></li>\n<li><a href=\"#Watch_and_Build_Modes_6250\">Opsi Pengawasan</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Type_Checking_6248' ><a href='#Type_Checking_6248' name='Type_Checking_6248' aria-label=\"Link to the section Type Checking\" aria-labelledby='Type_Checking_6248'>#</a>Type Checking</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Izinkan Kode Tak Terjangkau - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Kapan:</p>\n<ul>\n<li><code>undefined</code> <em>default</em> memberikan saran sebagai peringatan kepada editor</li>\n<li><code>true</code> kode yang tidak dapat dijangkau diabaikan</li>\n<li><code>false</code> menimbulkan galat kompiler tentang kode yang tidak dapat dijangkau</li>\n</ul>\n<p>Peringatan ini hanya tentang kode yang terbukti tidak dapat dijangkau karena penggunaan sintaks JavaScript, misalnya:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Dengan <code>\"allowUnreachableCode\": false</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(n: number): boolean' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA'>Try</a></div></pre>\n<p>Ini tidak mempengaruhi galat atas dasar kode yang <em>muncul</em> menjadi tidak dapat dijangkau karena menggolongkan uraian.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Izinkan Label yang Tidak Digunakan - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Setel ke <em>false</em> untuk menonaktifkan peringatan tentang label yang tidak digunakan.</p>\n<p>Label sangat jarang di JavaScript dan biasanya menunjukkan upaya untuk menulis objek dengan tepat:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function verifikasiUmur(umur: number): void' >verifikasiUmur</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) umur: number' >umur</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Lupa menulis pernyataan &apos;return&apos;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) umur: number' >umur</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">18</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    <data-err>terverifikasi</data-err>: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSb0kBrIoklUAtnWgAKOjuip6WztACUoAN55QoQizoAHIqC2R6JSYlDOYNACeROJERLIA5NCQ4ro0EXagSqAGRqAAfKAAjDhWtvb24jAK0Eqq6pKo4tB0kADciQC+eI1AA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Selalu Tepat - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Pastikan bahwa berkas Anda diurai di Mode strict EcmaScript, dan mengeluarkan “use strict” untuk setiap berkas asal.</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a> mode strict diperkenalkan di ES5 dan memberikan perubahan perilaku pada waktu proses mesin JavaScript untuk meningkatkan kinerja dan membuat kesalahan muncul agar diabaikan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exactOptionalPropertyTypes-config'><a aria-label=\"Link to the compiler option: exactOptionalPropertyTypes\" id='exactOptionalPropertyTypes' href='#exactOptionalPropertyTypes' name='exactOptionalPropertyTypes' aria-labelledby=\"exactOptionalPropertyTypes-config\">#</a> Exact Optional Property Types - <code>exactOptionalPropertyTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on <code>type</code> or <code>interfaces</code> which have a <code>?</code> prefix.</p>\n<p>For example, this interface declares that there is a property which can be one of two strings: ‘dark’ or ‘light’ or it should not be in the object.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">UserDefaults</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// The absence of a value represents 'system'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">colorThemeOverride</span><span style=\"color: #000000\">?: </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Without this flag enabled, there are three values which you can set <code>colorThemeOverride</code> to be: “dark”, “light” and <code>undefined</code>.</p>\n<p>Setting the value to <code>undefined</code> will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn’t quite accurate; <code>colorThemeOverride: undefined</code> is not the same as <code>colorThemeOverride</code> not being defined. For example, <code>\"colorThemeOverride\" in settings</code> would have different behavior with <code>undefined</code> as the key compared to not being defined.</p>\n<p><code>exactOptionalPropertyTypes</code> makes TypeScript truly enforce the definition provided as an optional property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getUserSettings(): UserDefaults' >getUserSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// But not:</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span><span class=\"code\">2412</span></span><span class=\"error-behind\">Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9efACwBGXkww5EFAGYJIoAKoMKAEUgKArvkQNQAbyahQ8LPizEaAC0gBbSMgBu7DABNIAfh4Aid7DEANa+oAA+oL74GADmNoi+ANxMAL5MnvD4gUpy2jhI2DigMZCIqhQAyqWYODEMABQAlDzlxJo6egzJrAC0ffDaiH09TOY4DIigaog1daAAvMWlrVUz0nVNydOzDAB05pbWdo4ubp4LkQHBSUzb63sHVrYOTq7ExB5Ki1Gx8TcsYAAQoNQDgsIguLdqvd9hYnsdXmcvqA8p45NJIO5EkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code>, <code>return</code>, or <code>throw</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">:</span></div><span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARKQAbqSQ4daGTi5koACMnt4+sv5BIWHh0AAmhfGJ3moYpPAA1oYAvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Di beberapa kasus, dimana tidak ada anotasi tipe yang ada, TypeScript akan kembali ke suatu tipe dari <code>any</code> untuk suatu variabel yang saat itu tidakbisa simpulkan tipenya.</p>\n<p>Ini dapat menyebabkan beberapa kesalahan untuk dilewatkan, sebagai contoh:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Bukan kesalahan?</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQAIQYBrMhynVKFMgAtZAfmGh07StGTUAdMmgBzHgcoMARlgBOXAMy9eAbloBfetwAsAJldAA'>Try</a></div></pre>\n<p>Menyalakan opsi <code>noImplicitAny</code> namun TypeScript akan mengeluarkan kesalahan setiap kali <code>any</code> yang ia simpulkan:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) s: any' >s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> No Implicit Override - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaATA9gO4B2I+YuAFAJQbY7QD0j0AIgKYBmYSIALtATsAFmABuAS3wAnegF9MCzKEgwAyqOntc8ZGnYAPPu2K4Yu1HRwESZCjSsNm0APJj206RNztoffNAA5uwCEsScAZzS+GgoYMQAntAQ+EjSwOwQ8opAA'>Try</a></div></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from algorithm</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaECmALkgA4AUAlBtjtAPS3QAieAZmEiAdAngBZgA3AJYB7AE7UAvpmmZQkGAFkAMvGRo8ADwJ4AdgBMYa1FRz4iZSlhp0GAeQF4xYofrzQCI6AHNC0IbosXixiImhgIN7iQgS8KFIymHLgUNAAyvxiePrGGtp6hnCIJtbQ+iIA7rogImD6FKY09NAOTi5uHl6+XAFB0CFh0ChgugCeuCJIYsB4EAmSQA'>Try</a></div></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='(method) SharedAlbum.setup(): void' >setup</data-lsp></data-err></span><span style=\"color: #000000\">() {}</span></div><span class=\"error\"><span>This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><span class=\"code\">4114</span></span><span class=\"error-behind\">This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwPIDcBTAJyNQBMCAoECYo6IgZwC5QAWARg7cvWQENGjUAEFkAIwCu8UAG9KoUIwJZJiABQBKOQF9Ke3gKGgAsgBkxUmQQAeWApDLDL0uQtDRCJcgSUq1Wrr6lIaCwgDKABb8RARkLtZ2Dk6iEq7yisqqGtqyejpAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat diaktifkaan, TypeScript akan melakukan pengecekan semua jalur kode di suatu fungsi untuk memastikan mereka mengembalikan suatu nilai.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string' >lookupHeadphonesManufacturer</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: \"blue\" | \"black\"' >color</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"black\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: \"blue\" | \"black\"' >color</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgA2ccA1qQA4ASkAhgBNOACwaREAWT7lSxPjVLQYACkpwW0VACIARk1KQtoAD6hdTeWy0BKVImrRa5AOagA3oVChaxUKvUIoAC8IWZ6Bjbunl6gStSKjLr81IhaANzRAL6gkEyIkFExYXD56VmEmUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menimbulkan kesalahan kepada pernyataan ‘this’ dengan tersiratnya tipe ‘any’.</p>\n<p>Sebagai contoh, class dibawah ini mengembalikan suatu fungsi yang mencoba mengakses <code>this.width</code> dan <code>this.height</code> – tapi konteksnya\nuntuk <code>this</code> didalam fungsi yang didalam <code>getAreaFunction</code> ini, bukanlah instansi dari class Rectangle.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Rectangle' >Rectangle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number' >height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number' >height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number' >width</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number' >width</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number' >height</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number' >height</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Rectangle.getAreaFunction(): () => number' >getAreaFunction</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >width</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >height</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQEAuJAdgOZGSgDeeooA7gJYATWgAtUDAK4BbAEYwA3F1DDIfJsNpips6AsUE4DRLWji6CABT8ho0BJkwANEpVqNtrTACUHRdxF9EADorEVAAXl5BEQVuP2EAwOVVdXDnZNoY0ABfPEUmSFoAQWhIEgAxcQY6PgNzb05Y0BLacWgGUAAzSuqDUDqfRu5m1vb-IJDhUAAqUDHEl3VM7izMnKygA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> No Property Access From Index Signature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GameSettings' >GameSettings</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Known up-front properties</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' >speed</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"fast\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"medium\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"slow\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' >quality</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"high\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"low\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Assume anything unknown to the interface</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// is a string.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getSettings(): GameSettings' >getSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' style='border-bottom: solid 2px lightgrey;'>speed</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' style='border-bottom: solid 2px lightgrey;'>quality</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(property) GameSettings.quality: \"high\" | \"low\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Unknown key accessors are allowed on</span></div><div class='line'><span style=\"color: #008000\">// this object, and are `string`</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(index) GameSettings[string]: string' style='border-bottom: solid 2px lightgrey;'>username</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(index) GameSettings[string]: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgAmkBjAGwENpJQAzAVwDsCAXASzltAHNIGBlL529ogAUASlQBxEgFtIvBv0EBubCFABaDQWoMNa7E1oMYlEgQqSZchYlABvbKFCqA0rTgB3NtQAOayvENQb3hvGGZIRAdQRFDIXFQAIhNEBgTQAB9QBJlcJmopNMyExCIPBOVHAEdqEiImBgBPRIALJnZmwqzS93LsKNUAQUREfIoSWgaGVoFQOgBrN09QBjhl5ooDI2gTM36wJhsSaIZoA3YAOiiAbTnIJuPTgQBdVBTH9mUAXz6CVhTovhnGwAXg4XCsQNEykQgIEiHOMUgcWUqkcaNAAD0APzYGHyIHnaq1eoNFFgdGObF9VQAVVoCw8bFuDVApjMwwQh3IrKI3TioFYKjAUwOAoARgArQgMAA0rNouFZ3IABm8zsrcbDBOdqDDoLRpJAyRTKVigA'>Try</a></div></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getSettings(): GameSettings' >getSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' >speed</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' >quality</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// This would need to be settings[\"username\"];</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(index) GameSettings[string]: string' style='border-bottom: solid 2px lightgrey;'>username</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><span class=\"code\">4111</span></span><span class=\"error-behind\">Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(index) GameSettings[string]: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgQQHZwAK8ADjAC4CeAggMZ2SKIBi8AtgJL4AmkAHgGUAlgHN8AQwoBXaJGx86AGwlzQAM2n46FYXHyhRkCoOO78oxAAoAlKgDiE9pFMVzlgNzZh+CjHUSjKCOzq7uiKAA3tigoIjkkDyoAEQBiBTJoAA+oMnOPMLS7Jk5yYhKcADuyV6xAI7SEkrC1CkAFmJtJbkV1bWgANoA1pBUqOnQPqIAuuMUkxZeAL64YAC0G3TSFBtr2HT66XFmUxEAvIbGYae2XognFogAdPGQiXcPlk8NTS1UXqtQAAVDoRSpwaRKHigfBvaEUOCgABGkGOblOA2S0nu0EkzmS0w+6MeT2xMDxkC8eFiNNAAD0APxAA'>Try</a></div></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> No Unchecked Indexed Access - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Unknown properties are covered by this index signature.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propName: string' >propName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Declared as existing</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Not declared, but because of the index</span></div><div class='line'><span style=\"color: #008000\">// signature, then it is considered a string</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnv: string' style='border-bottom: solid 2px lightgrey;'>nodeEnv</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnv: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL5yvggANhbIViDcyEQYnOhYuAREYKQUQjSKyAAiEMUWDnCU-l4mMjTlleTO5MmEyAC8VZhRzGxC42DIOJQL1VHiQh30yAB6APxyHQw4G4UlkXYANE5hG449cGHkKDgwbu4oPn87SU5CCIXCkSeHiIyGAGy8ZTwoN892QcC46VG62Qml8dXmiwwyxEnVQAH1UAxiAclEczkA'>Try</a></div></pre>\n<p>Turning on <code>noUncheckedIndexedAccess</code> will add <code>undefined</code> to any un-declared field in the type.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Declared as existing</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Not declared, but because of the index</span></div><div class='line'><span style=\"color: #008000\">// signature, then it is considered a string</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnv: string | undefined' style='border-bottom: solid 2px lightgrey;'>nodeEnv</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string | undefined' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnv: string | undefined</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL40isgAApqqCO4QCGr2AJIgvn72TAhI5OQFSgC03QhhYN2dNL4IADYWyFYg3MhEGJzoWLgERGCkFEIdyAAilWORDnCU-l4mMjST0+TO5MmEyAC8M5hRzGxCF2DIOJSPs1HiQkK9GQAD0APxyQoMHCfYZ7ewAGicfSclTgYXIKBwMDcFWQPn8m3IQRC4UiSI8RHxny8EzwxN8+2QcC46TOH2Qml8CweTwwLxEW1QAH1UAxiIClMDwUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createKeyboard: (modelID: number) => {&#10;    type: string;&#10;    modelID: number;&#10;}' >createKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) modelID: number' >modelID</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'defaultModelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'defaultModelID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number' >modelID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25FLh4oA0igCeAI2i5yaUAF5QACgC20NCnwBJACL1EaqRQCUSgHygA3kVD8uvUFoBmuBPh4BZTdv1LQACYWAG47UEEeBHJIG1AeCQAHFHoAIgBrSRk5NFSAGlANLV09UABfMIqgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters in functions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createDefaultKeyboard: (modelID: number) => {&#10;    type: string;&#10;    modelID: number;&#10;}' >createDefaultKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) modelID: number' >modelID</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>'modelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modelID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number' >modelID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjhRYSAERQAzLAgA2RANIoAngCNouNKAC8oABT5oaFLICSYxonyrSASh0A+UAG9yoQb36hj0uUQCyRibmOqAATGwA3G6gwkQIOJAuoETKAA4ojABEANYq6ppZADSghsZmFt5SMvKB5SEAvtFNQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a></p>\n</li><li><p><a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a></p>\n</li><li><p><a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a></p>\n</li><li><p><a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a></p>\n</li><li><p><a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a></p>\n</li><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li><li><p><a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li><li><p><a href='#useUnknownInCatchVariables' aria-label=\"Jump to compiler option info for useUnknownInCatchVariables\" ><code>useUnknownInCatchVariables</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// With strictBindCallApply on</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n1: number' >n1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n2: number' >n2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [x: string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizAB1eNAAWoGAmRoseQqXIVQndEwBmddMng7Qe9AAoAHjUUYA5gEpQAbyahQsBtDqx0oElweBgBJdGhrRwBuJgBfcUQdGFB0AEZQAF4zdAA6RAJ8C0NMBj0MBkwAGlAAIlSABhrohKToFL5M7LyCoqxS8qqzAkgGaKA'>Try</a></div></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// With strictBindCallApply off</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Note: No error; return type is &apos;any&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: any' >n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIoA6vNABagwJkaLHkKlyFUAHtatZrQCu6ZPCno66ABQAPGgIwBzAJSgA3s1ChYjaAtjqSuWEwCS6aDqMBuZgF9W7AByUtCMNMGgjLCwUrBeVjZ26tAUJIyg8JCgAOS46BTZzIhqMKDqALwaAHSIBPiaSpiMtBiMmAA0dAyM3kA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Unsafe assignment</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let func: StringOrNumberFunc' >func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Unsafe call - will crash</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='let func: (ns: string | number) => void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACqubTUIW6Q8MIYCaQY0MxK0DTsVOFCwjHxyansmVw+Hd2QvSGIDPSgALSg9vD6srBuABas7NwAjAAM3kA'>Try</a></div></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Unsafe assignment is prevented</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let func: StringOrNumberFunc' >func</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQAJSONkAaUAtABqUIylk4AGTgB3GAGEAhokj1u3ANw4AvjhxkAngAdIoAGU2Dk4AeWgAOQIAWwAjGAAxYhJQAF5QeiIUUFZ2LlAAH1AiGPjoXlSAPlAANzgKABMXHBBQAFUs6zx-W0QKTiJoyCIyUApEUB9oSBrhskgGnElRwlJUILywyNLE5LTaIicgA'>Try</a></div></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Methodish = {&#10;    func(x: string | number): void;&#10;}' >Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Ultimately an unsafe assignment, but not detected</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const m: Methodish' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Methodish = {&#10;    func(x: string | number): void;&#10;}' >Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const m: Methodish' >m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshwAsD2ATAlgZwVAvFA3gFBRQBmArgHYDGAFAB4BcUGwATmpQOZQA+UlcgFsARhDYBKZgDckaFAG5CAXyWEKNYGiSUylBs1YduEgsSjUdGJABsIAOhtIutAEQAJCDacAaKK6gAaih6e2AkABkkAHdxAGEAQwwIWgkJJWVCQgB6bKgAVRstIQTgLxAoBN0qDATSaCSMNC5KIQhKYD8RcmABJF6UeAhqMpRCS0pWKCFmOERUTGw8IhINamZSSh8VJSF7NdoARgAGdKA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} | undefined (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>'loggedInUser' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'loggedInUser' is possibly 'undefined'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM1QBGADgAYAWUgKBAgBcBDaAc0gdQFEBlNc-nTDhEDaAEsAxgwByAVwA2CgMIALSJIDWiGgBMNClpFCS4AO1GgFcVu10BJMwFVEMM0wC2kVKIlnWANw0NKYWDKByrkigALygANo0oKAA3qDuXqgARADyAEYAnlkANKBM7KjERAC+xUmp6Z7eoFkAEpAwTCVlFaCEoLU0ALpBIeaW1raQDs5RsRFRiAB0AGbiZroAFJtyAJSxAHwRSxnGMedWNnaOLm5Nu0GhiHAKkEuTm5PXszBL5ZAPIA'>Try</a></div></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// When strictNullChecks: true</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// When strictNullChecks: false the undefined is removed from the type system,</span></div><div class='line'><span style=\"color: #008000\">// allowing you to write code which assumes it always found a result</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class UserAccount' >UserAccount</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.accountType: string' >accountType</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"user\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) UserAccount.email: string' >email</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.address: string | undefined' >address</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Note that this.email is not set</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAKqIwCCBBcArgHYAuoA3nqKCyQFtIqRG2gBLFgHMA3D1AkGzdgBUAngAdIoALygARExrR9c+ZAElxREWMmz5JACZPokcrYnTQAH1CsnSAAzSUgnM15GFlFoJgI2BAAKfiFPewBKLnleNgALcUQAOhTtPRK5Xl4QUAA5ODZtPJIOPILCiysiUAK+etAaNnkAXzwhoA'>Try</a></div></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as potentially <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useUnknownInCatchVariables-config'><a aria-label=\"Link to the compiler option: useUnknownInCatchVariables\" id='useUnknownInCatchVariables' href='#useUnknownInCatchVariables' name='useUnknownInCatchVariables' aria-labelledby=\"useUnknownInCatchVariables-config\">#</a> Use Unknown In Catch Variables - <code>useUnknownInCatchVariables</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from <code>any</code> to <code>unknown</code>. Allowing for code like:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We have to verify err is an</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error before using it as one.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var err: Error' >err</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFcGcFMFUB2BrRB7A7ogkogwgIYAuAxgBYBqBATgJYEBGANrNAFBHUCeoA3m6FAhQAOjFsAvqBLFyoABSxq1AJR8BQsAHVYoMgQBuuomlBG6AMx5LqoWtFAFEG4TbS2GsC+90xaiAHM7IkcHNERYEQ1aCwUbO0RoIicSWDRYgFFldzV+QUEScOg0FhEmNADFZREAW1ZoAgDYFQBuDQlJIA'>Try</a></div></pre>\n<p>This pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown <em>is</em> a Error subclass ahead of time. With the flag <code>useUnknownInCatchVariables</code> enabled, then you do not need the additional syntax (<code>: unknown</code>) nor a linter rule to try enforce this behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Modules_6244' ><a href='#Modules_6244' name='Modules_6244' aria-label=\"Link to the section Modules\" aria-labelledby='Modules_6244'>#</a>Modules</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowArbitraryExtensions-config'><a aria-label=\"Link to the compiler option: allowArbitraryExtensions\" id='allowArbitraryExtensions' href='#allowArbitraryExtensions' name='allowArbitraryExtensions' aria-labelledby=\"allowArbitraryExtensions-config\">#</a> Allow Arbitrary Extensions - <code>allowArbitraryExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 5.0, when an import path ends in an extension that isn’t a known JavaScript or TypeScript file extension, the compiler will look for a declaration file for that path in the form of <code>{file basename}.d.{extension}.ts</code>.\nFor example, if you are using a CSS loader in a bundler project, you might want to write (or generate) declaration files for those stylesheets:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">css</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* app.css */</span></div><div class='line'><span style=\"color: #800000\">.cookie-banner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #E50000\">display</span><span style=\"color: #000000\">: </span><span style=\"color: #0451A5\">none</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// app.d.css.ts</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">css</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">css</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// App.tsx</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">styles</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./app.css\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">styles</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div></code></div></pre>\n<p>By default, this import will raise an error to let you know that TypeScript doesn’t understand this file type and your runtime might not support importing it.\nBut if you’ve configured your runtime or bundler to handle it, you can suppress the error with the new <code>--allowArbitraryExtensions</code> compiler option.</p>\n<p>Note that historically, a similar effect has often been achievable by adding a declaration file named <code>app.css.d.ts</code> instead of <code>app.d.css.ts</code> - however, this just worked through Node’s <code>require</code> resolution rules for CommonJS.\nStrictly speaking, the former is interpreted as a declaration file for a JavaScript file named <code>app.css.js</code>.\nBecause relative files imports need to include extensions in Node’s ESM support, TypeScript would error on our example in an ESM file under <code>--moduleResolution node16</code> or <code>nodenext</code>.</p>\n<p>For more information, read up <a href=\"https://github.com/microsoft/TypeScript/issues/50133\">the proposal for this feature</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/51435\">its corresponding pull request</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowImportingTsExtensions-config'><a aria-label=\"Link to the compiler option: allowImportingTsExtensions\" id='allowImportingTsExtensions' href='#allowImportingTsExtensions' name='allowImportingTsExtensions' aria-labelledby=\"allowImportingTsExtensions-config\">#</a> Allow Importing TS Extensions - <code>allowImportingTsExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--allowImportingTsExtensions</code> allows TypeScript files to import each other with a TypeScript-specific extension like <code>.ts</code>, <code>.mts</code>, or <code>.tsx</code>.</p>\n<p>This flag is only allowed when <code>--noEmit</code> or <code>--emitDeclarationOnly</code> is enabled, since these import paths would not be resolvable at runtime in JavaScript output files.\nThe expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between <code>.ts</code> files work.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Izinkan Akses Global Umd - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel ke <em>true</em>, <code>allowUmdGlobalAccess</code> memungkinkan Anda mengakses ekspor UMD sebagai global dari dalam berkas modul. Berkas modul adalah berkas yang telah diimpor dan/atau diekspor. Tanpa opsi ini, menggunakan ekspor dari modul UMD memerlukan deklarasi impor.</p>\n<p>Contoh kasus penggunaan untuk opsi ini adalah proyek web yang anda tahu bahwa pustaka tertentu (seperti jQuery atau Lodash) akan selalu tersedia saat runtime, tetapi Anda tidak dapat mengaksesnya dengan impor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> Base Url - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memungkinkan Anda menyetel direktori dasar untuk menyelesaikan nama modul dengan benar.</p>\n<p>Anda dapat menentukan folder root di mana Anda dapat melakukan keputusan berkas yang sesungguhnya, misalnya :</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json</span></div></code></div></pre>\n<p>Dengan <code>\"baseUrl\": \"./\"</code> di dalam proyek ini TypeScript akan mencari berkas yang dimulai dari folder yang sama dengan <code>tsconfig.json</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello/world\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Jika Anda lelah cara impor selalu seperti <code>\"../\"</code> atau <code>\"./\"</code>. Atau harus untuk merubah saat Anda memindahkan berkas, ini adalah cara terbaik untuk memperbaikinya.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='customConditions-config'><a aria-label=\"Link to the compiler option: customConditions\" id='customConditions' href='#customConditions' name='customConditions' aria-labelledby=\"customConditions-config\">#</a> Custom Conditions - <code>customConditions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--customConditions</code> takes a list of additional <a href=\"https://nodejs.org/api/packages.html#nested-conditions\">conditions</a> that should succeed when TypeScript resolves from an <a href=\"https://nodejs.org/api/packages.html#exports\"><code>exports</code></a> or <a href=\"https://nodejs.org/api/packages.html#imports\"><code>imports</code></a> field of a <code>package.json</code>.\nThese conditions are added to whatever existing conditions a resolver will use by default.</p>\n<p>For example, when this field is set in a <code>tsconfig.json</code> as so:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleResolution\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"bundler\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"customConditions\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"my-condition\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Any time an <code>exports</code> or <code>imports</code> field is referenced in <code>package.json</code>, TypeScript will consider conditions called <code>my-condition</code>.</p>\n<p>So when importing from a package with the following <code>package.json</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\".\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"my-condition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./foo.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"node\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./bar.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./baz.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./biz.mjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript will try to look for files corresponding to <code>foo.mjs</code>.</p>\n<p>This field is only valid under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Sets the module system for the program. See the <a href=\"/docs/handbook/modules/theory.html#the-module-output-format\">theory behind TypeScript’s <code>module</code> option</a> and <a href=\"/docs/handbook/modules/reference.html#the-module-compiler-option\">its reference page</a> for more information. You very likely want <code>\"nodenext\"</code> for modern Node.js projects.</p>\n<p>Changing <code>module</code> affects <a href=\"#moduleResolution\"><code>moduleResolution</code></a> which <a href=\"/docs/handbook/modules/reference.html#the-moduleresolution-compiler-option\">also has a reference page</a>.</p>\n<p>Here’s some example output for this file:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const twoPi: number' >twoPi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRCgAtNux8i2zerBQ4SNJlDREAE3pUC1aKiatQAb268BwsaAC+oJDMuKigAEQUwHiEJGQEYWq0jCxs0ZxEAO64vlI8-EKi4gBUoKpAA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHHtkQCcvYuXUyAA590oAN6gAbgENihUgHkAZgAVUoAL6hlvZKABEAOmA16kdDPrpIBgNyZMpAB4iuYsxdDp4sdaABeaTkFFX8AKlAAJjsgA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADtZEAnF2FyTVZABw-SgA3qABuAQ2KFSAeQBmABVSgAvqDntkoAEQA6YAGNYDSOnEN0kbQG5MmUgA9+LQUZOD08WEtABeMZLS8j4AVKAATNZAA'>Try</a></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwA7WRAJ1dlck1WQAdO6UAG9QANyrFCpAPIAzAAqpQAX1ByOyUACIAdMADGsRpHRVG6SNoDcmTKQAeA1kKMmh6eLCWgAvOMlpeR8AKlAAJmsgA'>Try</a></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">System</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__moduleName</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">setters:</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">execute</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"twoPi\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwA7WRAJw9g8k1WQAHHulABvUADcAhsUKkA8gDMACqlABfUEu7JQAIgB0wAMawWdaS3SR9AbkyZSAD2EdRZi6PTxYa0AC8UrLyyv4AVKAATHZAA'>Try</a></div></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcG2RAJ3dnck1WQAO3dKADeoAG4BDYoVIB5AGYAFVKAC+oRV2SgARADpgAY1g1I6KTXSQ9AbkyYGQ9iNPmR6eLFWgAvJIyckq+AFSgAEx2QA'>Try</a></div></pre>\n<h4 id=\"es2015es6es2020es2022\" style=\"position:relative;\"><a href=\"#es2015es6es2020es2022\" aria-label=\"es2015es6es2020es2022 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2015</code>/<code>ES6</code>/<code>ES2020</code>/<code>ES2022</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGARgFZsxwA7WRAJ29m8iZUyAA790oAN6gAbgENihUgHkAZgAVUoAL6hVfZKABEAOmABjWO0jo57dJCMBuTJlIAPMdwmXrE9PCwmqAAvLIKSmrBAFSgNE5AA'>Try</a></div></pre>\n<p>In addition to the base functionality of <code>ES2015</code>/<code>ES6</code>, <code>ES2020</code> adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import\">dynamic <code>import</code>s</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\"><code>import.meta</code></a> while <code>ES2022</code> further adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await\">top level <code>await</code></a>.</p>\n<h4 id=\"node16nodenext\" style=\"position:relative;\"><a href=\"#node16nodenext\" aria-label=\"node16nodenext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>node16</code>/<code>nodenext</code></h4>\n<p>Available from 4.7+, the <code>node16</code> and <code>nodenext</code> modes integrate with Node’s <a href=\"https://nodejs.org/api/esm.html\">native ECMAScript Module support</a>. The emitted JavaScript uses either <code>CommonJS</code> or <code>ES2020</code> output depending on the file extension and the value of the <code>type</code> setting in the nearest <code>package.json</code>. Module resolution also works differently. You can learn more in the <a href=\"/docs/handbook/esm-node.html\">handbook</a> and <a href=\"/docs/handbook/modules/reference.html#node16-nodenext\">Modules Reference</a>.</p>\n<h4 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlADtYrTsxwbEAnF2FyTVZABw-SgA3qABuAQ2KFSAeQBmABVSgAvqDntkoAEQA6YAGNakdOKrpI2gNyZMpAB78Wgo1ROh08WEtABeMZLS8j4AVKAATFZAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>CommonJS</code> if <a href=\"#target\"><code>target</code></a> is <code>ES3</code> or <code>ES5</code>; <code>ES6</code>/<code>ES2015</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>none</code></p>\n</li><li><p><code>commonjs</code></p>\n</li><li><p><code>amd</code></p>\n</li><li><p><code>umd</code></p>\n</li><li><p><code>system</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li><li><p><a href='#allowImportingTsExtensions' aria-label=\"Jump to compiler option info for allowImportingTsExtensions\" ><code>allowImportingTsExtensions</code></a></p>\n</li><li><p><a href='#allowArbitraryExtensions' aria-label=\"Jump to compiler option info for allowArbitraryExtensions\" ><code>allowArbitraryExtensions</code></a></p>\n</li><li><p><a href='#resolveJsonModule' aria-label=\"Jump to compiler option info for resolveJsonModule\" ><code>resolveJsonModule</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the module resolution strategy:</p>\n<ul>\n<li>\n<p><code>'node16'</code> or <code>'nodenext'</code> for modern versions of Node.js. Node.js v12 and later supports both ECMAScript imports and CommonJS <code>require</code>, which resolve using different algorithms. These <code>moduleResolution</code> values, when combined with the corresponding <a href=\"#module\"><code>module</code></a> values, picks the right algorithm for each resolution based on whether Node.js will see an <code>import</code> or <code>require</code> in the output JavaScript code.</p>\n</li>\n<li>\n<p><code>'node10'</code> (previously called <code>'node'</code>) for Node.js versions older than v10, which only support CommonJS <code>require</code>. You probably won’t need to use <code>node10</code> in modern code.</p>\n</li>\n<li>\n<p><code>'bundler'</code> for use with bundlers. Like <code>node16</code> and <code>nodenext</code>, this mode supports package.json <code>\"imports\"</code> and <code>\"exports\"</code>, but unlike the Node.js resolution modes, <code>bundler</code> never requires file extensions on relative paths in imports.</p>\n<p><code>bundler</code> does not support resolution of <code>require</code> calls. In TypeScript files, this means the <code>import mod = require(\"foo\")</code> syntax is forbidden; in JavaScript files, <code>require</code> calls are not errors but only ever return the type <code>any</code> (or whatever an ambient declaration of a global require function is declared to <code>return</code>).</p>\n</li>\n<li>\n<p><code>'classic'</code> was used in TypeScript before the release of 1.6. <code>classic</code> should not be used.</p>\n</li>\n</ul>\n<p>There are reference pages explaining the <a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html#module-resolution\">theory behind TypeScript’s module resolution</a> and the <a href=\"/docs/handbook/modules/reference.html#the-moduleresolution-compiler-option\">details of each option</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>Classic</code> if <a href=\"#module\"><code>module</code></a> is <code>AMD</code>, <code>UMD</code>, <code>System</code>, or <code>ES6</code>/<code>ES2015</code>; Matches if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>Node</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>classic</code></p>\n</li><li><p><code>node10</code>/<code>node</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li><li><p><code>bundler</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li><li><p><a href='#paths' aria-label=\"Jump to compiler option info for paths\" ><code>paths</code></a></p>\n</li><li><p><a href='#baseUrl' aria-label=\"Jump to compiler option info for baseUrl\" ><code>baseUrl</code></a></p>\n</li><li><p><a href='#rootDirs' aria-label=\"Jump to compiler option info for rootDirs\" ><code>rootDirs</code></a></p>\n</li><li><p><a href='#moduleSuffixes' aria-label=\"Jump to compiler option info for moduleSuffixes\" ><code>moduleSuffixes</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleSuffixes-config'><a aria-label=\"Link to the compiler option: moduleSuffixes\" id='moduleSuffixes' href='#moduleSuffixes' name='moduleSuffixes' aria-labelledby=\"moduleSuffixes-config\">#</a> Module Suffixes - <code>moduleSuffixes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Provides a way to override the default list of file name suffixes to search when resolving a module.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleSuffixes\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\".ios\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\".native\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Given the above configuration, an import like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>TypeScript will look for the relative files <code>./foo.ios.ts</code>, <code>./foo.native.ts</code>, and finally <code>./foo.ts</code>.</p>\n<p>Note the empty string <code>\"\"</code> in <a href=\"#moduleSuffixes\"><code>moduleSuffixes</code></a> which is necessary for TypeScript to also look-up <code>./foo.ts</code>.</p>\n<p>This feature can be useful for React Native projects where each target platform can use a separate tsconfig.json with differing <code>moduleSuffixes</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> is set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A series of entries which re-map imports to lookup locations relative to the <a href=\"#baseUrl\"><code>baseUrl</code></a> if set, or to the tsconfig file itself otherwise. There is a larger coverage of <code>paths</code> in <a href=\"/docs/handbook/modules/reference.html#paths\">the <code>moduleResolution</code> reference page</a>.</p>\n<p><code>paths</code> lets you declare how TypeScript should resolve an import in your <code>require</code>/<code>import</code>s.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./vendor/jquery/dist/jquery\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This would allow you to be able to write <code>import \"jquery\"</code>, and get all of the correct typing locally.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/app/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/app/_config/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/environments/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/app/_shared/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/helpers/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./src/tests/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.</p>\n<p>Note that this feature does not change how import paths are emitted by <code>tsc</code>, so <code>paths</code> should only be used to inform TypeScript that another tool has this mapping and will use it at runtime or when bundling.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Menyelesaikan Module JSON - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memperbolehkan mengimpor modul dengan ekstensi ‘.json’ merupakan praktik umum pada proyek node.\nIni termasuk membuat jenis untuk <code>import</code> berdasarkan bentuk JSON statis.</p>\n<p>TypeScript tidak mendukung penyelesaian berkas JSON secara bawaan:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><span class=\"error\"><span>Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><span class=\"code\">2732</span></span><span class=\"error-behind\">Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMaBQIIAzASwBtIA7AQwFtJVFIAXJ4igc0QDoArROCrgDeuUGNAAiaJAAOcCagkAVAJ4zIAZQDG0YjKYSANKPESAJtBULQhKqUbHxks5ABGAV3bXb9yLgC++GDgJOTUdKhsLgAeXEyIuMQ0ctBMoIwsbJw28DSSXMAZrBzcfAISANy4uEVZ3C4e7KAAvK2gTNDukFW1JVwWKi1taBVAA'>Try</a></div></pre>\n<p>Mengaktifkan opsi memungkinkan impor JSON, dan memvalidasi jenis dalam berkas JSON tersebut.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"debug\": boolean' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"dry\": boolean' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUCBNJInADYBukAUqQHYCycAJgK5mQFjgC2L7kVAGM4PPnQBWiLhD5sOAJRLlWAFwCWcOqjotOhcADN1HOgEMeg0IkiqNdAOaIAdFK14A3nlA-QAImIABzg-VD8AFQBPQMgAZSFodUDVPwAab18-ZmhI0NBDMzIbdN9-ZkgAI1YHPIKizgBfGSMTSHNLVHU6coAPZ1VpdR5g6FVrW3snfPgef2dgGzsup1d6PwBuPDxFyZdyqodQAF4T0FVoVkhNneW9nOPTtHWgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonExports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonExports\" id='resolvePackageJsonExports' href='#resolvePackageJsonExports' name='resolvePackageJsonExports' aria-labelledby=\"resolvePackageJsonExports-config\">#</a> Resolve package.json Exports - <code>resolvePackageJsonExports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonExports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#exports\">the <code>exports</code> field of <code>package.json</code> files</a> if it ever reads from a package in <code>node_modules</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonImports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonImports\" id='resolvePackageJsonImports' href='#resolvePackageJsonImports' name='resolvePackageJsonImports' aria-labelledby=\"resolvePackageJsonImports-config\">#</a> Resolve package.json Imports - <code>resolvePackageJsonImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonImports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#imports\">the <code>imports</code> field of <code>package.json</code> files</a> when performing a lookup that starts with <code>#</code> from a file whose ancestor directory contains a <code>package.json</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Bawaan</strong>: Jalur umum terpanjang dari semua berkas masukan non-deklarasi. Jika <code>composite</code> disetel, bawaannya adalah direktori yang berisi berkas <code>tsconfig.json</code>.</p>\n<p>Ketika TypeScript mengkompilasi berkas, ia mempertahankan struktur direktori yang sama pada direktori keluaran seperti struktur di direktori masukan.</p>\n<p>Misalnya, Anda memiliki beberapa berkas masukan:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts</span></div></code></div></pre>\n<p>Kesimpulan untuk <code>rootDir</code> adalah jalur umum terpanjang dari semua berkas masukan non-deklarasi, yang dalam hal ini adalah<code>core/</code>.</p>\n<p>Jika nilai <code>outDir</code> anda adalah <code>dist</code>, maka TypeScript akan membuat struktur direktori seperti ini:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts</span></div></code></div></pre>\n<p>Namun, anda mungkin mengharapkan <code>core</code> menjadi bagian dari struktur direktori keluaran.\nDengan menyetel <code>rootDir: \".\"</code> pada <code>tsconfig.json</code>, TypeScript akan menghasilkan struktur direktori seperti ini:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js</span></div></code></div></pre>\n<p>Yang terpenting, <code>rootDir</code> <strong>tidak memengaruhi berkas mana yang menjadi bagian dari kompilasi</strong>.\n<code>rootDir</code> tidak memiliki hubungan dengan pengaturan <code>include</code>, <code>exclude</code>, atau <code>files</code> pada <code>tsconfig.json</code></p>\n<p>Perhatikan bahwa TypeScript tidak akan pernah menulis berkas keluaran (<em>file output</em>) ke direktori di luar dari <code>outDir</code>, dan tidak akan pernah melewatkan pengeluaran berkas.\nKarena alasan ini, <code>rootDir</code> mengharuskan semua berkas yang perlu dikeluarkan berada dibawah jalur <code>rootDir</code>.</p>\n<p>Misalnya, Anda memiliki struktur direktori seperti ini:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts</span></div></code></div></pre>\n<p>Ini akan menimbulkan galat ketika menentukan <code>rootDir</code> sebagai <code>core</code> dan <code>include</code> sebagai <code>*</code> karena ini membuat berkas (<code>helpers.ts</code>) yang perlu diletakkan di luar dari <code>outDir</code> (yaitu <code>../helpers.js</code>)</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Dengan menggunakan <code>rootDirs</code>, Anda dapat memberi tahu kompilator bahwa ada banyak direktori “virtual” yang bertindak sebagai salah satu akar (root).\nHal ini memungkinkan kompilator untuk menyelesaikan impor pada modul relatif dalam direktori “virtual”, seolah-olah digabungkan menjadi satu direktori.</p>\n<p>Sebagai contoh:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\"> src\n └── views\n     └── view1.ts (bisa impor \"./template1\", \"./view2`)\n     └── view2.ts (bisa impor \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (bisa impor \"./view1\", \"./view2\")</span></div></code></div></pre>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ini tidak memengaruhi bagaimana Typescript menghasilkan Javascript, ini hanya mengemulasi asumsi bahwa mereka akan mampu melakukan perkerjaan melalui Jalur relatif tersebut saat runtime.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>typeRoots</code> is specified, <em>only</em> packages under <code>typeRoots</code> will be included. For example:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#typeRoots'><data-lsp lsp=\"Specify multiple folders that act like `./node_modules/@types`.\">typeRoots</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>This config file will include <em>all</em> packages under <code>./typings</code> and <code>./vendor/types</code>, and no packages from <code>./node_modules/@types</code>.\nAll paths are relative to the <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Secara <em>default</em>, semua <em>visible package</em> ”<code>@types</code>” diikutsertakan dalam kompilasi Anda.\n<em>Package</em> dalam <code>node_modules/@types</code> yang terletak dalam folder lain dianggap sebagai <em>visible</em>.\nSebagai contoh, <em>package</em> yang berada di <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, dan seterusnya dianggap sebagai <em>visible</em>.</p>\n<p>Jika <code>types</code> telah ditentukan, hanya <em>package</em> yang didaftarkan yang akan disertakan pada lingkup global, misalnya:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Berkas <code>tsconfig.json</code> ini hanya akan menyertakan <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> dan <code>./node_modules/@types/express</code>.\n<em>Package</em> lainnya di bawah direktori <code>node_modules/@types/*</code> tidak akan diikutsertakan.</p>\n<h3 id=\"apa-dampaknya\" style=\"position:relative;\"><a href=\"#apa-dampaknya\" aria-label=\"apa dampaknya permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apa dampaknya?</h3>\n<p>Opsi ini tidak memengaruhi bagaimana <code>@types/*</code> diikutsertakan dalam kode aplikasi Anda, Sebagai contoh, apabila Anda memiliki <code>compilerOptions</code> seperti di pada contoh di atas dan kode seperti berikut:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"moment\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">moment</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">format</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"MMMM Do YYYY, h:mm:ss a\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Import <code>moment</code> akan sepenuhnya diketik.</p>\n<p>Ketika Anda memiliki opsi ini pada pengaturan tanpa menyertakan sebuah modul dalam <em>array</em> <code>types</code>, maka:</p>\n<ul>\n<li><em>globals</em> tidak akan ditambahkan ke dalam proyek Anda (contoh: <code>process</code> pada node atau <code>expect</code> pada Jest)</li>\n<li>Ekspor tidak akan muncul sebagai rekomendasi <em>auto-import</em></li>\n</ul>\n<p>Pengaturan pada fitur ini hanya tentang menentukan <code>types</code> yang ingin Anda sertakan, sedangkan <a href=\"#typeRoots\"><code>typeRoots</code></a> mendukung apabila Anda hanya menginginkan folder-folder tertentu saja.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Emit_6246' ><a href='#Emit_6246' name='Emit_6246' aria-label=\"Link to the section Emit\" aria-labelledby='Emit_6246'>#</a>Emit</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Buat berkas <code>.d.ts</code> untuk setiap berkas TypeScript atau JavaScript di dalam proyek Anda.\nBerkas <code>.d.ts</code> ini adalah berkas definisi tipe yang menjelaskan API eksternal modul Anda.\nDengan berkas <code>.d.ts</code>, alat seperti TypeScript dapat menyediakan tipe yang masuk akal di dalam sumber kode tanpa definisi tipe data.</p>\n<p>Jika <code>declaration</code> disetel ke<code>true</code>, jalankan compiler dengan kode TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let helloWorld: string' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PAFsBCIHVoICZwC8cARCgJYkDcQA'>Try</a></div></pre>\n<p>Akan menghasilkan berkas <code>index.js</code> seperti ini:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttTpsyzYB1YsgE1AF5QAiaVTgbiA'>Try</a></div></pre>\n<p>Dengan <code>helloWorld.d.ts</code> yang sesuai:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiy6FkKFYAdUWEcoALygARNFQmA3EA'>Try</a></div></pre>\n<p>Saat bekerja dengan berkas <code>.d.ts</code> untuk file JavaScript, Anda mungkin ingin menggunakan <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> atau menggunakan <a href=\"#outDir\"><code>outDir</code></a> untuk memastikan bahwa berkas JavaScript tidak ditimpa.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menawarkan cara untuk mengonfigurasi direktori <em>root</em> tempat berkas deklarasi dihasilkan.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>dengan <code>tsconfig.json</code>;</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declarationDir'><data-lsp lsp=\"Specify the output directory for generated declaration files.\">declarationDir</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Akan menempatkan d.ts untuk <code>index.ts</code> di direktori <code>types</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> _Declaration Map_ - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menghasilkan peta sumber untuk berkas <code>.d.ts</code> yang mengarahkan kembali ke berkas sumber <code>.ts</code> asli.\nIni akan memungkinkan editor seperti VS Code untuk pergi ke file <code>.ts</code> asli saat menggunakan fitur seperti <em>Go to Definition</em>.</p>\n<p>Anda harus mempertimbangkan untuk mengaktifkan ini jika Anda menggunakan referensi proyek.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Iterasi tingkat bawah - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Downleveling</em> adalah istilah TypeScript untuk mentranspilasi ke versi JavaScript yang lebih lama.\nSaran ini untuk mengaktifkan dukungan implementasi yang lebih akurat tentang bagaimana JavaScript modern melakukan iterasi melalui konsep baru di <em>runtime</em> JavaScript yang lebih lama.</p>\n<p>ECMAScript 6 menambahkan beberapa iterasi primitif baru: loop <code>for / of</code> (<code>for (el of arr)</code>), Array <em>spread</em> (<code>[a, ...b]</code>), penyebaran argumen (<code>fn(...args)</code>), dan <code>Symbol.iterator</code>.\n<code>--downlevelIteration</code> memungkinkan iterasi primitif ini digunakan secara lebih akurat dalam lingkungan ES5 jika ada implementasi <code>Symbol.iterator</code>.</p>\n<h4 id=\"contoh-efek-pada-for--of\" style=\"position:relative;\"><a href=\"#contoh-efek-pada-for--of\" aria-label=\"contoh efek pada for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh: Efek pada <code>for / of</code></h4>\n<p>Tanpa <code>downlevelIteration</code> aktif, loop <code>for / of</code> pada objek apa pun diturunkan levelnya menjadi loop <code>for</code> tradisional:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQAJRABthpAIR8A3LgBmpLgAomrdoVClZHSLACUoAN65QoFYVLDEAOjHxFhXTIC+QA'>Try</a></div></pre>\n<p>Hal ini sering kali diharapkan orang, tetapi tidak 100% sesuai dengan perilaku ECMAScript 6.\nString tertentu, seperti emoji (😜), memiliki <code>.length</code> 2 (atau bahkan lebih!), Tetapi harus diiterasi sebagai 1 unit dalam loop <code>for-of</code>.\nLihat <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">postingan blog oleh Jonathan New</a> untuk penjelasan yang lebih lengkap.</p>\n<p>Jika <code>downlevelIteration</code> diaktifkan, TypeScript akan menggunakan fungsi bantuan yang memeriksa implementasi <code>Symbol.iterator</code> (baik <em>native</em> maupun <em>polyfill</em>).\nJika implementasi ini hilang, Anda akan kembali ke iterasi berbasis <em>indeks</em>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">next</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> !</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__values</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">return</span><span style=\"color: #000000\">)) </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEACXqViAQlUBuXADNiigBTTys+aGJH5kWAEpQAb1yhQlvsWoA6bXgzPidDAF8gA'>Try</a></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Catatan:</strong> memungkinkan <code>downlevelIteration</code> tidak meningkatkan kepatuhan jika <code>Symbol.iterator</code> tidak ada saat runtime.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"contoh-efek-pada-array-spreads\" style=\"position:relative;\"><a href=\"#contoh-efek-pada-array-spreads\" aria-label=\"contoh efek pada array spreads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contoh: Efek pada Array <em>Spreads</em></h4>\n<p>ini adalah array <em>spread</em>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Buat array baru yang elemennya 1 diikuti dengan elemen arr2</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>Berdasarkan uraian tersebut, sepertinya mudah untuk menurunkan ke ES5:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Sama kan?</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Namun, ini sangat berbeda dalam kasus tertentu yang jarang terjadi.\nMisalnya, jika sebuah array memiliki “lubang” di dalamnya, indeks yang hilang akan membuat properti <em>own</em> jika disebarkan, tetapi tidak akan jika dibuat menggunakan <code>concat</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Buatlah array dimana elemen '1' hilang</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, , </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\"> = [].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// benar</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// salah</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Seperti halnya dengan <code>for / of</code>, <code>downlevelIteration</code> akan menggunakan <code>Symbol.iterator</code> (jika ada) untuk meniru perilaku ES 6 dengan lebih akurat.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> _Emit BOM_ - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengontrol apakah TypeScript akan menghasilkan <a href=\"https://wikipedia.org/wiki/Byte_order_mark\">tanda urutan byte (<em>byte order mark</em> - BOM)</a> saat menulis berkas output.\nBeberapa lingkungan <em>runtime</em> memerlukan <em>BOM</em> untuk menafsirkan berkas JavaScript dengan benar; yang lain mengharuskan itu tidak ada.\nNilai bawaan dari <code>false</code> umumnya paling baik kecuali Anda memiliki alasan untuk mengubahnya.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Menghasilkan Deklarasi Saja - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Hanya</em> menghasilkan berkas <code>.d.ts</code>; jangan mengirimkan berkas <code>.js</code>.</p>\n<p>Pengaturan ini berguna dalam dua kasus:</p>\n<ul>\n<li>Anda menggunakan <em>transpiler</em> selain TypeScript untuk membuat JavaScript Anda.</li>\n<li>Anda menggunakan TypeScript hanya untuk menghasilkan berkas <code>d.ts</code> untuk konsumen Anda.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Untuk operasi penurunan tingkat tertentu, TypeScript menggunakan beberapa kode penunjang untuk operasi seperti memperluas kelas, himpunan(spread) susunan atau objek, dan menyambungkan operasi.\nSecara umum, penunjang ini dimasukkan ke dalam berkas yang menggunakannya.\nIni dapat mengakibatkan duplikasi kode jika penunjang yang sama digunakan di banyak berkas yang berbeda.</p>\n<p>Jika <code>importHelpers</code> kode ini aktif, fungsi penunjang ini diimpor dari <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> modul.\nAnda perlu memastikan bahwa berkas <code>tslib</code> modul dapat diimpor saat dijalankan.\nIni hanya mempengaruhi modul, berkas kode tidak akan mencoba mengimpor modul.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr2</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Memasang <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> dan <code>importHelpers</code> masih salah:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = [], </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> ((</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">-- &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">error</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">])) </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\"> || </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || !(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA'>Try</a></div></pre>\n<p>Lalu aktifkan keduanya <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> dan <code>importHelpers</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA'>Try</a></div></pre>\n<p>Anda bisa menggunakan <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> saat menyediakan implementasi untuk fungsi-fungsi ini.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a></p>\n</li><li><p><a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Impor Tidak Digunakan Sebagai Nilai - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Kode ini mengontrol cara kerja <code>import</code>, ada 3 opsi berbeda:</p>\n<ul>\n<li>\n<p><code>remove</code>: Perilaku umum untuk menghapus pernyataan <code>import</code> yang hanya merupakan acuan dari kata.</p>\n</li>\n<li>\n<p><code>preserve</code>: Mempertahankan semua pernyataan <code>import</code> yang nilai atau katanya tidak pernah digunakan. Hal ini dapat menyebabkan impor/efek samping yang tetap dipertahankan.</p>\n</li>\n<li>\n<p><code>error</code>: Ini mempertahankan semua impor (sama seperti pilihan), tetapi akan mengalami galat jika impor nilai hanya digunakan sebagai tipe data. Ini mungkin berguna jika Anda ingin memastikan tidak ada nilai yang diimpor secara tidak sengaja, tetapi tetap membuat impor dengan jelas.</p>\n</li>\n</ul>\n<p>Kode ini berfungsi karena Anda dapat menggunakan <code>import type</code> secara jelas dengan pernyataan <code>import</code> yang tidak boleh dimasukkan ke JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>remove</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>remove</code></p>\n</li><li><p><code>preserve</code></p>\n</li><li><p><code>error</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#preserveValueImports' aria-label=\"Jump to compiler option info for preserveValueImports\" ><code>preserveValueImports</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Peta Sumber Sebaris - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel, ketika menulis berkas <code>.js.map</code> untuk menyediakan peta sumber, TypeScript akan menyematkan konten peta sumber di berkas <code>.js</code>.\nMeskipun ini menghasilkan berkas JS yang lebih besar, tapi dapat memudahkan dalam beberapa tahap.\nMisalnya anda mungkin ingin mencoba berkas JS pada server web, tapi tidak mengizinkan berkas <code>.map</code> untuk ditampilkan.</p>\n<p>Saling terpisah dengan <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Di ubah menjadi JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Kemudian aktifkan pembuatannya dengan <code>inlineSourceMap</code>, ada komentar di bagian bawah berkas yang menyertakan peta sumber untuk berkas tersebut.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Sumber Sebaris - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika dilihat, TypeScript akan menyertakan konten asli dari berkas <code>.ts</code> sebagai string yang disematkan di peta sumber.\nIni sering kali berguna dalam kasus yang sama seperti <code>inlineSourceMap</code>.</p>\n<p>Membutuhkan <code>sourceMap</code> atau <code>inlineSourceMap</code> untuk disetel.</p>\n<p>Misalnya, dengan TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA'>Try</a></div></pre>\n<p>Di ubah menjadi JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Kemudian dengan <code>inlineSources</code> dan <code>inlineSourceMap</code> diaktifkan, ada komentar di bagian bawah berkas yang menyertakan peta sumber untuk berkas tersebut.\nPerhatikan bahwa ada yang berbeda di akhir [<code>inlineSourceMap</code>] (# inlineSourceMap) karena peta sumber sekarang berisi kode sumber asli.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#sourceMap'><data-lsp lsp=\"Create source map files for emitted JavaScript files.\">sourceMap</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#mapRoot'><data-lsp lsp=\"Specify the location where debugger should locate map files instead of generated locations.\">mapRoot</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>crlf</code></p>\n</li><li><p><code>lf</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations.</p>\n<p>This makes room for another tool like <a href=\"https://babeljs.io\">Babel</a>, or <a href=\"https://github.com/swc-project/swc\">swc</a> to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p>\n<p>You can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getAPI: (url: string) => Promise&lt;{}>' >getAPI</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA'>Try</a></div></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">P</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">P</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">); }); }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> || (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fulfilled</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rejected</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fulfilled</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">rejected</span><span style=\"color: #000000\">); }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">apply</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\"> || [])).</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">label:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">sent</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; }, </span><span style=\"color: #001080\">trys:</span><span style=\"color: #000000\"> [], </span><span style=\"color: #001080\">ops:</span><span style=\"color: #000000\"> [] }, </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">next:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">; }), </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">]); }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && (</span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)), </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">] || ((</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">]) && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">), </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">next</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">])).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) && (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && (!</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &gt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]))) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">); </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; } </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA'>Try</a></div></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika ditentukan, berkas-berkas <code>.js</code> (maupun <code>.d.ts</code>, <code>.js.map</code>, dsb.) akan disertakan ke dalam direktori ini.\nStruktur direktori dari sumber awal berkas-berkas juga dipertahankan; lihat <a href=\"#rootDir\">rootDir</a> jika akar yang di perhitungkan bukan yang anda inginkan.</p>\n<p>Jika tidak ditentukan, berkas-berkas <code>.js</code> akan disertakan di direktori yang sama dengan berkas-berkas <code>.ts</code> dari mana mereka di hasilkan:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">contoh</span></div><div class='line'><span style=\"color: #000000\">├── index.js</span></div><div class='line'><span style=\"color: #000000\">└── index.ts</span></div></code></div></pre>\n<p>Dengan suatu <code>tsconfig.json</code> seperti ini:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#outDir'><data-lsp lsp=\"Specify an output folder for all emitted files.\">outDir</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Menjalankan <code>tsc</code> dengan pengaturan ini dapat memindahkan berkas-berkas ke direktori <code>dist</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">contoh</span></div><div class='line'><span style=\"color: #000000\">├── dist</span></div><div class='line'><span style=\"color: #000000\">│   └── index.js</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika ditentukan, semua berkas <em>global</em> (non-module) akan digabung menjadi satu berkas keluaran tertentu.</p>\n<p>Jika <code>module</code> adalah <code>system</code> atau <code>amd</code>, semua berkas modul juga akan digabungkan menjadi berkas ini setelah semua konten global.</p>\n<p>Catatan: <code>outFile</code> tidak dapat digunakan kecuali <code>module</code> adalah <code>None</code>, <code>System</code>, atau <code>AMD</code>.\nOpsi ini <em>tidak bisa</em> digunakan untuk membundel modul CommonJS atau ES6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase <code>const enum</code> declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime by emitting the enum value instead of a reference.</p>\n<p>For example with this TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2' >TubRingZooHypothesis</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3' >DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures' >selectedAlbum</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures' >selectedAlbum</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsBBwGHDAPuyYOKgiySgAdOSUtAzMbFw8fAIA3ARkAGYwABQxcQlwSdi4Qq3ozchZFNT0TKwc3Lz8EACU+FKRECBxGRi21QBE0gYMMCYwdDDK-KvABiBkwHAZCyNlIUA'>Try</a></div></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the corresponding number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUEhiGmJsaIlaBkpVIooAOk5uPkERcWlZeUUAbkxUADNQAAps3PziQvpGZRHqIeRKrl4BYTFJGTkFSABKZm1cAlhc8ppfLoAiHWhBUBdQflATBRPsOFRsYnL95dbkoA'>Try</a></div></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the <code>enum</code> exists at runtime and the numbers are still emitted.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> = {}));</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigiJKwfKUmUrJiDl2kAHRqGtp6hsbmltYIANx0XABmoAAULW0dfT12vTIDQ1q6BkamFlY2AJQKbgI4GK39kulLAETuzHqgcaA6oP5w73ysLh8WD9J5nWY1IA'>Try</a></div></pre>\n<p>This essentially makes such <code>const enums</code> a source-code feature only, with no runtime traces.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#isolatedModules\"><code>isolatedModules</code></a>; <code>false</code> otherwise.</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveValueImports-config'><a aria-label=\"Link to the compiler option: preserveValueImports\" id='preserveValueImports' href='#preserveValueImports' name='preserveValueImports' aria-labelledby=\"preserveValueImports-config\">#</a> Preserve Value Imports - <code>preserveValueImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Deprecated in favor of <a href=\"#verbatimModuleSyntax\"><code>verbatimModuleSyntax</code></a>.</p>\n<p>There are some cases where TypeScript can’t detect that you’re using an import. For example, take the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Animal</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">eval</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"console.log(new Animal().isDangerous())\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>or code using ‘Compiles to HTML’ languages like Svelte or Vue. <code>preserveValueImports</code> will prevent TypeScript from removing the import, even if it appears unused.</p>\n<p>When combined with <a href=\"#isolatedModules\"><code>isolatedModules</code></a>: imported types <em>must</em> be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#isolatedModules' aria-label=\"Jump to compiler option info for isolatedModules\" ><code>isolatedModules</code></a></p>\n</li><li><p><a href='#importsNotUsedAsValues' aria-label=\"Jump to compiler option info for importsNotUsedAsValues\" ><code>importsNotUsedAsValues</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.5\" href=\"/docs/handbook/release-notes/typescript-4-5.html\">4.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Menghapus Komentar - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menghapus semua komentar pada berkas Typescript pada saat mengonversi ke berkas Javascript. Pengaturan bawaannya adalah <code>false</code></p>\n<p>Sebagai contoh, ini adalah berkas TypeScript yang memiliki komentar JSDoc:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Terjemahan dari 'Hello world' ke bahasa Indonesia */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldID</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Halo Dunia\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Ketika <code>removeComments</code> disetel ke <code>true</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldID</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Halo Dunia\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSegAq+uAFaEAhtBE1QAExG5UoAOQAJfABtVsUPFi5VUhaADW+UACMxIyCNABJGlNg18kVNc7BM+AB4AHHelAAY0dIAOg1DQB1HT0bABFQAF5QACIlEQ1QONYaVxSAbiA'>Try</a></div></pre>\n<p>Tanpa menyetel <code>removeComments</code> atau menjadikannya sebagai <code>false</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Terjemahan dari &apos;Hello world&apos; ke bahasa Indonesia */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldID</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Halo Dunia\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6ABV8uAFaFW0VjVAATVrlSgA5AAl87drFDxYudjKWgA1vlAAjCa0itQASRozYNfJFQ2ewTPgAeAB13ooADGTpCB0OqaAOq6+rYAIqAAvKAARCocWvEArjRuqQDcQA'>Try</a></div></pre>\n<p>Artinya, komentar anda akan muncul di kode Javascript</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate where the files are to external tools, for example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Compiling with <code>sourceMap</code> set to <code>true</code> creates the following JavaScript file:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js</span></div><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></div></code></div></pre>\n<p>And this also generates this json map:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js.map</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #000000\">: [],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#sourceMap'><data-lsp lsp=\"Create source map files for emitted JavaScript files.\">sourceMap</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#sourceRoot'><data-lsp lsp=\"Specify the root path for debuggers to find the reference source code.\">sourceRoot</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an <code>@internal</code> annotation in its JSDoc comment.\nThis is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid.\nIf you are searching for a tool to handle additional levels of visibility within your <code>d.ts</code> files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Days available in a week</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const daysInAWeek: 7' >daysInAWeek</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function weeklySalary(dayRate: number): number' >weeklySalary</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number' >dayRate</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const daysInAWeek: 7' >daysInAWeek</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number' >dayRate</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBDAngZ0vAbvAlgG3gIxwFNIsA7NSAdyKIGsoYABcgFyICcz4dHhwiADwAOAew6tIAY1FlkkgCZJkASTIBBAOq06kALyQA7AG5w4UDADCPKQFc87SAAtRVSAFtbUp5GSj3RLIkRPBcqOSUNPTQ-EJiEpAAZrZkUqxYstQ6OIgAyjyhiAAUSogASvDsAFyQZLbu+JwAlJAA3lCQHESstlyQpaoa2tEwpRXspgC+QA'>Try</a></div></pre>\n<p>With the flag set to <code>false</code> (default):</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Days available in a week</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">daysInAWeek</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmgAIsICekUMIBuwosIBGxchW2h4WLAGtFy8JWyiKwwneAtaAB1ij0oAWlIfxwNSABJCgBBAHUra1AAXlAAdgBuFjllAGFXAQBXEWxQOHhQZHyBaFBIWGQsaSxQLDEKLUpzSxslD29ffwAzfIoBSWkLeMJ1AGVXMXUAClD1ACUJUlAKfORDLFEASlAAb0VQUSx0fOdQZYjouO7lZbXsDIBfIA'>Try</a></div></pre>\n<p>With <code>stripInternal</code> set to <code>true</code> the <code>d.ts</code> emitted will be redacted.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20ABFsAT0ihsAN2xtsAI3bcUl0BXToA1vsPhUGLDwfYHx+RDJYaFAFTRhQRjNIAEkUAEEAdQ9PUABeUAB2AG58HUMAYTwFAFdlDFApUBoqhRJQSDIadE10UHQVFAtUV3cvAxCwiKiAMyqUBXVNNyzcUwBlPBVTAAoE0wAlNU5QFCqae0wASlAAb31QWHRoKqx4xJSMrINX-cPigF8gA'>Try</a></div></pre>\n<p>The JavaScript output is still the same.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='JavaScript_Support_6247' ><a href='#JavaScript_Support_6247' name='JavaScript_Support_6247' aria-label=\"Link to the section JavaScript Support\" aria-labelledby='JavaScript_Support_6247'>#</a>JavaScript Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Allow JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Izinkan berkas JavaScript diimpor ke dalam proyek Anda, bukan hanya berkas <code>.ts</code> dan<code>.tsx</code>. Contoh, berkas JS ini:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: card.js</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const defaultCardDeck: \"Heart\"' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Heart\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQ8AHgA4D2eALjvYmSwfJMgK6xMAwvgIAReNgDWoALygARAAl4+JvIDcQA'>Try</a></div></pre>\n<p>Ketika diimpor ke berkas TypeScript akan menimbulkan galat seperti berikut:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAmAdAFaJ61ysBXCu0gAPAA4IALonatIRakKkBhFqwAikRgGtQAXlAAiABKQWUowG4CYALQPGAqQ7u3i5KnQagSleaLsMngktJLQUqAA3qDyispqbFq6oAC+oETwtMbswMxs1nh4jHCUiHDCZHAA5gAUcUpkqurJOgCUVkA'>Try</a></div></pre>\n<p>Impor berkas akan baik-baik saja saat <code>allowJs</code> diaktifkan:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQqA9gQK4JHwAeADtXgC5lEHyTIGnAML4CAEXjYA1qAC8oAEQAJePk6KA3BRCgAtAex1OBvTrDhksWNQDuAKUq6ocJGkyhoiPsyLcK0KjsXKAA3qB8AkKihJIyoAC+oJB41KhKRMC4hFoUFNjUiGTUjDYA5gAUkYKwImJx0gCUmkA'>Try</a></div></pre>\n<p>Opsi ini dapat digunakan sebagai cara untuk menambahkan berkas TypeScript secara bertahap ke dalam proyek JS dengan mengizinkan berkas <code>.ts</code> dan<code>.tsx</code> untuk hidup berdampingan dengan berkas JavaScript yang ada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Bekerja sama dengan <code>allowJs</code>. Kapan <code>checkJs</code> diaktifkan kemudian kesalahan dilaporkan dalam berkas JavaScript. Ini termasuk <code>// @ts-check</code> di bagian atas semua berkas JavaScript yang disertakan dalam proyek Anda.</p>\n<p>Misalnya, ini adalah JavaScript yang salah menurut definisi jenis <code>parseFloat</code> yang disertakan dengan TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// parseFloat only takes a string</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pi</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">parseFloat</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Saat diimpor ke modul TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constants.js</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzkJQBdJD6UA6AK3RLgBMBXAq3wAPAA5wATi1aicoALyhRkCSnwAxeJHoAKAMysAjACYALAEoA3GgxhwuAsTKUchHiNYs0OEuKmgAbyU5AF9QLAk4ElAAIlZgGjpGZhQY60SUOEF4AHMdWSsgA'>Try</a></div></pre>\n<p>Anda tidak akan mendapatkan kesalahan apapun. Namun, jika Anda mengaktifkan <code>checkJs</code> maka Anda akan mendapatkan pesan kesalahan dari berkas JavaScript.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constants.js</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7ONMR0i0uogB0NPHLgATRlO2QAHgAcEW7ZfGgAvKEtEkkAGLkidABQZtAEY0LABKAG48EXAJKVkFVHFpQwttLTxxOWtoOlAAbxcHAF9QUXg5UAAibWBlVXVNRErIusQ4U3IAc197CKA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Editor_Support_6249' ><a href='#Editor_Support_6249' name='Editor_Support_6249' aria-label=\"Link to the section Editor Support\" aria-labelledby='Editor_Support_6249'>#</a>Editor Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Nonaktifkan Batas Ukuran - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Untuk menghindari kemungkinan masalah pembengkakan memori saat bekerja dengan proyek JavaScript yang sangat besar, ada batas atas jumlah memori yang akan dialokasikan TypeScript. Mengaktifkan saran ini akan menghapus batas.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>List of language service plugins to run inside the editor.</p>\n<p>Language service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.</p>\n<p>For example:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Adds SQL linting with a template strings SQL builder.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Provides CSS linting inside template strings .</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Provides eslint error messaging and fix-its inside the compiler’s output.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Provides validation and auto-completion inside GraphQL query template strings.</li>\n</ul>\n<p>VS Code has the ability for a extension to <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">automatically include language service plugins</a>, and so you may have some running in your editor without needing to define them in your <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Interop_Constraints_6252' ><a href='#Interop_Constraints_6252' name='Interop_Constraints_6252' aria-label=\"Link to the section Interop Constraints\" aria-labelledby='Interop_Constraints_6252'>#</a>Interop Constraints</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Izinkan Setelan Standar Impor Sintetis - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Jika disetel ke true <code>allowSyntheticDefaultImports</code> memungkinkan Anda untuk menulis impor seperti:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>daripada:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Jika modul <strong>tidak</strong> secara eksplisit menentukan ekspor default.</p>\n<p>Misalnya, tanpa<code>allowSyntheticDefaultImports</code> disetel ke <em>true</em>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilFunctions.js<data-err></data-err></span></div><span class=\"error\"><span>Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/utilFunctions\"' has no default export.</span><span class=\"code\">1192</span></span><span class=\"error-behind\">Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/utilFunctions\"' has no default export.</span><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getStringLength: (str: any) => any' >getStringLength</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) getStringLength: (str: any) => any' >getStringLength</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./utilFunctions\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const count: any' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >getStringLength</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Check JS\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYCsBOdacMAoECAYwAtIyBrAKURLHAEMAbNuAdwaYkkQBZOABMArm0gBJAHYAXGHAAOqAGbtEkPuFUBLSTJYBbSKjFz9AMTEyyFuDMQA6AFaNS4GXClGlbXWS6cgCCMgCeahpaZA6IcqAA5pByAMpy0LoyCQAykFlyFKAAvKAAFHHQAJTFAHygFU4GCQUA3ERERqISkE6QAB5KCHKIxaAA3kSgiclpGVm5+RQANEQAvm3aegbGpqCZIv1Ow0S6vkOg5vojqvBGoABETsCXbNa29o73GzGO8TE28RKL2cSVS6UyOTyzQopXuAGEqLRQHQUvdKi0gA'>Try</a></div></pre>\n<p>Kode ini menimbulkan galat karena tidak ada objek <code>default</code> yang dapat Anda impor. Meski rasanya seperti itu seharusnya.\nUntuk kenyamanan, <em>transpiler</em> seperti Babel akan secara otomatis membuat setelan standar jika tidak dibuat. Membuat modul terlihat lebih seperti:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilFunctions.js</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getStringLength</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">allFunctions</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">getStringLength</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">allFunctions</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">allFunctions</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Opsi ini tidak memengaruhi JavaScript yang dihasilkan oleh TypeScript, ini hanya untuk <em>type checking</em>.\nOpsi ini membuat perilaku TypeScript sejalan dengan Babel, di mana kode ekstra akan ditambahkan kedalam setelan standar ekspor untuk membuat sebuah modul lebih ergonomis.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#esModuleInterop\"><code>esModuleInterop</code></a> is enabled, <a href=\"#module\"><code>module</code></a> is <code>system</code>, or <a href=\"#module-resolution\"><code>moduleResolution</code></a> is <code>bundler</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> Interop Modul ES - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Secara bawaan (dengan <code>esModuleInterop</code> <em>false</em> atau tidak disetel) TypeScript memperlakukan modul CommonJS/AMD/UMD mirip dengan modul ES6. Dalam melakukan ini, ada dua bagian tertentu yang ternyata merupakan asumsi yang salah:</p>\n<ul>\n<li>\n<p>Impor namespace seperti <code>import * as moment from \"moment\"</code> bertindak sama seperti <code>const moment = require(\"moment\")</code></p>\n</li>\n<li>\n<p>Impor bawaan seperti <code>import moment from \"moment\"</code> berfungsi sama seperti <code>const moment = require(\"moment\").default</code></p>\n</li>\n</ul>\n<p>Ketidakcocokan ini menyebabkan dua masalah berikut:</p>\n<ul>\n<li>\n<p>Spesifikasi modul ES6 menyatakan bahwa impor namespace (<code>import * as x</code>) hanya dapat menjadi objek, dengan memiliki TypeScript\nmemperlakukannya sama dengan <code>= require (\"x\")</code> maka TypeScript diizinkan untuk impor diperlakukan sebagai fungsi dan dapat dipanggil. Ini melanggar rekomendasi spesifikasi.</p>\n</li>\n<li>\n<p>Meskipun akurat untuk spesifikasi modul ES6, sebagian besar pustaka dengan modul CommonJS/AMD/UMD tidak seketat implementasi TypeScript.</p>\n</li>\n</ul>\n<p>Mengaktifkan <code>esModuleInterop</code> akan memperbaiki kedua masalah ini dalam kode yang ditranspilasi oleh TypeScript. Perubahan pertama perilaku di kompilator, yang kedua diperbaiki oleh dua fungsi pembantu baru yang menyediakan <em>shim</em> untuk memastikan kompatibilitas dalam JavaScript yang dihasilkan:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">chunk</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Dengan menonaktifkan <code>esModuleInterop</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">lodash_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">lodash_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">chunk</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4BcoAGYBDFiioUIhRqyqCAxtEIzIAK3TFCvZKVAAqUCJTCTQpIVAAiISisBuNFp3w9AfWEXrLRsewO0NFsAOngqEQYAMWI2AGUAT0gFAAobGKpg0gAPUisAGmsmUiEADisASkc3YIVsJkgAa2SAbSsRfOsAIw6rBR6GKwBdAoAmSqA'>Try</a></div></pre>\n<p>Dengan <code>esModuleInterop</code> disetel ke <code>true</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__createBinding</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__createBinding</span><span style=\"color: #000000\">) || (</span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">create</span><span style=\"color: #000000\"> ? (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> || (</span><span style=\"color: #A31515\">\"get\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> ? !</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">writable</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">configurable</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">enumerable:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">get</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">]; } };</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}) : (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">k2</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}));</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__setModuleDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__setModuleDefault</span><span style=\"color: #000000\">) || (</span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">create</span><span style=\"color: #000000\"> ? (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">enumerable:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}) : </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importStar</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importStar</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\"> = {};</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> != </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\"> !== </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">hasOwnProperty</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">)) </span><span style=\"color: #795E26\">__createBinding</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__setModuleDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) ? </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> : { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importStar</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">lodash_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">lodash_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">chunk</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URCjVlQBcoAMbRCQyACt0xQr2SlQAKlABDFKABmuvUkKgARAdMBuNEpXw1AfX3GzLRjuxW0aAwDp4VFoMAGLEbADKAJ6QEgAU5mFUvqQAHqSmADRmTKR6ABymAJTWDr4S2EyQANaxANqmWplmAEZNphJtDKYAulkATMVAA'>Try</a></div></pre>\n<p><em>Catatan</em>: Anda dapat meminimalisir ukuran keluaran dengan mengaktifkan <a href=\"#importHelpers\"><code>importHelpers</code></a>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">tslib_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">tslib_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">__importStar</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">lodash_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">tslib_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\">lodash_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">default</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">chunk</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #000000\">], </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URihXslIAJKi1490mcIUasqALlABjaIQWQAVuiEj4pUACpQAQxSgAZletJCoAES2nAbjQHRoAPo2HziyMltjuaGi2AHTwVOYMAGLEbADKAJ6QagAULklUkaQAHqROADTOTKTWABxOAJQePpFq2EyQANaZANpO5qXOAEZ9TmpDDE4AumUATPVAA'>Try</a></div></pre>\n<p>Mengaktifkan <code>esModuleInterop</code> juga akan mengaktifkan <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Paksa Jenis Huruf Konsisten Dalam Nama berkas - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript mengikuti aturan sensitifitas huruf besar dari sistem berkas yang menjalankannya.\nIni bisa menjadi masalah jika beberapa pengembang bekerja dalam sistem berkas sensitifitas huruf besar dan kecil dan yang lainnya tidak.\nJika sebuah berkas mencoba mengimpor <code>fileManager.ts</code> dengan menetapkan <code>./FileManager.ts</code>, berkas tersebut akan ditemukan dalam sistem berkas yang tidak peka huruf besar/kecil, tetapi tidak pada sistem berkas yang peka huruf besar kecil.</p>\n<p>Ketika opsi ini disetel, TypeScript akan mengeluarkan galat jika program mencoba memasukkan berkas dengan jenis huruf yang berbeda dari jenis huruf pada disk.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Modul Terisolasi (_Isolated Modules_) - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Meskipun Anda dapat menggunakan TypeScript untuk menghasilkan ke kode JavaScript, penggunaan <em>transpiler</em> lain seperti <a href=\"https://babeljs.io\">Babel</a> juga umum untuk dilakukan. Namun, <em>transpiler</em> lain hanya beroperasi di satu berkas pada satu waktu, yang berarti mereka tidak dapat menerapkan transformasi kode yang bergantung pada pemahaman sistem tipe penuh.\nPembatasan ini juga berlaku untuk API <code>ts.transpileModule</code> TypeScript yang digunakan oleh beberapa alat pengembang.</p>\n<p>Batasan ini dapat menyebabkan masalah waktu proses dengan beberapa fitur TypeScript seperti <code>const enum</code>s dan <code>namespace</code>s.\nPilihan <code>isolatedModules</code> memberi tahu TypeScript untuk memperingatkan Anda jika menulis kode tertentu yang tidak dapat diartikan dengan benar oleh proses transpilasi berkas tunggal.</p>\n<p>Itu tidak mengubah kode Anda atau mengubah perilaku proses pemeriksaan dan pengecekan kode TypeScript.</p>\n<p>Beberapa contoh kode yang tidak berfungsi saat <code>isolatedModules</code> diaktifkan.</p>\n<h4 id=\"ekspor-pengenal-non-nilai\" style=\"position:relative;\"><a href=\"#ekspor-pengenal-non-nilai\" aria-label=\"ekspor pengenal non nilai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ekspor Pengenal Non-Nilai</h4>\n<p>Di TypeScript, Anda dapat mengimpor <em>type</em> dan kemudian mengekspornya:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='import someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"someModule\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='export someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='export someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> };</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1BWiwFMAVATxwoBpTyKAxAV0gGN8NpJQAX1AAzJFlAAiMpQCy0ACbsANhUkBuNGhltOPPpAAUASk1oKADzzxCJHbXpMdHbr35D1QA'>Try</a></div></pre>\n<p>Karena tidak ada nilai untuk <code>someType</code>, <code>export</code> yang ditampilkan tidak akan mencoba mengekspornya (ini akan menjadi galat waktu proses di JavaScript):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunction</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p><em>Transpiler</em> satu berkas tidak tahu apakah <code>someType</code> menghasilkan nilai atau tidak, jadi itu adalah galat untuk mengekspor nama yang hanya mengacu pada sebuah tipe.</p>\n<h4 id=\"non-module-files\" style=\"position:relative;\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>Jika <code>isolatedModules</code> dipilih, semua berkas implementasi harus dalam <em>modules</em> (yang berarti memiliki beberapa bentuk <code>import</code> / <code>export</code>). galat terjadi jika berkas:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(): void' >fn</data-lsp></span><span style=\"color: #000000\">() {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYAMAOAUCBAJaJwA2AhgC6QAmAsnLQK5mSJ4BmzAdgMZUicHqE48AFAEpQAbwC+QA'>Try</a></div></pre>\n<p>Pembatasan ini tidak berlaku untuk berkas <code>.d.ts</code></p>\n<h4 id=\"referensi-ke-anggota-const-enum\" style=\"position:relative;\"><a href=\"#referensi-ke-anggota-const-enum\" aria-label=\"referensi ke anggota const enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referensi ke anggota <code>const enum</code></h4>\n<p>Di TypeScript, saat mereferensikan anggota <code>const enum</code>, referensi tersebut diganti dengan nilai sebenarnya di JavaScript yang ditampilkan.</p>\n<p>Mengubah TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEBGIMa8A3gFDzwBaFS8AvPAAwA098A8igQcAjLwC+tZOiQQQAOghIA5gAoS+cpXnMYrANTEyFNPMEgAlAG4gA'>Try</a></div></pre>\n<p>Ini untuk JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlRAI3y5IoAN6ZQoAFqzYoALygADABploAPI1820AEZDAX0y9+sNvgB0bWAHMAFJOQy5Luq4mgDUEtKykC6m+ACUANxAA'>Try</a></div></pre>\n<p>Tanpa pengetahuan tentang nilai anggota ini, <em>transpiler</em> lain tidak dapat menggantikan referensi ke <code>Number</code>, yang akan menjadi galat dijalankan jika dibiarkan (karena tidak ada objek <code>Numbers</code> pada waktu proses).\nKarena itu, ketika <code>isolatedModules</code> dipilih, akan terjadi galat yang mereferensikan anggota <code>const enum</code> di sekelilingnya.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.</p>\n<p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p>\n<p>With this enabled, references to modules and packages (e.g. <code>import</code>s and <code>/// &#x3C;reference type=\"...\" /></code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='verbatimModuleSyntax-config'><a aria-label=\"Link to the compiler option: verbatimModuleSyntax\" id='verbatimModuleSyntax' href='#verbatimModuleSyntax' name='verbatimModuleSyntax' aria-labelledby=\"verbatimModuleSyntax-config\">#</a> Verbatim Module Syntax - <code>verbatimModuleSyntax</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript does something called <em>import elision</em>.\nBasically, if you write something like</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript detects that you’re only using an import for types and drops the import entirely.\nYour output JavaScript might look something like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Most of the time this is good, because if <code>Car</code> isn’t a value that’s exported from <code>./car</code>, we’ll get a runtime error.</p>\n<p>But it does add a layer of complexity for certain edge cases.\nFor example, notice there’s no statement like <code>import \"./car\";</code> - the import was dropped entirely.\nThat actually makes a difference for modules that have side-effects or not.</p>\n<p>TypeScript’s emit strategy for JavaScript also has another few layers of complexity - import elision isn’t always just driven by how an import is used - it often consults how a value is declared as well.\nSo it’s not always clear whether code like the following</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>should be preserved or dropped.\nIf <code>Car</code> is declared with something like a <code>class</code>, then it can be preserved in the resulting JavaScript file.\nBut if <code>Car</code> is only declared as a <code>type</code> alias or <code>interface</code>, then the JavaScript file shouldn’t export <code>Car</code> at all.</p>\n<p>While TypeScript might be able to make these emit decisions based on information from across files, not every compiler can.</p>\n<p>The <code>type</code> modifier on imports and exports helps with these situations a bit.\nWe can make it explicit whether an import or export is only being used for type analysis, and can be dropped entirely in JavaScript files by using the <code>type</code> modifier.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// This statement can be dropped entirely in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">car</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// The named import/export 'Car' can be dropped in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>type</code> modifiers are not quite useful on their own - by default, module elision will still drop imports, and nothing forces you to make the distinction between <code>type</code> and plain imports and exports.\nSo TypeScript has the flag <code>--importsNotUsedAsValues</code> to make sure you use the <code>type</code> modifier, <code>--preserveValueImports</code> to prevent <em>some</em> module elision behavior, and <code>--isolatedModules</code> to make sure that your TypeScript code works across different compilers.\nUnfortunately, understanding the fine details of those 3 flags is hard, and there are still some edge cases with unexpected behavior.</p>\n<p>TypeScript 5.0 introduces a new option called <code>--verbatimModuleSyntax</code> to simplify the situation.\nThe rules are much simpler - any imports or exports without a <code>type</code> modifier are left around.\nAnything that uses the <code>type</code> modifier is dropped entirely.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Erased away entirely.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">A</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import { b } from \"bcd\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bcd\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import {} from \"xyz\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">xyz</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"xyz\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>With this new option, what you see is what you get.</p>\n<p>That does have some implications when it comes to module interop though.\nUnder this flag, ECMAScript <code>import</code>s and <code>export</code>s won’t be rewritten to <code>require</code> calls when your settings or file extension implied a different module system.\nInstead, you’ll get an error.\nIf you need to emit code that uses <code>require</code> and <code>module.exports</code>, you’ll have to use TypeScript’s module syntax that predates ES2015:</p>\n<table>\n<thead>\n    <tr>\n        <th>Input TypeScript</th>\n        <th>Output JavaScript</th>\n    </tr>\n</thead>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n</tr>\n</table>\n<p>While this is a limitation, it does help make some issues more obvious.\nFor example, it’s very common to forget to set the <a href=\"https://nodejs.org/api/packages.html#type\"><code>type</code> field in <code>package.json</code></a> under <code>--module node16</code>.\nAs a result, developers would start writing CommonJS modules instead of an ES modules without realizing it, giving surprising lookup rules and JavaScript output.\nThis new flag ensures that you’re intentional about the file type you’re using because the syntax is intentionally different.</p>\n<p>Because <code>--verbatimModuleSyntax</code> provides a more consistent story than <code>--importsNotUsedAsValues</code> and <code>--preserveValueImports</code>, those two existing flags are being deprecated in its favor.</p>\n<p>For more details, read up on <a href=\"https://github.com/microsoft/TypeScript/pull/52203\">the original pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/issues/51479\">its proposal issue</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Backwards_Compatibility_6253' ><a href='#Backwards_Compatibility_6253' name='Backwards_Compatibility_6253' aria-label=\"Link to the section Backwards Compatibility\" aria-labelledby='Backwards_Compatibility_6253'>#</a>Backwards Compatibility</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Di TypeScript versi sebelumnya, ini mengontrol pengkodean yang digunakan saat membaca berkas teks dari memori.\nSaat ini, TypeScript mengasumsikan pengkodean UTF-8, tetapi akan mendeteksi dengan benar UTF-16 (BE dan LE) atau UTF-8 BOMs.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Anda seharusnya tidak memerlukan ini. Secara bawaan, saat memancarkan sebuah berkas modul kepada sebuah target non-ES6, TypeScript memancarkan sebuah kata pengantar <code>\"use strict\";</code> di bagian atas berkas.\nIni dapat menonaktifkan setelan kata pengantar itu.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: U' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: S' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: S' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(a: A, b: B): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: A' >a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYBBwAXyA'>Try</a></div></pre>\n<p>This flag can be used to remove that check.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan <a href=\"#outFile\">outFile</a> sebagai gantinya.</p>\n<p>Opsi <code>out</code> memproses lokasi akhir dengan dengan cara yang tidak dapat diprediksi atau konsisten.\nOpsi ini dipertahankan hanya untuk kompatibilitas dengan versi lama dan sudah usang.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables reporting of excess property errors, such as the one shown in the following example:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const p: Point' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) m: number' >m</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA'>Try</a></div></pre>\n<p>This flag was added to help people migrate to the stricter checking of new object literals in <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>We don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Turning <code>suppressImplicitAnyIndexErrors</code> on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA'>Try</a></div></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach. It is recommended to use a <code>@ts-ignore</code> comment instead:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// @ts-ignore</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Language_and_Environment_6254' ><a href='#Language_and_Environment_6254' name='Language_and_Environment_6254' aria-label=\"Link to the section Language and Environment\" aria-labelledby='Language_and_Environment_6254'>#</a>Language and Environment</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Menghasilkan Dekorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengaktifkan dukungan eksperimental untuk menghasilkan tipe data metadata untuk dekorator yang bekerja dengan modul <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>Sebagai contoh, berikut adalah JavaScript</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void' >LogMethod</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any' >target</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol' >propertyKey</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor' >descriptor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PropertyDescriptor' >PropertyDescriptor</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any' >target</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol' >propertyKey</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor' >descriptor</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Demo' >Demo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  @</span><span style=\"color: #001080\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void' >LogMethod</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Demo.foo(bar: number): void' >foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) bar: number' >bar</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do nothing</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const demo: Demo' >demo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Demo(): Demo' >Demo</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5gLKRMACxIATABQ1QoHAh6CAXKGzoAngBopoWAhLwEmVQGlIqpVUzJ0PUAB9QVVSgBGJXJumjIVIsliUEJQAFXX1DQh8-AJoASlAAby1SdCo3SAA6XF5xWXlMGIBuJPZU3AysnnEdPURDE1VC4pS0zOyvSKR-MkaAXxoaIlxsKipQQhQSBK1wbn5BEVEtWAZnXCQiUDoSEnFnbEDQdAYXRDjE6WkQUFFJ9BJhJGstPr6BksxryAnQAF5DyAA7mMvjtCkA'>Try</a></div></pre>\n<p>Dengan <code>emitDecoratorMetadata</code> tidak disetel ke true (bawaan):</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do nothing</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogMethod</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDmAWUiZmAEwAUNUKBwIp8gFyhs6AJ4AaNaFgIS8BJkMBpSIb1VMydFNAAfUFUMoARiS4puqKkFREyLCUCHoACpbWtoQRUTE0AJSgAN5mpOhUQZAAdLjSypramBkA3HmihbglZVLKFlaItg6GtfUFRaXlYalI0WS9AL40NES42FRUoIQoJDlm4JKy8kpmsHz+uEhEoDwkJMr+2LGg6HwBiFm56ur0iqvoJApI7mZTUzMNTCgMIrUAAXhukBYS0gK2UtSAA'>Try</a></div></pre>\n<p>Dengan <code>emitDecorationMetadata</code> di setel ke true:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// do nothing</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogMethod</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">]),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm4zM0kAKGqFA4EOiQC5Q2dAE8ANKdCwEJeAkwOA0pAdbKkxkdB1QAB9QKgcUACMSXBczSUgqImRYEVsABQ8vH0J0zJEaAEpQAG9XUnQqRMgAOlxdIwsrTDKAbhr1etwmlp0jd09EH38Hbt66hubW1OKkLLJpgF8aGiJcbCoqUEIUEirXcG09CUNXWAU43CQiUDkSEiM47ARbdAV4xArqsxmeiSY7oEgGJBhVwbDZbPqYUCpI6gAC8oHQkBYB0gRyM3SAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Decorators Eksperimental - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menyalakan <a href=\"https://github.com/tc39/proposal-decorators\">dukungan eksperimental untuk <em>decorator</em></a>, yang terdapat pada tahap ke 2 proses standarisasi TC39.</p>\n<p><em>Decorator</em> adalah fitur bahasa pemrograman yang belum diadaptasi secara penuh ke dalam spesifikasi JavaScript.\nHal ini berarti bahwa versi implementasi di TypeScript mungkin berbeda dengan implementasi pada JavaScript ketika fitur tersebut telah diputuskan oleh TC39.</p>\n<p>Anda dapat mencari tahu lebih lanjut mengenai dukungan <em>decorator</em> di TypeScript pada <a href=\"/docs/handbook/decorators.html\">buku petunjuk</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengatur bagaimana konstruksi JSX dihasilkan di dalam file Javascript.\nIni hanya akan berpengaruh pada keluaran file JS yang dimulai di file <code>.tsx</code>.</p>\n<ul>\n<li><code>react</code>: Menghasilkan file <code>.js</code> dengan JSX yang diubah seperti pemanggilan <code>React.createElement</code></li>\n<li><code>preserve</code>: Menghasilkan file <code>.jsx</code> tanpa mengubah JSX</li>\n<li><code>react-native</code>: Menghasilkan file <code>.jsx</code> tanpa mengubah JSX</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>preserve</code></p>\n</li><li><p><code>react</code></p>\n</li><li><p><code>react-native</code></p>\n</li><li><p><code>react-jsx</code></p>\n</li><li><p><code>react-jsxdev</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mengubah fungsi yang dipanggil pada file <code>.js</code> ketika melakukan kompilasi elemen-elemen JSX.\nPerubahan yang paling umum adalah dengan menggunakan <code>\"h\"</code> atau <code>\"preact.h\"</code> dibandingkan penggunaan bawaan <code>\"React.createElement\"</code> jika menggunakan <code>preact</code>.</p>\n<p>Opsi ini dapat digunakan pada basis per file juga seperti halnya <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p>Any identifier or dotted identifier.</p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Menentukan fungsi penghasil fragmen JSX yang akan digunakan ketika menargetkan kompiler react JSX <code>jsxFactory</code> sudah ditentukan, misalnya seperti <code>Fragment</code>.</p>\n<p>Opsi ini dapat digunakan pada basis per file juga seperti halnya <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/** @jsxFrag h */</code> directive</a>.</p>\n<p>Contoh dengan menggunakan TSConfig berikut ini:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxFactory'><data-lsp lsp=\"Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\">jsxFactory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxFragmentFactory'><data-lsp lsp=\"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\">jsxFragmentFactory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Fragment\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TSX file berikut:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">HelloWorld</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Akan terlihat seperti:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">preact_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">HelloWorld</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> ((</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #000000\">)));</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOJx4ChMGEgAmAMWAAbJAC44wAHaykADwB0AKw6i2x3fPQxoAT3VdT5+VBQBzEEk0xLGW+uduHl6mmhD8UDhQJpRiMChQrkgw6kgcmnoiMWwgELL0KupouDmaxqSkoJCwcADecFwANHAB7p7wAL5w2LhwAERgRFa9ANzlRZoc8AASSEpKEADq0EqycAC8cAAUAJTrAHxbpHBwADx7R8enssAAbnszcxAn5Nd3F8-n28NAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.Fragment</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> JSX Import Source - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Using this TSConfig:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) ? </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> : { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">jsx_runtime_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">react_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggO1ogE6GyGTZjgBWkAHgFyiECmAhgMboC0NtFEyWABMArgBtmjdrGSDcNfuHStCAc2bpGzSLma0sQ5uzErmoQaImgAUgGUAGqADemUKFS50zQgDMOZxAlkZk9nAF9Xd09vP3YzAElPQg9IVHZA5mDPSGdItwBtSEZIdGTcVQBdRlZcAE8AbkiIiNRkAAdSdFAAJTZOUB8SZFAAIhYOdBHGzB8RXE5UWFxQAEE2toAKAEpctxZ0EUJlgB5oAEYAPgAJZjExWFAAdVIxIWPgc4vGsKA'>Try</a></div></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxImportSource'><data-lsp lsp=\"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`\">jsxImportSource</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Which generates code like:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">App</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">App</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOGwBWHAB4BJcNBgBlCPShokALjhgi6EZTEwAnmCQctO4vvaSpW3Rmq3RbGCigBzJDC1mAdkhS1mIgEAAm9AA2mnBouKF+ki5+EPxQOFAcpKSBkLBwmPR+GMAQfnAAgmBgABQAlHAA3qRwcEQwquUAPFwAjAB8ABJIkZEQcADq0JFhXeR9-QDcpAC+QA'>Try</a></div></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxImportSource</span><span style=\"color: #008000\"> preact */</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>).\nTypeScript also includes APIs for newer JS features matching the <a href=\"#target\"><code>target</code></a> you specify; for example the definition for <code>Map</code> is available if <a href=\"#target\"><code>target</code></a> is <code>ES6</code> or newer.</p>\n<p>You may want to change these for a few reasons:</p>\n<ul>\n<li>Your program doesn’t run in a browser, so you don’t want the <code>\"dom\"</code> type definitions</li>\n<li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version</li>\n<li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li>\n</ul>\n<p>In TypeScript 4.5, lib files can be overridden by npm modules, find out more <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#supporting-lib-from-node_modules\">in the blog</a>.</p>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Core definitions for all ES3 and ES5 functionality</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>regexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2021</code></td>\n<td>Additional APIs available in ES2021 - <code>promise.any</code>, <code>string.replaceAll</code> etc.</td>\n</tr>\n<tr>\n<td><code>ES2022</code></td>\n<td>Additional APIs available in ES2022 - <code>array.at</code>, <code>RegExp.hasIndices</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs available in <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs for the <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\" style=\"position:relative;\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ES2021.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2021.String</code></td>\n</tr>\n<tr>\n<td><code>ES2021.WeakRef</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>This list may be out of date, you can see the full list in the <a href=\"https://github.com/microsoft/TypeScript/tree/main/src/lib\">TypeScript source code</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleDetection-config'><a aria-label=\"Link to the compiler option: moduleDetection\" id='moduleDetection' href='#moduleDetection' name='moduleDetection' aria-labelledby=\"moduleDetection-config\">#</a> Module Detection - <code>moduleDetection</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting controls how TypeScript determines whether a file is a\n<a href=\"/docs/handbook/modules/theory.html#scripts-and-modules-in-javascript\">script or a module</a>.</p>\n<p>There are three choices:</p>\n<ul>\n<li>\n<p><code>\"auto\"</code> (default) - TypeScript will not only look for import and export statements, but it will also check whether the <code>\"type\"</code> field in a <code>package.json</code> is set to <code>\"module\"</code> when running with <a href=\"#module\"><code>module</code></a>: <code>nodenext</code> or <code>node16</code>, and check whether the current file is a JSX file when running under <a href=\"#jsx\"><code>jsx</code></a>: <code>react-jsx</code>.</p>\n</li>\n<li>\n<p><code>\"legacy\"</code> - The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.</p>\n</li>\n<li>\n<p><code>\"force\"</code> - Ensures that every non-declaration file is treated as a module.</p>\n</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>\"auto\": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>legacy</code></p>\n</li><li><p><code>auto</code></p>\n</li><li><p><code>force</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n<p>TypeScript <em>cannot</em> compile anything without a set of interfaces for key primitives like: <code>Array</code>, <code>Boolean</code>, <code>Function</code>, <code>IArguments</code>, <code>Number</code>, <code>Object</code>, <code>RegExp</code>, and <code>String</code>. It is expected that if you use <code>noLib</code> you will be including your own type definitions for these.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> sebagai gantinya. Tentukan objek yang dipanggil oleh <code>createElement</code> ketika menargetkan <code>react</code> pada berkas TSX.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Beberapa <em>browser</em> modern mendukung semua fitur ES6, jadi <code>ES6</code> merupakan pilihan yang baik.\nAnda dapat memilih untuk menyetel sasaran yang lebih rendah apabila kode Anda diluncurkan untuk lingkungan yang lebih lama, atau sebuah sasaran yang lebih tinggi apabila kode Anda dijamin untuk dapat berjalan di lingkungan yang lebih baru.</p>\n<p>Pengaturan <code>target</code> mengubah fitur JS mana yang diturunkan levelnya dan mana yang dibiarkan utuh.\nSebagai contoh, sebuah <em>arrow_function</em> <code>() => this</code> akan berubah menjadi sebuah ekspresi yang ekuivalen dengan <code>function</code> apabila <code>target</code> merupakan ES5 atau versi yang lebih rendah.</p>\n<p>Mengubah <code>target</code> berarti juga mengubah nilai default dari <a href=\"#lib\"><code>lib</code></a>.\nAnda dapat mengatur <code>target</code> dan<code>lib</code> sesuai keinginan, tetapi Anda dapat menyetel <code>target</code> untuk alasan kenyamanan.</p>\n<p>Jika Anda hanya bekerja dengan Node.js, berikut adalah beberapa <code>target</code> yang direkomendasikan berdasarkan versi Node:</p>\n<table>\n<thead>\n<tr>\n<th>Nama</th>\n<th>Target yang didukung</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>Ini didasarkan pada database dukungan <a href=\"https://node.green\">node.green</a>.</p>\n<p>Nilai khusus <code>ESNext</code> merujuk pada versi tertinggi yang didukung oleh versi TypeScript Anda.\nPengaturan ini harus dilakukan secara hati-hati, karena ini tidak berarti hal yang sama pada versi TypeScript yang berbeda dan dapat membuat peningkatan kurang dapat diprediksi.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>es3</code></p>\n</li><li><p><code>es5</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2016</code></p>\n</li><li><p><code>es2017</code></p>\n</li><li><p><code>es2018</code></p>\n</li><li><p><code>es2019</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2021</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#target\"><code>target</code></a> is <code>ES2022</code> or higher, including <code>ESNext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Compiler_Diagnostics_6251' ><a href='#Compiler_Diagnostics_6251' name='Compiler_Diagnostics_6251' aria-label=\"Link to the section Compiler Diagnostics\" aria-labelledby='Compiler_Diagnostics_6251'>#</a>Compiler Diagnostics</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Digunakan untuk mengeluarkan informasi diagnostik untuk <em>debugging</em>. Perintah ini adalah <em>subset</em> dari <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a> yang lebih merupakan hasil yang dilihat pengguna, dan lebih mudah ditafsirkan.</p>\n<p>Jika Anda telah diminta oleh kompilator engineer TypeScript untuk memberikan hasil menggunakan tanda ini dalam sebuah kompilasi, di mana tidak ada salahnya menggunakan <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> sebagai gantinya.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> Explain Files - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">example</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">├── package.json</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es5\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"explainFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'</span></div></code></div></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#target\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Diagnosa yang Diperpanjang - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Anda dapat menggunakan opsi ini untuk menemukan dimana TypeScript menghabiskan waktunya selama proses kompilasi.\nPeralatan ini digunakan untuk memahami karakteristik peforma basis kode Anda secara keseluruhan.</p>\n<p>Anda dapat mempelajari lebih lanjut bagaimana mengukur dan memahami hasil keluaran pada <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">bagian wiki peforma</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Hasilkan Profil CPU - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Opsi ini memberi Anda kesempatan untuk meminta TypeScript mengeluarkan profil CPU v8 selama penyusun dijalankan. Profil CPU dapat memberikan wawasan tentang mengapa proyek Anda bisa lambat.</p>\n<p>Opsi ini hanya dapat digunakan dari CLI melalui: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></div></code></div></pre>\n<p>Berkas ini dapat dibuka di peramban berbasis chromium seperti Chrome atau Edge Developer di bagian <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">Riwayat CPU</a>.\nAnda dapat mempelajari lebih lanjut tentang memahami kinerja penyusun di <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">Bagian wiki TypeScript tentang kinerja</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>profile.cpuprofile</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>With:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#listFiles'><data-lsp lsp=\"Print all of the files read during the compilation.\">listFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Would echo paths like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts</span></div></code></div></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>With:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#listFiles'><data-lsp lsp=\"Print all of the files read during the compilation.\">listFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Would echo paths like:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts</span></div></code></div></pre>\n<p>Note if using TypeScript 4.2, prefer <a href=\"#explainFiles\"><code>explainFiles</code></a> which offers an explanation of why a file was added too.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included.\nYou can set <code>traceResolution</code> to <code>true</code> to have TypeScript print information about its resolution process for each processed file.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Projects_6255' ><a href='#Projects_6255' name='Projects_6255' aria-label=\"Link to the section Projects\" aria-labelledby='Projects_6255'>#</a>Projects</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Opsi <code>composite</code> memberlakukan batasan tertentu yang memungkinkan untuk membangun (termasuk TypeScript\nsendiri, di bawah mode <code>--build</code>) untuk menentukan dengan cepat apakah proyek telah dibangun.</p>\n<p>Saat pengaturan ini aktif:</p>\n<ul>\n<li>\n<p>Setelan <code>rootDir</code>, jika tidak disetel secara eksplisit, lokasi penyimpanan akan berisi berkas <code>tsconfig.json</code>.</p>\n</li>\n<li>\n<p>Semua berkas implementasi harus cocok dengan sebuah <code>include</code> contoh atau terdaftar dalam aturan <code>files</code>. Jika batasan ini dilanggar, <code>tsc</code> akan memberi tahu Anda berkas mana yang tidak ditentukan.</p>\n</li>\n<li>\n<p><code>declaration</code> defaults ke <code>true</code></p>\n</li>\n</ul>\n<p>Anda dapat menemukan dokumentasi tentang proyek TypeScript di <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Dalam program TypeScript multi-proyek, TypeScript akan memuat semua proyek yang tersedia ke dalam memori untuk memberikan hasil yang akurat untuk tanggapan editor yang memerlukan grafik pengetahuan lengkap seperti ‘Temukan Semua Referensi’.</p>\n<p>Jika proyek Anda besar, Anda dapat menggunakan saran <code>disableReferencedProjectLoad</code> untuk menonaktifkan pemuatan otomatis semua proyek. Sebaliknya, proyek dimuat secara dinamis saat Anda membuka file melalui editor Anda.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Nonaktifkan Pencarian Solusi - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat bekerja dengan <a href=\"/docs/handbook/project-references.html\">proyek TypeScript komposit</a>, opsi ini menyediakan cara untuk menyatakan bahwa Anda tidak ingin proyek disertakan saat menggunakan fitur seperti <em>find all reference</em> atau <em>jump to definition</em> di editor.</p>\n<p>Saran ini untuk sesuatu yang dapat Anda gunakan untuk meningkatkan daya tanggap dalam proyek komposit besar.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Nonaktifkan Pengalihan Referensi Proyek Sumber - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat bekerja dengan <a href=\"/docs/handbook/project-references.html\">proyek TypeScript komposit</a>, opsi ini menyediakan cara untuk menuju <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">kembali ke pra-3.7</a> perilaku di mana berkas d.ts digunakan sebagai batas antar modul.\nDi 3.7, sumber kebenaran sekarang adalah berkas TypeScript Anda.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Memberi tahu TypeScript untuk menyimpan informasi tentang grafik proyek dari kompilasi terakhir ke berkas yang disimpan di penyimpanan. Ini membuat serangkaian berkas <code>.tsbuildinfo</code> di folder yang sama dengan keluaran kompilasi Anda. Mereka tidak menggunakan JavaScript saat runtime dan dapat dihapus dengan aman. Anda dapat membaca lebih lanjut di <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 release notes</a>.</p>\n<p>Anda dapat mengontrol nama folder dengan menggunakan pilihan <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster\nbuilding of larger TypeScript codebases. You can read more about composite projects <a href=\"/docs/handbook/project-references.html\">in the handbook</a>.</p>\n<p>The default depends on a combination of other settings:</p>\n<ul>\n<li>If <code>outFile</code> is set, the default is <code>&#x3C;outFile>.tsbuildinfo</code>.</li>\n<li>If <code>rootDir</code> and <code>outDir</code> are set, then the file is <code>&#x3C;outDir>/&#x3C;relative path to config from rootDir>/&#x3C;config name>.tsbuildinfo</code>\nFor example, if <code>rootDir</code> is <code>src</code>, <code>outDir</code> is <code>dest</code>, and the config is\n<code>./tsconfig.json</code>, then the default is <code>./tsconfig.tsbuildinfo</code>\nas the relative path from <code>src/</code> to <code>./tsconfig.json</code> is <code>../</code>.</li>\n<li>If <code>outDir</code> is set, then the default is <code>&#x3C;outDir>/&#x3C;config name>.tsbuildInfo</code></li>\n<li>Otherwise, the default is <code>&#x3C;config name>.tsbuildInfo</code></li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Output_Formatting_6256' ><a href='#Output_Formatting_6256' name='Output_Formatting_6256' aria-label=\"Link to the section Output Formatting\" aria-labelledby='Output_Formatting_6256'>#</a>Output Formatting</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;    propertyWithAnExceedinglyLongName6: string;&#10;    propertyWithAnExceedinglyLongName7: string;&#10;    propertyWithAnExceedinglyLongName8: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName6: string' >propertyWithAnExceedinglyLongName6</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName7: string' >propertyWithAnExceedinglyLongName7</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName8: string' >propertyWithAnExceedinglyLongName8</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;    propertyWithAnExceedinglyLongName6: string;&#10;    propertyWithAnExceedinglyLongName7: string;&#10;    propertyWithAnExceedinglyLongName8: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propert...' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propert...' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQAbgIbSgAeqA3kaKAA7xMwAuAngOoCW7ACwCCAOwCiVAMaRIAE14iA5gBtOAGThKAcmQC2kAIypE7aAsUBuBs1Yce-YeKkz5S1Ru17IaY6fNXGFjg2aC4+QVEJaTlzd01FHX0MXzMlAJtgu3DHKJdY9XjEyFwU-2sgkLCHSOcYtwLPfXxStPLbUPsIp2jXFQaErwA2Fss2zI7smp78jwH9AHYR9Iqs6u68+tmigA4logBfKyIQUABlPyVQaEgWSERIEXYydl5NUDgAM1AuNnevgHIqP9QIgBHAAK7KWSgABGkG+0HBIkkzzkoAUoBg8Eo+kQiDIikgpAoIJGoAAvNQLEA'>Try</a></div></pre>\n<p>With <code>true</code></p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;    propertyWithAnExceedinglyLongName6: string;&#10;    propertyWithAnExceedinglyLongName7: string;&#10;    propertyWithAnExceedinglyLongName8: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName6: string' >propertyWithAnExceedinglyLongName6</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName7: string' >propertyWithAnExceedinglyLongName7</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName8: string' >propertyWithAnExceedinglyLongName8</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;    propertyWithAnExceedinglyLongName6: string;&#10;    propertyWithAnExceedinglyLongName7: string;&#10;    propertyWithAnExceedinglyLongName8: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brTekJyw-MiimJsx5w6ANimAmfq5xqGl1vi19wB2Ldq+hsHFltHj8oAOC6IAX0CSMABlVMtQaEgikgiEgZHYHG4ZFAcAAZqA1MpoXCAOTiZGgRDaOAMaymUAAI0g8MYLA4ZlAFlAMHgYnciEQrEsghEYhQGN+oAAvBJ-EA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Completeness_6257' ><a href='#Completeness_6257' name='Completeness_6257' aria-label=\"Link to the section Completeness\" aria-labelledby='Completeness_6257'>#</a>Completeness</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Melewati pemeriksaan pustaka bawaan - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gunakan [<code>--skipLibCheck</code>](# skipLibCheck) sebagai gantinya. Lewati pemeriksaan jenis file deklarasi pustaka bawaan.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Melewati pengecekan pustaka - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Melewati pemeriksaan jenis berkas deklarasi.</p>\n<p>Ini dapat menghemat waktu selama kompilasi dengan mengorbankan akurasi dari sistem type. Misalnya, dua pustaka bisa mendefinisikan dua salinan dari <code>type</code> (tipe) yang sama dengan cara yang tidak konsisten. Dibandingkan melakukan pengecekan menyeluruh pada semua berkas <code>d.ts</code>, TypeScript akan mengecek tipe data dari kode yang Anda acu secara spesifik di dalam kode sumber aplikasi.</p>\n<p>Kasus umum dimana Anda mungkin berpikir untuk menggunakan <code>skipLibCheck</code> adalah ketika ada dua salinan pustaka di <code>node_modules</code> Anda. Dalam kasus ini, Anda harus mempertimbangkan untuk menggunakan fitur seperti <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a> untuk memastikan hanya ada satu salinan dependency di root Anda atau menyelidiki bagaimana cara memastikan hanya ada satu resolusi dependency untuk memperbaiki masalah tanpa ada alat tambahan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Baris Perintah\" aria-labelledby='Command_line_Options_6171'>#</a>Baris Perintah</h2>\n</div>\n<div class='category'>\n<h2 id='Watch_and_Build_Modes_6250' ><a href='#Watch_and_Build_Modes_6250' name='Watch_and_Build_Modes_6250' aria-label=\"Link to the section Opsi Pengawasan\" aria-labelledby='Watch_and_Build_Modes_6250'>#</a>Opsi Pengawasan</h2>\n<p>TypeScript 3.8 dilengkapi dengan strategi baru untuk mengawasi direktori, yang krusial menentukan perubahan secara efisien terhadap <code>node_modules</code>.</p>\n<p>Pada sistem operasi seperti Linux, TypeScript memasang direktori pengawas (daripada pengawas berkas) pada <code>node_modules</code> dan banyak direktori di dalamnya untuk mendeteksi perubahan pada dependensi.\nHal ini dikarenakan banyaknya pengawas berkas sering melebihi berkas-berkas yang terdapat pada <code>node_modules</code>, sedangkan ada lebih sedikit direktori untuk diawasi.</p>\n<p>Karena setiap proyek mungkin bekerja dengan strategi yang berbeda, dan pendekatan baru ini mungkin tidak bekerja dengan baik dengan alur kerja anda, TypeScript 3.8 memperkenalkan opsi <code>watchOptions</code> yang memungkinkan pengguna untuk memberitahu kompiler/layanan bahasa strategi pengawasan yang mana yang harus digunakan untuk mengawasi berkas dan direktori.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Menganggap Perubahan Hanya Mempengaruhi Dependensi Langsung - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ketika opsi ini diaktifkan, TypeScript akan menghindari pemeriksaan ulang/membangun kembali semua berkas yang benar-benar mungkin terpengaruh dan hanya memeriksa ulang/membangun kembali berkas yang telah berubah serta berkas yang langsung mengimpornya.</p>\n<p>Ini dapat dianggap sebagai implementasi ‘fast &#x26; loose’ dari algoritma pengawas, yang mana bisa secara drastis dapat mengurangi waktu <em>rebuild</em> dengan sesekali harus menjalankan <em>build</em> lengkap untuk mendapatkan semua pesan penyusun kesalahan.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strategi bagaimana setiap berkas diamati.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Memeriksa setiap berkas apakah terjadi perubahan pada interval waktu tertentu.</li>\n<li><code>priorityPollingInterval</code>: Memeriksa setiap berkas apakah terjadi perubahan, tetapi menggunakan metode heuristik untuk memeriksa tipe berkas tertentu yang jarang berubah daripada yang lain.</li>\n<li><code>dynamicPriorityPolling</code>: Menggunakan antrian dinamis dimana berkas yang jarang diubah akan jarang diperiksa.</li>\n<li><code>useFsEvents</code> (the default): Berusaha menggunakan even asli sistem operasi/berkas sistem untuk memeriksa perubahan berkas.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Berusaha menggunakan event asli sistem operasi/berkas sistem untuk memeriksa perubahan berkas pada direktori <em>parent</em> dari berkas tersebut.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>prioritypollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li><li><p><code>usefsevents</code></p>\n</li><li><p><code>usefseventsonparentdirectory</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strategi untuk bagaimana seluruh direktori diperhatikan dalam sistem yang tidak memiliki fungsi pengawasan berkas secara rekursif.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Memeriksa setiap direktori untuk memantau perubahan beberapa kali dalam satu detik secara periodik pada interval yang telah ditentukan.</li>\n<li><code>dynamicPriorityPolling</code>: Menggunakan sebuah <em>queue</em> dinamis dimana direktori-direktori yang jarang mengalami modifikasi akan lebih jarang diperiksa.</li>\n<li><code>useFsEvents</code> (the default): Mencoba menggunakan sistem operasi / kejadian asli dari sistem berkas untuk perubahan direktori.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>usefsevents</code></p>\n</li><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Saat menggunakan peristiwa sistem berkas, opsi ini menetapkan strategi <em>polling</em> yang akan digunakan saat sistem kehabisan pengamat berkas asli dan / atau tidak mendukung pengamat berkas asli.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Periksa setiap berkas apakah ada perubahan beberapa kali dalam satu detik pada interval tetap.</li>\n<li><code>priorityPollingInterval</code>: Periksa setiap berkas apakah ada perubahan beberapa kali dalam satu detik, tetapi gunakan heuristik untuk memeriksa jenis berkas tertentu lebih jarang daripada yang lain.</li>\n<li><code>dynamicPriorityPolling</code>: Gunakan antrian dinamis di mana berkas yang lebih jarang diubah akan lebih jarang diperiksa.</li>\n<li><code>synchronousWatchDirectory</code>: Menonaktifkan pengawas yang ditunda pada direktori. Menonton yang ditunda berguna ketika banyak perubahan berkas mungkin terjadi sekaligus (misal. Perubahan dalam <code>node_modules</code> dari menjalankan <code>npm install</code>), tetapi Anda mungkin ingin menonaktifkannya dengan tanda ini untuk beberapa penyiapan yang kurang umum.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedinterval</code></p>\n</li><li><p><code>priorityinterval</code></p>\n</li><li><p><code>dynamicpriority</code></p>\n</li><li><p><code>fixedchunksize</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> Synchronous Watch Directory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory'><data-lsp lsp=\"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\">synchronousWatchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> Exclude Directories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <a href=\"#excludeFiles\"><code>excludeFiles</code></a> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeDirectories'><data-lsp lsp=\"Remove a list of directories from the watch process.\">excludeDirectories</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"**/node_modules\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"_build\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"temp/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> Exclude Files - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeFiles'><data-lsp lsp=\"Remove a list of files from the watch mode's processing.\">excludeFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"temp/file.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> Enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables automatic type acquisition in JavaScript projects:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mocha\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> Disable Filename Based Type Acquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"disableFilenameBasedTypeAcquisition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"id","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/id.md","intro":{"html":"<h2>Pengantar Referensi TSConfig</h2>\n<p>Berkas TSConfig di dalam sebuah direktori menunjukkan bahwa direktori tersebut adalah akar dari proyek TypeScript atau JavaScript.\nBerkas TSConfig dapat berupa <code>tsconfig.json</code> atau <code>jsconfig.json</code>, keduanya memiliki efek serupa dan kumpulan konfigurasi variabel yang sama.</p>\n<p>Halaman ini mencakup semua opsi (<em>flag</em>) yang tersedia di dalam berkas TSConfig. Dimulai dari gambaran umum setiap opsi, kemudian pindah ke atribut akar pada berkas JSON, kemudian <code>compilerOptions</code> yang berisi banyak opsi dan diakhiri dengan <code>watchOptions</code>.</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Files"},{"anchor":"extends","name":"Extends"},{"anchor":"include","name":"Disertakan (_Include_)"},{"anchor":"exclude","name":"Exclude"},{"anchor":"references","name":"Referensi"}]},{"display":"Type Checking","anchor":"Type_Checking_6248","options":[{"anchor":"allowUnreachableCode","name":"Izinkan Kode Tak Terjangkau"},{"anchor":"allowUnusedLabels","name":"Izinkan Label yang Tidak Digunakan"},{"anchor":"alwaysStrict","name":"Selalu Tepat"},{"anchor":"exactOptionalPropertyTypes","name":"Exact Optional Property Types"},{"anchor":"noFallthroughCasesInSwitch","name":"No Fallthrough Cases In Switch"},{"anchor":"noImplicitAny","name":"No Implicit Any"},{"anchor":"noImplicitOverride","name":"No Implicit Override"},{"anchor":"noImplicitReturns","name":"No Implicit Returns"},{"anchor":"noImplicitThis","name":"No Implicit This"},{"anchor":"noPropertyAccessFromIndexSignature","name":"No Property Access From Index Signature"},{"anchor":"noUncheckedIndexedAccess","name":"No Unchecked Indexed Access"},{"anchor":"noUnusedLocals","name":"No Unused Locals"},{"anchor":"noUnusedParameters","name":"No Unused Parameters"},{"anchor":"strict","name":"Strict"},{"anchor":"strictBindCallApply","name":"Strict Bind Call Apply"},{"anchor":"strictFunctionTypes","name":"Strict Function Types"},{"anchor":"strictNullChecks","name":"Strict Null Checks"},{"anchor":"strictPropertyInitialization","name":"Strict Property Initialization"},{"anchor":"useUnknownInCatchVariables","name":"Use Unknown In Catch Variables"}]},{"display":"Modules","anchor":"Modules_6244","options":[{"anchor":"allowArbitraryExtensions","name":"Allow Arbitrary Extensions"},{"anchor":"allowImportingTsExtensions","name":"Allow Importing TS Extensions"},{"anchor":"allowUmdGlobalAccess","name":"Izinkan Akses Global Umd"},{"anchor":"baseUrl","name":"Base Url"},{"anchor":"customConditions","name":"Custom Conditions"},{"anchor":"module","name":"Module"},{"anchor":"moduleResolution","name":"Module Resolution"},{"anchor":"moduleSuffixes","name":"Module Suffixes"},{"anchor":"noResolve","name":"No Resolve"},{"anchor":"paths","name":"Paths"},{"anchor":"resolveJsonModule","name":"Menyelesaikan Module JSON"},{"anchor":"resolvePackageJsonExports","name":"Resolve package.json Exports"},{"anchor":"resolvePackageJsonImports","name":"Resolve package.json Imports"},{"anchor":"rootDir","name":"Root Dir"},{"anchor":"rootDirs","name":"Root Dirs"},{"anchor":"typeRoots","name":"Type Roots"},{"anchor":"types","name":"Types"}]},{"display":"Emit","anchor":"Emit_6246","options":[{"anchor":"declaration","name":"Declaration"},{"anchor":"declarationDir","name":"Declaration Dir"},{"anchor":"declarationMap","name":"_Declaration Map_"},{"anchor":"downlevelIteration","name":"Iterasi tingkat bawah"},{"anchor":"emitBOM","name":"_Emit BOM_"},{"anchor":"emitDeclarationOnly","name":"Menghasilkan Deklarasi Saja"},{"anchor":"importHelpers","name":"Import Helpers"},{"anchor":"importsNotUsedAsValues","name":"Impor Tidak Digunakan Sebagai Nilai"},{"anchor":"inlineSourceMap","name":"Peta Sumber Sebaris"},{"anchor":"inlineSources","name":"Sumber Sebaris"},{"anchor":"mapRoot","name":"Map Root"},{"anchor":"newLine","name":"New Line"},{"anchor":"noEmit","name":"No Emit"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"No Emit On Error"},{"anchor":"outDir","name":"Out Dir"},{"anchor":"outFile","name":"Out File"},{"anchor":"preserveConstEnums","name":"Preserve Const Enums"},{"anchor":"preserveValueImports","name":"Preserve Value Imports"},{"anchor":"removeComments","name":"Menghapus Komentar"},{"anchor":"sourceMap","name":"Source Map"},{"anchor":"sourceRoot","name":"Source Root"},{"anchor":"stripInternal","name":"Strip Internal"}]},{"display":"JavaScript Support","anchor":"JavaScript_Support_6247","options":[{"anchor":"allowJs","name":"Allow JS"},{"anchor":"checkJs","name":"Check JS"},{"anchor":"maxNodeModuleJsDepth","name":"Max Node Module JS Depth"}]},{"display":"Editor Support","anchor":"Editor_Support_6249","options":[{"anchor":"disableSizeLimit","name":"Nonaktifkan Batas Ukuran"},{"anchor":"plugins","name":"Plugins"}]},{"display":"Interop Constraints","anchor":"Interop_Constraints_6252","options":[{"anchor":"allowSyntheticDefaultImports","name":"Izinkan Setelan Standar Impor Sintetis"},{"anchor":"esModuleInterop","name":"Interop Modul ES"},{"anchor":"forceConsistentCasingInFileNames","name":"Paksa Jenis Huruf Konsisten Dalam Nama berkas"},{"anchor":"isolatedModules","name":"Modul Terisolasi (_Isolated Modules_)"},{"anchor":"preserveSymlinks","name":"Preserve Symlinks"},{"anchor":"verbatimModuleSyntax","name":"Verbatim Module Syntax"}]},{"display":"Backwards Compatibility","anchor":"Backwards_Compatibility_6253","options":[{"anchor":"charset","name":"Charset"},{"anchor":"keyofStringsOnly","name":"Keyof Strings Only"},{"anchor":"noImplicitUseStrict","name":"No Implicit Use Strict"},{"anchor":"noStrictGenericChecks","name":"No Strict Generic Checks"},{"anchor":"out","name":"Out"},{"anchor":"suppressExcessPropertyErrors","name":"Suppress Excess Property Errors"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Suppress Implicit Any Index Errors"}]},{"display":"Language and Environment","anchor":"Language_and_Environment_6254","options":[{"anchor":"emitDecoratorMetadata","name":"Menghasilkan Dekorator Metadata"},{"anchor":"experimentalDecorators","name":"Decorators Eksperimental"},{"anchor":"jsx","name":"JSX"},{"anchor":"jsxFactory","name":"JSX Factory"},{"anchor":"jsxFragmentFactory","name":"jsxFragmentFactory"},{"anchor":"jsxImportSource","name":"JSX Import Source"},{"anchor":"lib","name":"Lib"},{"anchor":"moduleDetection","name":"Module Detection"},{"anchor":"noLib","name":"No Lib"},{"anchor":"reactNamespace","name":"React Namespace"},{"anchor":"target","name":"Target"},{"anchor":"useDefineForClassFields","name":"Use Define For Class Fields"}]},{"display":"Compiler Diagnostics","anchor":"Compiler_Diagnostics_6251","options":[{"anchor":"diagnostics","name":"Diagnostics"},{"anchor":"explainFiles","name":"Explain Files"},{"anchor":"extendedDiagnostics","name":"Diagnosa yang Diperpanjang"},{"anchor":"generateCpuProfile","name":"Hasilkan Profil CPU"},{"anchor":"listEmittedFiles","name":"List Emitted Files"},{"anchor":"listFiles","name":"List Files"},{"anchor":"traceResolution","name":"Trace Resolution"}]},{"display":"Projects","anchor":"Projects_6255","options":[{"anchor":"composite","name":"Composite"},{"anchor":"disableReferencedProjectLoad","name":"disableReferencedProjectLoad"},{"anchor":"disableSolutionSearching","name":"Nonaktifkan Pencarian Solusi"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Nonaktifkan Pengalihan Referensi Proyek Sumber"},{"anchor":"incremental","name":"Incremental"},{"anchor":"tsBuildInfoFile","name":"TS Build Info File"}]},{"display":"Output Formatting","anchor":"Output_Formatting_6256","options":[{"anchor":"noErrorTruncation","name":"No Error Truncation"},{"anchor":"preserveWatchOutput","name":"Preserve Watch Output"},{"anchor":"pretty","name":"Pretty"}]},{"display":"Completeness","anchor":"Completeness_6257","options":[{"anchor":"skipDefaultLibCheck","name":"Melewati pemeriksaan pustaka bawaan"},{"anchor":"skipLibCheck","name":"Melewati pengecekan pustaka"}]},{"display":"Baris Perintah","anchor":"Command_line_Options_6171","options":[]},{"display":"Opsi Pengawasan","anchor":"Watch_and_Build_Modes_6250","options":[{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Menganggap Perubahan Hanya Mempengaruhi Dependensi Langsung"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"watchFile"},{"anchor":"watchDirectory","name":"watchDirectory"},{"anchor":"fallbackPolling","name":"fallbackPolling"},{"anchor":"synchronousWatchDirectory","name":"Synchronous Watch Directory"},{"anchor":"excludeDirectories","name":"Exclude Directories"},{"anchor":"excludeFiles","name":"Exclude Files"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"Enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"Disable Filename Based Type Acquisition"}]}]}},"staticQueryHashes":[]}