{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-0/new-ts-features/variadic-tuples.ts.html","result":{"pageContext":{"name":"Variadic Tuples","title":"Variadic Tuples","lang":"ja","html":" 可変長タプルによって、タプルはジェネリクスのように\n 型を型チェッカーに渡すことができるrest演算子(...)を扱えるようになりました。\n\n かなり高度なトピックなので、理解できなくでもあまり心配しないでください。\n これはexample:generic-functionsとexample:tuplesの発展です。\n\n 手始めに、別のタプルの前に常に数字を付けている可変長タプルを\n 見てみましょう:\n\n<code><pre>\ntype AddMax<T extends unknown[]> = [max: number,  ...rest: T];\n</pre></code>\n//          ^ ジェネリクスでTをタプルに制限しています\n                                                ^ ... でどこにマージするかを示しています\n\n これは次のように型を合成することができます:\n<code><pre>\ntype MaxMin = AddMax<[min: number]>\ntype MaxMinDiameter = AddMax<[min: number, diameter: number]>\n\n// タプルの後ろに型があっても同様です:\ntype SuffixDIContext<T extends unknown[]> = [...first: T, context: any];\ntype DIContainer = SuffixDIContext<[param: string]>\n\n</pre></code>\n// この仕組みは、複数の入力パラメータと組み合わせることができます。\n 例えば、次の関数は、配列の開始と終了を表す印として\n '\\0'を使用して2つの配列をマージします。\n<code><pre>\nfunction joinWithNullTerminators<T extends unknown[], U extends unknown[]>(t: [...T], u: [...U]) {\n    return ['\\0', ...t, '\\0', ...u, '\\0'] as const;\n}\n\n// TypeScriptは次のように関数の戻り値の型を推測することができます:\nconst result = joinWithNullTerminators(['variadic', 'types'], [\"terminators\", 3]);\n\n</pre></code>\n// これらを使うことで、関数型プログラミングでよく使われる概念であるカリー化関数などの関数に\n 正しく型をつけることができるようになります。\n\n<code><pre>\nfunction curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T) {\n    return (...b: U) => f(...a, ...b);\n}\n\n</pre></code>\n// ここでは、3つのジェネリクス引数が使われています:\n - T: カリー化関数への入力の配列であるパラメータ\n - U: カリー化関数に _渡されておらず_ 戻り値の関数に適用される必要があるパラメータ\n - R: カリー化関数に渡された関数の戻り値の型\n\n<code><pre>\nconst sum = (left: number, right: number,) => left + right\n\nconst a = curry(sum, 1, 2)\nconst b = curry(sum, 1)(2)\nconst c = curry(sum)(1, 2)\n\n</pre></code>\n// そのほか詳細な説明とコードサンプルはこちら:\n https://github.com/microsoft/TypeScript/pull/39094\n\n","redirectHref":"ja/play/?ts=4.0.2#example/variadic-tuples"}},"staticQueryHashes":[]}