{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-0/new-ts-features/unknown-in-catch.ts.html","result":{"pageContext":{"name":"Unknown in Catch","title":"Unknown in Catch","lang":"ja","html":"\n JavaScriptはどんな値もthrowできるため、\n TypeScriptはエラーの型宣言をサポートしていません。\n\n<code><pre>\ntry {\n  // ..\n} catch (e) {}\n\n</pre></code>\n// 歴史的には、上記は、catch句の`e`はデフォルトが\n anyであることを意味していました。\n したがって、`e`の任意のプロパティに自由にアクセスできます。\n 4.0では、catch句における型の割り当ての制限を緩め、\n `any`と`unknown`の両方を許可するようにしました。\n\n any型を付けた場合と同じふるまい:\n<code><pre>\ntry {\n  // ..\n} catch (e) {\n  e.stack;\n}\n\n// unknown型を明示した場合のふるまい:\n\ntry {\n  // ..\n} catch (e: unknown) {\n  // 型システムが、`e`がどんな型なのかを知るまで\n  // `e`を利用することはできません。詳細は以下を確認してください:\n  // example:unknown-and-never\n  e.stack;\n\n  if (e instanceof SyntaxError) {\n    e.stack;\n  }\n}\n","redirectHref":"ja/play/?ts=4.0.2#example/unknown-in-catch"}},"staticQueryHashes":[]}