{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-0/new-ts-features/named-tuples.ts.html","result":{"pageContext":{"name":"Named Tuples","title":"Named Tuples","lang":"ja","html":" タプルは型システムにとって順序が重要な配列です。\n example:tuplesでタプルについてもっと詳しく学ぶことができます。\n\n TypeScript 4.0では、タプル型において、配列の様々な部分に名前をつけることが\n できるようになりました。\n\n 例えば、以前はタプルを使って次のように緯度経度を書いていました:\n\n<code><pre>\ntype OldLocation = [number, number]\n\nconst locations: OldLocation[] = [\n    [40.7144, -74.006],\n    [53.6458, -1.785]\n]\n\n</pre></code>\n// どちらが緯度でどちらが経度なのか、わかり辛いので\n このタプルをLatLongと名付けたほうがよかったかもしれません。\n\n 4.0では次のように記述できます:\n\n<code><pre>\ntype NewLocation = [lat: number, long: number]\n\nconst newLocations: NewLocation[] = [\n    [52.3702, 4.8952],\n    [53.3498, -6.2603]\n]\n\n</pre></code>\n// 次の行の最後にある0と1にマウスをホバーすると\n エディタに名前が表示されるようになりました\n<code><pre>\nconst firstLat = newLocations[0][0]\nconst firstLong = newLocations[0][1]\n\n</pre></code>\n// これだけだとちょっと印象が薄いかもしれません。\n しかし、この機能が追加された主な目的は型システムを使って\n 作業する際に情報が失われないようにすることです。\n 例えば、組み込みのParameters型を使って\n 関数からパラメータを抽出する場合を考えてみましょう:\n\n<code><pre>\nfunction centerMap(lng: number, lat: number) {}\n\n// 4.0では、抽出したパラメータにlngとlatが保持されています\ntype CenterMapParams = Parameters<typeof centerMap>\n\n// 3.9では、次のようになります\ntype OldCenterMapParams = [number, number]\n\n</pre></code>\n// より複雑な型の操作によって、\n パラメータの情報が失われることがあります。\n","redirectHref":"ja/play/?ts=4.0.2#example/named-tuples"}},"staticQueryHashes":[]}