{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-0/new-js-features/nullish-coalescing.ts.html","result":{"pageContext":{"name":"Nullish Coalescing","title":"Nullish Coalescing","lang":"ja","html":" # Nullish Coalescing\n\n 新しい演算子である`??`は、\n `===`がより厳密な等価の形として`==`を補うのと同じく、\n `||`の一般的な使い方を補強します。\n\n 理解をすすめるために、まずは || がどのような動作をするのか見てみましょう:\n\n<code><pre>\nconst response = {\n  nullValue: null,\n  headerText: \"\",\n  animationDuration: 0,\n  height: 400,\n  showSplashScreen: false,\n} as const;\n\nconst undefinedValue = response.undefinedValue || \"some other default\";\n// これは'some other default'となります\n\nconst nullValue = response.nullValue || \"some other default\";\n\n</pre></code>\n// 上記2つの例はたいていの言語でも同じようにふるまいます。\n || はなにかのデフォルト値を設定するツールとしてはとても優秀です。\n しかし、JavaScriptのfalsyチェックはよく使われる値に対して驚くような動作をすることがあります。\n\n 意図しない結果かもしれませんが、''は偽であり、次の値は'Hello, world!'となります\n<code><pre>\nconst headerText = response.headerText || \"Hello, world!\";\n\n// 意図しない結果かもしれませんが、0は偽であり、次の値は300となります\nconst animationDuration = response.animationDuration || 300;\n\n// 意図しない結果かもしれませんが、falseは偽であり、次の値はtrueとなります\nconst showSplashScreen = response.showSplashScreen || true;\n\n</pre></code>\n// || の代わりに ?? を使うと、\n === 演算子が両サイドの比較に使用されます:\n\n<code><pre>\nconst emptyHeaderText = response.headerText ?? \"Hello, world!\";\nconst zeroAnimationDuration = response.animationDuration ?? 300;\nconst skipSplashScreen = response.showSplashScreen ?? true;\n","redirectHref":"ja/play/?#example/nullish-coalescing"}},"staticQueryHashes":[]}