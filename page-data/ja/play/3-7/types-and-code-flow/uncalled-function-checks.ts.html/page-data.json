{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/3-7/types-and-code-flow/uncalled-function-checks.ts.html","result":{"pageContext":{"name":"Uncalled Function Checks","title":"Uncalled Function Checks","lang":"ja","html":"\n 3.7ではif文の中で誤って\n 関数の戻り値の代わりに関数そのものを使っていないかを\n 検出する機能が追加されました。\n\n これは関数が存在することがわかっていて、if文が常にtrueになる\n 場合にのみ適用されます。\n\n ここでは、オプションとオプションでないコールバックがある\n プラグインインターフェースの例を示します。\n\n<code><pre>\ninterface PluginSettings {\n  pluginShouldLoad?: () => void;\n  pluginIsActivated: () => void;\n}\n\ndeclare const plugin: PluginSettings;\n\n</pre></code>\n// pluginShouldLoadは存在しない可能性があるため\n 次のチェックは正当なものとなります。\n\n<code><pre>\nif (plugin.pluginShouldLoad) {\n  // pluginShouldLoadが存在する場合の処理\n}\n\n// 3.6以前で以下はエラーではありませんでした。\n\nif (plugin.pluginIsActivated) {\n  // プラグインが有効化されていた場合になにか処理を\n  // 行おうとしていますが、関数を呼び出すのではなく\n  // プロパティとして使用しています。\n}\n\n</pre></code>\n// pluginIsActivatedは常に存在しているはずですが、\n ifブロックの中でメソッドが呼び出されるため、\n TypeScriptはこのチェックを許可しています。\n\n<code><pre>\nif (plugin.pluginIsActivated) {\n  plugin.pluginIsActivated();\n}\n","redirectHref":"ja/play/?#example/uncalled-function-checks"}},"staticQueryHashes":[]}