{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/3-7/types-and-code-flow/assertion-functions.ts.html","result":{"pageContext":{"name":"Assertion Functions","title":"Assertion Functions","lang":"ja","html":"\n JavaScriptの柔軟性を考えると、ランタイムチェックにコードを追加して\n 仮定を検証するというのは良い考えでしょう。\n\n この検証を行うコードは一般的にアサーション(または不変条件)とよばれ、\n 変数が期待と一致しない場合に早期にエラーを発生させる\n 小さな関数です。\n\n Nodeには標準でこれを行うための、assertと呼ばれる関数が付属しており、\n インポートなしで使用することができます。\n\n しかし、ここでは自前で定義してみましょう。 \n valueという式がtrueであることを\n アサートする関数を次のように定義します:\n<code><pre>\ndeclare function assert(value: unknown): asserts value;\n\n// では、これを使用してEnumの型を検証してみましょう\ndeclare const maybeStringOrNumber: string | number;\nassert(typeof maybeStringOrNumber === \"string\");\n\n</pre></code>\n// TypeScript 3.7では、コードフロー解析でこのような関数を使い、\n コードがどのようなものであるか把握することができます。そのため、下記の\n 変数にマウスをホバーすると、文字列または数値から単なる文字列に\n 絞り込まれていることがわかります。\n\n<code><pre>\nmaybeStringOrNumber;\n\n</pre></code>\n// アサーション関数を使えば、推論されたコード全体で型の保証を行うことが\n できます。 \n 例えば、TypeScriptはパラメータに型を追加せずとも、\n 上記のアサート宣言を介して、この関数が数値を返すと\n 知っています。\n\n<code><pre>\nfunction multiply(x: any, y: any) {\n  assert(typeof x === \"number\");\n  assert(typeof y === \"number\");\n\n  return x * y;\n}\n\n</pre></code>\n// アサーション関数はタイプガードexample:type-guardsと\n 兄弟関係にありますが、関数を通して継続する場合に制御フローに\n 影響を与えるという点が異なります。\n\n 例えば、アサーション関数を使って段々とEnumを絞り込むことが\n できます\n\n<code><pre>\ndeclare const oneOfFirstFiveNumbers: 1 | 2 | 3 | 4 | 5;\n\ndeclare function isOdd(param: unknown): asserts param is 1 | 3 | 5;\ndeclare function isBelowFour(param: unknown): asserts param is 1 | 2 | 3 | 4;\n\n// これにより、Enumは次のように絞り込まれるはずです: 1 | 3 | 5\n\nisOdd(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n// さらにこれにより、Enumの取りうる値は次のように切り取られます: 1 | 3\n\nisBelowFour(oneOfFirstFiveNumbers);\noneOfFirstFiveNumbers;\n\n</pre></code>\n// 上記は、TypeScript 3.7のアサーション関数の\n 機能についての入門です。\n 詳細はリリースノートを確認してください:\n\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/\n","redirectHref":"ja/play/?#example/assertion-functions"}},"staticQueryHashes":[]}