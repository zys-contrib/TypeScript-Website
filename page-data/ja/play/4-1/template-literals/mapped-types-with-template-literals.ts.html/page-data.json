{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-1/template-literals/mapped-types-with-template-literals.ts.html","result":{"pageContext":{"name":"Mapped Types with Template Literals","title":"Mapped Types with Template Literals","lang":"ja","html":"\n TypeScript 4.1では、テンプレートリテラルがサポートされました。\n テンプレートリテラルの基本はexample:intro-to-template-literalsで学ぶことができます。\n\n また、Mapped Type宣言に新しい構文が4.1で追加されました。\n これにより、\"as `templated string`\"の形で\n Union型の文字列変換ができるようになります。\n\n 例えば、次の型は既存の型のすべてのプロパティを\n 従来のRESTの呼び出しに対応する4つの関数に変換します。\n\n 各APIのエンドポイントを記述するための文字列のテンプレートリテラル:\n<code><pre>\ntype GET<T extends string> = `get${Capitalize<T>}`\ntype POST<T extends string> = `post${Capitalize<T>}`\ntype PUT<T extends string> = `put${Capitalize<T>}`\ntype DELETE<T extends string> = `delete${Capitalize<T>}`\n\n// 上記のリテラル型のUnion\ntype REST<T extends string> = GET<T> | POST<T> | PUT<T> | DELETE<T>\n\n</pre></code>\n// 型を引数に取り、その型にあるそれぞれの文字列プロパティに対して、\n 上記のREST型をマッピングし、4つの関数を作成します。\n\n<code><pre>\ntype RESTify<Type> = {\n  [Key in keyof Type as REST<Key extends string ? Key : never>]: () => Type[Key]\n};\n\n</pre></code>\n// オブジェクトのキーは文字列、数値、シンボルをとりうるため、\n `Key extends string ? Key : never`が必要になります。\n これにより、この型はキーが文字列のケースのみを扱うことができます。\n\n 次に、APIから利用可能なオブジェクトのリストを作ります:\n\n<code><pre>\ninterface APIs {\n  artwork: { id: string, title: string};\n  artist: { id: string, name: string};\n  location: { id: string, address: string, country: string }\n}\n\n// そして、上記の型を使用するオブジェクトを宣言します:\ndeclare const api: RESTify<APIs>\n\n// そうすると、下記の関数がすべて自動的に作成されます\napi.getArtist()\napi.postArtist()\napi.putLocation()\n\n</pre></code>\n// テンプレートリテラルについて続けて詳しく学びたい場合は以下を参照してください:\n example:string-manipulation-with-template-literals\n\n もしくは告知ブログ記事をご覧ください:\n https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types\n\n","redirectHref":"ja/play/?ts=4.1.0-dev.20201028#example/mapped-types-with-template-literals"}},"staticQueryHashes":[]}