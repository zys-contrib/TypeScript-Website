{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/4-1/template-literals/string-manipulation-with-template-literals.ts.html","result":{"pageContext":{"name":"String Manipulation with Template Literals","title":"String Manipulation with Template Literals","lang":"ja","html":"\n 文字列リテラル型を抽出し操作するためにテンプレートリテラルを使用することができます。\n そのようにして抽出した文字列リテラル型は、今度はプロパティとして使用することができ、\n それにより、API内で文字列からのオブジェクトへと変換するための記述が可能になります。\n\n ## オブジェクトへの文字列の分割\n\n テンプレートリテラルは、あるパターンを\"分割点\"として使用して、\n その間の部分文字列を推測することができます。例えば...\n\n 次の型はセマンティクスバージョニングに準拠した文字列リテラルです。\n<code><pre>\ntype TSVersion = \"4.1.2\"\n\n</pre></code>\n// この文字列を構成する要素を抽出する型を作ることができます。\n 2つの'.'を中間点として、文字列を分割してみましょう。\n<code><pre>\ntype ExtractSemver<SemverString extends string> =\n   SemverString extends `${infer Major}.${infer Minor}.${infer Patch}` ?\n        { major: Major, minor: Minor, patch: Patch } : { error: \"Cannot parse semver string\" }\n\n</pre></code>\n// 1行目は次のexampleを見たことがあるならば、なじみがあるでしょう:\n example:intro-to-template-literals / example:mapped-types-with-template-literals\n\n 2行目はConditional Typeで、TypeScriptはSemverStringパラメータに対して\n inferをつかったこのパターンが一致するかどうかを検証します。\n\n 3行目はConditional Typeの結果です。条件が真ならば、それぞれのポジションに渡された\n 部分文字列をもつオブジェクトを返します。\n 文字列がパターンに一致しないならば、エラーメッセージをもつオブジェクトの型を返します。\n\n<code><pre>\ntype TS = ExtractSemver<TSVersion>\n\n// この型はセマンティクスバージョニングを100%サポートしているわけではありません。例えば、次の例を見てみましょう:\ntype BadSemverButOKString = ExtractSemver<\"4.0.Four.4444\">\n\n</pre></code>\n// 一方で、ExtractSemverではそのフォーマットに一致しない文字列はエラーになります。\n このケースでは文字列が\"X.Y.Z\"というフォーマットである場合のみマッチします。次の行はそうなっていないため、マッチしません:\n<code><pre>\ntype SemverError = ExtractSemver<\"Four point Zero point Five\">\n\n// ## 再帰的な文字列分割\n\n</pre></code>\n// 前述の例は厳密にマッチする文字列の場合には動作します。しかし、\n もっとあいまいなケースではTypeScript 4.0の機能example:variadic-tuplesを利用したい場合があるでしょう。\n\n 文字列を再利用可能な要素に分割するとき、タプルを使えばうまく結果を追跡できます。\n Split型の例を次に示します:\n\n<code><pre>\ntype Split<S extends string, D extends string> =\n    string extends S ? string[] :\n        S extends '' ? [] :\n            S extends `${infer T}${D}${infer U}` ?  [T, ...Split<U, D>] :  [S];\n\n</pre></code>\n// 1行目は2つのパラメータを宣言しています。ここでは簡潔にするため、1文字を使います。\n Sは分割したい文字列を、Dは区切り文字を表します。\n この行で、これら2つのパラメータが確実に文字列であることを保証します。\n\n 2行目は入力文字列から一般的な文字列に拡張できるか検証して、文字列がリテラルかどうかをチェックします。\n もしそうならば、文字列の配列を返します。\n リテラルではない文字列を扱うことができないためです。\n\n 例: 次のようなケース:\n<code><pre>\ntype S1 = Split<string, \".\">\n\n// 3行目は文字列が空かどうかをチェックし、もしそうならば空のタプルを返します。\ntype S2 = Split<\"\", \".\">\n\n</pre></code>\n// 4行目には、ExtractSemverと同様のチェックがあります。\n 入力文字列が`[接頭辞(T)][区切り文字][接尾辞(U)]`にマッチする場合は、\n 接頭辞(T)をタプルの最初のパラメータとして抽出します。次に、接尾辞(U)に対してSplitを再実行して、\n 複数回のマッチに対応できるようにします。\n\n 入力文字列に区切り文字が含まれていない場合は、\n 引数(S)として渡された文字列を含む、長さ1のタプルを返します。\n\n シンプルなケース\n<code><pre>\ntype S3 = Split<\"1.2\", \".\">\n\n// すべての.で分割するために一度再帰呼び出しを行うケース\ntype S4 = Split<\"1.2.3\", \".\">\n\n</pre></code>\n// この知識があれば、かなりの数のテンプレートリテラルのコミュニティの例を読んで\n 理解できるようになるはずです。例えば:\n\n - Dan Vanderkamによる、express route extractor\n https://twitter.com/danvdk/status/1301707026507198464\n\n - Mike Ryanによる、document.querySelectorの定義\n https://twitter.com/mikeryandev/status/1308472279010025477\n\n テンプレート文字列リテラルを使った非常に複雑な\n 文字列パーサの実験も行われています。面白い試みですが、\n 本番のコードベースで使用することは推奨されていません。\n\n https://github.com/ghoullier/awesome-template-literal-types\n\n また、告知ブログ記事もご覧ください:\n https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types\n","redirectHref":"ja/play/?ts=4.1.0-dev.20201028#example/string-manipulation-with-template-literals"}},"staticQueryHashes":[]}