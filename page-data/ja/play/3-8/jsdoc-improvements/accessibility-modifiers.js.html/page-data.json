{"componentChunkName":"component---src-templates-play-example-tsx","path":"/ja/play/3-8/jsdoc-improvements/accessibility-modifiers.js.html","result":{"pageContext":{"name":"Accessibility Modifiers","title":"Accessibility Modifiers","lang":"ja","html":" @ts-check\n\n TypeScriptのJSDocが拡張され、クラスプロパティのアクセス修飾子が\n サポートされるようになりました:\n\n @public - 設定しなかった場合のデフォルト\n @private - フィールドが定義されているクラスからのみ\n            アクセスできるフィールド\n @protected - フィールドが定義されているクラスとそのクラスの\n              サブクラスからアクセスできるフィールド\n\n\n 以下は、Animalの基底クラスで、privateフィールドとprotectedフィールドの\n 両方を持ちます。サブクラスは\"this.isFast\"にアクセスできますが、\n \"this.type\"にはアクセスできません。\n\n これらのクラスの外側では、両方のフィールドはどちらも表示されず、\n @ts-checkが有効になっている場合は\n コンパイラエラーとなります:\n\n<code><pre>\nclass Animal {\n  constructor(type) {\n    /** @private */\n    this.type = type\n    /** @protected */\n    this.isFast = type === 'cheetah'\n  }\n\n  makeNoise() {\n    // おそらく、これらのAnimalはとても静かなのでしょう\n    if (this.type === 'bengal') {\n      console.log('')\n    } else {\n      throw new Error('makeNoise was called on a base class')\n    }\n  }\n}\n\nclass Cat extends Animal {\n  constructor(type) {\n    super(type || 'housecat')\n  }\n\n  makeNoise() {\n    console.log('meow')\n  }\n\n  runAway() {\n    if (this.isFast) {\n      console.log('Got away')\n    } else {\n      console.log('Did not make it')\n    }\n  }\n}\n\nclass Cheetah extends Cat {\n  constructor() {\n    super('cheetah')\n  }\n}\n\nclass Bengal extends Cat {\n  constructor() {\n    super('bengal')\n  }\n}\n\nconst housecat = new Cat()\nhousecat.makeNoise()\n\n// 次のようには利用できません\nhousecat.type\nhousecat.isFast\n\n</pre></code>\n// 詳細はこちらの記事で確認できます\n https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#jsdoc-modifiers\n","redirectHref":"ja/play/?ts=3.8.3#example/accessibility-modifiers"}},"staticQueryHashes":[]}