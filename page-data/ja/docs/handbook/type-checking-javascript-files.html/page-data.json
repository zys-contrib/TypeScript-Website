{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ja/docs/handbook/type-checking-javascript-files.html","result":{"data":{"markdownRemark":{"id":"8a99bdb3-9c87-5287-b55f-735d0b0ea95e","excerpt":"ここでは、.jsファイルを.tsファイルと比較したときの、チェック機能の違いについて注目すべき点をいくつか挙げます。 プロパティはクラス本体における代入から推測される ES2015には、クラスのプロパティを宣言する手段がありません。プロパティはオブジェクトリテラルのように、動的に代入されます。 .js…","html":"<p>ここでは、<code>.js</code>ファイルを<code>.ts</code>ファイルと比較したときの、チェック機能の違いについて注目すべき点をいくつか挙げます。</p>\n<h2 id=\"プロパティはクラス本体における代入から推測される\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AF%E3%82%AF%E3%83%A9%E3%82%B9%E6%9C%AC%E4%BD%93%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BB%A3%E5%85%A5%E3%81%8B%E3%82%89%E6%8E%A8%E6%B8%AC%E3%81%95%E3%82%8C%E3%82%8B\" aria-label=\"プロパティはクラス本体における代入から推測される permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロパティはクラス本体における代入から推測される</h2>\n<p>ES2015には、クラスのプロパティを宣言する手段がありません。プロパティはオブジェクトリテラルのように、動的に代入されます。</p>\n<p><code>.js</code>ファイルでは、コンパイラはクラス本体のプロパティの代入からプロパティを推測します。\nコンストラクタで型が定義されていない場合や、コンストラクタでの型がundefinedまたはnullである場合を除いて、プロパティの型はコンストラクタ内で与えられた型になります。\nプロパティの型がコンストラクタ内で与えられない場合、プロパティの型は、プロパティの代入式におけるすべての右辺の値の型によるUnion型となります。\nメソッドやgetter、setter内で定義されたプロパティは任意とみなされるのに対して、コンストラクタで定義されたプロパティは常に存在するものとみなされます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: any' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: any' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method(): void' >method</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: number' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: string | undefined' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"plunkbat\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok、constructorUnknown は string | undefined です</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.methodOnly: string | boolean | undefined' >methodOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"ok\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok、しかし、methodOnlyはundefinedの可能性もあります</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method2(): void' >method2</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.methodOnly: string | boolean | undefined' >methodOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// こちらもokです。methodOnlyの型は string | boolean | undefined です</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZTS1IAbAQxRVAGFQBvNUUSPAOxQAXbAFdIgggAoAlBy7dQg6AEsUAOl4DhYidgDyfWgE9QAXlAAGANzzuS1Rv5DR4ggFU+CPngDufM6AifAAmsABmynywwTbcAL7yALawSnjBMnIKiirqms46BAbGAWH0tCiwsQr2uU7artgeXr7+5gBEAA60QQgARvSCbVagmHgIgIAMefW6Td5+oID2DKDOkQDmoAA+gSHhkdGggOYMgJoMttkOyanBRSbtY0MjYGPjgOoMgNIMz+MX0GnXC0GhESiwUAdgyAe+VAL8BgHIDQBBDIAhBkAUQyAPwYTvEkilvsFSBlOFkamovj9DDdFKJKg9QIBlBkAhgyASIZoWNjoAgBgJVyJwMA0epLFZ8dZbXp4PC0WD0fxbf67IGHFGgBJxIA'>Try</a></div></pre>\n<p>クラス本体でプロパティが設定されていない場合、そのプロパティは未知のものとみなされます。\nクラスプロパティが読み取り専用ならば、コンストラクタにプロパティを追加した後に、型指定のためJSDocを使って型宣言の注釈を付けます。\n後で初期化されるのであれば、値を指定する必要さえありません:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | undefined}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.prop: number | undefined' >prop</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | undefined}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.count: number | undefined' >count</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor C(): C' >C</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.prop: number | undefined' >prop</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.count: number | undefined' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZTS1IAbAQxRVAGFQBvNUUSPAOxQAXbAFdIgggAoAlBy7dQwAFRKIggJ4AHWBz4iAtgCMcoAD6gRfACawAZgEs+sKwF9QS4PO6Do9lADpNfE1QAF4LaztHZwBuL0UVNS0ddj0jE3NLGwcnV3dPBVAfP39eS0E47hc0arRaWEEeMNAnAHdWGTjIQODmgAYYxTAAeQBpGlK8cuaAIiFsRwBzGZigA'>Try</a></div></pre>\n<h2 id=\"コンストラクタ関数はクラスと同等である\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E9%96%A2%E6%95%B0%E3%81%AF%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A8%E5%90%8C%E7%AD%89%E3%81%A7%E3%81%82%E3%82%8B\" aria-label=\"コンストラクタ関数はクラスと同等である permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンストラクタ関数はクラスと同等である</h2>\n<p>ES2015以前のJavascriptでは、クラスの代わりにコンストラクタ関数が使われていました。\nコンパイラはこうしたパターンをサポートしており、コンストラクタ関数をES2015のクラスと同等のものとして理解します。\n上記で説明したプロパティの推論ルールも全く同じように動作します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function C(): void' >C</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: any' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: any' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='class C&#10;function C(): void' >C</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Function.prototype: any' >prototype</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method(): void' >method</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: number' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: string | undefined' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"plunkbat\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK、型はstring | undefinedです</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgDYAOAZjOtNLQDMBXAO0gBcBLPN0AMIAKAJSgA3mlChO0bigB0kPik7YWXAgHk2AGwCeoALygADAG4pMuYuVtV6zdgCqbBGzwB3fifYATWCZuNlg-SwBfNAEFAAd8TjxOfRjYBQBbWFk8P2NQVg4ePlBRCStZeSUVNQ0E7B0DXKYAQ10UWEtpctsqx1rXdy8fUAAiGN12BAAjJs5h81BMLQBpQEAGQGj1QHsGB2CAc1AAH1B-QODQwHMGQE0GNHDzIA'>Try</a></div></pre>\n<h2 id=\"commonjsモジュールがサポートされている\" style=\"position:relative;\"><a href=\"#commonjs%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B\" aria-label=\"commonjsモジュールがサポートされている permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJSモジュールがサポートされている</h2>\n<p><code>.js</code>ファイルでは、TypeScriptはCommonJSモジュール形式をサポートしています。\n<code>exports</code>や<code>module.exports</code>への代入は、エクスポート宣言として認識されていますし、\n同様に<code>require</code>関数の呼び出しも、モジュールインポートとして認識されます。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// `import module \"fs\"`と同じ</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// `export function readFile`と同じ</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFile</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>JavaScriptのモジュールサポートは、TypeScriptのモジュールサポートよりも構文的に寛容です。\nほとんどの代入と宣言の組み合わせがサポートされています。</p>\n<h2 id=\"クラス、関数、オブジェクトリテラルは名前空間を作る\" style=\"position:relative;\"><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81%E9%96%A2%E6%95%B0%E3%80%81%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%81%AF%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%82%92%E4%BD%9C%E3%82%8B\" aria-label=\"クラス、関数、オブジェクトリテラルは名前空間を作る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クラス、関数、オブジェクトリテラルは名前空間を作る</h2>\n<p>クラスは<code>.js</code>ファイルにおける名前空間を作成します。\nこれを利用してクラスをネストすることができます。例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C&#10;module C' >C</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #0070C1\"><data-lsp lsp='class C&#10;module C' >C</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) C.D: typeof D' >D</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDC0G8C+AoWA6AItAvNUkMyA3EA'>Try</a></div></pre>\n<p>また、ES2015以前のコードのための擬似的な静的メソッドとしても利用できます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Outer(): void&#10;module Outer' >Outer</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Outer.y: any' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Outer&#10;module Outer&#10;function Outer(): void' >Outer</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Outer.Inner(): void' >Inner</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Inner.yy: any' >yy</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Outer&#10;module Outer&#10;function Outer(): void' >Outer</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >innter</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAeRFApgJwBQEpEDeAUIolABYwDOAdAJ6IC8iATANxEC+RRqGmNAJJgwWJolCRYCRHkIkylWnQbN2XDrzRYaMEfzxsgA'>Try</a></div></pre>\n<p>シンプルな名前空間を作成することにも使えます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\"> = {};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) ns.C: typeof C' >C</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ns.func(): void' >func</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/G4QwTgBAdgzhC8EDeBfA3AKFgOgMIIgGMAbEGOVTHAMwFcpCC6GAXASwHsoIAKASmToMWGGiA'>Try</a></div></pre>\n<p>その他の変形も同様に可能です:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// IIFE (即時実行関数式)</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: {}' >ns</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: undefined' >n</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: undefined' >n</data-lsp></span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #000000\">})();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: {}' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='any' >CONST</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// グローバル名前空間をデフォルトにする</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\"> ||</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ここにコードを記述する</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) assign.extra: number' >extra</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEElwMQUVAKQzsqCEzQ+dqBkIwRamAdTQ8PoEoAoANwEMAnUAOwGdQBeBAMwFcqBjAFwEsB7KhFXygA3oVChyAU04tyAgQB9FogL4BuQqvzx8m2gDoAwgHkAcgGUAKg1ABGTYRChADQyBbhkA-DIAWGQNcMgWBVAWSVALy9AZNTAJIZAcYZAVYZASoYfQAmGQGsGQE0GQGiGEgpQUhoabgBzAXpxLJz8pUVi1g4efgRhMQkJZ0BlBmbEwGaGD0BJhjDADCjAB-i04o1CbNyCgykAD05yUlsHIA'>Try</a></div></pre>\n<h2 id=\"オブジェクトリテラルは無制限型である\" style=\"position:relative;\"><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%81%AF%E7%84%A1%E5%88%B6%E9%99%90%E5%9E%8B%E3%81%A7%E3%81%82%E3%82%8B\" aria-label=\"オブジェクトリテラルは無制限型である permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>オブジェクトリテラルは無制限型である</h2>\n<p><code>.ts</code>ファイルにおいて、変数宣言を初期化するオブジェクトリテラルは、宣言に型を与えます。\n元のリテラルで指定されていない新しいメンバを追加することはできません。\nこのルールは<code>.js</code>ファイルでは緩和されています; オブジェクトリテラルには無制限型(インデックスシグネチャ)があり、元々定義されていないプロパティを追加したり検索したりすることができます。\n例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// これは許容されます</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/G4QwTgBA9gRgVhAvBA3hEAuCBGCBfAbgChY4A6GJCAJgIgHp6JBlBkBiGQewZBGKME7tQVQZXAfgyBNBiA'>Try</a></div></pre>\n<p>オブジェクトリテラルはインデックスシグネチャ <code>[x:string]: any</code> を持っているかのように動作し、制限をもつオブジェクトではなく無制限のマップとして扱うことができます。</p>\n<p>他の特別なJSチェックの動作と同様に、変数にJSDoc型を指定することでこの動作を変更することができます。例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{a: number}}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >b</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'b' does not exist on type '{ a: number; }'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'b' does not exist on type '{ a: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZyBODAKlogBcBPAB1lAG9OBDEgOwCuAWwBGOAL4TQtYGgBuPbKDyiAVqAC8XUH1ABGUBIDcaVWoB0orWWNA'>Try</a></div></pre>\n<h2 id=\"null、undefined、空の配列の初期化子はanyまたはany型を付ける\" style=\"position:relative;\"><a href=\"#null%E3%80%81undefined%E3%80%81%E7%A9%BA%E3%81%AE%E9%85%8D%E5%88%97%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96%E5%AD%90%E3%81%AFany%E3%81%BE%E3%81%9F%E3%81%AFany%E5%9E%8B%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B\" aria-label=\"null、undefined、空の配列の初期化子はanyまたはany型を付ける permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null、undefined、空の配列の初期化子はanyまたはany[]型を付ける</h2>\n<p>nullまたはundefinedで初期化されたパラメータやプロパティは、厳密なnullチェックが有効化されていたとしても、any型になります。\n[]で初期化されたパラメータやプロパティは、厳密なnullチェックが有効化されていたとしても、any[]型になります。\n唯一の例外は上記で説明した初期化子を複数持つプロパティの場合です。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Foo(i?: null): void' >Foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(local var) j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any' >l</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Foo(i?: null): Foo' >Foo</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any[]' >l</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >i</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any[]' >l</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"end\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAMTnAFDRBeRYQA2BAlIgN4BQiiMwi6AhDKVrgIwDcViAbgIYAnRACscicABMApsBhgpErtVG4ATEsRQAFjADOAOgJiA2gF0uAXwoV+Q4GjHyA7ijTpiXe3EP6ADiF0tdC99Zk80H39A9AAiKTAJGI8gA'>Try</a></div></pre>\n<h2 id=\"関数のパラメータはデフォルトでは任意である\" style=\"position:relative;\"><a href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AF%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7%E3%81%AF%E4%BB%BB%E6%84%8F%E3%81%A7%E3%81%82%E3%82%8B\" aria-label=\"関数のパラメータはデフォルトでは任意である permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>関数のパラメータはデフォルトでは任意である</h2>\n<p>ES2015以前のJavascriptでは、パラメータが任意かどうかを指定する方法がないため、<code>.js</code>ファイルの関数パラメータはすべて任意とみなされます。\n宣言されたパラメータ数よりも少ない引数で、関数を呼び出すことが可能です。</p>\n<p>宣言された数より、引数の数が多い関数を呼び出すとエラーになるので注意が必要です。</p>\n<p>例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK、二番目の引数は任意とみなされます</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\"><data-err>3</data-err></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// エラー、引数が多すぎます</span></div><span class=\"error\"><span>Expected 0-2 arguments, but got 3.</span><span class=\"code\">2554</span></span><span class=\"error-behind\">Expected 0-2 arguments, but got 3.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEEUBcBOBLSbALlADMBDAGxVgzHFl1wHtcVSB2ABm4DZQPfqABMAVjEAWNGQCuAOyL4W80ACMKuABQUANOoCUoAN5pQoSCpQsqsAHRUWAcx2gA1KABEX94YDcaAC+aGga2gCMBn6gmADyANKAgAyAMXKAVq6Ad26AdgyAqPqADqaA9gyA33KA8IaAFgyA-gyAVgyAqgyAMQyAfgyAmgyhmlrh+iJRLREd+gDMUTFggBUMgJcMgD8MiXmAMgyAWJqNgHIMTUA'>Try</a></div></pre>\n<p>JSDocの注釈付き関数はこの規則から除外されます。\n任意であることを表すには、JSDocの任意パラメータ構文(<code>[</code> <code>]</code>)を使用します。例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[somebody]</span><span style=\"color: #008000\"> - 誰かの名前</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sayHello(somebody?: string | undefined): void' >sayHello</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"John Doe\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string' >somebody</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function sayHello(somebody?: string | undefined): void' >sayHello</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAHAhgJ0QW0gbwM4BdkCWAdgOYC+kA2tgPZoCmARjQCYCeAupALSSANUYGkGQHYMgWBVAskpQQwcADMArkQDGuAjSKRsiNgAl6AGz00AFLQbN2ASixRIBGZCMBCU01ZsrmG5A11X7SAC8kABEAFI0ABbqACI09MEA3DZkNopqtHr0AHSGJEbBugY0IZAA1D5mbhZJKeCaOvqGRtVAA'>Try</a></div></pre>\n<h2 id=\"可変長引数のパラメータ宣言は、argumentsの使い方から推測される\" style=\"position:relative;\"><a href=\"#%E5%8F%AF%E5%A4%89%E9%95%B7%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E5%AE%A3%E8%A8%80%E3%81%AF%E3%80%81arguments%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%81%8B%E3%82%89%E6%8E%A8%E6%B8%AC%E3%81%95%E3%82%8C%E3%82%8B\" aria-label=\"可変長引数のパラメータ宣言は、argumentsの使い方から推測される permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>可変長引数のパラメータ宣言は、<code>arguments</code>の使い方から推測される</h2>\n<p>関数本体で<code>arguments</code>を参照すると、暗黙的に可変長引数パラメータ(つまり: <code>(...arg: any[]) => any</code>)を持っているとみなされます。JSDocの可変長引数構文を使って、引数の型を指定します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">args</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum(...args: number[]): number' >sum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #008000\">/* numbers */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #0000FF\"><data-lsp lsp='(local var) arguments: IArguments' >arguments</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) IArguments.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\"> += </span><span style=\"color: #0000FF\"><data-lsp lsp='(local var) arguments: IArguments' >arguments</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEAcEMCdYFtwG8B0mB2BXJAjAU3gF9wEBzAZ3BGACgAzHLAYwBcBLAey3CrwAKUOFwFiNOgEo09cOABuCcO27tYAG3ABecAAYA3HPCNu8cIKXnOO-QfA2APOXgU8hLOyroNHiuwALe04AahCZVGN5VXUtEN1Kd08qAG1OAF0jeRJjeEJ2HHg+GM0jEiA'>Try</a></div></pre>\n<h2 id=\"未指定の型パラメータのデフォルトはanyである\" style=\"position:relative;\"><a href=\"#%E6%9C%AA%E6%8C%87%E5%AE%9A%E3%81%AE%E5%9E%8B%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AFany%E3%81%A7%E3%81%82%E3%82%8B\" aria-label=\"未指定の型パラメータのデフォルトはanyである permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>未指定の型パラメータのデフォルトは<code>any</code>である</h2>\n<p>Javascriptにはジェネリクス型のパラメータを指定するための標準構文がないため、未指定の型パラメータはデフォルトで<code>any</code>となります。</p>\n<h3 id=\"extends句において\" style=\"position:relative;\"><a href=\"#extends%E5%8F%A5%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6\" aria-label=\"extends句において permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>extends句において</h3>\n<p>例えば、<code>React.Component</code>は、<code>Props</code>と<code>State</code>の2つの型パラメータを持つように定義されています。\n<code>.js</code>ファイルでは、extends句でこれらを指定する正しい方法はありません。型引数はデフォルトで<code>any</code>となります:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// this.propsはany型なので、許可されています</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>JSDocの<code>@augments</code>を使って明示的に型を指定します。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@augments</span><span style=\"color: #008000\"> {Component&lt;{a: number}, State&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// エラー: b は {a:number} に存在しません</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"jsdocリファレンスにおいて\" style=\"position:relative;\"><a href=\"#jsdoc%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6\" aria-label=\"jsdocリファレンスにおいて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDocリファレンスにおいて</h3>\n<p>JSDocで指定されていない型引数のデフォルトはanyです:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\">{Array} */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK、xはArray&lt;any&gt;型です</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\">{Array.&lt;number&gt;} */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// エラー、stringはnumberに代入できません</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCmBvAggJ3QQ1gX3CMAFABuW64AHuALzgDaAugNxFGUB08ArgM4AWACgCMASmbhgwcAHkA0uy58hAIl7R0ASwB2AcxXjJ0+YEAGSoHsGDNlgAeLNtgA+QNHqgcwZAmgxtQEGAhRWcDhttbgBbACNEdEd8QlJycFhaBhY2WCUBEUMpWQV0nky1DR19bOlACoZAS4ZAH4YTdS09cxCIqMBrBkBjuUBTRVdAWQZAPwZAbQZAZIYgA'>Try</a></div></pre>\n<h3 id=\"関数呼び出しにおいて\" style=\"position:relative;\"><a href=\"#%E9%96%A2%E6%95%B0%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6\" aria-label=\"関数呼び出しにおいて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>関数呼び出しにおいて</h3>\n<p>ジェネリクス関数の呼び出しでは、引数から型パラメータを推論します。この処理では、主に推論の根拠がないために型の推論に失敗することが時たまあります。そのような場合、型パラメータはデフォルトで<code>any</code>となります。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">p</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Promise&lt;any&gt;;</span></div></code></div></pre>\n<p>JSDocで利用可能なすべての機能を知りたい場合は、<a href=\"/docs/handbook/jsdoc-supported-types.html\">リファレンス</a>を参照してください。</p>","headings":[{"value":"プロパティはクラス本体における代入から推測される","depth":2},{"value":"コンストラクタ関数はクラスと同等である","depth":2},{"value":"CommonJSモジュールがサポートされている","depth":2},{"value":"クラス、関数、オブジェクトリテラルは名前空間を作る","depth":2},{"value":"オブジェクトリテラルは無制限型である","depth":2},{"value":"null、undefined、空の配列の初期化子はanyまたはany[]型を付ける","depth":2},{"value":"関数のパラメータはデフォルトでは任意である","depth":2},{"value":"可変長引数のパラメータ宣言は、argumentsの使い方から推測される","depth":2},{"value":"未指定の型パラメータのデフォルトはanyである","depth":2},{"value":"extends句において","depth":3},{"value":"JSDocリファレンスにおいて","depth":3},{"value":"関数呼び出しにおいて","depth":3}],"frontmatter":{"permalink":"/ja/docs/handbook/type-checking-javascript-files.html","title":"JavaScriptファイルの型チェック","disable_toc":null,"handbook":null,"oneline":"TypeScriptを使ってJavaScriptファイルに型チェックを追加する方法","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"TypeScriptを活用したJSプロジェクト","oneline":"TypeScriptを使ってJavaScriptファイルに型チェックを追加する方法","permalink":"/ja/docs/handbook/intro-to-js-ts.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"JSDocリファレンス","oneline":"TypeScriptを備えたJavaScriptはどのようなJSDocをサポートしているか","permalink":"/ja/docs/handbook/jsdoc-supported-types.html"}}}},"pageContext":{"id":"7-javascriptファイルの型チェック","slug":"/ja/docs/handbook/type-checking-javascript-files.html","repoPath":"/packages/documentation/copy/ja/javascript/Type Checking JavaScript Files.md","previousID":"4dd04563-f75d-58e1-b777-abe7b42d8a5d","nextID":"c2138dae-cfe1-5e03-9460-9e3c5470d5e8","lang":"ja","modifiedTime":"2024-10-21T12:35:09.553Z"}},"staticQueryHashes":[]}