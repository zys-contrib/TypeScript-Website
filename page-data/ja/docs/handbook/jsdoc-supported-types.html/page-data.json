{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ja/docs/handbook/jsdoc-supported-types.html","result":{"data":{"markdownRemark":{"id":"1a6fdeff-7d42-5c52-9fa3-b212ee34bddf","excerpt":"以下のリストは、JavaScriptファイルの型情報を提供する\nJSDocアノテーションにおいて、現在サポートされている構文の概要です。 以下に明示的にリストに入っていないタグ(@asyncなど)はまだサポートされていないことに注意してください。 @type @param (or @arg or @argument…","html":"<p>以下のリストは、JavaScriptファイルの型情報を提供する\nJSDocアノテーションにおいて、現在サポートされている構文の概要です。</p>\n<p>以下に明示的にリストに入っていないタグ(<code>@async</code>など)はまだサポートされていないことに注意してください。</p>\n<ul>\n<li><code>@type</code></li>\n<li><code>@param</code> (or <code>@arg</code> or <code>@argument</code>)</li>\n<li><code>@returns</code> (or <code>@return</code>)</li>\n<li><code>@typedef</code></li>\n<li><code>@callback</code></li>\n<li><code>@template</code></li>\n<li><code>@class</code> (or <code>@constructor</code>)</li>\n<li><code>@this</code></li>\n<li><code>@extends</code> (or <code>@augments</code>)</li>\n<li><code>@enum</code></li>\n</ul>\n<h4 id=\"class拡張\" style=\"position:relative;\"><a href=\"#class%E6%8B%A1%E5%BC%B5\" aria-label=\"class拡張 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>class</code>拡張</h4>\n<ul>\n<li><a href=\"#jsdoc-property-modifiers\">プロパティ修飾子</a> <code>@public</code>、<code>@private</code>、<code>@protected</code>、<code>@readonly</code></li>\n</ul>\n<p>タグの意味は通常、<a href=\"https://jsdoc.app\">jsdoc.app</a>で与えられたものと同じか、あるいはそのスーパーセットです。\n以下のコードでは、それぞれのタグの違いを説明し、使用例を示します。</p>\n<p><strong>注意:</strong> <a href=\"/play?useJavaScript=truee=4#example/jsdoc-support\">JSDocサポートを探るプレイグラウンド</a>を使用できます</p>\n<h2 id=\"type\" style=\"position:relative;\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@type</code></h2>\n<p>“@type”タグを使用すれば、型名(プリミティブ、TypeScript宣言やJSDocの”@typedef”タグで定義されたもの)を参照することができます。\nほとんどのJSDoc型と、<a href=\"/docs/handbook/basic-types.html\"><code>string</code>のような最も基本的なもの</a>から<a href=\"/docs/handbook/advanced-types.html\">Conditional Typesのような高度なもの</a>まで、あらゆるTypeScriptの型を使うことができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var s: string' >s</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Window}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var win: Window' >win</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{PromiseLike&lt;string&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var promisedString: PromiseLike&lt;string>' >promisedString</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// DOMプロパティを使ってHTML要素を指定することができます。</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{HTMLElement}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var myElement: HTMLElement' >myElement</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ParentNode.querySelector&lt;any>(selectors: any): any (+4 overloads)' >querySelector</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='any' >selector</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module element' >element</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='module element.dataset' >dataset</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) element.dataset.myData: string' >myData</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4Gd4CcCWAdgOYC+UIw4AbgIa6RYDc44oMCK6GA6kQCYB7AO6loVOg2FEWbMHCRpMABVyCAtviyoAMvgDWqADw4CJAHxjKNepGRrN2-gGU8RYrODBIAEQDyALKA6wyAtwyAiwyAYwyAxQyASQyA-vKAxgyAZgwAEgAqATqAgZGABL4xgODGgFnagJoMgNEMgMoMgBYMgDIMgOYMgLIMgH4MxYBADHIcitzpmQCiADao6qiE8FYStuqI-YPD8JAAvJBCAMYArkMjAHQAjquouIjOqAPL8IK4ABTaJ2e4AJQsxzNb-LTwtNrwm5M+b7QLkAARICmEA'>Try</a></div></pre>\n<p><code>@type</code>ではUnion型も指定できます — 例えば、次の型は文字列か真偽値のどちらかになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(string | boolean)}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var sb: string | boolean' >sb</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4AoDO8BOAlgHYDmkAPpAEYD2tANqgIbECUAvlCMOAG7N8kHNQDcQA'>Try</a></div></pre>\n<p>Union型の場合は、丸括弧は任意であることに注意してください。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | boolean}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var sb: string | boolean' >sb</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4Gd4CcCWAdgOaQA+kARgPbUA2qAhoQL5QjDgBujukWlANxA'>Try</a></div></pre>\n<p>様々な構文を使って配列の型を指定することができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number[]}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var ns: number[]' >ns</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Array.&lt;number&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var nds: number[]' >nds</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Array&lt;number&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var nas: number[]' >nas</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeA7ArgWwEaIE4DaAugL7gjABQAbgIb7hoDOA3FaBDAsigIL58dWADoAPJlwEAfOUq0GTACZsOYKHCSoBQ2BOx58sitXqM0dNkA'>Try</a></div></pre>\n<p>オブジェクトリテラル型を指定することもできます。\n例えば、‘a’ (文字列) と ‘b’ (数値) をプロパティとして持つオブジェクトは次のような構文を使って指定します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number }}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var var9: {&#10;    a: string;&#10;    b: number;&#10;}' >var9</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeLwEMBc4DO0AnASwDsBzAGnACMcSBXAW2sQPAF93wRgAoANwxtBBAJwBuIA'>Try</a></div></pre>\n<p>JSDocの標準構文かTypeScriptの構文を使えば、文字列と数値のインデックスシグネチャを使ってマップや配列のようなオブジェクトを指定することができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 任意の`string`プロパティを`number`にマッピングするマップライクなオブジェクト</span></div><div class='line'><span style=\"color: #008000\"> *</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object.&lt;string, number&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var stringToNumber: {&#10;    [x: string]: number;&#10;}' >stringToNumber</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object.&lt;number, object&gt;}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var arrayLike: {&#10;    [x: number]: object;&#10;}' >arrayLike</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUxvuUeENB2DAAwM4BcBOBLAdgc2UHWGQW4ZBFhkDGGQYoZAkhmVwFcBbAIwFNNlBrBkD2GQYYZAKwyBnhkANDIE0GQNEM-IoEuGQCUMgeoZAVgyAqhkBrDIA6GQOUMCwBMMUCNEgABdAE8ADm0gBvAPIsAVmwDG6AHQAeDDgIAaSEZWDgA+AF8DYHAANwBDTEgfPHwAFQB7ADlmdkwAbnBwUBhTS2t7J1cPTyCcgLSKt3DoKLiE+MxYswAZbABrNlygA'>Try</a></div></pre>\n<p>前述の2つの型は、TypeScriptの型である<code>{ [x: string]: number }</code>および<code>{ [x: number]: any }</code>と等価です。コンパイラは両方の構文を理解します。</p>\n<p>関数は、TypeScriptとClosureのどちらの構文を使っても指定することができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function(string, boolean): number}</span><span style=\"color: #008000\"> Closure構文 */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var sbn: (arg0: string, arg1: boolean) => number' >sbn</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(s: string, b: boolean) =&gt; number}</span><span style=\"color: #008000\"> TypeScript構文 */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var sbn2: (s: string, b: boolean) => number' >sbn2</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeAzArgOwMbQJYD2WAFAM7QBO+WA5gDTgBGhhANogIZYCUAXOCwYAtk0SUAvuADCbQmQyVEgactA4abgQwAFAA3TpXBkmWANxbQEGAmQpyAitTqMmAluy69wAXgB8gkWKS4AAq1gDKONTw0Goa2noGRlgATCZAA'>Try</a></div></pre>\n<p>あるいは、型が特定されていない<code>Function</code>型を使うこともできます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Function}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var fn7: Function' >fn7</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var fn6: Function' >fn6</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeAxArgOwMbQJYD2WAvuCMAFABuAhgE7gBmWA7ANyWgQwLIpNseIqXJU6jFgDZ2QA'>Try</a></div></pre>\n<p>Closureの他の型でも動作します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{*}</span><span style=\"color: #008000\"> - &apos;any&apos;型になります</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var star: any' >star</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{?}</span><span style=\"color: #008000\"> - 不明な型(&apos;any&apos;と同じ)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var question: any' >question</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4gL6QLSQDkAhgHaKGDR6oNYMgVgyBRDIH4MgmgxQjDgBuxATpAM7xeAbnCgI0OEjSYA-LgKBYOUBwZrUoAKEuUKALBkAwKoA0GAJRsO3PgEcArqkEBLAPalhQA'>Try</a></div></pre>\n<h3 id=\"キャスト\" style=\"position:relative;\"><a href=\"#%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88\" aria-label=\"キャスト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>キャスト</h3>\n<p>TypeScriptはClosureからキャスト構文を借用しています。\nこれにより、丸括弧で囲まれた式の前に<code>@type</code>タグを追加することで、型を他の型にキャストすることができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | string}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var numberOrString: string | number' >numberOrString</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var typeAssertedNumber: number' >typeAssertedNumber</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var numberOrString: string | number' >numberOrString</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4DsCuBbAI1QCdIAfSAZ3mIEssBzAXyhGHADcBDU3QkgPLEAyjXoNIAXkgBZLvAAWAOmJcsAEwD2eABQBKSAB5IABiUBWSAH5IAIgWoANo823IALkgBGEyYDcnDyQSGgAgpSUJPCo6gBy+ESk0qAwCCjo2AkkTNDAkDp8iUKidIx6fkA'>Try</a></div></pre>\n<h3 id=\"インポート型\" style=\"position:relative;\"><a href=\"#%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E5%9E%8B\" aria-label=\"インポート型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インポート型</h3>\n<p>インポート型を使用して他のファイルから宣言をインポートすることもできます。\nこの構文はTypeScript固有のものであり、JSDocの標準とは異なります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: types.d.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Pet = {&#10;    name: string;&#10;}' >Pet</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: main.js</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #008000\"> { import(\"./types\").Pet }</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function walk(p: import(\"./types\").Pet): void' >walk</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Pet' >p</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Walking </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Pet' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">...`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKALgTwA7wDOAdACYnZEBQ8AHvgPYBO2OB8oACvGwLygA3tVCgU6LEWzNoiAOYAaagF8A3NWogIMBOMyhUyWSQBWNYACoLIixHzJmaUPiGhoqJqwAUAIhLA8QiIfAEoSHjZlG2BqSABXRABjbGhGRFAAd2RYAGsvfBChEVBEtKJGBBJYRjkvAAMAdWyc2TlQABJBfBI9ZRJ+upD1ZSA'>Try</a></div></pre>\n<p>インポート型は型エイリアス宣言でも使用できます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{ import(\"./types\").Pet }</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Pet</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Pet}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var myPet: Pet' >myPet</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var myPet: Pet' >myPet</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKALgTwA7wDOAdACYnZEBQ8AHvgPYBO2OB8oACvGwLygA3tVCgU6LEWzNoiAOYAaagF8A3NRAQYCcZlCpkskgCsamgLSWAxgFdsl8xoBUTkU4h5CZeJCGhoqEysABQARCTAnsShAJQkPGzK3LxuwNTOrqDu4FFCCcqp1ABuyMz6uAnqqBW8JLqqQA'>Try</a></div></pre>\n<p>型がわからない場合や型が大きくて型を付けるのが面倒な場合に、インポート型を使ってモジュールから値の型を取得することができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{typeof import(\"./accounts\").userAccount }</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    name: string;&#10;    address: string;&#10;    postalCode: string;&#10;    country: string;&#10;    planet: string;&#10;    system: string;&#10;    galaxy: string;&#10;    universe: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(property) require: any' >require</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./accounts\"</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\"><data-lsp lsp='const userAccount: {&#10;    name: string;&#10;    address: string;&#10;    postalCode: string;&#10;    country: string;&#10;    planet: string;&#10;    system: string;&#10;    galaxy: string;&#10;    universe: string;&#10;}' >userAccount</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKZBjHB7AV0QBcBnAOgBMLyAoeADwAd8AnE0AxMzws+GwCCeIqVABeUAG86oUCnRYARADk08ZQBo52KlTbwyZFUMR6DRstt2teyWAGF8VTKGU35BYiTYBPFU9QZlhkRHgSQJ15Mj9eeFQo3QBzB2RGAPcg4mgAN0EBJIBfAG46EAgYBEU3VGRoRAoAKzJysABaTpxCEk728oAqAbkBiBI-ZngZccn8SFBoVFYOAAplCmBcb1JrAEoKfkERbc4ikeA6XOQ2UEZJUEMAR0JoQzWNrbFyZX3D4VEfCUgA'>Try</a></div></pre>\n<h2 id=\"paramとreturns\" style=\"position:relative;\"><a href=\"#param%E3%81%A8returns\" aria-label=\"paramとreturns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@param</code>と<code>@returns</code></h2>\n<p><code>@param</code>は<code>@type</code>と同じ型の構文を使用しますが、パラメータ名を追加します。\nまた、パラメータ名を角括弧で囲むことで、パラメータを任意のものとして宣言することもできます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// パラメータは様々な構文形式で宣言することができます</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\">  </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - 文字列パラメータ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p2</span><span style=\"color: #008000\"> - 任意のパラメータ(Closure構文)</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[p3]</span><span style=\"color: #008000\"> - 任意のパラメータ(JSDoc構文).</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[p4</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">\"test\"]</span><span style=\"color: #008000\"> - デフォルト値を持つ任意のパラメータ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> 結果</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringsStringStrings(p1: string, p2?: string | undefined, p3?: string | undefined, p4?: string | undefined): string' >stringsStringStrings</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p1: string' >p1</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p2: string | undefined' >p2</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p3: string | undefined' >p3</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p4: string | undefined' >p4</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// TODO</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEkWGRLhkQ4ZB+GR+hkPYMgNy0KAMgrBkNOWhw00Eb6h4fUHMGQYu1AAKME0GQaIZBlBkAsGQGQZDBZBkD8GcgKGACov3QvQAAQAOAQwBOogLagA3gGcALuICWAOwDmAX1ChhARlABaUNkDq2oHQlKHHh8BIidLlLVmgLw7hAJmOhA33KA8IaAdgzWCAAUAMIANgD28gCu4gCmOACUdkJikjIKyuraoADawgDMALq+gSEw4QBSAMoAIjEAxmkAdBkO2c55mjrFACxuAESKSUojFSaA4wyAqwyAlQyA1wyAEwyAJAqASQyAgMaAJgxVobb8QsmKiWq9rgWACr6AOeZ2wOwAZvFqLYoqMecu+fL1fRp-S7yMIGAA0ei84NKUMGqTkfFAIFAABUAPKNVHsLRAA'>Try</a></div></pre>\n<p>関数の戻り値の型についても同様です:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{PromiseLike&lt;string&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function ps(): PromiseLike&lt;string>' >ps</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number }}</span><span style=\"color: #008000\"> - &apos;</span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\">&apos;と同じく&apos;</span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\">&apos;を使うことができます</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function ab(): {&#10;    a: string;&#10;    b: number;&#10;}' >ab</data-lsp></span><span style=\"color: #000000\">() {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAnApgFwK7wHaQN4AV4D2AtgJYDOiAMiQNaIA8Zy8JGA5gHwC+UIw4AM1QYAxshIEsABzIAKAJQ4e4UBGhwkaTGRzZIAQwBckJi3YAaSACNjGVESuJ4kLl0gBaSAHIEKdBjIvQAsGQBgVQA0GQHkGH01-L0AkhkB-eUAxBkBlBiDAGQZAcwZAWQZAPwZATQZefiFRcUkDKwUlIA'>Try</a></div></pre>\n<h2 id=\"typedef、callbackおよびparam\" style=\"position:relative;\"><a href=\"#typedef%E3%80%81callback%E3%81%8A%E3%82%88%E3%81%B3param\" aria-label=\"typedef、callbackおよびparam permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@typedef</code>、<code>@callback</code>および<code>@param</code></h2>\n<p>複雑な型を定義するために<code>@typedef</code>を使うことができます。\n<code>@param</code>を使った同様の構文でも動作します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType</span><span style=\"color: #008000\"> - &apos;SpecialType&apos;という名前の新しい型を作成</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop1</span><span style=\"color: #008000\"> - SpecialTypeの文字列プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop2</span><span style=\"color: #008000\"> - SpecialTypeの数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop3</span><span style=\"color: #008000\"> - SpecialTypeの任意の数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@prop</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[prop4]</span><span style=\"color: #008000\"> - SpecialTypeの任意の数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@prop</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[prop5</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">42]</span><span style=\"color: #008000\"> - SpecialTypeのデフォルト値を持つ任意の数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SpecialType}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var specialTypeObject: SpecialType' >specialTypeObject</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var specialTypeObject: SpecialType' >specialTypeObject</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) prop3?: number | undefined' >prop3</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKYBNUDNIG8DyARgFaoDG8AvpAMppkCWAhgDYAqKqkAtJAOR1yzdpz6ALBkAiDIDEGQLAqgWSVAdgyAG00DqDBMDR6oCSGQDrygBCMoMWMgBOAezTGkeAM7xjDAHYBzaifMBGHrXrCOaBYDhpoDq2oDoSoDrDIC3DICLDIBjDIDFDAZwbhZWuA4ArgC2hKjGrmbIAExegoysfqgKgA6mgCQKkbEJ0EkFuakZ2bkAvPnmAMwlPuWcCoDfcoDwhtV10fGJRgV47Tl5kADayQAsALoDQkP+45P1M01z5gtZS9RrBQCsneuF27ylvsOA4wyAqwyAlQyA1wyAEww1TSAQGNACYMB1qR0aIGA4HAoEMSDQeBee1Q1Gh4AAbkxjJBrIMRGgiKQKABucD43aE1DE8jwAB0yV6pKAA'>Try</a></div></pre>\n<p>最初の行には、<code>object</code>あるいは<code>Object</code>のどちらかを使うことができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{object}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType1</span><span style=\"color: #008000\"> - &apos;SpecialType&apos;という名前の新しい型を作成</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop1</span><span style=\"color: #008000\"> - SpecialTypeの文字列プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop2</span><span style=\"color: #008000\"> - SpecialTypeの数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@property</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">prop3</span><span style=\"color: #008000\"> - SpecialTypeの任意の数値プロパティ</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{SpecialType1}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var specialTypeObject1: SpecialType1' >specialTypeObject1</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKYBNUDNIG8D2ARgFaoDG8AvpAMppkCWAhgDYAqKqAjJALSQByOuWbtOAwBYMgEQZAYgyBYFUCySoDsGQA2mgdQYpgaPVASQyAdeUAIRlBixkAJ3xpTSPAGd4phgDsA5tTMWe-YY1Yc0SwHDTQHVtQHQlQHWGQFuGQEWGQDGGQGKGIzh3S2tcRwBXAFtCVFM3c2QAJj5aelE-VCVAB1NAEgVI2IToJILc1Izs3IBefIsAZhLvcs4lQG+5QHhDarro+KNgcHBQYyQ0PEHfTi5qEDmANyZTSBsy9bQAeRJyeC4AbiA'>Try</a></div></pre>\n<p><code>@param</code>を使えば、同様の構文で一回限りの型を指定することができます。\nネストされたプロパティ名の前には、パラメータ名をつけなければならないことに注意してください:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Object}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options</span><span style=\"color: #008000\"> - 形状は上記のSpecialTypeと同じ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop1</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop2</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number=}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">options.prop3</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[options.prop4]</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[options.prop5</span><span style=\"color: #000000\">=</span><span style=\"color: #001080\">42]</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function special(options: {&#10;    prop1: string;&#10;    prop2: number;&#10;    prop3?: number | undefined;&#10;    prop4?: number | undefined;&#10;    prop5?: number | undefined;&#10;}): number' >special</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) options: {&#10;    prop1: string;&#10;    prop2: number;&#10;    prop3?: number | undefined;&#10;    prop4?: number | undefined;&#10;    prop5?: number | undefined;&#10;}' >options</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) options: {&#10;    prop1: string;&#10;    prop2: number;&#10;    prop3?: number | undefined;&#10;    prop4?: number | undefined;&#10;    prop5?: number | undefined;&#10;}' >options</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) prop4?: number | undefined' >prop4</data-lsp></span><span style=\"color: #000000\"> || </span><span style=\"color: #098658\">1001</span><span style=\"color: #000000\">) + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) options: {&#10;    prop1: string;&#10;    prop2: number;&#10;    prop3?: number | undefined;&#10;    prop4?: number | undefined;&#10;    prop5?: number | undefined;&#10;}' >options</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) prop5?: number | undefined' >prop5</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAHAhgJ0QW0gbwPICMBWApgMYAuAvpAPbykCWVAdgM6QC0kgRvqBtToPYMgUHKAMKMB2DAGV4JOogA2AFQCeEwBYMgGBVAGgxQYCFOizNSyOowDmlGvSbMAdPGQ0AjJrhJUGTIwCuaXIWRnaDCw2dvAATE7arlie3r4AvP4WQbY0AMwRLrruXj5+kADa5oHWKfAALAC6GTpuMbmUhQGWwTQArHFloVXQwOAAZh6MZIGQzBLEUtIAFEWWAJRYUJDIhKQeyIyQM03JIWWQAD4HkPYADKf2CwDU1DslIa0A3ODkQA'>Try</a></div></pre>\n<p><code>@callback</code>は<code>@typedef</code>に似ていますが、オブジェクト型ではなく関数型を指定します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@callback</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Predicate</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[index]</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@returns</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{boolean}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Predicate}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const ok: Predicate' >ok</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> !(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style=\"color: #000000\"> % </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBBjAhgG2QI0fA1pACgJwFMATASyQBdCoZYAHRfRAW0gG8BnC-UgOwHMAvpGKIKiGnAZNWbXgFdmaQvmEBtPsUIAPALqTYRCvPy8O7NAHtLyQol6CawcOFC0KATzqF2BEuTFCYRBneEszCkhLHABeSAAKDgBKSBiAPkgAQkSAOlsBCgALSABSSAAmJIBuIA'>Try</a></div></pre>\n<p>もちろん、これらの型はすべてTypeScriptの構文を使って一行の<code>@typedef</code>で宣言することができます:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ prop1: string, prop2: string, prop3?: number }}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">SpecialType</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@typedef</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{(data: string, index?: number) =&gt; boolean}</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">Predicate</span><span style=\"color: #008000\"> */</span></div></code></div></pre>\n<h2 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@template</code></h2>\n<p>ジェネリクス関数は<code>@template</code>タグを使って宣言することができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{T}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> - 戻り値に流用するジェネリクスパラメータ</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{T}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function id&lt;T>(x: T): T' >id</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: \"string\"' >a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function id&lt;\"string\">(x: \"string\"): \"string\"' >id</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const b: 123' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function id&lt;123>(x: 123): 123' >id</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">123</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: {}' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function id&lt;{}>(x: {}): {}' >id</data-lsp></span><span style=\"color: #000000\">({});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXApgWwA4BsCGTIBUoyyqYBOmykA3rgL6QAekAtJINxGgUQyAkCoNYMggraAUroE0GQNEMgDoZA5QyBZhkBXDIHqGQJ0MgRYZAlwyBDhkA-DIH6GAnBKJ4AVxIA7KrQLBwAMwPGAxvACWAe1OOAJgAp6ASipRIPUMTBgBucBpwcDtXAGd4SExIAF5ID08AIniSR2MAcwyfcJjjeMgAIxS0rwBGACYAZiLouIS7KvTKGiKgA'>Try</a></div></pre>\n<p>複数の型パラメータを宣言するには、コンマか複数のタグを使用します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T,U,V</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">W,X</span></div><div class='line'><span style=\"color: #008000\"> */</span></div></code></div></pre>\n<p>型パラメータ名の前に、型制約を指定することもできます。\nリストにある最初の型パラメータだけが、制約を受けます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> {string} K - Kは文字列または文字列リテラルでなければなりません</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> {{ serious(): string }} Seriousalizable - seriousメソッドを持っていなければなりません</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{K}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">key</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Seriousalizable}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">object</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function seriousalize&lt;K extends string, Seriousalizable extends {&#10;    serious(): string;&#10;}>(key: K, object: Seriousalizable): void' >seriousalize</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: K extends string' >key</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) object: Seriousalizable extends { serious(): string; }' >object</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ????</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXApgWwA4BsCGTIG8DO8ATgJYB2A5gL6QDSkAtHYPYMg4aaDq2oOhKgfgyD6DG10BXDIDGGQJcMga4ZA5gyArBkCKDIBiGQA4M0wFEM3QNoMgZIYoMBCgzZEeXJHyJSAewCu+ABQBKAFyni5CpCo0AyuZLX8mOgkAF6YAEboRkxmljaAhwyAvQyAwwyAkwyASQyAgMaAxgyAZgyAIgxySqoa2tBwqJhEmMh4tDQA1ogAnjrlldV4PrEBQaERiDQWYQBWiADG8DrA4ABmVmQTfmSmvv6BIYi2jU0ANJBDoxP2eFCQwMCQAPzXl+BUQA'>Try</a></div></pre>\n<p>ジェネリクスのクラスや型の宣言はサポートされていません。</p>\n<h2 id=\"クラス\" style=\"position:relative;\"><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9\" aria-label=\"クラス permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クラス</h2>\n<p>クラスはES6のクラスとして宣言することができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) data: number' >data</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// プロパティの型は推測されます</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.name: any' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// あるいは、明示的に設定することもできます</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | null}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.title: string | null' >title</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// また、他のところで設定されている場合は、単に型注釈をつけることもできます</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.size: number' >size</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) C.initialize: (s: string) => void' >initialize</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) data: number' >data</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// initializerは文字列を受け取るので、エラーになるべきです</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">s</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) C.initialize: typeof (Anonymous function)' >initialize</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) (Anonymous function).size: any' >size</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var c: C' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor C(data: number): C' >C</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Cはnewを使用した場合のみ呼び出されるべきですが、</span></div><div class='line'><span style=\"color: #008000\">// JavaScriptでは、以下は許可されており、</span></div><div class='line'><span style=\"color: #008000\">// これは&apos;any&apos;型とみなされます。</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var result: any' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDC0G8BQ1oHoBUGWo9AAgA5gBOYAtogHYCu5ARgKYkC+0AJmAC5g7QZocwAPZUIXEjWBdhJABSceASkR90aaIHWGQLcMgRYZAYwyBihkB2DIGj1QPYMgCuNANHaBVBkAxDID8GQJoMargAsAlhAB0VCozQALzQAEQAZsLCoQDcSGpoGoBCDIDRDIAiDOaAgAyAcGaAXJ6AIW6A1gyAtFGAWdrOKYDKDIAWDIBBDIDmDICyDC4JWARcAJ6EgQjiJJ5UAObQAD7QtCAgbAJuXr5cnlwggSETIHEJGo6A+gyZgGtyxtWVgLEM9WUOgGYMaSmALBqAECpZgBrKhaaAFzaAE4mASQyAJgyAigxVdSaLVQqEweHwnW61DoTFY-EEIOgHm8PggngAXowNojkb4BotPGAQBjGApuGAlDF1NB8QsiSSSOZAOGmgHVtQDoSp9AOvKv0Aa8opYz1TKACoZAJcMgB+GQqAKwYUoBPBka9VcqBYODBfHBxDIlF6EgGgzYEDVCJpVAJ9MxwWg4RoVGknlE0DkEBUyBxc1RJItvmWQw8cSVcWVSAAbqRoMALVRGAB3OByAAMlPiiTg5kjUc+gH95QAUroB1Bm292MgH8GQA+KoBnBkAX4oOWXy5yAGQZMkhkwApMAhgDKwH6hC49SygFO5QDQcuZAIxRgHvlS6AKQZAFEMDeTlXs5gA5GAqB1F6ZqoXJQ4XIAgBmDoZIjAgNBAXAtsDkAEZKUA'>Try</a></div></pre>\n<p>次の節で説明するように、コンストラクタ関数として宣言することもできます:</p>\n<h2 id=\"constructor\" style=\"position:relative;\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@constructor</code></h2>\n<p>コンパイラはthisプロパティの代入に基づいてコンストラクタ関数を推測しますが、<code>@constructor</code>タグを追加すればより厳密なチェックとより良い提案を受けることができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@constructor</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">data</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function C(data: number): void' >C</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) data: number' >data</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// プロパティの型は推測されます</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.name: any' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// あるいは、明示的に設定することもできます</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string | null}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.title: string | null' >title</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// また、他のところで設定されている場合は、単に型注釈をつけることもできます</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.size: number' >size</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.initialize(s: string): void' >initialize</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) data: number' >data</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">s</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='class C&#10;function C(data: number): void' >C</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Function.prototype: any' >prototype</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.initialize(s: string): void' >initialize</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.size: number' >size</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var c: C' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor C(data: number): C' >C</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var c: C' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.size: number' >size</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var result: any' >result</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function C(data: number): void' >C</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Value of type 'typeof C' is not callable. Did you mean to include 'new'?</span><span class=\"code\">2348</span></span><span class=\"error-behind\">Value of type 'typeof C' is not callable. Did you mean to include 'new'?</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGYAWAVjKoA4MAqJtUJiSPAOxQBdsAV0h8CbDuAAOAQ2zSAtqADe3QfIBGOAL6gAJtL7TxwNADNB3EQEseoAMIAKfYYCUytqEyB1hkC3DIEWGQDGGQGKGQDsGQGj1QHsGQArjQBo7QFUGQBiGQD8GQE0GDz5oKxQAOm4FWFAAXlAAIlM8PBKAbjQPTEAhBkBohkARBgjAQAZAODNALk9AELdAawZAWijALO0UxsBlBkALBkAghkBzBkBZBlS6lgg+AE9JAqV+bCtuAHNQAB9QVQAbU50mE1BQDKzsvis+U4Lis9OaurAkwH0GNsA1uRCEzGgFiGGbDRKAMwZmo1ACwagAgVdqADWU+mFABc2gAnEwBJDIATBkAigzjabzRY3YDLcBrDbKVQabTsa63TI5FBWABesE+NzuOV2Tys0lObNgTgM0hcNS0zFY7AgMjkii2Al2ex06HpaDs2Uk+FElNg2V5jwFQqKoHMlketgcKDcSnSTOyLPZppyL32GQlnwAbrJQJBTdxYAB3ewOAAM4rQkEdQu9vuwsBQglOfFNjgAjOKgA'>Try</a></div></pre>\n<blockquote>\n<p>注意: エラーメッセージが表示されるのは、<a href=\"/docs/handbook/tsconfig-json.html\">JSConfig</a>と<a href=\"/tsconfig#checkJs\"><code>checkJs</code></a>が有効化されているJSコードベースのみです。</p>\n</blockquote>\n<p><code>@constructor</code>では、<code>this</code>はコンストラクタ関数<code>C</code>の内部でチェックされるので、数値を渡すと<code>initialize</code>メソッドへの提案とエラーが表示されます。また、コンストラクタの代わりに<code>C</code>を呼び出すと、エディタが警告を表示することもあります。</p>\n<p>残念ながら、これは呼び出しも可能なコンストラクタ関数では、<code>@constructor</code>を使用できないことを意味します。</p>\n<h2 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@this</code></h2>\n<p>コンパイラは通常、<code>this</code>が用いられるコンテクストから<code>this</code>の型を推測することができます。推測できない場合、<code>@this</code>を使って明示的に<code>this</code>の型を指定することができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@this</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{HTMLElement}</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{*}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">e</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function callbackForLater(this: HTMLElement, e: any): void' >callbackForLater</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) e: any' >e</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) callbackForLater.clientHeight: number' >clientHeight</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) e: any' >e</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 大丈夫なはず！</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAFgSwM6QN4AkAqBZAGQFEAbAUwFsyA7eAXyhlgAcBDAJ1YsxDsjMbBwAMwCu1AMbxkAe2qQJrEiQBGrCQGsAYjPYFW8MuwAUZAJSYokJGgB0EkshrwsZZAHNE8SAF5IbdlQyAElaUzMAbkhgYEhAck1ACDlAak1AKwZAewZALQZAQH-wOiA'>Try</a></div></pre>\n<h2 id=\"extends\" style=\"position:relative;\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@extends</code></h2>\n<p>JavaScriptクラスがジェネリクスの基底クラスを拡張するとき、型パラメータが何であるべきかを指定するところがありません。<code>@extends</code>タグはそのような型パラメータを指定する方法を提供しています:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@template</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">T</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@extends</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Set&lt;T&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SortableSet&lt;T>' >SortableSet</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Set: SetConstructor' >Set</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXApgWwA4BsCGTIBUoyyIAeSAdgCYDOkA3gMqLwA8uAfAL4HDgDGWVGvQD2AJ3iYARukSN4kEuWqQ5dKJGDBIAOl3gOQA'>Try</a></div></pre>\n<p><code>@extends</code>は、クラスに対してのみ動作することに注意してください。現在、コンストラクタ関数がクラスを拡張する方法はありません。</p>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@enum</code></h2>\n<p><code>@enum</code>タグを使うと、すべてのメンバが指定された型であるオブジェクトリテラルを作成することができます。JavaScriptのたいていのオブジェクトリテラルとは異なり、明示されていないメンバは使用できません。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@enum</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='type JSDocState = number&#10;const JSDocState: {&#10;    BeginningOfLine: number;&#10;    SawAsterisk: number;&#10;    SavingComments: number;&#10;}' >JSDocState</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) BeginningOfLine: number' >BeginningOfLine</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) SawAsterisk: number' >SawAsterisk</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) SavingComments: number' >SavingComments</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const JSDocState: {&#10;    BeginningOfLine: number;&#10;    SawAsterisk: number;&#10;    SavingComments: number;&#10;}' >JSDocState</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) SawAsterisk: number' >SawAsterisk</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEFMDsFcC24DeDECNoCcC+4RgAoAYwHtYBnAF3ACkBlAETJIeoENrpwBeVIuHAAhaAHMAlrFhSxAeQBmAGSnQAXOAAMAGkHgGHAO4BBGjgmUA1hoCMuoQYBusgMJlEiONUoaATLtwAbiIiRhY2Tm4AOgMTM2wLS0CgA'>Try</a></div></pre>\n<p>注意すべき点は、<code>@enum</code>はTypeScriptの<code>enum</code>とは大きく異なっており、とてもシンプルです。一方で、TypeScriptの<code>enum</code>とは違って、<code>@enum</code>は任意の型を持つことができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@enum</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{function(number): number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='type MathFuncs = (arg0: number) => number&#10;const MathFuncs: {&#10;    add1: (n: any) => any;&#10;    id: (n: any) => number;&#10;    sub1: (n: any) => number;&#10;}' >MathFuncs</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) add1: (n: any) => any' >add1</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) id: (n: any) => number' >id</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> -</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) sub1: (n: any) => number' >sub1</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: any' >n</data-lsp></span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const MathFuncs: {&#10;    add1: (n: any) => any;&#10;    id: (n: any) => number;&#10;    sub1: (n: any) => number;&#10;}' >MathFuncs</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) add1: (n: any) => any' >add1</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEFMDsFcC24DeAzesDGAXAlgPawAUCiARtAE4CUAXOGZVQL7gjABQWRAzjuACyAQxwALAGKYsvcAF5UncOGEATVQEYGpGvIB8jcAGpwGgDRLweVdti65BgLSwLy3vHJbwO-YcemLFgBuTk4RcSlsXgA6NU0goA'>Try</a></div></pre>\n<h2 id=\"その他の例\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E4%BE%8B\" aria-label=\"その他の例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>その他の例</h2>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var someObj: {&#10;    x: (param1: string) => void;&#10;}' >someObj</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\">   * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">param1</span><span style=\"color: #008000\"> - プロパティの割り当てに関する仕様は、</span></div><div class='line'><span style=\"color: #008000\">   */</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) x: (param1: string) => void' >x</data-lsp></span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) param1: string' >param1</data-lsp></span><span style=\"color: #000000\">) {},</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 変数の代入や</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@return</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{Window}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='let someFunc: () => Window' >someFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * クラスメソッド、</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">greeting</span><span style=\"color: #008000\"> 使用する挨拶</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='class Foo' >Foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.prototype: Foo' >prototype</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Foo.sayHi(greeting: string): void' >sayHi</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) greeting: string' >greeting</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hi!\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * アロー関数式でも同様に動作します</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #008000\"> - 乗数</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='let myArrow: (x: number) => number' >myArrow</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * つまり、JSXのステートレス関数コンポーネントでも動作するということです</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{a: string, b: number}}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">test</span><span style=\"color: #008000\"> - いくつかのパラメータ</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='var sfc: (test: {&#10;    a: string;&#10;    b: number;&#10;}) => any' >sfc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) test: {&#10;    a: string;&#10;    b: number;&#10;}' >test</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;<data-lsp lsp='any' >div</data-lsp>></span><span style=\"color: #0000FF\">{</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) test: {&#10;    a: string;&#10;    b: number;&#10;}' >test</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) a: string' >a</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.charAt(pos: number): string' >charAt</data-lsp></span><span style=\"color: #000000FF\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000FF\">)</span><span style=\"color: #0000FF\">}</span><span style=\"color: #800000\">&lt;/<data-lsp lsp='any' >div</data-lsp>></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * パラメータには、Closure構文を使用して、クラスのコンストラクタを使用することができます。</span></div><div class='line'><span style=\"color: #008000\"> *</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{new(...args: any[]): object}}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">C</span><span style=\"color: #008000\"> - 登録するクラス</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function registerClass(C: new (...args: any[]) => object): void' >registerClass</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) C: new (...args: any[]) => object' >C</data-lsp></span><span style=\"color: #000000\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - 文字列の&apos;レストパラメータ&apos;(配列)引数 (&apos;any&apos;として扱われます)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn10(p1: string[]): void' >fn10</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p1: string | undefined' >p1</data-lsp></span><span style=\"color: #000000\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">p1</span><span style=\"color: #008000\"> - 文字列の&apos;レストパラメータ&apos;(配列)引数 (&apos;any&apos;として扱われます)</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn9(p1: string[]): any' >fn9</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p1: string | undefined' >p1</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p1: string | undefined' >p1</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >join</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBiD29oG8C+AoA9J6BafwArgC767oBuYATtBPALYCmA8gEYBW0AvCutNEwAqIfwFDoAAQAONMAxQRi1AJYA7AOapos6vICMeaIHWGQLcMgRYZAYwyBihkB2DICclQFEMgZX1AZgyBrBkBFqYE0GQNEMgVblADctAewZAQAYxaCFMMQAPAC5oADNCNWBiFXg1aAAKXQMAShRUABp0VABudCwRfglASE1AB1NbQGO5QFNFQBCGWqlqJmJCaizkAHV1ABN4AHcMSOiQXrpGJlgU4B4klfTMnMK0SurRSOhAeoZAS4ZAToZAQ4ZAXoZAYYZASYZww5k5BWQlVU1tDR7e9Q1oQD+8oAKVz8gApjQBvRrVogh4AA6aTUeDEJEAT2kTFhEDAKIAEio1tlvkxfppCtwAHzQYCZehzWEgeAabIAIjxAEJmfk9sIDhJAEUMpkAPwyeBqAeH1AOYMgCCGQAwKoF3IBVpUAOvKAdQZAH4M3i6zz0rzUhAYbCY1G0MSMgHU5BpQ9BzYjQBgogCC1EREwJMTJlJNEhi3Jqh0AJgyqxyhABSAGUABq2M6WQWACYZADcMZxFgGaGQDPDIBdhkFgFmGVOxqVKvyACwZACIMgDEGQDKDIXxRqnnlXsgwAl3n9itA2AldfrDahtMQmEojMXAPIMfsA0gy2cwnC6CwD9DJaqLQIIlVrxsn2lO7oAAeUYqCjk5Dr4iwsCw4AACxo9uI2QADPlUFvMLv9z7edBJ9OZ+4wgBhBkQP0TCANOWgDhpoASQzAsqrihKcZy2GmZyxicRwzpBIK+JWgAyDOKgCyDOqgBADLUmp1igyBqEwEzZLCNE0BoEAJGAagogA2gAuvkCTwJwTBpD20C-kYgDeboATMl+HBlrJKkmxZD0GgqEohr-pAEDZL+OwYPsJEvCgNGYsofzaNIhi4NAoGAOragDoSrYADkiaxp+s42dkgCyiZZ+SAKj6DQ5DZTEojZhbQYAjkaAPEMgAxDOq+SSRsGRZIkaj6LeuT6BpVQ8tp2q6TRzafDoJlmVZtn2Y5M7OW5nnedkvnMQFwXhZF0XSbFSRqAAnMlOxiD0fQDHlsIcPA6jZFyZRAA'>Try</a></div></pre>\n<h2 id=\"サポートされていないことが知られているパターン\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8%E3%81%8C%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\" aria-label=\"サポートされていないことが知られているパターン permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サポートされていないことが知られているパターン</h2>\n<p>コンストラクタ関数のようにオブジェクトも型を作らない限り、値空間のオブジェクトを型として参照することはできません。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function aNormalFunction(): void' >aNormalFunction</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{aNormalFunction}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var wrong: () => void' >wrong</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * &apos;typeof&apos;を代わりに使用します:</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{typeof aNormalFunction}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var right: () => void' >right</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAQwHJwE4FtkBsBi408YAFAJSIDeAvgFAD0AVE3Yk4gAJQCeADgFNqaTDgJFYCeuwZ0AbsgyIA7hgQBzANyMWbDgHJeguMH2AkhkDHcoHiGQFEMgawZA-vKAKV0DqDID8GQJoMALj1cjQqn8TFHRsPEJISTBpJlkFJQwYdQALKE0gA'>Try</a></div></pre>\n<p>オブジェクトリテラル型のプロパティ型の後ろに等号をつけても、任意のプロパティにはなりません:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b: number= }}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var wrong: {&#10;    a: string;&#10;    b: number;&#10;}' >wrong</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 代わりにプロパティ名の後ろにクエスチョンマークを付けます:</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{ a: string, b?: number }}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var right: {&#10;    a: string;&#10;    b?: number | undefined;&#10;}' >right</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4cgQwFyQDO8ATgJYB2A5gDSQBGBFArgLb2okC8kAvr1BDBwANxwlIAdxIB7agG5woCNEiBjuUDxDICiGQNYMgdYZAtwyBFhkBjDIGKGQLAqgOwZAMfqBYhh2B6hkAVDIE6GQIMMgc4ZAzwyA9hkA-DI6ASQyAG3KAigyAfgyAmgx4gnBIaJjY+ESklLQMAPxMbBwS-ILCYhLkVAAW8PJAA'>Try</a></div></pre>\n<p><code>strictNullChecks</code>が有効化されている場合のみ、Nullable型は動作します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{?number}</span></div><div class='line'><span style=\"color: #008000\"> * strictNullChecks: trueの場合  -- number | null</span></div><div class='line'><span style=\"color: #008000\"> * strictNullChecks: falseの場合 -- number</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var nullable: number | null' >nullable</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4H4B2BXAWwCNUAnAXyhgGd5SBLAY3gDk8AbdgYQAtVGA1tQBckOnlSA7BkAsGoAgVSJAC0iyPmJlIAH1Ud2VSLQbM2nXvyGiAZgEN21KXKUq1JUlWDgAbtdI7O1onZUAG4gA'>Try</a></div></pre>\n<p>Union型も使うことができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | null}</span></div><div class='line'><span style=\"color: #008000\"> * strictNullChecks: trueの場合  -- number | null</span></div><div class='line'><span style=\"color: #008000\"> * strictNullChecks: falseの場合 -- number</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var unionNullable: number | null' >unionNullable</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4DsCuBbAI1QCdIAfSXAGyoF8oYBneYgSwGN4A5HGgYQAWqdgGtGALkgscqQHYMgFg1AECqRIAWlWV8RUhWpUGkZm049+Q0RMgAzAIZVGcpWo25CJBsHAA3G6RxZWAHssUyobAipUAG4gA'>Try</a></div></pre>\n<p>非Nullable型は意味を持たず、元の型と同じように扱われます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{!number}</span></div><div class='line'><span style=\"color: #008000\"> * 数値型だけをもちます</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var normal: number' >normal</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAXAngBwKaQN4EIB2BXAWwCNUAnAXyhkAdTQEgVBo9UAMGQRQZAkhkCCGQQwZA-BkE0GK4OABuAQ1KQcAe1IERAGwDcQA'>Try</a></div></pre>\n<p>JSDocの型システムとは異なり、TypeScriptは型にnullが含まれるかどうか記すことしかできません。\n明示的な非Nullable型はありません — strictNullChecksが有効なら、<code>number</code>はNullableではありません。\n無効なら、<code>number</code>はNullableです。</p>\n<h3 id=\"サポートされていないタグ\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%82%BF%E3%82%B0\" aria-label=\"サポートされていないタグ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サポートされていないタグ</h3>\n<p>TypeScriptはサポートされていないJSDocタグを無視します。</p>\n<p>以下のタグは、サポートを目標とした進行中のIssueがあります:</p>\n<ul>\n<li><code>@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code>@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code>@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code>@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code>{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/35524\">issue #35524</a>)</li>\n</ul>\n<h2 id=\"jsクラスの拡張\" style=\"position:relative;\"><a href=\"#js%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E6%8B%A1%E5%BC%B5\" aria-label=\"jsクラスの拡張 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSクラスの拡張</h2>\n<h3 id=\"jsdocプロパティ修飾子\" style=\"position:relative;\"><a href=\"#jsdoc%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E4%BF%AE%E9%A3%BE%E5%AD%90\" aria-label=\"jsdocプロパティ修飾子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDocプロパティ修飾子</h3>\n<p>TypeScript 3.8以降、JSDocを使ってクラスプロパティを修飾することができます。まずは、アクセシビリティ修飾子<code>@public</code>、<code>@private</code>、<code>@protected</code>です。\nこれらのタグは、TypeScriptの<code>public</code>、<code>private</code>、<code>protected</code>とそれぞれ同じように動作します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@private</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: any' >identifier</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Car.printIdentifier(): void' >printIdentifier</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Car(): Car' >Car</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Property 'identifier' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'identifier' is private and only accessible within class 'Car'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGAUCBAC6IC0AxgBaTkDWee5ANgIaKKgDCL0oA3nlChycAHaIi0AK7kiCABQBKfoKGhgAKg0QADtACWANxZFIoDcFVCilfYgB0+gCaRRRfQDN9MUAF5QOAAMgQDcqgC+DEJ6+m4Aki5unt7QSipqwmKIcEyQ9kxwAObyNnaOie5eMIphQpGRjFlEwn6gopAA7lw8SmEi4jl5BcXk5a6VKTVAA'>Try</a></div></pre>\n<ul>\n<li><code>@public</code>は常に暗黙的に宣言されており、省略可能です。どこからでもプロパティにアクセスできることを意味します。</li>\n<li><code>@private</code>は、そのプロパティが含まれるクラス内でのみ使用可能であることを意味します。</li>\n<li><code>@protected</code>は、そのプロパティが含まれるクラスと、そのクラスの派生クラス内で使用可能ですが、クラスのインスタンスからはアクセスできません。</li>\n</ul>\n<p>次に、<code>@readonly</code>修飾子を追加しました。これを使用すると、プロパティが初期化時にのみ書き込まれることが保証されます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@readonly</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: any' >identifier</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Car.printIdentifier(): void' >printIdentifier</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Car(): Car' >Car</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Car.identifier: number' >identifier</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUCBAC6IC0AxgBaTkDWee5ANgIaKKgDCL0oA3nlChycAHaIi0AK7kiCABQBKfoKGhgAKg0RokFgBMxTAJ6gNwVUKKUAlogB0N-ZFFEbAMxsxQAXlABGHBwAblUAXwYhAAdoG1cASWdXDy9oJRU1YTFEOCZIeyY4AHN5aztHJLdPGEVQoQiIxmyiYV9QUUgAdy4eJVCRcVz8wpLyCpcq1NqgA'>Try</a></div></pre>","headings":[{"value":"class拡張","depth":4},{"value":"@type","depth":2},{"value":"キャスト","depth":3},{"value":"インポート型","depth":3},{"value":"@paramと@returns","depth":2},{"value":"@typedef、@callbackおよび@param","depth":2},{"value":"@template","depth":2},{"value":"クラス","depth":2},{"value":"@constructor","depth":2},{"value":"@this","depth":2},{"value":"@extends","depth":2},{"value":"@enum","depth":2},{"value":"その他の例","depth":2},{"value":"サポートされていないことが知られているパターン","depth":2},{"value":"サポートされていないタグ","depth":3},{"value":"JSクラスの拡張","depth":2},{"value":"JSDocプロパティ修飾子","depth":3}],"frontmatter":{"permalink":"/ja/docs/handbook/jsdoc-supported-types.html","title":"JSDocリファレンス","disable_toc":null,"handbook":null,"oneline":"TypeScriptを備えたJavaScriptはどのようなJSDocをサポートしているか","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"JavaScriptファイルの型チェック","oneline":"TypeScriptを使ってJavaScriptファイルに型チェックを追加する方法","permalink":"/ja/docs/handbook/type-checking-javascript-files.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":".jsファイルから.d.tsファイルを生成する","oneline":"JavaScriptプロジェクトでd.tsファイルを生成する方法","permalink":"/ja/docs/handbook/declaration-files/dts-from-js.html"}}}},"pageContext":{"id":"7-jsdocリファレンス","slug":"/ja/docs/handbook/jsdoc-supported-types.html","repoPath":"/packages/documentation/copy/ja/javascript/JSDoc Reference.md","previousID":"52fefe33-2cba-5319-9804-36abe1e60e40","nextID":"51a859ef-b4a4-5496-9523-ca1cf3ca0de5","lang":"ja","modifiedTime":"2024-10-21T12:35:09.553Z"}},"staticQueryHashes":[]}