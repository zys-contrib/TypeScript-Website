{"componentChunkName":"component---src-templates-documentation-tsx","path":"/ja/docs/handbook/intro-to-js-ts.html","result":{"data":{"markdownRemark":{"id":"afbeeca4-07bb-53bd-b2c0-f640f7e1b268","excerpt":"TypeScriptの型システムがコードベースを扱う際には、様々な厳密さのレベルがあります: JavaScriptのコードを使った推論のみに基づく型システム JSDocによるJavaScriptの段階的な型付け JavaScriptファイルにおける// @ts-checkの使用 TypeScriptコード strict…","html":"<p>TypeScriptの型システムがコードベースを扱う際には、様々な厳密さのレベルがあります:</p>\n<ul>\n<li>JavaScriptのコードを使った推論のみに基づく型システム</li>\n<li><a href=\"/docs/handbook/jsdoc-supported-types.html\">JSDoc</a>によるJavaScriptの段階的な型付け</li>\n<li>JavaScriptファイルにおける<code>// @ts-check</code>の使用</li>\n<li>TypeScriptコード</li>\n<li><a href=\"/tsconfig#strict\"><code>strict</code></a>を有効にしたTypeScript</li>\n</ul>\n<p>それぞれのステップはより安全な型システムへの動きを表していますが、すべてのプロジェクトがそのレベルでの検証を必要としているわけではありません。</p>\n<h2 id=\"javascriptと併用するtypescript\" style=\"position:relative;\"><a href=\"#javascript%E3%81%A8%E4%BD%B5%E7%94%A8%E3%81%99%E3%82%8Btypescript\" aria-label=\"javascriptと併用するtypescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScriptと併用するTypeScript</h2>\n<p>こちらは、オートコンプリートやシンボルへのジャンプといった機能や、リネームなどのリファクタリングツールを提供するためにTypeScriptを使用しているエディタを使う場合です。\n<a href=\"/\">homepage</a>では、TypeScriptプラグインを備えているエディタをリストしています。</p>\n<h2 id=\"jsdocを使ってjsで型ヒントを提供する\" style=\"position:relative;\"><a href=\"#jsdoc%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6js%E3%81%A7%E5%9E%8B%E3%83%92%E3%83%B3%E3%83%88%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%99%E3%82%8B\" aria-label=\"jsdocを使ってjsで型ヒントを提供する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDocを使ってJSで型ヒントを提供する</h2>\n<p><code>.js</code>ファイルでは、多くの場合型を推測することが可能です。型が推測できない場合、JSDoc構文を使って指定することができます。</p>\n<p>宣言の前でJSDocのアノテーションを使い、その宣言の型を設定します。例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK?!</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCm4DeA7ArgWwEaIE4C+4IwAUAG4CG+4AHgNxll3gC84ADA+MMOAHkA0i3bgAZlQA2AZ0Q8+goQH4AhEA'>Try</a></div></pre>\n<p>サポートしているJSDocパターンの全リストは<a href=\"/docs/handbook/jsdoc-supported-types.html\">JSDocがサポートする型</a>にあります。</p>\n<h2 id=\"ts-check\" style=\"position:relative;\"><a href=\"#ts-check\" aria-label=\"ts check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@ts-check</code></h2>\n<p>前述のコードサンプルの最後の行はTypeScriptではエラーとなりますが、JSプロジェクトのデフォルトではエラーを発生させません。\nJavaScriptファイルでエラーを有効化するには、<code>.js</code>ファイルの最初の行に<code>// @ts-check</code>を追加して、TypeScriptにエラーを発生させるようにします。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: number' >x</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// エラー</span></div><span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUCCyBOuB7XaALlACYBmc8rAKjokgE8AHZUAbwDsBXAWwBGeAL6g6wDADcAhrlAAPANwYMC0AF5QABiWhsAeQDSazaABmMgDbRke7IAqGQJcMgH4YgA'>Try</a></div></pre>\n<p>エラーを追加したいJavaScriptファイルがたくさんある場合は、<a href=\"/docs/handbook/tsconfig-json.html\"><code>jsconfig.json</code></a>を使用するように変更しましょう。\nファイルに<code>// @ts-nocheck</code>コメントをつけることで、ファイルのチェックを省略することができます。</p>\n<p>TypeScriptはあなたが納得できないようなエラーを発生させるかもしれませんが、その場合は前の行に<code>// @ts-ignore</code>または<code>// @ts-expect-error</code>を追加することで、特定の行のエラーを無視することができます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @ts-check</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #008000\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// エラー</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcGcFoGMAWBTeBrAUMAVNikBPAB2VAG8A7AVwFsAjZAJwF9RtgMA3AQ0dAA8A3Bgz9QAXlAAGQaBCgA8gGksYKHGT8S8SLCaMA9o1ETQAM24AbaMlnzAFQyBLhkA-DEA'>Try</a></div></pre>\n<p>JavaScriptがTypeScriptによってどのように解釈されるかについて知りたい場合は、<a href=\"/docs/handbook/type-checking-javascript-files.html\">TSの型がJSをチェックする方法</a>を参照してください。</p>","headings":[{"value":"JavaScriptと併用するTypeScript","depth":2},{"value":"JSDocを使ってJSで型ヒントを提供する","depth":2},{"value":"@ts-check","depth":2}],"frontmatter":{"permalink":"/ja/docs/handbook/intro-to-js-ts.html","title":"TypeScriptを活用したJSプロジェクト","disable_toc":null,"handbook":null,"oneline":"TypeScriptを使ってJavaScriptファイルに型チェックを追加する方法","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":{"childMarkdownRemark":{"frontmatter":{"title":"JavaScriptファイルの型チェック","oneline":"TypeScriptを使ってJavaScriptファイルに型チェックを追加する方法","permalink":"/ja/docs/handbook/type-checking-javascript-files.html"}}}},"pageContext":{"id":"7-typescriptを活用したjsプロジェクト","slug":"/ja/docs/handbook/intro-to-js-ts.html","repoPath":"/packages/documentation/copy/ja/javascript/Intro to JS with TS.md","nextID":"52fefe33-2cba-5319-9804-36abe1e60e40","lang":"ja","modifiedTime":"2024-10-21T12:35:09.553Z"}},"staticQueryHashes":[]}