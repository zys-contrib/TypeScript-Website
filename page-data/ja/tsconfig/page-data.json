{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/ja/tsconfig","result":{"data":{"markdownRemark":{"id":"4be37dd6-8c74-5588-b1cf-f72243b8b81d","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プログラムに含めるファイルの許可リストを指定します。ファイルが見つからない場合、エラーが発生します。</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {},</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span></div><div class='line'><span style=\"color: #000000\">  ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>このオプションは、プロジェクトが少数のファイルから構成されていて、グロブパターンを必要としない場合で有用です。\nグロブパターンが必要な場合、<a href=\"#include\"><code>include</code></a>を利用してください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>extends</code>の値は、別の継承対象の設定ファイルへのパスを含む文字列です。\nNode.js におけるモジュール解決の流儀が用いられます。</p>\n<p>ベースとなるファイルからの設定が最初に読み込まれ、続いて継承ファイルの設定によってオーバーライドされます。設定ファイル内のすべての相対パスは、元の設定ファイルを起点として解決されます。</p>\n<p>継承した設定ファイルの<code>files</code>、<code>include</code>および<code>exclude</code>はベースとなる設定ファイルの内容を<em>上書き</em>します。\nまた、継承における循環参照は許容されません。</p>\n<h5 id=\"例\" style=\"position:relative;\"><a href=\"#%E4%BE%8B\" aria-label=\"例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#noImplicitAny'><data-lsp lsp=\"Enable error reporting for expressions and declarations with an implied `any` type..\">noImplicitAny</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プログラムに含めるファイル名またはパターンのリストを指定します。\nファイル名は<code>tsconfig.json</code>ファイルを含んでいるディレクトリからの相対パスとして解決されます。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定は以下のようにマッチします。</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock</span></div></code></div></pre>\n<p><code>include</code>と<code>exclude</code>はグロブパターンのためのワイルドカードをサポートしています:</p>\n<ul>\n<li><code>*</code> ゼロ個以上の文字列にマッチ（ディレクトリセパレータは除く）</li>\n<li><code>?</code> 任意の 1 文字にマッチ（ディレクトリセパレータは除く）</li>\n<li><code>**/</code> 任意階層の任意ディレクトリにマッチ</li>\n</ul>\n<p>グロブパターンがファイルの拡張子を含まない場合、サポートされる拡張子のみが含まれるようになります（例：<code>.ts</code>、<code>.tsx</code>と<code>.d.ts</code>はデフォルトでインクルードされ、<code>.js</code>と<code>.jsx</code>は<code>allowJs</code>が設定された場合のみインクルードされます）。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[]</code> if <a href=\"#files\"><code>files</code></a> is specified; <code>**/*</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>include</code>の解決時にスキップさせるファイル名やパターンのリストを指定します。</p>\n<p><strong>重要</strong>: <code>exclude</code>は<code>include</code>の結果として、どのファイルが含まれるべきか<em>のみ</em>に影響を与えます。\n<code>exclude</code>に指定されたファイルは、コードでの<code>import</code>や<code>types</code>でのインクルード、<code>/// &#x3C;reference</code> ディレクティブ、<code>files</code>リストの指定によって、コードベースの一部となり得ます。</p>\n<p><code>exclude</code>はコードベースに含まれているファイルの読み込みを<strong>防ぐ</strong>ための仕組みではありません。<code>include</code>設定の結果を変更するだけです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>node_modules bower_components jspm_packages <a href=\"#outDir\"><code>outDir</code></a></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プロジェクト参照は TypeScript のプログラムを小さい断片に分けて構造化するための手法です。\nプロジェクト参照を用いると、ビルド時間やエディターとのインタラクションに必要な時間が大幅に改善され、コンポーネント間の論理分割が強制により、より洗練された方法でコードを整理できます。</p>\n<p>プロジェクト参照がどのように動作するかについては、このハンドブックの<a href=\"/docs/handbook/project-references.html\">Project References</a>を読んでください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"コンパイラオプション\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"コンパイラオプション permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コンパイラオプション</h3>\n<p>これらのオプションは TypeScript の設定の大部分を占めており、TypeScript がどのように動作すべきかを扱います。</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Type_Checking_6248\">Type Checking</a></li>\n<li><a href=\"#Modules_6244\">Modules</a></li>\n<li><a href=\"#Emit_6246\">Emit</a></li>\n<li><a href=\"#JavaScript_Support_6247\">JavaScript Support</a></li>\n<li><a href=\"#Editor_Support_6249\">Editor Support</a></li>\n<li><a href=\"#Interop_Constraints_6252\">Interop Constraints</a></li>\n<li><a href=\"#Backwards_Compatibility_6253\">Backwards Compatibility</a></li>\n<li><a href=\"#Language_and_Environment_6254\">Language and Environment</a></li>\n<li><a href=\"#Compiler_Diagnostics_6251\">Compiler Diagnostics</a></li>\n<li><a href=\"#Projects_6255\">Projects</a></li>\n<li><a href=\"#Output_Formatting_6256\">Output Formatting</a></li>\n<li><a href=\"#Completeness_6257\">Completeness</a></li>\n<li><a href=\"#Command_line_Options_6171\">コマンドライン</a></li>\n<li><a href=\"#Watch_and_Build_Modes_6250\">Watch Options</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Type_Checking_6248' ><a href='#Type_Checking_6248' name='Type_Checking_6248' aria-label=\"Link to the section Type Checking\" aria-labelledby='Type_Checking_6248'>#</a>Type Checking</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Allow Unreachable Code - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>false に設定すると、到達不可能なコードに対する警告を無効化します。\nこの警告は、JavaScript 構文の利用によって到達不可能になり得るコードにのみ関係します。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>\"allowUnreachableCode\": false</code>にすると、次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(n: number): boolean' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA'>Try</a></div></pre>\n<p>このオプションは、型の分析によって到達不可能と判断されたコードについてのエラーには影響しません。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Allow Unused Labels - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>false にセットすると、利用していない Label についての警告を無効化します。</p>\n<p>JavaScript において Label を利用することは稀ですが、オブジェクトリテラルを記述しようとしたときに Label 構文になってしまうことがあります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function verifyAge(age: number): void' >verifyAge</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) age: number' >age</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// &apos;return&apos;の記述が抜けている</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) age: number' >age</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">18</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    <data-err>verified</data-err>: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSbwCeAQQDmkABRFNqegFtO0AJSgA3nlChCAcmiRxdaDVuA7BkAYUYAf4wDIMgHKNARQZAMwZAEQZAaIYrUCVQHU1QAD5QAEYcM0trawVoJUlmVHFoOkgAbkiAXzwyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Always Strict - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ファイルを ECMAScript の strict モードで解釈し、各ファイルへ”use strict”を出力することを保証します。</p>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a>モードは ES5 で導入され、JavaScript エンジンが実行時にパフォーマンスを改善できるよう微調整されます。代わりにいくつかのエラーが無視されずにスローされるようになります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exactOptionalPropertyTypes-config'><a aria-label=\"Link to the compiler option: exactOptionalPropertyTypes\" id='exactOptionalPropertyTypes' href='#exactOptionalPropertyTypes' name='exactOptionalPropertyTypes' aria-labelledby=\"exactOptionalPropertyTypes-config\">#</a> Exact Optional Property Types - <code>exactOptionalPropertyTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on <code>type</code> or <code>interfaces</code> which have a <code>?</code> prefix.</p>\n<p>For example, this interface declares that there is a property which can be one of two strings: ‘dark’ or ‘light’ or it should not be in the object.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">UserDefaults</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// The absence of a value represents 'system'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">colorThemeOverride</span><span style=\"color: #000000\">?: </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Without this flag enabled, there are three values which you can set <code>colorThemeOverride</code> to be: “dark”, “light” and <code>undefined</code>.</p>\n<p>Setting the value to <code>undefined</code> will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn’t quite accurate; <code>colorThemeOverride: undefined</code> is not the same as <code>colorThemeOverride</code> not being defined. For example, <code>\"colorThemeOverride\" in settings</code> would have different behavior with <code>undefined</code> as the key compared to not being defined.</p>\n<p><code>exactOptionalPropertyTypes</code> makes TypeScript truly enforce the definition provided as an optional property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getUserSettings(): UserDefaults' >getUserSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// But not:</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span><span class=\"code\">2412</span></span><span class=\"error-behind\">Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9efACwBGXkww5EFAGYJIoAKoMKAEUgKArvkQNQAbyahQ8LPizEaAC0gBbSMgBu7DABNIAfh4Aid7DEANa+oAA+oL74GADmNoi+ANxMAL5MnvD4gUpy2jhI2DigMZCIqhQAyqWYODEMABQAlDzlxJo6egzJrAC0ffDaiH09TOY4DIigaog1daAAvMWlrVUz0nVNydOzDAB05pbWdo4ubp4LkQHBSUzb63sHVrYOTq7ExB5Ki1Gx8TcsYAAQoNQDgsIguLdqvd9hYnsdXmcvqA8p45NJIO5EkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>switch 文において、次の case へ処理を持ち越した場合にエラーを報告します。\nswitch 文内の空でない case 句が<code>break</code>または<code>return</code>を含むことを確約します。\nこれは、意図しない case への処理持ち越しによるバグを流出させない、ということ意味しています。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">:</span></div><span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARKQAbqSQ4daGTi5koACMnt4+sv5BIWHh0AAmhfGJ3moYpPAA1oYAvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>いくつかの型アノテーションが存在しないケースにおいて、TypeScript は変数の型が推論できないときに、<code>any</code>型へフォールバックします。</p>\n<p>このため、エラーを見逃す可能性があります。例えば:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// エラーにならない？</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQgCoZAlwyAfhkDWDICsGQJEM8wCIMgfH-hodO0rRk1AHTJoAcx4HKDAEZYATlwDMvXgG5aAX3rcALACZXQA'>Try</a></div></pre>\n<p>ただし、<code>noImplicitAny</code>を有効化すると、TypeScript は型が<code>any</code>に推論されるときは常にエラーを発生させます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) s: any' >s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> No Implicit Override - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaATA9gO4B2I+YuAFAJQbY7QD0j0AIgKYBmYSIALtATsAFmABuAS3wAnegF9MCzKEgwAyqOntc8ZGnYAPPu2K4Yu1HRwESZCjSsNm0APJj206RNztoffNAA5uwCEsScAZzS+GgoYMQAntAQ+EjSwOwQ8opAA'>Try</a></div></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from algorithm</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaECmALkgA4AUAlBtjtAPS3QAieAZmEiAdAngBZgA3AJYB7AE7UAvpmmZQkGAFkAMvGRo8ADwJ4AdgBMYa1FRz4iZSlhp0GAeQF4xYofrzQCI6AHNC0IbosXixiImhgIN7iQgS8KFIymHLgUNAAyvxiePrGGtp6hnCIJtbQ+iIA7rogImD6FKY09NAOTi5uHl6+XAFB0CFh0ChgugCeuCJIYsB4EAmSQA'>Try</a></div></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='(method) SharedAlbum.setup(): void' >setup</data-lsp></data-err></span><span style=\"color: #000000\">() {}</span></div><span class=\"error\"><span>This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><span class=\"code\">4114</span></span><span class=\"error-behind\">This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwPIDcBTAJyNQBMCAoECYo6IgZwC5QAWARg7cvWQENGjUAEFkAIwCu8UAG9KoUIwJZJiABQBKOQF9Ke3gKGgAsgBkxUmQQAeWApDLDL0uQtDRCJcgSUq1Wrr6lIaCwgDKABb8RARkLtZ2Dk6iEq7yisqqGtqyejpAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>有効化すると、TypeScript は関数内のすべてのコードパスについて、値を返却していることをチェックします。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string' >lookupHeadphonesManufacturer</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: \"blue\" | \"black\"' >color</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"black\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) color: \"blue\" | \"black\"' >color</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgA2ccA1qQA4ASkAhgBNOACwaREAWT7lSxPjVLQYACkpwW0VACIARk1KQtoAD6hdTeWy0BKVImrRa5AOagA3oVChaxUKvUIoAC8IWZ6Bjbunl6gStSKjLr81IhaANzRAL6gkEyIkFExYXD56VmEmUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>暗黙的に<code>any</code>型となる this 式でエラーを発生させます。</p>\n<p>例えば、以下の Class は<code>this.width</code>と<code>this.height</code>にアクセスする関数を返しています。\nしかし、<code>getAreaFunction</code>の内側の関数内でのコンテキストにおける<code>this</code>は Rectangle のインスタンスではありません。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Rectangle' >Rectangle</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number' >height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number' >width</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number' >height</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.width: number' >width</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) width: number' >width</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Rectangle.height: number' >height</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) height: number' >height</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Rectangle.getAreaFunction(): () => number' >getAreaFunction</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >width</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >height</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQEAuJAdgOZGSgDeeooA7gJYATWgAtUDAK4BbAEYwA3F1DDIfJsNpips6AsUE4DRLWji6CABT8ho0BJkwANEpVqNtrTACUHRdxF9EADorEVAAXl5BEQVuP2EAwOVVdXDnZNoY0ABfPEUmSFoAQWhIEgAxcQY6PgNzb05Y0BLacWgGUAAzSuqDUDqfRu5m1vb-IJDhUAAqUDHEl3VM7izMnKygA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> No Property Access From Index Signature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface GameSettings' >GameSettings</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Known up-front properties</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' >speed</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"fast\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"medium\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"slow\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' >quality</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"high\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"low\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Assume anything unknown to the interface</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// is a string.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getSettings(): GameSettings' >getSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' style='border-bottom: solid 2px lightgrey;'>speed</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' style='border-bottom: solid 2px lightgrey;'>quality</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>(property) GameSettings.quality: \"high\" | \"low\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Unknown key accessors are allowed on</span></div><div class='line'><span style=\"color: #008000\">// this object, and are `string`</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(index) GameSettings[string]: string' style='border-bottom: solid 2px lightgrey;'>username</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(index) GameSettings[string]: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgAmkBjAGwENpJQAzAVwDsCAXASzltAHNIGBlL529ogAUASlQBxEgFtIvBv0EBubCFABaDQWoMNa7E1oMYlEgQqSZchYlABvbKFCqA0rTgB3NtQAOayvENQb3hvGGZIRAdQRFDIXFQAIhNEBgTQAB9QBJlcJmopNMyExCIPBOVHAEdqEiImBgBPRIALJnZmwqzS93LsKNUAQUREfIoSWgaGVoFQOgBrN09QBjhl5ooDI2gTM36wJhsSaIZoA3YAOiiAbTnIJuPTgQBdVBTH9mUAXz6CVhTovhnGwAXg4XCsQNEykQgIEiHOMUgcWUqkcaNAAD0APzYGHyIHnaq1eoNFFgdGObF9VQAVVoCw8bFuDVApjMwwQh3IrKI3TioFYKjAUwOAoARgArQgMAA0rNouFZ3IABm8zsrcbDBOdqDDoLRpJAyRTKVigA'>Try</a></div></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getSettings(): GameSettings' >getSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"' >speed</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) GameSettings.quality: \"high\" | \"low\"' >quality</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// This would need to be settings[\"username\"];</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: GameSettings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(index) GameSettings[string]: string' style='border-bottom: solid 2px lightgrey;'>username</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><span class=\"code\">4111</span></span><span class=\"error-behind\">Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(index) GameSettings[string]: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgQQHZwAK8ADjAC4CeAggMZ2SKIBi8AtgJL4AmkAHgGUAlgHN8AQwoBXaJGx86AGwlzQAM2n46FYXHyhRkCoOO78oxAAoAlKgDiE9pFMVzlgNzZh+CjHUSjKCOzq7uiKAA3tigoIjkkDyoAEQBiBTJoAA+oMnOPMLS7Jk5yYhKcADuyV6xAI7SEkrC1CkAFmJtJbkV1bWgANoA1pBUqOnQPqIAuuMUkxZeAL64YAC0G3TSFBtr2HT66XFmUxEAvIbGYae2XognFogAdPGQiXcPlk8NTS1UXqtQAAVDoRSpwaRKHigfBvaEUOCgABGkGOblOA2S0nu0EkzmS0w+6MeT2xMDxkC8eFiNNAAD0APxAA'>Try</a></div></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript には、オブジェクトにおいて未知のキーを持ちながらも値が既知であるプロパティをインデックスシグネチャで記述する方法があります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 未知のプロパティは、次のようなインデックスシグネチャで扱うことができます。</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propName: string' >propName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 既存のプロパティとして宣言されています</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 宣言されていませんが、インデックス</span></div><div class='line'><span style=\"color: #008000\">// シグネチャのおかげで、stringとして扱われます</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnv: string' style='border-bottom: solid 2px lightgrey;'>nodeEnv</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnv: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085ICpzQKfugOwZA6wyBbhkCLDIDGGQMUMgewZAgAyBCa3WAIhkBiDICsGQCUMgZ4ZA4wyBhhkD1DIE6GQO0MgBoZAWYZAQYZAY4ZAcwZARyMbQGUGQAsGQBkGMMBZBkA-BkBNBkAgBmEAbQAHXFyGOEJJHn4AXVLpWQBfOQATCAQAGzIUBDxuZCIMTnQsXAIiMFIKIRpFZEAj00ANbS09I1jAdQZAMwZAYu1AACjAVQZAGIYVwBEGdJoOkC7yAE9yIsJkAF5uzAA6ZjYhE66cSnuex-EhSfoyAAegB+OSTTa7A4pQDaDIBkhnipmc7m8EyU-mCIXUgCkGQDSDIAlBjCpik-GWKwigHiGHZHd5gZAgHCNfp3B4YZ4iAAiqAA+qgGMR-kpAaCgA'>Try</a></div></pre>\n<p><code>noUncheckedIndexedAccess</code>をオンにすると、型の未定義のフィールドに<code>undefined</code>が追加されます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 既存のプロパティとして宣言されています</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 宣言されていませんが、インデックス</span></div><div class='line'><span style=\"color: #008000\">// シグネチャのおかげで、stringとして扱われます</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnv: string | undefined' style='border-bottom: solid 2px lightgrey;'>nodeEnv</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string | undefined' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnv: string | undefined</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085ICpzQKfugOwZA6wyBbhkCLDIDGGQMUMgewZAgAyBCa3WAIhkBiDICsGQCUMgZ4ZA4wyBhhkD1DIE6GQO0MgBoZAWYZAQYZAY4ZAcwZARyMbQGUGQAsGQBkGMMBZBkA-BkBNBkAgBmEAbQAHXFyGOEJJHn4AXVLpWQBfGkVkAAEQHABVEAQACwgEAGsIABMASRABiAAPQaYEJHJyeqUAWmWEAFcwZcWaMYQAGzIUBDxuZCIMTnQsXAIiMFIKIQXkQCPTQA1tLT0jWMB1BkAzBkBi7UAAFGAVQZADEMv0AIgzpGhHEAncgAT3IRUIyAAvKdMAA6ZhsISwk44SgYs5Y8RCBr0ZAAPQA-HIGkCwZCUoBtBkAyQzxUzOdzeJ7+YIhdSAKQZANIMgCUGMKmKT8H6-CKAeIZQdCCWBkC0xpd0ZiMDiRAARVAAfVQDGIFKUVLpQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>利用されていないローカル変数について、エラーを報告します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createKeyboard: (modelID: number) => {&#10;    type: string;&#10;    modelID: number;&#10;}' >createKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) modelID: number' >modelID</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'defaultModelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'defaultModelID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number' >modelID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25FLh4oA0igCeAI2i5yaUAF5QACgC20NCnwBJACL1EaqRQCUSgHygA3kVD8uvUFoBmuBPh4BZTdv1LQACYWAG47UEEeBHJIG1AeCQAHFHoAIgBrSRk5NFSAGlANLV09UABfMIqgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>利用されていない関数のパラメータについて、エラーを報告します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const createDefaultKeyboard: (modelID: number) => {&#10;    type: string;&#10;    modelID: number;&#10;}' >createDefaultKeyboard</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) modelID: number' >modelID</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>'modelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modelID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) type: string' >type</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modelID: number' >modelID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const defaultModelID: 23' >defaultModelID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjhRYSAERQAzLAgA2RANIoAngCNouNKAC8oABT5oaFLICSYxonyrSASh0A+UAG9yoQb36hj0uUQCyRibmOqAATGwA3G6gwkQIOJAuoETKAA4ojABEANYq6ppZADSghsZmFt5SMvKB5SEAvtFNQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>strict</code>フラグは、プログラムの正しさを強く保証するための幅広い型チェックの挙動を有効化します。\nこのオプションの有効化は、以降で述べるすべての<em>strict モードファミリー</em>オプションの有効化と等価です。\n必要に応じて、個別の strict モードファミリーを無効化できます。</p>\n<p>今後の TypeScript のバージョンがこのフラグの配下により厳密なチェックを導入するかもしれません。この場合、TypeScript のアップグレードにより、プログラムに新しい種類のエラーが発見されることもあるでしょう。\n適切かつ可能な場合、この挙動を無効化するための対応するフラグも追加されます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a></p>\n</li><li><p><a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a></p>\n</li><li><p><a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a></p>\n</li><li><p><a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a></p>\n</li><li><p><a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a></p>\n</li><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li><li><p><a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li><li><p><a href='#useUnknownInCatchVariables' aria-label=\"Jump to compiler option info for useUnknownInCatchVariables\" ><code>useUnknownInCatchVariables</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定されている場合、関数の組み込みメソッドの<code>call</code>と<code>bind</code>と<code>apply</code>について、元となっている関数に対して正しい引数で呼び出されているかを TypeScript がチェックします:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// strictBindCallApplyが有効な場合</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n1: number' >n1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n2: number' >n2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [x: string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizAwEyNFjyFS5CoBkGQJDmgTqVAVgyAWDUAQKkwBmddMnid0oA+gAUADxpSMAcwCUoAN5NQoWA2h1YCxJcHgYASXRoOxcAbiYAX3FEcxhQdABGUABeS3QAOkQCfGtjTAYDDAZMABpQACJ0gAY62KSU6DS+bNyCopKscsqaywJIBligA'>Try</a></div></pre>\n<p>設定されていない場合、これらの関数は任意の引数を受け取って<code>any</code>を返します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// strictBindCallApplyが無効な場合</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Note: エラーになりません。戻り値の型は&apos;any&apos;です。</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: any' >n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIoMCyaWehp5CoBkGQISOgTqVAVgyAWDUAQKs1oBXdMngB7dHXQAKAB41OGAOYBKUAG9moULEbQFsDSVywmASXTRdxgNzMAvqzsAHKq0Iw0gBUMgJcMgD8MgNYMEoBRDIB+DIDaDIDJDIBADIDcRomAJAqAdgyA0eqA9gwA5LjoFGWA5gyAmgyZzIjqMKAaALyaAHSIBPhaSpiMtBiMmAA0dAyMPkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>有効化すると、このフラグは関数のパラメータをより正しくチェックするようになります。</p>\n<p>次は<code>strictFunctionTypes</code>が無効な場合の基本的な例です:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 安全でない代入</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let func: StringOrNumberFunc' >func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// 安全でない呼び出し - エラーとなります</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='let func: (ns: string | number) => void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoICR2oAWioDmDIBWDIAiDIDHcoCmisxK0DTsVOFCwjHxyansmVw+HT0Dg4A+KoDODIBfioDqDKAAtKCAFQyAlwyAPwyAFgz9gFEMgH4MgJoMrOzcAIwADN5AA'>Try</a></div></pre>\n<p><code>strictFunctionTypes</code>を<em>有効化</em>すると、エラーが正しく検知されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 安全でない代入は抑止されます</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let func: StringOrNumberFunc' >func</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQAJSONkAaUAtABqUIylk4AGTgB3GAGEAhokj1u3ANw4AvjhxkAngAdIoAGU2Dk4AeWgAOQIAWwAjGAAxYhJQAF5QeiIUUFZ2LlAAH1AiGPjoXlSAPlAANzgKABMXHBBQQEjtQAtFQHMGQCsGQBEGQGO5QFNFQHsGQESjQCNrQFUGQBiGQD8GQE0GHEkyWmTUILywyNLE5LTaIicgA'>Try</a></div></pre>\n<p>私達はこの機能を開発する際、本質的に安全でない Class 階層を数多く見つけました。中には DOM のものも含まれていました。\nこのため、この設定は<em>function</em>構文で記述された関数にのみ適用され、<em>メソッド</em>として記述された関数には適用されません:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Methodish = {&#10;    func(x: string | number): void;&#10;}' >Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 最終的に安全でない代入となりますが、エラー検知はされません</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const m: Methodish' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Methodish = {&#10;    func(x: string | number): void;&#10;}' >Methodish</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const m: Methodish' >m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshwAsD2ATAlgZwVAvFA3gFBRQBmArgHYDGAFAB4BcUGwATmpQOZQA+UlcgFsARhDYBKZgDckaFAG5CAXyWEKNYGiSUylBs1YduEgsSjUdGJABsIAOhtIutAEQAJCDacAaKK6gAaih6e2AkABkkAHdxAGEAQwwIWgkJJWVCQgB6bKhAAHNAIV9AELdAawZASO1AC0VAcwZAKwZAEQZAY7lAU0VACwZawCiGQD8GQE0GQBkGQEAGQAqGQEuGQB+GQBxLQFP3QHsGQFUGQBiGLsBtBkBkhkJLSlYoIWY4RFRMbDwiEg1qZlJKHxUlIXtz2gBGAAZ0oA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>strictNullChecks</code>が<code>false</code>のとき、<code>null</code>と<code>undefined</code>は言語により事実上無視されます。\nこれは実行時の予期しないエラーの原因となります。</p>\n<p><code>strictNullChecks</code>が<code>true</code>のとき、<code>null</code>と<code>undefined</code>はそれ自身に明示的な型が与えられ、具体的な値を期待して利用しようとした場合にエラーとなります。</p>\n<p>例えば、次の TypeScript コードの<code>users.find</code>は実際にユーザーを見つけられる保証がありません。\nしかし、ユーザーを見つけられたかのようにコードを書くことができます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;}' >loggedInUser</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p><code>strictNullChecks</code>を<code>true</code>にすると、<code>loggedInUser</code>を利用する前に存在を確認していないことを示すエラーが発生します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const users: {&#10;    name: string;&#10;    age: number;&#10;}[]' >users</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ name: string; age: number; }>.find(predicate: (value: {&#10;    name: string;&#10;    age: number;&#10;}, index: number, obj: {&#10;    name: string;&#10;    age: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    name: string;&#10;    age: number;&#10;} | undefined (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    name: string;&#10;    age: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const loggedInUsername: string' >loggedInUsername</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const loggedInUser: {&#10;    name: string;&#10;    age: number;&#10;} | undefined' >loggedInUser</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>'loggedInUser' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'loggedInUser' is possibly 'undefined'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqHFxqtFQEldAVUQxdFALaRUPfruoBuIkR36yoUTZIoAC8oADaRKCgAN6gdo6oAEQA8gBGAJ6JADSgFLSoAIxooAC+WZExcQ5OoIkAEpAwFNm5+aCEpeUAup7eegZGJpDmVoEh-oGIAHQAZny6KgAUi6IAlCEAfP5T8VrB+4bGphbWttWrnj6IcOKQU4OLg8ejMFN5kBdAA'>Try</a></div></pre>\n<p>単純化してみると配列の<code>find</code>関数が次のようになっていることから、2 つ目の例はエラーとなったのです:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// strictNullChecks: trueのとき</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// strictNullChecks: falseのとき、undefinedは型システムから取り除かれ、</span></div><div class='line'><span style=\"color: #008000\">// 常に結果が見つかるかのようにコードを書けるようになります</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>true に設定した場合、Class プロパティが宣言されているがコンストラクターで値がセットされていないときに、TypeScript はエラーを発生させます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class UserAccount' >UserAccount</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.accountType: string' >accountType</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"user\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) UserAccount.email: string' >email</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.address: string | undefined' >address</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// 注 this.emailがセットされていません</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAKqIwCCBBcArgHYAuoA3nqKCyQFtIqRG2gBLFgHMA3D1AkGzdgBUAngAdIoALygARExrR9c+ZAElxREWMmz5JACZPokcrYnTQAH1CsnSAAzSUgnM15GFlFoJgI2BAAKfiFPewBKLnleNgALcUQAOhTtPRK5Xl4QUEALm1A8gsKLKyJAGQZAboZAYYZACYZAVQZAGIZAMwZAEQZAPwZAbQZAZIZ5AF88GaA'>Try</a></div></pre>\n<p>上記の場合:</p>\n<ul>\n<li><code>this.name</code>は具体的に設定されています。</li>\n<li><code>this.accountType</code>はデフォルト値が設定されています。</li>\n<li><code>this.email</code>は値が設定されていないため、エラーとなります。</li>\n<li><code>this.address</code>は<code>undefined</code>になりうる値として宣言されており、これは値の設定が必須でないことを意味しています。</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useUnknownInCatchVariables-config'><a aria-label=\"Link to the compiler option: useUnknownInCatchVariables\" id='useUnknownInCatchVariables' href='#useUnknownInCatchVariables' name='useUnknownInCatchVariables' aria-labelledby=\"useUnknownInCatchVariables-config\">#</a> Use Unknown In Catch Variables - <code>useUnknownInCatchVariables</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from <code>any</code> to <code>unknown</code>. Allowing for code like:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We have to verify err is an</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error before using it as one.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var err: Error' >err</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFcGcFMFUB2BrRB7A7ogkogwgIYAuAxgBYBqBATgJYEBGANrNAFBHUCeoA3m6FAhQAOjFsAvqBLFyoABSxq1AJR8BQsAHVYoMgQBuuomlBG6AMx5LqoWtFAFEG4TbS2GsC+90xaiAHM7IkcHNERYEQ1aCwUbO0RoIicSWDRYgFFldzV+QUEScOg0FhEmNADFZREAW1ZoAgDYFQBuDQlJIA'>Try</a></div></pre>\n<p>This pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown <em>is</em> a Error subclass ahead of time. With the flag <code>useUnknownInCatchVariables</code> enabled, then you do not need the additional syntax (<code>: unknown</code>) nor a linter rule to try enforce this behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Modules_6244' ><a href='#Modules_6244' name='Modules_6244' aria-label=\"Link to the section Modules\" aria-labelledby='Modules_6244'>#</a>Modules</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowArbitraryExtensions-config'><a aria-label=\"Link to the compiler option: allowArbitraryExtensions\" id='allowArbitraryExtensions' href='#allowArbitraryExtensions' name='allowArbitraryExtensions' aria-labelledby=\"allowArbitraryExtensions-config\">#</a> Allow Arbitrary Extensions - <code>allowArbitraryExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 5.0, when an import path ends in an extension that isn’t a known JavaScript or TypeScript file extension, the compiler will look for a declaration file for that path in the form of <code>{file basename}.d.{extension}.ts</code>.\nFor example, if you are using a CSS loader in a bundler project, you might want to write (or generate) declaration files for those stylesheets:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">css</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* app.css */</span></div><div class='line'><span style=\"color: #800000\">.cookie-banner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #E50000\">display</span><span style=\"color: #000000\">: </span><span style=\"color: #0451A5\">none</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// app.d.css.ts</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">css</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">css</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// App.tsx</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">styles</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./app.css\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">styles</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div></code></div></pre>\n<p>By default, this import will raise an error to let you know that TypeScript doesn’t understand this file type and your runtime might not support importing it.\nBut if you’ve configured your runtime or bundler to handle it, you can suppress the error with the new <code>--allowArbitraryExtensions</code> compiler option.</p>\n<p>Note that historically, a similar effect has often been achievable by adding a declaration file named <code>app.css.d.ts</code> instead of <code>app.d.css.ts</code> - however, this just worked through Node’s <code>require</code> resolution rules for CommonJS.\nStrictly speaking, the former is interpreted as a declaration file for a JavaScript file named <code>app.css.js</code>.\nBecause relative files imports need to include extensions in Node’s ESM support, TypeScript would error on our example in an ESM file under <code>--moduleResolution node16</code> or <code>nodenext</code>.</p>\n<p>For more information, read up <a href=\"https://github.com/microsoft/TypeScript/issues/50133\">the proposal for this feature</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/51435\">its corresponding pull request</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowImportingTsExtensions-config'><a aria-label=\"Link to the compiler option: allowImportingTsExtensions\" id='allowImportingTsExtensions' href='#allowImportingTsExtensions' name='allowImportingTsExtensions' aria-labelledby=\"allowImportingTsExtensions-config\">#</a> Allow Importing TS Extensions - <code>allowImportingTsExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--allowImportingTsExtensions</code> allows TypeScript files to import each other with a TypeScript-specific extension like <code>.ts</code>, <code>.mts</code>, or <code>.tsx</code>.</p>\n<p>This flag is only allowed when <code>--noEmit</code> or <code>--emitDeclarationOnly</code> is enabled, since these import paths would not be resolvable at runtime in JavaScript output files.\nThe expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between <code>.ts</code> files work.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Allow Umd Global Access - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowUmdGlobalAccess</code>を true に設定すると、モジュールの内部から UMD へグローバルにアクセスできるようになります。モジュールファイルとは、import や export を使っているファイルのことです。このフラグを利用しない場合、UMD モジュールを利用するには import 宣言文が必要です。</p>\n<p>このフラグの利用例は、特定のライブラリ（jQuery や Lodash など）が常に実行時に利用可能であると分かっているが、import 文ではそのライブラリにアクセスできないような web プロジェクトです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> Base Url - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>絶対パス参照でないモジュール名を解決するための基点となるディレクトリを設定できます。</p>\n<p>絶対パスで解決するために、ルートフォルダを決めることもできます。すなわち、</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">baseUrl\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json</span></div></code></div></pre>\n<p><code>\"baseUrl\": \"./\"</code>とすると、このプロジェクト内では、TypeScript は<code>tsconfig.json</code>と同じフォルダからファイルの探索を行います。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"hello/world\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p><code>\"../\"</code>や<code>\"./\"</code>のような毎度のインポート文にうんざりしていたり、\nファイルを移動するときにインポート文を変更する必要がある場合、このオプションは修正するための良い方法です。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='customConditions-config'><a aria-label=\"Link to the compiler option: customConditions\" id='customConditions' href='#customConditions' name='customConditions' aria-labelledby=\"customConditions-config\">#</a> Custom Conditions - <code>customConditions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--customConditions</code> takes a list of additional <a href=\"https://nodejs.org/api/packages.html#nested-conditions\">conditions</a> that should succeed when TypeScript resolves from an <a href=\"https://nodejs.org/api/packages.html#exports\"><code>exports</code></a> or <a href=\"https://nodejs.org/api/packages.html#imports\"><code>imports</code></a> field of a <code>package.json</code>.\nThese conditions are added to whatever existing conditions a resolver will use by default.</p>\n<p>For example, when this field is set in a <code>tsconfig.json</code> as so:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleResolution\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"bundler\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"customConditions\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"my-condition\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Any time an <code>exports</code> or <code>imports</code> field is referenced in <code>package.json</code>, TypeScript will consider conditions called <code>my-condition</code>.</p>\n<p>So when importing from a package with the following <code>package.json</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\".\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"my-condition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./foo.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"node\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./bar.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./baz.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./biz.mjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript will try to look for files corresponding to <code>foo.mjs</code>.</p>\n<p>This field is only valid under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>より詳細については、ハンドブックの<a href='/docs/handbook/modules.html#ambient-modules'>Modules</a>の章を参照してください。おそらく<code>\"CommonJS\"</code>が求められるでしょう。</p>\n<p>次のファイルに対する出力の例をいくつか示します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const twoPi: number' >twoPi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRCgAtNux8i2zerBQ4SNJlDREAE3pUC1aKiatQAb268BwsaAC+oJDMuKigAEQUwHiEJGQEYWq0jCxs0ZxEAO64vlI8-EKi4gBUoKpAA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHADNUz6BDZC6rHqR0PeukgA6CZlIAPAA6wATukHC1ANx7FCpAPLsACqlABeUAGZJARgAsAJgDcrUAFoPVQug9vXHLlJefkpUenx5aRZUZCVVUABvUG1dA2NTAF9QdmVaUAAiSWAaDTEJfJdZRRU1EpFQdHhYE3NknT1DFoAqUGcgA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADNUyA7AQ2QtAGNYXJ0bFukgA6EZlIAPAA6wATuh58BoAG5tihUgHkGABVSgAvKADMogIwAWAEwBuOqAC0r7oXSvnTxs1LtOSlQWfGlxSExUZDlFUABvdU1tPUNQAF9QBnlYZFAAIlFgXn5BYUg8x0lZBSVi1XR4WFTTDS1dAyMAKlAHIA'>Try</a></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwAzVMgOxotAGNZXJ0qrdJAB0wzKQAeAB1gAndN179QANyrFCpAPKMACqlABeUAGYRARgAsAJgDc9UAFoXXQuhdPHTFqXbJOVFZ8KTFITFRkWQVQAG81DS1dA1AAX1BGOVhkUAAiEWAePgEhSFyHCRl5RSKVdHhYFJN1TR19QwAqUHsgA'>Try</a></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">System</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__moduleName</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">setters:</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">execute</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"twoPi\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwAzVMgOwENkLQBjWBzpcO6SADpxmUgA8ADrABO6AULqgAbl2KFSAeRYAFVKAC8oAMwSAjABYATAG4moALQf+hdB7evW7KTcvJSoHPhyUpCYqMiKKqAA3lo6eoYmoAC+oCxKsMigAEQSwILC6KLihS4yCsqqZRro8LAZFtq6BsamAFSgzkA'>Try</a></div></pre>\n<h4 id=\"esnext--es2020\" style=\"position:relative;\"><a href=\"#esnext--es2020\" aria-label=\"esnext  es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code> / <code>ES2020</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcAM1TJoENkLQBjWDUjpONdJAB04zAwAOsAE7p+g4aABunYoVIB5FgAVUoALygAzBICMAFgBMAbmxgAtG76F0bl84hsO3LyoNPgMUpCYqMjySqAA3hpaOvpGoAC+oCwKsMigAEQSwAJCImKQeU4y9DHKxWro8LCpZpraeobGAFSgjkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>CommonJS</code> if <a href=\"#target\"><code>target</code></a> is <code>ES3</code> or <code>ES5</code>; <code>ES6</code>/<code>ES2015</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>none</code></p>\n</li><li><p><code>commonjs</code></p>\n</li><li><p><code>amd</code></p>\n</li><li><p><code>umd</code></p>\n</li><li><p><code>system</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li><li><p><a href='#allowImportingTsExtensions' aria-label=\"Jump to compiler option info for allowImportingTsExtensions\" ><code>allowImportingTsExtensions</code></a></p>\n</li><li><p><a href='#allowArbitraryExtensions' aria-label=\"Jump to compiler option info for allowArbitraryExtensions\" ><code>allowArbitraryExtensions</code></a></p>\n</li><li><p><a href='#resolveJsonModule' aria-label=\"Jump to compiler option info for resolveJsonModule\" ><code>resolveJsonModule</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>モジュール解決の方法を’node’（Node.js）または’classic’（TypeScript pre-1.6）から設定します。おそらく利用する必要はないでしょう。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>Classic</code> if <a href=\"#module\"><code>module</code></a> is <code>AMD</code>, <code>UMD</code>, <code>System</code>, or <code>ES6</code>/<code>ES2015</code>; Matches if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>Node</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>classic</code></p>\n</li><li><p><code>node10</code>/<code>node</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li><li><p><code>bundler</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li><li><p><a href='#paths' aria-label=\"Jump to compiler option info for paths\" ><code>paths</code></a></p>\n</li><li><p><a href='#baseUrl' aria-label=\"Jump to compiler option info for baseUrl\" ><code>baseUrl</code></a></p>\n</li><li><p><a href='#rootDirs' aria-label=\"Jump to compiler option info for rootDirs\" ><code>rootDirs</code></a></p>\n</li><li><p><a href='#moduleSuffixes' aria-label=\"Jump to compiler option info for moduleSuffixes\" ><code>moduleSuffixes</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleSuffixes-config'><a aria-label=\"Link to the compiler option: moduleSuffixes\" id='moduleSuffixes' href='#moduleSuffixes' name='moduleSuffixes' aria-labelledby=\"moduleSuffixes-config\">#</a> Module Suffixes - <code>moduleSuffixes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Provides a way to override the default list of file name suffixes to search when resolving a module.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleSuffixes\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\".ios\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\".native\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Given the above configuration, an import like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>TypeScript will look for the relative files <code>./foo.ios.ts</code>, <code>./foo.native.ts</code>, and finally <code>./foo.ts</code>.</p>\n<p>Note the empty string <code>\"\"</code> in <a href=\"#moduleSuffixes\"><code>moduleSuffixes</code></a> which is necessary for TypeScript to also look-up <code>./foo.ts</code>.</p>\n<p>This feature can be useful for React Native projects where each target platform can use a separate tsconfig.json with differing <code>moduleSuffixes</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、TypeScript は起動時に与えられたファイルについて<code>import</code>と<code>&#x3C;reference</code>ディレクティブを確認し、解決されたファイルをプログラムに追加します。</p>\n<p><code>noResolve</code>が設定されているとき、このプロセスは発生しなくなります。\nしかし、<code>import</code>文は正しいモジュールを解決しているかどうかチェックされるため、これが満たされているかどうかを他の方法で確認する必要があります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>baseUrl</code>からの相対的な検索場所にインポートを再マッピングするエントリです。<code>paths</code>についてより網羅的な記述は<a href=\"/docs/handbook/module-resolution.html#path-mapping\">ハンドブック</a>に記載されています。</p>\n<p><code>paths</code>により、TypeScript がどのように<code>require</code>/<code>import</code>からインポートを解決すべきかを定義できます。</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// \"paths\"を設定する場合、このオプションも設定が必要です。</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// このマッピングは\"baseUrl\"からの相対パスです。</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定は、<code>import \"jquery\"</code>と記述できるようにし、すべての正しい型がローカルから取得されるようになります。</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_config/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"environments/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_shared/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"helpers/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"tests/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この例は、TypeScript に対して、ファイルリゾルバーへコードを見つけるためのカスタムプレフィクスによる補助をさせています。\nこのパターンは、コードベース内で長い相対パスを避けるために利用できます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>‘.json’拡張子のファイルをモジュールとしてインポートできるようにします。Node のプロジェクトで一般的に利用されている手法です。\nこのオプションは、<code>import</code>時に静的な JSON の構造から型を生成します。</p>\n<p>デフォルトでは、TypeScript は JSON ファイルの解決をサポートしていません:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><span class=\"error\"><span>Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><span class=\"code\">2732</span></span><span class=\"error-behind\">Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMaBQIIAzASwBtIA7AQwFtJVFIAXJ4igc0QDoArROCrgDeuUGNAAiaJAAOcCagkAVAJ4zIAZQDG0YjKYSANKPESAJtBULQhKqUbHxks5ABGAV3bXb9yLgC++GDgJOTUdKhsLgAeXEyIuMQ0ctBMoIwsbJw28DSSXMAZrBzcfAISANy4uEVZ3C4e7KAAvK2gTNDukFW1JVwWKi1taBVAA'>Try</a></div></pre>\n<p>このオプションを有効にすると JSON のインポートが可能となり、JSON ファイルの型を検査できるようになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"debug\": boolean' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"dry\": boolean' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUCBNJInADYBukAUqQHYCycAJgK5mQFjgC2L7kVAGM4PPnQBWiLhD5sOAJRLlWAFwCWcOqjotOhcADN1HOgEMeg0IkiqNdAOaIAdFK14A3nlA-QAImIABzg-VD8AFQBPQMgAZSFodUDVPwAab18-ZmhI0NBDMzIbdN9-ZkgAI1YHPIKizgBfGSMTSHNLVHU6coAPZ1VpdR5g6FVrW3snfPgef2dgGzsup1d6PwBuPDxFyZdyqodQAF4T0FVoVkhNneW9nOPTtHWgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonExports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonExports\" id='resolvePackageJsonExports' href='#resolvePackageJsonExports' name='resolvePackageJsonExports' aria-labelledby=\"resolvePackageJsonExports-config\">#</a> Resolve package.json Exports - <code>resolvePackageJsonExports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonExports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#exports\">the <code>exports</code> field of <code>package.json</code> files</a> if it ever reads from a package in <code>node_modules</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonImports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonImports\" id='resolvePackageJsonImports' href='#resolvePackageJsonImports' name='resolvePackageJsonImports' aria-labelledby=\"resolvePackageJsonImports-config\">#</a> Resolve package.json Imports - <code>resolvePackageJsonImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonImports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#imports\">the <code>imports</code> field of <code>package.json</code> files</a> when performing a lookup that starts with <code>#</code> from a file whose ancestor directory contains a <code>package.json</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>デフォルト値</strong>: 型定義ファイルでないすべての入力ファイルの中での最長の共通パス。<code>composite</code>が設定されている場合、この値の代わりに<code>tsconfig.json</code>を含むディレクトリがデフォルトとなります。</p>\n<p>TypeScript はファイルをコンパイルするとき、入力ディレクトリ内のディレクトリ構造が同じになるように出力ディレクト内の構造を保ちます。</p>\n<p>例えば、いくつかの入力ファイルがあったとしましょう:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts</span></div></code></div></pre>\n<p>推定される<code>rootDir</code>の値は、型定義ファイルでないすべての入力ファイルの中での最長の共通パス、この例では<code>core/</code>となります。</p>\n<p><code>outDir</code>が<code>dist</code>だったとすると、TypeScript は次のツリー構造を出力します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts</span></div></code></div></pre>\n<p>ただし、出力ディレクトリ内に<code>core</code>を含めることを意図している場合があります。\n<code>rootDir: \".\"</code>を<code>tsconfig.json</code>に設定すると、TypeScript は次のツリー構造を出力します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js</span></div></code></div></pre>\n<p>重要なこととして、<code>rootDir</code>は<strong>どのファイルがコンパイルに含められるかに影響しません</strong>。\n<code>tsconfig.json</code>の<code>include</code>、<code>exclude</code>や<code>files</code>設定との相互作用はありません。</p>\n<p>TypeScript は<code>outDir</code>以外のディレクトリに出力ファイルを書き込むことはなく、ファイルの入力をスキップすることもありません。\nこのため、<code>rootDir</code>は出力する必要があるすべてのファイルが rootDir パスの下にあることを強制します。</p>\n<p>例えば、次のツリー構造があったとしましょう:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts</span></div></code></div></pre>\n<p><code>rootDir</code>を<code>core</code>に、<code>include</code>を<code>*</code>に設定すると、<code>outDir</code>の<em>外部</em>（i.e. <code>../helpers.ts</code>）に出力する必要のあるファイル（<code>helpers.ts</code>）が生まれるため、エラーとなります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>rootDirs</code>を用いると、単一のルートとして振る舞う「仮想的な」ディレクトリが複数存在することをコンパイラへ伝えることができます。</p>\n<p>「仮想的な」ディレクトリは 1 つにまとめられるとしても、この設定によって、コンパイラはこれらのディレクトリ内での相対パスによるモジュールのインポートを解決できるようになります。</p>\n<p>例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\"> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")</span></div></code></div></pre>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定は TypeScript がどのように JavaScript を出力するかには影響しません。\n実行時に相対パスを使って動作可能であるという仮定がエミュレートされるだけです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、<em>表示されている</em>すべての”<code>@types</code>“パッケージがコンパイル時にインクルードされます。\nプロジェクトを囲んでいる任意のフォルダの<code>node_modules/@types</code>内のパッケージが<em>表示されている</em>とみなされます。\n例えば、<code>./node_modules/@types/</code>、<code>../node_modules/@types/</code>、<code>../../node_modules/@types/</code>に存在するパッケージが該当します。</p>\n<p><code>typeRoots</code>を設定すると、<code>typeRoots</code>配下のパッケージ<em>のみ</em>がインクルードされます。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"typeRoots\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定ファイルは、<code>./typings</code>と<code>./vendor/types</code>以下の<em>すべての</em>パッケージがインクルードされ、<code>./node_modules/@types</code>のパッケージはインクルードされません。\nパスはすべて、<code>tsconfig.json</code>からの相対パスです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デフォルトでは、すべての<em>表示されている</em>”<code>@types</code>“パッケージがコンパイル時にインクルードされます。\nプロジェクトを囲んでいる任意のフォルダの<code>node_modules/@types</code>内のパッケージが<em>表示されている</em>とみなされます。\n例えば、<code>./node_modules/@types/</code>、<code>../node_modules/@types/</code>、<code>../../node_modules/@types/</code>に存在するパッケージが該当します。</p>\n<p><code>types</code>を設定すると、リストに列挙したパッケージのみがインクルードされます。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"types\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この<code>tsconfig.json</code>ファイルは、<code>./node_modules/@types/node</code>と<code>./node_modules/@types/lodash</code>と<code>./node_modules/@types/express</code><em>のみ</em>をインクルードするようになります。\n<code>node_modules/@types/*</code>配下にある他のパケージはインクルードされません。</p>\n<p>この機能は<a href=\"#typeRoots\"><code>typeRoots</code></a>と違い、インクルードしたい types パッケージだけを厳密に指定できます。一方、<a href=\"#typeRoots\"><code>typeRoots</code></a>は必要としている特定のフォルダを指定できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Emit_6246' ><a href='#Emit_6246' name='Emit_6246' aria-label=\"Link to the section Emit\" aria-labelledby='Emit_6246'>#</a>Emit</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>プロジェクト内のすべての TypeScript ファイルと JavaScript ファイルについて、<code>d.ts</code>ファイルを生成します。\n生成された<code>d.ts</code>ファイルはモジュールの外部 API を記述する定義ファイルです。\n<code>d.ts</code>ファイルを用いると、TypeScript などのツールは、型指定されていないコードに対して、Intelisence や正確な型定義を提供できるようになります。</p>\n<p><code>declaration</code>を<code>true</code>に設定している場合、次の TypeScript コードに対してコンパイラーを実行すると:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let helloWorld: string' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PAFsBCIHVoICZwC8cARCgJYkDcQA'>Try</a></div></pre>\n<p>次のような<code>index.js</code>ファイルが生成されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttTpsyzYB1YsgE1AF5QAiaVTgbiA'>Try</a></div></pre>\n<p>対応する<code>helloWorld.d.ts</code>ファイルは次のとおりです:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiy6FkKFYAdUWEcoALygARNFQmA3EA'>Try</a></div></pre>\n<p>JavaScript ファイルに対応する<code>.d.ts</code>を利用する場合、<a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a>や<a href=\"#outDir\"><code>outDir</code></a>を設定することで JavaScript ファイルを上書きしないようにできます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>型定義ファイルが出力されるルートディレクトリを設定します。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>次の<code>tsconfig.json</code>は:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declarationDir'><data-lsp lsp=\"Specify the output directory for generated declaration files.\">declarationDir</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./types\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>index.ts</code>に対応する d.ts ファイルを<code>types</code>フォルダへ配置します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Declaration Map - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>元の<code>.ts</code>ソースファイルにマップされる<code>.d.ts</code>のソースマップを生成します。</p>\n<p>これにより、VS Code などのエディターは、<em>Go to Definition</em>のような機能で元の<code>.ts</code>ファイルにジャンプできるようになります。</p>\n<p>プエジェクト参照機能を利用している場合、このオプションの有効化を強く推奨します。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Downlevel Iteration - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ダウンレベル化は、古いバージョンの JavaScript にトランスパイルするという意味の TypeScript の用語です。\nこのフラグは、モダンな JavaScript における新しいコンセプトの反復処理が古い JavaScript での実行時にどのように実装されるかについて、より正確なサポートを有効化します。</p>\n<p>ECMAScript 6 では、いくつかの新しい反復処理のための基本構文が加えられました: <code>for / of</code>ループ（<code>for (el of arr)</code>）、配列のスプレッド（<code>[a, ...b]</code>）、引数のスプレッド（<code>fn(...args)</code>）、<code>Symbol.iterator</code>です。\n<code>--downlevelIteration</code>は、<code>Symbol.iterator</code>の実装が存在している場合、ES5 環境におけるこれらの基本的な反復処理をより正確に利用可能になります。</p>\n<h4 id=\"例-for--ofでの効果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B-for--of%E3%81%A7%E3%81%AE%E5%8A%B9%E6%9E%9C\" aria-label=\"例 for  ofでの効果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例: <code>for / of</code>での効果</h4>\n<p><code>downlevelIteration</code>が無効であるとき、任意のオブジェクトに対する<code>for / of</code>ループは旧来の<code>for</code>ループへダウンレベルトランスパイルされます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQAJRABthpAIR8A3LgBmpLgAomrdoVClZHSLACUoAN65QoFYVLDEAOjHxFhXTIC+QA'>Try</a></div></pre>\n<p>これは大概の場合で期待通りの結果となりますが、ECMAScript 6 の挙動と 100%合致しているわけではありません。\n特定の文字列、たとえば絵文字（😜）は、<code>.length</code>は 2（もしくはそれ以上！）ですが、<code>for-of</code>ループでは 1 文字分として反復されねばなりません。\nより詳細な解説は<a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">Jonathan New による blog</a>を参照してください。</p>\n<p><code>downlevelIteration</code>が有効であるとき、TypeScript は<code>Symbol.iterator</code>の実装（ネイティブまたはポリフィル）をチェックするヘルパー関数を利用します。\nもし実装が存在しなければ、index を利用する反復処理へフォールバックします。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">next</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> !</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__values</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">return</span><span style=\"color: #000000\">)) </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEACXqViAQlUBuXADNiigBTTys+aGJH5kWAEpQAb1yhQlvsWoA6bXgzPidDAF8gA'>Try</a></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Note:</strong> <code>Symbol.iterator</code>が実行時に存在しない場合、<code>downlevelIteration</code>は ECMAScript への準拠を保証しません。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"例-配列のスプレッドに対する効果\" style=\"position:relative;\"><a href=\"#%E4%BE%8B-%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E5%8A%B9%E6%9E%9C\" aria-label=\"例 配列のスプレッドに対する効果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例: 配列のスプレッドに対する効果</h4>\n<p>次のスプレッドされた配列について:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 要素が1で、その後にarr2の要素が続く新しい配列を作成します</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>説明に沿って、次のように ES5 へダウンレベル化できます:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 同じですよね？</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>しかし、これは特定の稀なケースにおいてはっきりとした違いがあります。\n例えば、配列に「穴」がある場合、スプレッドでは欠落したインデックスが<em>独自の</em>プロパティとして作成されますが、<code>concat</code>を利用した場合は作成されません:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 「1」の要素が欠落している配列を作成します</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, , </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\"> = [].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">missing</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spreaded</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concated</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>for / of</code>と同様、<code>downlevelIteration</code>は（利用可能であれば）<code>Symbol.iterator</code>を使い、より正確に ES6 の挙動を模倣します。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript がファイルを書き込むときに<a href=\"https://wikipedia.org/wiki/Byte_order_mark\">バイトオーダーマーク（BOM）</a>を出力するかどうかを制御します。\n一部の実行環境では JavaScript ファイルを正しく解釈するために、BOM が必要となりますが、他の実行環境では BOM の存在を許容しません。\nデフォルト値の<code>false</code>は一般的に最適な値ですが、必要であれば変更できます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>.d.ts</code>ファイル<em>のみ</em>を出力します; <code>.js</code>ファイルは出力しません。</p>\n<p>この設定は 2 つのケースで有用です:</p>\n<ul>\n<li>JavaScript を生成するために、TypeScript 以外のトランスパイラを使っているとき</li>\n<li>利用者向けに<code>d.ts</code>ファイルを出力するためだけに TypeScript を使っているとき</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Class の継承、配列やオブジェクトのスプレッド構文、async の処理など、特定のダウンレベル処理に対して、TypeScript はヘルパーコードを利用します。\nデフォルトでは、ヘルパーは利用されているファイルに挿入されます。\n同じヘルパーが異なる多くのモジュールで利用されている場合、コードの重複となる可能性があります。</p>\n<p><code>importHelpers</code>フラグが有効な場合、ヘルパー関数は<a href=\"https://www.npmjs.com/package/tslib\">tslib</a>モジュールからインポートされます。\n<code>tslib</code>を実行時にインポート可能であることを確認する必要があります。\nこの設定はモジュールに作用します。グローバルなスクリプトファイルはモジュールをインポートしません。</p>\n<p>例えば、次の TypeScript について:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr2</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>と<code>importHelpers</code>が false のときは次の出力となります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = [], </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> ((</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">-- &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">error</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">])) </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\"> || </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || !(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA'>Try</a></div></pre>\n<p><a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>と<code>importHelpers</code>の両方を有効化すると、次の出力になります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA'>Try</a></div></pre>\n<p>これらのヘルパー関数の独自実装を与える場合、<a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a>が利用できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a></p>\n</li><li><p><a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Imports Not Used As Values - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは<code>import</code>がどのように動作するかを制御します。3 つの異なるオプションがあります:</p>\n<ul>\n<li>\n<p><code>remove</code>: 型のみを参照する<code>import</code>文を削除するデフォルトの挙動</p>\n</li>\n<li>\n<p><code>preserve</code>: 使用されない値または型のすべての<code>import</code>文を保持します。これにより、インポート/副作用が保持されます。</p>\n</li>\n<li>\n<p><code>error</code>: すべての import を保持しますが(preserve オプションと同じ)、値の import が型としてのみ使用されている場合にエラーを出力します。これは、誤って値が import されないようにしつつ、副作用のある import を明示的にしたい場合に有用です。</p>\n</li>\n</ul>\n<p>このフラグが機能することで、<code>import type</code>を使用して、JavaScript に出力されない<code>import</code>文を明示的に作成できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>remove</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>remove</code></p>\n</li><li><p><code>preserve</code></p>\n</li><li><p><code>error</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#preserveValueImports' aria-label=\"Jump to compiler option info for preserveValueImports\" ><code>preserveValueImports</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、TypeScript はソースマップを<code>.js.map</code>ファイルへ出力するのではなく、ソースマップの内容を<code>.js</code>ファイルに埋め込みます。\nこの結果、JS ファイルはより大きくなりますが、いくつかのシナリオにおいては便利です。\n例えば、<code>.map</code>ファイルの提供が許可されていない web サーバーで JS ファイルをデバッグしたい、という場合です。</p>\n<p>このオプションは、<a href=\"#sourceMap\"><code>sourceMap</code></a>とは互いに排他的にです。</p>\n<p>例えば、次の TypeScript は:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>次の JavaScript に変換されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p><code>inlineSourceMap</code>を有効にしてビルドすると、\nファイルの末尾にこのファイルのソースマップを含んだコメントが出力されます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、TypeScript は元の<code>.ts</code>ファイルの内容を文字列としてソースマップに埋め込みます。\nこのオプションは<code>inlineSourceMap</code>と同様のケースで有用です。</p>\n<p><code>sourceMap</code>または<code>inlineSourceMap</code>のいずれかが設定されている必要があります。</p>\n<p>例えば、次の TypeScript について:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA'>Try</a></div></pre>\n<p>デフォルトでは、次の JavaScript に変換されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p><code>inlineSources</code>と<code>inlineSourceMap</code>を有効にしてビルドすると、\nファイルの末尾にこのファイルのソースマップを含んだコメントが付きます。\nこのソースマップは元となったソースコードも含んでいるため、<a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a>の例とは異なる点に留意してください。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>生成された場所情報を利用するのではなく、デバッガがマップファイルを探索すべき場所を明示します。\nこの文字列はソースマップの中で、文字列そのままの値として処理されます。例えば:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#sourceMap'><data-lsp lsp=\"Create source map files for emitted JavaScript files.\">sourceMap</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#mapRoot'><data-lsp lsp=\"Specify the location where debugger should locate map files instead of generated locations.\">mapRoot</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定は、<code>index.js</code>は<code>https://my-website.com/debug/sourcemaps/index.js.map</code>にソースマップがあることを宣言しています。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ファイルを出力するときの改行コードを指定します: ‘CRLF’（dos）または’LF’（unix）のいずれかを指定してください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>crlf</code></p>\n</li><li><p><code>lf</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JavaScript ソースコード、ソースマップ、型定義のファイルを出力しないようにします。</p>\n<p>これにより、<a href=\"https://babeljs.io\">Babel</a>や<a href=\"https://github.com/swc-project/swc\">swc</a>などの TypeScript ファイルを JavaScript 環境内で実行可能なファイルへ変換するための別のツールを追加できます。</p>\n<p>TypeScript をエディター統合やソースコードの型チェックツールとして利用できるようになります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"#importHelpers\"><code>importHelpers</code></a>を使って、ヘルパ関数をインポートする代わりに、グローバルスコープに使用するヘルパ関数のための実装を提供し、ヘルパ関数が出力されるのを完全に無効にできます。</p>\n<p>例えば、この<code>async</code>関数を ES5 で実行するためには、<code>await</code>のような関数と<code>generator</code>のような関数が必要です:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getAPI: (url: string) => Promise&lt;{}>' >getAPI</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA'>Try</a></div></pre>\n<p>これは、とても多くの JavaScript を生成します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">P</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">P</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">); }); }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> || (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fulfilled</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rejected</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fulfilled</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">rejected</span><span style=\"color: #000000\">); }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">apply</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\"> || [])).</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">label:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">sent</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; }, </span><span style=\"color: #001080\">trys:</span><span style=\"color: #000000\"> [], </span><span style=\"color: #001080\">ops:</span><span style=\"color: #000000\"> [] }, </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">next:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">; }), </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">]); }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && (</span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)), </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">] || ((</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">]) && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">), </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">next</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">])).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) && (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && (!</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &gt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]))) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">); </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; } </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA'>Try</a></div></pre>\n<p>このフラグを通じて、独自のグローバル実装に切り替えられます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーがあるときに、JavaScript ソースコードやソースマップファイル、型定義ファイルなどをコンパイラに出力させないようにします。</p>\n<p>デフォルト値は<code>false</code>であり、このため、すべてのエラーを解決するよりも前に別の環境でコードの変更結果を確認したいといったファイル監視環境において、TypeScript が扱いやすくなっています。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、<code>.js</code>ファイル（<code>.d.ts</code>や<code>.js.map</code>ファイルも同様）がこのディレクトリ内に出力されます。\n元のソースファイルのディレクトリ構造は保存されます。結果のルート構造が意図どおりでない場合は、<a href=\"#rootDir\">rootDir</a>を参照してください。</p>\n<p>設定しない場合、<code>.js</code>ファイルは<code>.ts</code>ファイルを作成したのと同じディレクトリに出力されます。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">example</span></div><div class='line'><span style=\"color: #000000\">├── index.js</span></div><div class='line'><span style=\"color: #000000\">└── index.ts</span></div></code></div></pre>\n<p>次のような<code>tsconfig.json</code>の場合:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この設定で<code>tsc</code>を実行すると、ファイルは指定された<code>dist</code>フォルダに生成されます。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">example</span></div><div class='line'><span style=\"color: #000000\">├── dist</span></div><div class='line'><span style=\"color: #000000\">│   └── index.js</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>設定すると、すべての<em>グローバルな</em>（モジュールでない）ファイルは指定した単一の出力ファイルに結合されます。</p>\n<p>もし<code>module</code>が<code>system</code>か<code>amd</code>の場合、この単一出力ファイルのグローバルなコンテンツの後ろにすべてのモジュールファイルも結合されます。</p>\n<p>Note: <code>module</code>が<code>None</code>、<code>System</code>、<code>AMD</code>のいずれかでない限り、<code>outFile</code>は使用できません。\nこのオプションは CommonJS または ES6 Modules にバンドルする目的では使用<em>できません</em>。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コード生成時に<code>const enum</code>の定義を取り除かないようにします。\n<code>const enum</code>は、参照ではなく Enum 値を出力することによって、アプリケーション実行時の全体的なメモリの使用量を軽減します。</p>\n<p>例えば次の TypeScript では:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2' >TubRingZooHypothesis</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3' >DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures' >selectedAlbum</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures' >selectedAlbum</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsBBwGHDAPuyYOKgiySgAdOSUtAzMbFw8fAIA3ARkAGYwABQxcQlwSdi4Qq3ozchZFNT0TKwc3Lz8EACU+FKRECBxGRi21QBE0gYMMCYwdDDK-KvABiBkwHAZCyNlIUA'>Try</a></div></pre>\n<p>デフォルトの<code>const enum</code>の挙動は、すべての<code>Album.Something</code>を対応する数値リテラル値に変換し、\nJavaScript コードから完全に元の Enum への参照を除去します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUEhiGmJsaIlaBkpVIooAOk5uPkERcWlZeUUAbkxUADNQAAps3PziQvpGZRHqIeRKrl4BYTFJGTkFSABKZm1cAlhc8ppfLoAiHWhBUBdQflATBRPsOFRsYnL95dbkoA'>Try</a></div></pre>\n<p><code>preserveConstEnums</code>を<code>true</code>に設定すると、<code>enum</code>は実行時に残り、数値も出力されるようになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> = {}));</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">selectedAlbum</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">selectedAlbum</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigiJKwfKUmUrJiDl2kAHRqGtp6hsbmltYIANx0XABmoAAULW0dfT12vTIDQ1q6BkamFlY2AJQKbgI4GK39kulLAETuzHqgcaA6oP5w73ysLh8WD9J5nWY1IA'>Try</a></div></pre>\n<p>このオプションによって、このような<code>const enums</code>は実行時に追跡されないソースコードのみの機能になります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#isolatedModules\"><code>isolatedModules</code></a>; <code>false</code> otherwise.</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveValueImports-config'><a aria-label=\"Link to the compiler option: preserveValueImports\" id='preserveValueImports' href='#preserveValueImports' name='preserveValueImports' aria-labelledby=\"preserveValueImports-config\">#</a> Preserve Value Imports - <code>preserveValueImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Deprecated in favor of <a href=\"#verbatimModuleSyntax\"><code>verbatimModuleSyntax</code></a>.</p>\n<p>There are some cases where TypeScript can’t detect that you’re using an import. For example, take the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Animal</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">eval</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"console.log(new Animal().isDangerous())\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>or code using ‘Compiles to HTML’ languages like Svelte or Vue. <code>preserveValueImports</code> will prevent TypeScript from removing the import, even if it appears unused.</p>\n<p>When combined with <a href=\"#isolatedModules\"><code>isolatedModules</code></a>: imported types <em>must</em> be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#isolatedModules' aria-label=\"Jump to compiler option info for isolatedModules\" ><code>isolatedModules</code></a></p>\n</li><li><p><a href='#importsNotUsedAsValues' aria-label=\"Jump to compiler option info for importsNotUsedAsValues\" ><code>importsNotUsedAsValues</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.5\" href=\"/docs/handbook/release-notes/typescript-4-5.html\">4.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Remove Comments - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript ファイルを JavaScript へ変換するときに、すべてのコメントを除去します。デフォルト値は<code>false</code>です。</p>\n<p>例えば、次の JSDoc コメントを持つ TypeScript ファイルに対して:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** ポルトガル語に翻訳された'Hello world' */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>removeComments</code>が<code>true</code>であるとき、次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSeiC7DINcMgCYZANQz9AeVGBrBkDf-oGYowKoMgGIZA+gwByABL4ANptih4sXJoAmK0J2CZ8ADwAOB9KADGsGpAfQtOgOoHjABQAVACEAJVAAXlAAIgB5TQBD0ABZVhojWCiAbiA'>Try</a></div></pre>\n<p><code>removeComments</code>が設定されていない・または<code>false</code>であるときは次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** ポルトガル語に翻訳された&apos;Hello world&apos; */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6IF2GQNcMgCYZANQxDAeVGBrBkDf-oGYowKoMgGIZA+gwByABL527WKHixc7ACbrQPYJnwAPAA5H0oAMawakJ9B16A6kdMACgAqAEIASqAAvKAARADy7ACHoACyAK40JrAxANxAA'>Try</a></div></pre>\n<p>つまり、コメントは JavaScript コードに表示されるようになります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">ソースマップファイル</a>の生成を有効化します。\nこれらのファイルにより、出力された JavaScript ファイルが実際に動作させるときに、デバッガーやその他のツールが元の TypeScript ソースファイルを表示できるようになります。\nソースマップファイルは<code>.js.map</code>（または<code>.jsx.map</code>）として、対応する<code>.js</code>ファイルとともに出力されます。</p>\n<p>次の例のように、<code>.js</code>ファイルには、外部ツールにソースマップファイルがどこにあるかを示すためのソースマップコメントが含まれるようになります:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>sourceMap</code>を<code>true</code>に設定してコンパイルすると、次の JavaScript ファイルが生成されます:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js</span></div><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></div></code></div></pre>\n<p>この設定は次のような json 形式のマップファイルも生成します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js.map</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #000000\">: [],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>相対的なソースコードの場所の代わりに、デバッガが TypeScript のファイルを探索すべき場所を明示します。\nこの文字列は、パスや URL を使用できるソースマップの中で、文字列そのままの値として処理されます:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>上記の設定は、<code>index.js</code>は<code>https://my-website.com/debug/source/index.ts</code>にソースコードがある、ということを宣言しています。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSDoc コメントとして<code>@internal</code>が付与されたコードについて、定義情報を出力しないようにします。\nこのオプションはコンパイラが内部で利用するためのものです; コンパイラは結果の妥当性検証をしないため、自己責任で使ってください。\n<code>d.ts</code>ファイル内での可視性を細かく制御できるツールを探しているのであれば、<a href=\"https://api-extractor.com\">api-extractor</a>を参照してください。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Days available in a week</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const daysInAWeek: 7' >daysInAWeek</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function weeklySalary(dayRate: number): number' >weeklySalary</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number' >dayRate</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const daysInAWeek: 7' >daysInAWeek</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dayRate: number' >dayRate</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBDAngZ0vAbvAlgG3gIxwFNIsA7NSAdyKIGsoYABcgFyICcz4dHhwiADwAOAew6tIAY1FlkkgCZJkASTIBBAOq06kALyQA7AG5w4UDADCPKQFc87SAAtRVSAFtbUp5GSj3RLIkRPBcqOSUNPTQ-EJiEpAAZrZkUqxYstQ6OIgAyjyhiAAUSogASvDsAFyQZLbu+JwAlJAA3lCQHESstlyQpaoa2tEwpRXspgC+QA'>Try</a></div></pre>\n<p>このフラグが<code>false</code>であるとき（デフォルト）:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * 一週間の日数</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">daysInAWeek</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** 一週間あたりの稼ぎを計算する */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmhAAHKBGBMDJqYDsGQKemgB1NFy8JWyiKwwoeAtaAB1ij0oAdMhOcwgJ6QAkhQCCAOpYWADWoAC8oADsANwscsrqGoBCDID6DIBRDFqAPF6AcgyASQyAEFGA6d6AmgyA0QxK1nYOTgBmAK4UApLSoPAhoYSeAMoWYp4AFB6eAEoSpKAUDcgARliiAJSgAN6KoKJY6A1moCO+AcFhSnte49jxAL5AA'>Try</a></div></pre>\n<p><code>stripInternal</code>を<code>true</code>に設定すると、<code>d.ts</code>は次のように編集されて出力されます。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** 一週間あたりの稼ぎを計算する */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">weeklySalary</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">dayRate</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20IAA5QIwJgZNTAdgyBT00AOpvsPhUGLHnvB8-RGVjRQCzTCgjNgAnpAAkigAggDq6OgA1qAAvKAA7ADc+DqGpmaAQgyA+gyAUQwWgDxegHIMgEkMgBBRgOnegJoMgNEMBu6e3r4AZgCuKArqmqAU8Qm4IQDKeCohABTBIQBKapygKN00AEaYAJSgAN76oLDo0N1YQaER0XGJBheLy1kAvkA'>Try</a></div></pre>\n<p>JavaScript としての出力は一緒です。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='JavaScript_Support_6247' ><a href='#JavaScript_Support_6247' name='JavaScript_Support_6247' aria-label=\"Link to the section JavaScript Support\" aria-labelledby='JavaScript_Support_6247'>#</a>JavaScript Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Allow JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>.ts</code>、<code>.tsx</code>ファイルだけでなく、JavaScript ファイルをプロジェクトへインポートできるようにします。例えば、次の JS ファイルを:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: card.js</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const defaultCardDeck: \"Heart\"' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Heart\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQ8AHgA4D2eALjvYmSwfJMgK6xMAwvgIAReNgDWoALygARAAl4+JvIDcQA'>Try</a></div></pre>\n<p>TypeScript のファイルへインポートするとエラーとなるでしょう:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAmAdAFaJ61ysBXCu0gAPAA4IALonatIRakKkBhFqwAikRgGtQAXlAAiABKQWUowG4CYALQPGAqQ7u3i5KnQagSleaLsMngktJLQUqAA3qDyispqbFq6oAC+oETwtMbswMxs1nh4jHCUiHDCZHAA5gAUcUpkqurJOgCUVkA'>Try</a></div></pre>\n<p><code>allowJs</code>を付与するとインポートは成功します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./card\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) defaultCardDeck: \"Heart\"&#10;import defaultCardDeck' >defaultCardDeck</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQqA9gQK4JHwAeADtXgC5lEHyTIGnAML4CAEXjYA1qAC8oAEQAJePk6KA3BRCgAtAex1OBvTrDhksWNQDuAKUq6ocJGkyhoiPsyLcK0KjsXKAA3qB8AkKihJIyoAC+oJB41KhKRMC4hFoUFNjUiGTUjDYA5gAUkYKwImJx0gCUmkA'>Try</a></div></pre>\n<p>このフラグを使うと、<code>.ts</code>や<code>.tsx</code>ファイルが既存の JavaScript ファイルと共存可能となり、TypeScript ファイルを JS プロジェクトへ徐々に追加できるようになります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowJs</code>と連携動作します。<code>checkJs</code>が有効化されている場合、JavaScript ファイル内のエラーが報告されるようになります。\nこれは、プロジェクトに含まれるすべての JavaScript ファイルの先頭で<code>// @ts-check</code>を付与することと等価です。</p>\n<p>例えば、TypeScript の<code>parseFloat</code>定義から、次の例は誤った JavaScript です。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// parseFloatはstringのみを受け付けます</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pi</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">parseFloat</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>このファイルが TypeScript のモジュールにインポートされた場合:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constants.js</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzkJQBdJD6UA6AK3RLgBMBXAq3wAPAA5wATi1aicoALyhRkCSnwAxeJHoAKAMysAjACYALAEoA3GgxhwuAsTKUchHiNYs0OEuKmgAbyU5AF9QLAk4ElAAIlZgGjpGZhQY60SUOEF4AHMdWSsgA'>Try</a></div></pre>\n<p>いかなるエラーも報告されません。しかし、もし<code>checkJs</code>を有効化すれば、JavaScript ファイルで発生したエラーメッセージを受け取れるようになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constants.js</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7ONMR0i0uogB0NPHLgATRlO2QAHgAcEW7ZfGgAvKEtEkkAGLkidABQZtAEY0LABKAG48EXAJKVkFVHFpQwttLTxxOWtoOlAAbxcHAF9QUXg5UAAibWBlVXVNRErIusQ4U3IAc197CKA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>node_modules</code>配下で依存関係を探す際や、JavaScript ファイルをロードする際の最大の深さです。</p>\n<p>このフラグは<a href=\"#allowJs\"><code>allowJs</code></a>が有効化されているときのみ利用可能であり、<code>node_modules</code>内のすべての JavaScript について、TypeScript に型推論させたいときに用います。</p>\n<p>理想的には、このオプションの値は 0（デフォルト値）であるべきで、<code>d.ts</code>ファイルでモジュールを明示的に定義すべきです。\nただし、速度と精度を犠牲にして、このオプションを有効化したいという場合もあるかもしれません。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Editor_Support_6249' ><a href='#Editor_Support_6249' name='Editor_Support_6249' aria-label=\"Link to the section Editor Support\" aria-labelledby='Editor_Support_6249'>#</a>Editor Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>非常に大規模な JavaScript プロジェクトで作業するときに発生する可能性のある使用メモリの膨張を避けるために、TypeScript が割り当てられるメモリの量には上限があります。このフラグを設定すると、この制限を取り除きます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エディタ内部で動作させる Language Service のプラグインを列挙します。</p>\n<p>Language Service プラグインを用いることで、ユーザーは TypeScript ファイルから追加情報を受け取ることができます。プラグインは、TypeScript とエディタ間でやりとりされているメッセージを拡張したり、プラグイン独自エラーメッセージを提供できます。</p>\n<p>例:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — テンプレート文字列による SQL ビルダについて、SQL の構文チェックを追加します。</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — テンプレート文字列内部の CSS を構文チェック機能を提供します。</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — eslint のエラーメッセージを出力や、出力されたエラーメッセージの修正機能を提供します。</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — テンプレート文字列内部の GraphQL クエリについて、バリデーションと自動補完機能を提供します。</li>\n</ul>\n<p>VS Code には、拡張のための<a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">Lnguage Service プラグインの自動読込 </a>機能があるため、<code>tsconfig.json</code>にプラグインの定義を書かずにエディタ上でプラグインを動作させることもできます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Interop_Constraints_6252' ><a href='#Interop_Constraints_6252' name='Interop_Constraints_6252' aria-label=\"Link to the section Interop Constraints\" aria-labelledby='Interop_Constraints_6252'>#</a>Interop Constraints</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Allow Synthetic Default Imports - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>allowSyntheticDefaultImports</code>を true に設定すると、次のようなインポートが可能になります:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>下記のようにする必要はありません:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>モジュールが default export を<strong>指定していなくても</strong>利用可能です。</p>\n<p>このオプションは TypeScript が出力する JavaScript へは影響しません。型チェックにのみ影響があります。\nこのオプションにより、モジュールの default export を自然に扱えるようにする追加コードが出力されている環境では、TypeScript と Babel の挙動が揃います。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#esModuleInterop\"><code>esModuleInterop</code></a> is enabled, <a href=\"#module\"><code>module</code></a> is <code>system</code>, or <a href=\"#module-resolution\"><code>moduleResolution</code></a> is <code>bundler</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> ES Module Interop - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>すべてのインポートに対して Namespace オブジェクトを生成することによって、CommonJS と ES Modules 間で相互運用可能なコードを出力します。</p>\n<p>TypeScript は EcmaScript のモジュール標準に準拠しています。\nつまり、<code>import React from \"react\"</code>のような構文をサポートするには、そのファイルに具体的な<code>default</code> export が含まれている必要があります。\nCommonJS のモジュールでは、このエクスポートの方法は稀です。<code>esModuleInterop</code>が true でなければ:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilFunctions.js</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getStringLength: (str: any) => any' >getStringLength</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) getStringLength: (str: any) => any' >getStringLength</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./utilFunctions\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const count: any' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(alias) getStringLength(str: any): any&#10;import getStringLength' >getStringLength</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Check JS\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYCsBOdacMAoECAYwAtIyBrAKURLHAEMAbNuAdwaYnc5cAygE8AdgBcqEgJZkAIpABmLAK5sJASQC2ABwQTGpcEpltIYltsipVstgDFVYsrLhjEAOgBWR5mLgdXTY5GQkAQTERVBU2REgiMndECVAAc0gJIQloGTE0gBkLNKlQAF5QAAoU6ABKcoA+UBrPc3ypAG4iIm04ABN1SE9IAA99aENy0ABvIlB0zOzc-KL2igAaIgBfLr4TMwsrG1A8vtHPQyIZPQNQOzNEUCV4bVAAIk9ge8dnVxlkt67JIeVJJZypCrfLwZLI5PKFYpSSpvADCVFooDoQjetQ6QA'>Try</a></div></pre>\n<p>インポート可能なオブジェクトに<code>default</code>が無いため、このコードは動作しないでしょう。このコードが動作するように見えたとしても、です。\nBabel のようなトランスパイラは、利便のために default が存在しない場合に自動で作成します。モジュールを次のようにするのです:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilFunctions.js</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getStringLength</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">allFunctions</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">getStringLength</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">allFunctions</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>このコンパイラフラグを有効化すると、<a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>も有効化されます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript が大文字小文字を区別するかどうかは、動作しているファイルシステムに従います。\nこれが問題になるのは、ある開発者はケースセンシティブなファイルシステムで作業をしている一方で、別の開発者はそうではない場合です。\nあるファイルが<code>fileManager.ts</code>の Import を<code>./FileManager.ts</code>と指定したとき、ケースセンシティブでないファイルシステムではファイルが見つかりますが、ケースセンシティブなファイルシステムでは見つかりません。</p>\n<p>このオプションを有効化すると、TypeScript はプログラムがディスク上の大文字小文字と異なるファイルをインクルードしようとした場合にエラーを発生させます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Isolated Modules - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript を TypeScript コードから JavaScript コードを生成する用途で利用可能な一方、<a href=\"https://babeljs.io\">Babel</a>などの他のトランスパイラの利用も一般的です。\nしかし、他のトランスパイラは一度に１ファイルのみを扱うため、全体の型システムの知識に依存したコード変換はできません。\nビルドツールで用いられる TypeScript の<code>ts.transpileModule</code>API についても、この制約が課せられます。</p>\n<p>この制限は、TypeScript の<code>const enum</code>や<code>namespace</code>のような機能を利用したときに実行時の問題を引き起こします。\n<code>isolatedModules</code>フラグは、単一ファイルのトランスパイル処理で正しく解釈できないコードが書かれたときに、TypeScript が警告を与えるように設定します。</p>\n<p>このフラグは、コードの挙動を変更せず、また、TypeScript のチェック・出力プロセスの挙動も変更しません。</p>\n<p><code>isolatedModules</code>が有効な場合に機能しないコードをいくつか例示します。</p>\n<h4 id=\"値でない識別子のエクスポート\" style=\"position:relative;\"><a href=\"#%E5%80%A4%E3%81%A7%E3%81%AA%E3%81%84%E8%AD%98%E5%88%A5%E5%AD%90%E3%81%AE%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88\" aria-label=\"値でない識別子のエクスポート permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>値でない識別子のエクスポート</h4>\n<p>TypeScript では、<em>型</em>をインポートしてからエクスポートできます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='import someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"someModule\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='export someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='export someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> };</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1BWiwFMAVATxwoBpTyKAxAV0gGN8NpJQAX1AAzJFlAAiMpQCy0ACbsANhUkBuNGhltOPPpAAUASk1oKADzzxCJHbXpMdHbr35D1QA'>Try</a></div></pre>\n<p><code>someType</code>という値は存在しないため、出力された<code>export</code>文はエクスポートを試行しません（これは JavaScript の実行時エラーになります）:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunction</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>単一ファイルのトランスパイラは、<code>someType</code>が値なのかどうかを知らないため、型のみを参照した名前をエクスポートするエラーになります。</p>\n<h4 id=\"module-でないファイル\" style=\"position:relative;\"><a href=\"#module-%E3%81%A7%E3%81%AA%E3%81%84%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"module でないファイル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module でないファイル</h4>\n<p><code>isolatedModules</code>が設定されている場合、すべての実装ファイルは<em>Module</em>でなくてはなりません（<code>import</code>/<code>export</code>の形式を利用しているという意味）。ファイルが Module でない場合、エラーが発生します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(): void' >fn</data-lsp></span><span style=\"color: #000000\">() {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYAMAOAUCBAJaJwA2AhgC6QAmAsnLQK5mSJ4BmzAdgMZUicHqE48AFAEpQAbwC+QA'>Try</a></div></pre>\n<p>この制約は<code>.d.ts</code>ファイルには適用されません。</p>\n<h4 id=\"const-enumメンバーへの参照\" style=\"position:relative;\"><a href=\"#const-enum%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%B8%E3%81%AE%E5%8F%82%E7%85%A7\" aria-label=\"const enumメンバーへの参照 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>const enum</code>メンバーへの参照</h4>\n<p>TypeScript では、<code>const enum</code>のメンバへ参照すると、出力される JavaScript では、その参照は実際の値へと置換されます。TypeScript による変換は次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEBGIMa8A3gFDzwBaFS8AvPAAwA098A8igQcAjLwC+tZOiQQQAOghIA5gAoS+cpXnMYrANTEyFNPMEgAlAG4gA'>Try</a></div></pre>\n<p>JavaScript では:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlRAI3y5IoAN6ZQoAFqzYoALygADABploAPI1820AEZDAX0y9+sNvgB0bWAHMAFJOQy5Luq4mgDUEtKykC6m+ACUANxAA'>Try</a></div></pre>\n<p>他のトランスパイラはメンバー値の知識無しに<code>Numbers</code>への参照を置換できません。これが取り残されると、実行時のエラーとなります（なぜなら<code>Numbers</code>オブジェクトは実行時に存在しないからです）。\nしたがって、<code>isolatedModules</code>が設定されている場合、<code>const enum</code>メンバーへのアンビエント参照はエラーとなります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>シンボリックリンクを実体パスへ解決しないという Node.js の同名フラグを反映したオプションです。</p>\n<p>このフラグは Webpack の<code>resolve.symlinks</code>オプションと逆の動作をします（つまり、TypeScript の<code>preserveSymlinks</code>を true に設定することは、Webpack の<code>resolve.symlinks</code>を false に設定することと同等です。逆も然りです）。</p>\n<p>このオプションを有効化すると、モジュールとパッケージへの参照（例えば、<code>import</code>や<code>/// &#x3C;reference type=\"...\" /></code> ディレクティブ）は、シンボリックリンクが解決する場所としてではなく、そのシンボリックリンクファイルからの相対パスとして解決されます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='verbatimModuleSyntax-config'><a aria-label=\"Link to the compiler option: verbatimModuleSyntax\" id='verbatimModuleSyntax' href='#verbatimModuleSyntax' name='verbatimModuleSyntax' aria-labelledby=\"verbatimModuleSyntax-config\">#</a> Verbatim Module Syntax - <code>verbatimModuleSyntax</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript does something called <em>import elision</em>.\nBasically, if you write something like</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript detects that you’re only using an import for types and drops the import entirely.\nYour output JavaScript might look something like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Most of the time this is good, because if <code>Car</code> isn’t a value that’s exported from <code>./car</code>, we’ll get a runtime error.</p>\n<p>But it does add a layer of complexity for certain edge cases.\nFor example, notice there’s no statement like <code>import \"./car\";</code> - the import was dropped entirely.\nThat actually makes a difference for modules that have side-effects or not.</p>\n<p>TypeScript’s emit strategy for JavaScript also has another few layers of complexity - import elision isn’t always just driven by how an import is used - it often consults how a value is declared as well.\nSo it’s not always clear whether code like the following</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>should be preserved or dropped.\nIf <code>Car</code> is declared with something like a <code>class</code>, then it can be preserved in the resulting JavaScript file.\nBut if <code>Car</code> is only declared as a <code>type</code> alias or <code>interface</code>, then the JavaScript file shouldn’t export <code>Car</code> at all.</p>\n<p>While TypeScript might be able to make these emit decisions based on information from across files, not every compiler can.</p>\n<p>The <code>type</code> modifier on imports and exports helps with these situations a bit.\nWe can make it explicit whether an import or export is only being used for type analysis, and can be dropped entirely in JavaScript files by using the <code>type</code> modifier.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// This statement can be dropped entirely in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">car</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// The named import/export 'Car' can be dropped in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>type</code> modifiers are not quite useful on their own - by default, module elision will still drop imports, and nothing forces you to make the distinction between <code>type</code> and plain imports and exports.\nSo TypeScript has the flag <code>--importsNotUsedAsValues</code> to make sure you use the <code>type</code> modifier, <code>--preserveValueImports</code> to prevent <em>some</em> module elision behavior, and <code>--isolatedModules</code> to make sure that your TypeScript code works across different compilers.\nUnfortunately, understanding the fine details of those 3 flags is hard, and there are still some edge cases with unexpected behavior.</p>\n<p>TypeScript 5.0 introduces a new option called <code>--verbatimModuleSyntax</code> to simplify the situation.\nThe rules are much simpler - any imports or exports without a <code>type</code> modifier are left around.\nAnything that uses the <code>type</code> modifier is dropped entirely.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Erased away entirely.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">A</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import { b } from \"bcd\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bcd\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import {} from \"xyz\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">xyz</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"xyz\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>With this new option, what you see is what you get.</p>\n<p>That does have some implications when it comes to module interop though.\nUnder this flag, ECMAScript <code>import</code>s and <code>export</code>s won’t be rewritten to <code>require</code> calls when your settings or file extension implied a different module system.\nInstead, you’ll get an error.\nIf you need to emit code that uses <code>require</code> and <code>module.exports</code>, you’ll have to use TypeScript’s module syntax that predates ES2015:</p>\n<table>\n<thead>\n    <tr>\n        <th>Input TypeScript</th>\n        <th>Output JavaScript</th>\n    </tr>\n</thead>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n</tr>\n</table>\n<p>While this is a limitation, it does help make some issues more obvious.\nFor example, it’s very common to forget to set the <a href=\"https://nodejs.org/api/packages.html#type\"><code>type</code> field in <code>package.json</code></a> under <code>--module node16</code>.\nAs a result, developers would start writing CommonJS modules instead of an ES modules without realizing it, giving surprising lookup rules and JavaScript output.\nThis new flag ensures that you’re intentional about the file type you’re using because the syntax is intentionally different.</p>\n<p>Because <code>--verbatimModuleSyntax</code> provides a more consistent story than <code>--importsNotUsedAsValues</code> and <code>--preserveValueImports</code>, those two existing flags are being deprecated in its favor.</p>\n<p>For more details, read up on <a href=\"https://github.com/microsoft/TypeScript/pull/52203\">the original pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/issues/51479\">its proposal issue</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Backwards_Compatibility_6253' ><a href='#Backwards_Compatibility_6253' name='Backwards_Compatibility_6253' aria-label=\"Link to the section Backwards Compatibility\" aria-labelledby='Backwards_Compatibility_6253'>#</a>Backwards Compatibility</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>以前の TypeScript のバージョンでは、このオプションでディスクからどのエンコードでファイルを読み込むかを制御していました。\n今の TypeScript は UTF-8 でエンコードされていることを前提としています。ただし、UTF-16（BE および LE）または UTF-8 の BOM を正しく検出します。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは、 文字列インデックス記法の型として適用される際に<code>keyof</code>型パラメータが<code>string | number</code>ではなく<code>string</code>を返すようにします。</p>\n<p>このフラグは、<a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">TypeScript 2.9 のリリースよりも前</a>の挙動に保ちたいときに利用されます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>これは必要ないはずです。ES6 でないターゲットでモジュールを出力する際に、TypeScript はデフォルトで<code>\"use strict;\"</code>という前置きをファイルの一番始めに出力します。\nこの設定は、この前置きを無効にします。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript は、総称型を使った 2 つの関数について、型パラメータを統合して比較します。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: U' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: S' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: S' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(a: A, b: B): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: A' >a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Error</span></div><span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYBBwAXyA'>Try</a></div></pre>\n<p>このフラグを利用することで、このチェックを無効化できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#outfile\">outFile</a>を使ってください。</p>\n<p><code>out</code>オプションは、予測可能でない、または一貫性のない方法によってファイルの最終的な場所を計算してしまいます。\nこのオプションは後方互換性の維持のためにのみ残されていますが、非推奨です。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションにより、次の例に示すような、プロパティが過剰に定義されているときのエラーを抑止します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const p: Point' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) m: number' >m</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA'>Try</a></div></pre>\n<p>このフラグは、<a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>のオブジェクトリテラルの厳密チェックへの移行を助けるために追加されました。</p>\n<p>モダンなコードベースでの、このフラグの利用は推奨されません。エラー抑止が必要な箇所で、都度<code>// @ts-ignore</code>を利用できます。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>suppressImplicitAnyIndexErrors</code>を有効化すると、次の例に示すようなオブジェクトへインデックスアクセスしたときの暗黙的 any についてのエラーが抑止されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA'>Try</a></div></pre>\n<p><code>suppressImplicitAnyIndexErrors</code>はかなり影響の大きい方法です。代わりに<code>@ts-ignore</code>コメントの利用を推奨します:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// @ts-ignore</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Language_and_Environment_6254' ><a href='#Language_and_Environment_6254' name='Language_and_Environment_6254' aria-label=\"Link to the section Language and Environment\" aria-labelledby='Language_and_Environment_6254'>#</a>Language and Environment</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>モジュールとともに動作するデコレータのメタ情報を出力するための実験的なサポートを有効化します。</p>\n<p>例えば、次の JavaScript について、</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void' >LogMethod</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any' >target</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol' >propertyKey</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor' >descriptor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PropertyDescriptor' >PropertyDescriptor</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) target: any' >target</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propertyKey: string | symbol' >propertyKey</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor' >descriptor</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Demo' >Demo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  @</span><span style=\"color: #001080\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void' >LogMethod</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Demo.foo(bar: number): void' >foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) bar: number' >bar</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// do nothing</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const demo: Demo' >demo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Demo(): Demo' >Demo</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5gLKRMACxIATABQ1QoHAh6CAXKGzoAngBopoWAhLwEmVQGlIqpVUzJ0PUAB9QVVSgBGJXJumjIVIsliUEJQAFXX1DQh8-AJoASlAAby1SdCo3SAA6XF5xWXlMGIBuJPZU3AysnnEdPURDE1VC4pS0zOyvSKR-MkaAXxoaIlxsKipQQhQSBK1wbn5BEVEtWAZnXCQiUDoSEnFnbEDQdAYXRDjE6WkQUFFJ9BJhJGstPr6BksxryAnQAF5DyAA7mMvjtCkA'>Try</a></div></pre>\n<p><code>emitDecoratorMetadata</code>が true に設定されていない場合（デフォルト）、次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 何もしない</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogMethod</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDmAWUiZmAEwAUNUKBwIp8gFyhs6AJ4AaNaFgIS8BJkMBpSIb1VMydFNAAfUFUMoARiS4puqKkFREyLCUCHoACpbWtoQRUTE0AJSgAN5mpOhUQZAAdLjSypramBkA3HmihbglZVLKFlaItg6GtfUFRaXlYalI0WS9AL40NES42FRUoIQoJDlm4JKy8kpmsHz+uEhEoDwkJMr+2LGg6HwBiFm56ur0gKrygEEMgOoMgFYMgCIMZlMpjMGphQGEVqAALw3SAsJaQFbKWpAA'>Try</a></div></pre>\n<p><code>emitDecoratorMetadata</code>が true に設定されている場合は、次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogMethod</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">propertyKey</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descriptor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// 何もしない</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogMethod</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">]),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm4zM0kAKGqFA4EOiQC5Q2dAE8ANKdCwEJeAkwOA0pAdbKkxkdB1QAB9QKgcUACMSXBczSUgqImRYEVsABQ8vH0J0zJEaAEpQAG9XUnQqRMgAOlxdIwsrTDKAbhr1etwmlp0jd09EH38Hbt66hubW1OKkLLJpgF8aGiJcbCoqUEIUEirXcG09CUNXWAU43CQiUDkSEiM47ARbdAV4xArqsxmeiAVXlAEEMgHUGQBWDIARBlcGw2Wz6mFAqSOoAAvKB0JAWAdIEcjN0gA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"https://github.com/tc39/proposal-decorators\">デコレータの実験的なサポート</a>を有効化します。\nこれは TC39 の標準化プロセスでは stage 2 の機能です。</p>\n<p>デコレータは JavaScript の仕様として、いまだ完全には組み込まれていない言語機能です。\nこれは TypeScript の実装バージョンが、TC39 が決定する JavaScript の実装と異なるかもしれないということを意味しています。</p>\n<p>TypeScript のデコレータのサポートについて、より詳しく知りたい場合は<a href=\"/docs/handbook/decorators.html\">ハンドブック</a>を参照してください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSX 構文がどのように JavaScript ファイルに出力されるかを設定します。\n<code>.tsx</code>で終わるファイルの JS 出力にのみ影響します。</p>\n<ul>\n<li><code>preserve</code>: JSX を変更せずに<code>.jsx</code>ファイルを出力します</li>\n<li><code>react</code>: JSX を等価な<code>react.createElement</code>に変換して<code>.js</code>ファイルを出力します</li>\n<li><code>react-native</code>: JSX を変更せずに、<code>.js</code>ファイルを出力します</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>preserve</code></p>\n</li><li><p><code>react</code></p>\n</li><li><p><code>react-native</code></p>\n</li><li><p><code>react-jsx</code></p>\n</li><li><p><code>react-jsxdev</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>JSX 要素がコンパイルされるときの<code>.js</code>ファイルで呼び出される関数を変更します。\n<code>preact</code>を使う場合に、デフォルトの<code>\"React.createElement\"</code>の代わりに<code>\"h\"</code>や<code>\"preact.h\"</code>に変更するのが一般的な変更です。</p>\n<p>このオプションは<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel における<code>/** @jsx h */</code>ディレクティブ</a>と同じものです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p>Any identifier or dotted identifier.</p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コンパイラオプションに<code>jsxFactory</code>が指定されており、React JSX のコンパイルを目的とする場合に使用される JSX フラグメントファクトリ関数(例: <code>Fragment</code>)を指定します。</p>\n<p>例えば、次の TSConfig では:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxFactory'><data-lsp lsp=\"Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\">jsxFactory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxFragmentFactory'><data-lsp lsp=\"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\">jsxFragmentFactory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Fragment\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>この TSX ファイルは:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">HelloWorld</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">preact_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">HelloWorld</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> ((</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #000000\">)));</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOJx4ChMGEgAmAMWAAbJAC44wAHaykADwB0AKw6i2x3fPQxoAT3VdT5+VBQBzEEk0xLGW+uduHl6mmhD8UDhQJpRiMChQrkgw6kgcmnoiMWwgELL0KupouDmaxqSkoJCwcADecFwANHAB7p7wAL5w2LhwAERgRFa9ANzlRZoc8AASSEpKEADq0EqycAC8cAAUAJTrAHxbpHBwADx7R8enssAAbnszcxAn5Nd3F8-n28NAA'>Try</a></div></pre>\n<p>このオプションは<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel の<code>/* @jsxFrag h */</code>ディレクティブ</a>とよく似ており、ファイル単位で使用できます。</p>\n<p>例:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span></div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxFrag</span><span style=\"color: #008000\"> Fragment */</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) function h(type: string, props: (JSXInternal.HTMLAttributes &amp; JSXInternal.SVGAttributes &amp; Record&lt;string, any>) | null, ...children: ComponentChildren[]): VNode&lt;any> (+1 overload)&#10;(alias) namespace h&#10;import h' >h</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const Fragment: ComponentClass&lt;{}, {}>&#10;import Fragment' >Fragment</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const HelloWorld: () => JSX.Element' >HelloWorld</data-lsp></span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;<data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp>></span><span style=\"color: #000000\">Hello</span><span style=\"color: #800000\">&lt;/<data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp>></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKAqVuAAQCsBnADzgALOK3JsOPAQDEoKAOZxZCkEgB28MaVKhIsOAG9hAGiVz5qjXAC+cbLjgAiMEXQxHAbm1oIa3vAAJJAAbYIgAdWhggBM4AF44AAoASniAPiTSODgAHjSs7Nzo4AA3NKDQiBzyYrKC6vzkjyA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.Fragment</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> jsxImportSource - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript 4.1 で導入された<code>\"react-jsx\"</code>や<code>\"react-jsxdev\"</code>を<a href=\"#jsx\"><code>jsx</code></a>に指定する際に<code>jsx</code>と<code>jsxs</code>のファクトリ関数をインポートするモジュール指定子を宣言します。</p>\n<p><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a>では、それぞれのインポートによる新しい JSX の変換がサポートされています。</p>\n<p>例えば、このコードで:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>次のような TSConfig の場合:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript からコンパイルされる JavaScript は次のようになります:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) ? </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> : { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">jsx_runtime_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">react_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggO1ogE6GyGTZjgBWkAHgFyiECmAhgMboC0NtFEyWABMArgBtmjdrGSDcNfuHStCAc2bpGzSLma0sQ5uzErmoQaImgAUgGUAGqADemUKFS50zQgDMOZxAlkZk9nAF9Xd09vP3YzAElPQg9IVHZA5mDPSGdItwBtSEZIdGTcVQBdRlZcAE8AbkiIiNRkAAdSdFAAJTZOUB8SZFAAIhYOdBHGzB8RXE5UWFxQAEE2toAKAEpctxZ0EUJlgB5oAEYAPgAJZjExWFAAdVIxIWPgc4vGsKA'>Try</a></div></pre>\n<p><code>\"jsxImportSource\": \"preact\"</code>を使用する場合、tsconfig は次のようになり:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxImportSource'><data-lsp lsp=\"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`\">jsxImportSource</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>以下のようなコードが生成されます:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">App</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">App</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOGwBWHAB4BJcNBgBlCPShokALjhgi6EZTEwAnmCQctO4vvaSpW3Rmq3RbGCigBzJDC1mAdkhS1mIgEAAm9AA2mnBouKF+ki5+EPxQOFAcpKSBkLBwmPR+GMAQfnAAgmBgABQAlHAA3qRwcEQwquUAPFwAjAB8ABJIkZEQcADq0JFhXeR9-QDcpAC+QA'>Try</a></div></pre>\n<p>あるいは、ファイル単位のディレクティブを使ってこのオプションを設定することもできます。例えば:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxImportSource</span><span style=\"color: #008000\"> preact */</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>これにより、<code>_jsx</code>ファクトリをインポートする<code>preact/jsx-runtime</code>が追加されます。</p>\n<p><em>注意:</em> このオプションを期待通りに動作させるには、<code>tsx</code>ファイルに<code>export</code>または<code>import</code>を含める必要があります。これにより、ファイルはモジュールとみなされます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript には組み込みの JS API（例：<code>Math</code>）の型定義や、ブラウザーで利用される API（例：<code>document</code>）の型定義がデフォルトで組み込まれています。\n指定した<code>target</code>に合致する新しい JS 機能の API の型定義も TypeScript には組み込まれています。例えば、<code>Map</code>の定義は<code>target</code>が<code>ES6</code>かそれよりも新しいときに利用可能です。</p>\n<p>いくつかの理由により、これらを変更したい場合があります:</p>\n<ul>\n<li>プログラムはブラウザーで動作させる必要がないため、<code>\"dom\"</code>の型定義が不要である</li>\n<li>利用している実行環境では特定の JavaScript API を提供しているが（Polyfill を利用しているかもしれません）、指定された ECMAScript のすべての構文をサポートしているわけではない</li>\n<li>より上位の ECMAScript バージョンについて、すべてではなく、部分的な Polyfill や実装が利用可能である</li>\n</ul>\n<h3 id=\"high-level-libraries\" style=\"position:relative;\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>ES3 と ES5 のすべての機能を利用するための型定義。</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>ES2015（ES6）で利用可能な API - <code>array.find</code>、<code>Promise</code>、<code>Proxy</code>、<code>Symbol</code>、<code>Map</code>、<code>Set</code>、<code>Reflect</code>など。</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>“ES2015”のエイリアス</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>ES2016 で利用可能な API - <code>array.include</code>など。</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>“ES2016”のエイリアス</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>ES2017 で利用可能な API - <code>Object.entries</code>、<code>Object.values</code>、<code>Atomics</code>、<code>SharedArrayBuffer</code>、<code>date.formatToParts</code>、typed arrays など。</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>ES2018 で利用可能な API - <code>async</code> iterables、<code>promise.finally</code>、<code>Intl.PluralRules</code>、<code>rexexp.groups</code>など。</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>ES2019 で利用可能な API - <code>array.flat</code>、<code>array.flatMap</code>、<code>Object.fromEntries</code>、<code>string.trimStart</code>、<code>string.trimEnd</code>など。</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>ES2020 で利用可能な API - <code>string.matchAll</code>など。</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>ESNext で利用可能な API - JavaScript の仕様変遷によって内容は変化します。</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a>の型定義 - <code>window</code>や<code>document</code>など。</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a>コンテキストで利用可能な API</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td><a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a>の API</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"個別のライブラリコンポーネント\" style=\"position:relative;\"><a href=\"#%E5%80%8B%E5%88%A5%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\" aria-label=\"個別のライブラリコンポーネント permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>個別のライブラリコンポーネント</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>もしこのリストが古くなっている場合は、完全なリストを<a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>で読むことができます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleDetection-config'><a aria-label=\"Link to the compiler option: moduleDetection\" id='moduleDetection' href='#moduleDetection' name='moduleDetection' aria-labelledby=\"moduleDetection-config\">#</a> Module Detection - <code>moduleDetection</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting controls how TypeScript determines whether a file is a\n<a href=\"/docs/handbook/modules/theory.html#scripts-and-modules-in-javascript\">script or a module</a>.</p>\n<p>There are three choices:</p>\n<ul>\n<li>\n<p><code>\"auto\"</code> (default) - TypeScript will not only look for import and export statements, but it will also check whether the <code>\"type\"</code> field in a <code>package.json</code> is set to <code>\"module\"</code> when running with <a href=\"#module\"><code>module</code></a>: <code>nodenext</code> or <code>node16</code>, and check whether the current file is a JSX file when running under <a href=\"#jsx\"><code>jsx</code></a>: <code>react-jsx</code>.</p>\n</li>\n<li>\n<p><code>\"legacy\"</code> - The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.</p>\n</li>\n<li>\n<p><code>\"force\"</code> - Ensures that every non-declaration file is treated as a module.</p>\n</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>\"auto\": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>legacy</code></p>\n</li><li><p><code>auto</code></p>\n</li><li><p><code>force</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>すべてのライブラリファイルについて、自動でのインクルードを無効化します。\nこのオプションを設定した場合、<code>lib</code>は無視されます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#jsxFactory\"><code>--jsxFactory</code></a>を利用してください。<code>react</code>のときに TSX ファイルの<code>createElement</code>が実行されるオブジェクトを指定します。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>モダンブラウザーはすべての ES6 機能をサポートしているため、<code>ES6</code>は良い選択です。\nもし、コードをより古い環境へデプロイするのであれば、より下位の値を、逆により新しい環境での動作が保証される場合は、より上位の値をターゲットとして選択してください。</p>\n<p><code>target</code>設定は、どの JS 機能が古い JavaScript 構文にトランスパイルされ、どの機能がそのまま残されるかを変更します。\n例えば<code>target</code>が ES5 以下である場合、アロー関数<code>() => this</code>は等価な<code>function</code>式へ変換されます。</p>\n<p><code>target</code>の変更は<a href=\"#lib\"><code>lib</code></a>のデフォルト値も変更します。\n必要に応じて<code>target</code>と<code>lib</code>の値を組み合わせることも可能ですが、簡単に<code>target</code>の値のみを設定することも可能です。</p>\n<p>もし動作環境が Node.js のみであるならば、Node のベースバージョン毎に推奨される<code>target</code>は次のとおりです:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Supported Target</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>この表は<a href=\"https://node.green\">node.green</a>のデータベースを元に作成しています。</p>\n<p><code>ESNext</code> という特別な値は TypeScript がサポートしている最新のターゲットバージョンを参照します。\nこの設定値は、異なる TypeScript のバージョン間におけるターゲットバージョンの一致を意味せず、アップグレード予測が困難になる可能性があるため、注意して利用する必要があります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>es3</code></p>\n</li><li><p><code>es5</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2016</code></p>\n</li><li><p><code>es2017</code></p>\n</li><li><p><code>es2018</code></p>\n</li><li><p><code>es2019</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2021</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグは、最新の Class フィールドの仕様へ移行するために用います。TypeScript の Class フィールド記法は、TC39 が Class フィールドの仕様の合意に至るよりも何年も前に導入されました。最新の仕様バージョンは、TypeScript の実装とは実行時の挙動が異なりますが、構文は同じです。</p>\n<p>このフラグにより、ECMA が定める最新の実行時挙動へ移行できます。</p>\n<p>移行の詳細については、<a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">3.7 リリースノート</a>を参照してください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#target\"><code>target</code></a> is <code>ES2022</code> or higher, including <code>ESNext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Compiler_Diagnostics_6251' ><a href='#Compiler_Diagnostics_6251' name='Compiler_Diagnostics_6251' aria-label=\"Link to the section Compiler Diagnostics\" aria-labelledby='Compiler_Diagnostics_6251'>#</a>Compiler Diagnostics</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>デバッグ用にコンパイラからの診断情報を出力するために使用されていました。このコマンドはよりユーザー向けの結果かつ分かりやすい<a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a>のサブセットです。</p>\n<p>TypeScript のコンパイラエンジニアからこのフラグを用いて結果を提供するように依頼された場合、代わりに<a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a>を用いても問題ありません。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> Explain Files - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">example</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">├── package.json</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es5\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"explainFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'</span></div></code></div></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#target\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このフラグを使うと、TypeScript がコンパイルの際に、どの程度の時間をどこに費やしているかを調査できます。\nこのフラグは、コードベース全体のパフォーマンス特性を理解するために使われるツールです。</p>\n<p>測定の仕方および出力の解釈方法については、<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">wiki のパフォーマンスセクション</a>をご覧ください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションを用いると、TypeScript にコンパイラが実行中の v8 の CPU プロファイルを出力させられます。CPU プロファイルはなぜビルドが遅くなるのかについての示唆を与えてくれます。</p>\n<p>このオプションは CLI から<code>--generateCpuProfile tsc-output.cpuprofile</code>を介してのみ使用できます。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></div></code></div></pre>\n<p>このファイルは Chrome や Edge Developer のような chromium をベースとしたブラウザの<a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">CPU profiler</a>で開くことができます。\n<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript Wiki のパフォーマンスセクション</a>でコンパイラのパフォーマンスについて詳細を学ぶことができます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>profile.cpuprofile</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コンパイルされ、生成されたファイル名をターミナルに出力します。</p>\n<p>このフラグは 2 つのケースで有用です:</p>\n<ul>\n<li>後続のコマンドでファイル名が処理されるターミナルのビルドチェーンの一部として TypeScript をトランスパイルしたいとき</li>\n<li>TypeScript がコンパイルしてほしいファイルを対象に含めているか分からず、<a href=\"#Project_Files_0\">対象ファイル設定</a>を部分的にデバッグしたいとき</li>\n</ul>\n<p>例えば、以下のようなときに:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>以下の設定をすると:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>以下のような path を出力します:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts</span></div></code></div></pre>\n<p>通常、成功すると TypeScript は何も出力しない状態に戻ります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>コンパイルされるファイル名を出力します。これは、コンパイルしてほしいファイルを TypeScript が対象に含めてくれているかが分からないときに有用です。</p>\n<p>例えば、以下のようなときに:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>以下の設定をすると:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#listFiles'><data-lsp lsp=\"Print all of the files read during the compilation.\">listFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>出力される path は以下のようになります:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>あるモジュールがコンパイル対象に含まれていない理由をデバッグするために用います。\n<code>traceResolutions</code>を<code>true</code>にすると TypeScript が処理された各々のファイルについてモジュール解決過程の情報を出力するようになります。</p>\n<p>この設定についてより詳細に知りたい場合、<a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">ハンドブック</a>をご覧ください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Projects_6255' ><a href='#Projects_6255' name='Projects_6255' aria-label=\"Link to the section Projects\" aria-labelledby='Projects_6255'>#</a>Projects</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>composite</code>オプションは、ビルドツール（<code>--build</code>モードでの TypeScript 自体を含む）\nがプロジェクトがビルドされているかどうかを迅速に判断できるようにするために特定の制約を適用します。</p>\n<p>この設定が有効なとき:</p>\n<ul>\n<li>\n<p>明示的に設定されていない<code>rootDir</code>のデフォルト値は<code>tsconfig.json</code>ファイルを含むディレクトリとなります。</p>\n</li>\n<li>\n<p>すべての実装ファイルは、<code>include</code>パターンにマッチするか<code>files</code>リストに含まれなくてはなりません。この制約に違反した場合、<code>tsc</code>はどのファイルが指定されていないかを通知します。</p>\n</li>\n<li>\n<p><code>declaration</code>のデフォルト値が<code>true</code>になります。</p>\n</li>\n</ul>\n<p>TypeScript のプロジェクト機能についてのドキュメントは<a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">ハンドブック</a>から参照できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>複数プロジェクトの TypeScript プログラムでは、TypeScript は利用可能なすべてのプロジェクトをメモリに読み込みます。これにより、「すべての参照元を検索」のような完全なナレッジグラフを必要とするエディタのレスポンスに対して正確な結果を提供することができます。</p>\n<p>プロジェクトが大規模な場合は、<code>disableReferencedProjectLoad</code>フラグを使用してすべてのプロジェクトの自動読み込みを無効にすることができます。代わりに、エディタでファイルを開いたときに動的にプロジェクトが読み込まれます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Disable Solution Searching - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"/docs/handbook/project-references.html\">複合 TypeScript プロジェクト</a>で作業する場合、このオプションはエディタで<em>find all references</em>や<em>定義へ移動</em>などの機能を使う際に含めたくないプロジェクトを宣言する方法を提供します。</p>\n<p>このフラグは大規模な複合プロジェクトで応答性を高めるために使用できるものです。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><a href=\"/docs/handbook/project-references.html\">複合 TypeScript プロジェクト</a>で作業する場合、このオプションはモジュール間の境界として d.ts ファイルが使用されていた<a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">3.7 以前</a>の挙動に戻す方法を提供します。\n3.7 にて、信頼できる情報源は TypeScript のファイルになりました。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>最新のコンパイルでのプロジェクトグラフ情報をディスクにファイルとして保存するように TypeScript に指示します。\nこのオプションはコンパイルの出力先として指定されたフォルダに <code>.tsbuildinfo</code> のファイル群を作成します。\nこれらのファイルはコンパイルされた JavaScript が実行時に利用することはなく、安全に削除できます。このフラグの詳細については<a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 リリースノート</a>で確認できます。</p>\n<p>このファイル群の出力先フォルダを設定する場合、<a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>オプションを利用してください。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>この設定により、インクリメンタルコンパイル情報を複合プロジェクトの一部として保存するためのファイルを指定できるため、より大きな TypeScript コードベースを迅速に構築できます。\n複合プロジェクトについては<a href=\"/docs/handbook/project-references.html\">ハンドブック</a>でより詳しく知ることができます。</p>\n<p>このオプションは、TypeScript がプロジェクトのビルド状態を追跡するためのファイルをディスクのどこに保存するかを設定します。\nデフォルトは、JavaScript ファイルの出力先と同じフォルダに保存されます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Output_Formatting_6256' ><a href='#Output_Formatting_6256' name='Output_Formatting_6256' aria-label=\"Link to the section Output Formatting\" aria-labelledby='Output_Formatting_6256'>#</a>Output Formatting</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーメッセージを切り捨てないようにします。</p>\n<p>デフォルト値の<code>false</code>の場合、次のようになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 型&apos;x&apos;の文字列表現はエラメッセージ中で省略されます</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmoBmrADaJIRAG6tooAB6oA3kVCgADvGUx2ATwDqndgAsAgmUrTmkSABNOZAOaDNAGR62AcqwC2kAIypE7aBtbAG5FFTUNHT0jEzMLazsHZzt3LzQ-AKDQpVU4dWgtXQNjU3MrIKSXVMgMDMC7bPC8yKKY0viKpyrPSFw6rLDc-MLokrjyxK6Unvx+hqIAX1CSMEBo9QByaXXAOwZAcNNAdW1AdCVACwjAP+dAewZACoZAS4ZAQ4ZAYYZAboZAH4ZADoZAWjlAcwZAQHdAU1dAVQZADEMgD8GQCaDOJJKAUFDMnZQABeGTBIA'>Try</a></div></pre>\n<p><code>true</code>にすると、次のようになります。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 型&apos;x&apos;の文字列表現はエラメッセージ中で省略されます</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brSiAF9AkjBAaPUAcnFlwDsGQHDTQHVtQHQlQAsIwD-nQHsGQAqGQEuGQEOGQGGGQG6GQB+GQA6GQFo5QHMGQEB3QFNXQFUGQBiGQD8GQCaDMJRKAUGDUpZQABeCT+IA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>watch モードについて、変更が発生するたびにスクリーンをクリアせずに以前の出力をコンソールに出し続けるかどうかを設定します。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>エラーやメッセージを文脈や色を使ってスタイリングします。このオプションはデフォルトで有効です—\nコンパイラから簡潔で単色のメッセージを受け取れるようにすることもできます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Completeness_6257' ><a href='#Completeness_6257' name='Completeness_6257' aria-label=\"Link to the section Completeness\" aria-labelledby='Completeness_6257'>#</a>Completeness</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>代わりに<a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a>を利用してください。デフォルトのライブラリ型定義ファイルをチェックしないようになります。</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>型定義ファイルのチェックをスキップします。</p>\n<p>型システムの精度を犠牲にすることで、コンパイル実行時間を削減します。\n例えば、2 つのライブラリが、同じ<code>type</code>を一貫性の無い方法で定義していたとします。\nすべての<code>d.ts</code>ファイルの完全なチェックを行わずに、TypeScript はアプリケーション内のソースコードで明示的に参照しているコードの型をチェックします。</p>\n<p><code>skipLibCheck</code>の利用を検討する一般的なケースは、あるライブラリの型定義が<code>node_modules</code>内にコピーされて複数存在している場合です。\nこのようなケースでは、\n<a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>のような機能の利用を検討してツリーにおける該当の依存関係のコピーが 1 つだけであることを確認するか、\n追加のツールを使わずに問題を修正するために依存関係の解決を理解して、コピーが 1 つだけであることを確認する方法を調査する必要があります。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section コマンドライン\" aria-labelledby='Command_line_Options_6171'>#</a>コマンドライン</h2>\n</div>\n<div class='category'>\n<h2 id='Watch_and_Build_Modes_6250' ><a href='#Watch_and_Build_Modes_6250' name='Watch_and_Build_Modes_6250' aria-label=\"Link to the section Watch Options\" aria-labelledby='Watch_and_Build_Modes_6250'>#</a>Watch Options</h2>\n<p>TypeScript 3.8 にてディレクトリを監視するための新戦略をリリースしました。これは、<code>node_modules</code> の変更を効率的に検知するために極めて重要なものです。</p>\n<p>Linux のような OS において、TypeScript は 依存関係の変更を検出するために、<code>node_modules</code> と多くのサブディレクトリに、(ファイルウォッチャーではなく)ディレクトリウォッチャーをインストールします。\nなぜなら、利用できるファイルウォッチャーの数を、<code>node_modules</code> のファイル数がしばしば上回る一方で、追跡するディレクトリ数は少なく済むからです。</p>\n<p>各プロジェクトは異なる戦略の下でより良く動作する可能性もあり、逆にこの新しいアプローチが一連の作業の流れでうまく動作しない可能性もあります。そのため、TypeScript 3.8 では新しく <code>watchOptions</code> フィールドが導入されました。このフィールドでは、ファイルやディレクトリを追跡する為に、どの監視戦略を使用すべきか、compiler/language service に伝えることができます。</p>\n</div>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Assume Changes Only Affect Direct Dependencies - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>このオプションを設定すると、TypeScript は本当に影響を受ける可能性があるすべてのファイルの再チェック/再ビルドを避け、変更されたファイルとそれらを直接 import しているファイルのみを再チェック/再ビルドするようになります。</p>\n<p>これは監視アルゴリズムの「高速で緩い」実装と見なせます。これにより、すべてのコンパイルエラーメッセージを得るためにフルビルドが必要になりますが、インクリメンタルビルドの再ビルド時間を大幅に短縮できます。</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>個々のファイルを監視する方法を指定します。</p>\n<ul>\n<li><code>fixedPollingInterval</code>: すべてのファイルの変更を一定間隔で毎秒数回チェックします。</li>\n<li><code>priorityPollingInterval</code>: すべてのファイルの変更を毎秒数回チェックしますが、ヒューリスティックスを使用して他のファイルよりも少ない頻度で特定のタイプのファイルをチェックします。</li>\n<li><code>dynamicPriorityPolling</code>: 変更頻度の低いファイルがチェックされる頻度が低くなるような動的なキューを使用します。</li>\n<li><code>useFsEvents</code> (デフォルト): オペレーティングシステム/ファイルシステムのネイティブイベントの使用をファイルの変更に試みます。</li>\n<li><code>useFsEventsOnParentDirectory</code>: ファイルの親ディレクトリの変更を監視するためにオペレーティングシステム/ファイルシステムのネイティブイベントを使用を試みます。</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>prioritypollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li><li><p><code>usefsevents</code></p>\n</li><li><p><code>usefseventsonparentdirectory</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>再帰的なファイル監視機能を持たないシステムで、ディレクトリツリー全体を監視する方法を指定します。</p>\n<ul>\n<li><code>fixedPollingInterval</code>: すべてのディレクトリの変更を一定間隔で毎秒数回チェックします。</li>\n<li><code>dynamicPriorityPolling</code>: 変更頻度の低いディレクトリがチェックされる頻度が低くなるような動的なキューを使用します。</li>\n<li><code>useFsEvents</code> (デフォルト): ディレクトリの変更に対するオペレーティングシステム/ファイルシステムのネイティブイベントの使用を試みます。</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>usefsevents</code></p>\n</li><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ファイルシステムのイベントを使用するときに、システムがネイティブのファイルウォッチャーを使い切ったり、ネイティブのファイルウォッチャーが対応していない場合、どのようなポーリング戦略を行使するかを指定するオプションです。</p>\n<ul>\n<li><code>fixedPollingInterval</code>: 一定の間隔を開けて、1 秒間に数回、全ファイルをチェックします。</li>\n<li><code>priorityPollingInterval</code>: 1 秒間に数回、全ファイルをチェックします。しかし、特定の種類のファイルには発見的手法を使用して、他ファイルよりも低頻度でチェックします。</li>\n<li><code>dynamicPriorityPolling</code>: 変更頻度の少ないファイルは、他よりも低頻度でチェックされるように動的キューを使用します。</li>\n<li><code>synchronousWatchDirectory</code>: ディレクトリの遅延監視を無効にします。遅延監視機能は、沢山のファイル変更が一度に引き起こされる場合は役立ちますが(例： <code>npm install</code> による <code>node_modules</code> の変更)、あまり一般的な構成ではないときに、この遅延監視フラグを無効にしたくなるかもしれません。</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedinterval</code></p>\n</li><li><p><code>priorityinterval</code></p>\n</li><li><p><code>dynamicpriority</code></p>\n</li><li><p><code>fixedchunksize</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> Synchronous Watch Directory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory'><data-lsp lsp=\"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\">synchronousWatchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> Exclude Directories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <a href=\"#excludeFiles\"><code>excludeFiles</code></a> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeDirectories'><data-lsp lsp=\"Remove a list of directories from the watch process.\">excludeDirectories</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"**/node_modules\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"_build\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"temp/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> Exclude Files - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeFiles'><data-lsp lsp=\"Remove a list of files from the watch mode's processing.\">excludeFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"temp/file.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> Enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables automatic type acquisition in JavaScript projects:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mocha\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> Disable Filename Based Type Acquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"disableFilenameBasedTypeAcquisition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"ja","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/ja.md","intro":{"html":"<h2>TSConfig リファレンス紹介</h2>\n<p>ディレクトリ内の TSConfig ファイルは、TypeScript や JavaScript のプロジェクトルートであることを示します。\nTSConfig ファイルは、<code>tsconfig.json</code> や <code>jsconfig.json</code> のいずれかが利用可能です。どちらを選んでも同じ挙動、同じ設定変数をセットできます。</p>\n<p>このページは TSConfig ファイルで利用できるフラグを余す所なくカバーしています。このページは、フラグ毎の概要から始まり、JSON ファイルのルート属性、オプションの大部分を占める <code>compilerOptions</code> を説明し、最後は <code>watchOptions</code> で締めくくられます。</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Files"},{"anchor":"extends","name":"Extends"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"references","name":"References"}]},{"display":"Type Checking","anchor":"Type_Checking_6248","options":[{"anchor":"allowUnreachableCode","name":"Allow Unreachable Code"},{"anchor":"allowUnusedLabels","name":"Allow Unused Labels"},{"anchor":"alwaysStrict","name":"Always Strict"},{"anchor":"exactOptionalPropertyTypes","name":"Exact Optional Property Types"},{"anchor":"noFallthroughCasesInSwitch","name":"No Fallthrough Cases In Switch"},{"anchor":"noImplicitAny","name":"No Implicit Any"},{"anchor":"noImplicitOverride","name":"No Implicit Override"},{"anchor":"noImplicitReturns","name":"No Implicit Returns"},{"anchor":"noImplicitThis","name":"No Implicit This"},{"anchor":"noPropertyAccessFromIndexSignature","name":"No Property Access From Index Signature"},{"anchor":"noUncheckedIndexedAccess","name":"noUncheckedIndexedAccess"},{"anchor":"noUnusedLocals","name":"No Unused Locals"},{"anchor":"noUnusedParameters","name":"No Unused Parameters"},{"anchor":"strict","name":"Strict"},{"anchor":"strictBindCallApply","name":"Strict Bind Call Apply"},{"anchor":"strictFunctionTypes","name":"Strict Function Types"},{"anchor":"strictNullChecks","name":"Strict Null Checks"},{"anchor":"strictPropertyInitialization","name":"Strict Property Initialization"},{"anchor":"useUnknownInCatchVariables","name":"Use Unknown In Catch Variables"}]},{"display":"Modules","anchor":"Modules_6244","options":[{"anchor":"allowArbitraryExtensions","name":"Allow Arbitrary Extensions"},{"anchor":"allowImportingTsExtensions","name":"Allow Importing TS Extensions"},{"anchor":"allowUmdGlobalAccess","name":"Allow Umd Global Access"},{"anchor":"baseUrl","name":"Base Url"},{"anchor":"customConditions","name":"Custom Conditions"},{"anchor":"module","name":"Module"},{"anchor":"moduleResolution","name":"Module Resolution"},{"anchor":"moduleSuffixes","name":"Module Suffixes"},{"anchor":"noResolve","name":"No Resolve"},{"anchor":"paths","name":"Paths"},{"anchor":"resolveJsonModule","name":"Resolve JSON Module"},{"anchor":"resolvePackageJsonExports","name":"Resolve package.json Exports"},{"anchor":"resolvePackageJsonImports","name":"Resolve package.json Imports"},{"anchor":"rootDir","name":"Root Dir"},{"anchor":"rootDirs","name":"Root Dirs"},{"anchor":"typeRoots","name":"Type Roots"},{"anchor":"types","name":"Types"}]},{"display":"Emit","anchor":"Emit_6246","options":[{"anchor":"declaration","name":"Declaration"},{"anchor":"declarationDir","name":"Declaration Dir"},{"anchor":"declarationMap","name":"Declaration Map"},{"anchor":"downlevelIteration","name":"Downlevel Iteration"},{"anchor":"emitBOM","name":"Emit BOM"},{"anchor":"emitDeclarationOnly","name":"Emit Declaration Only"},{"anchor":"importHelpers","name":"Import Helpers"},{"anchor":"importsNotUsedAsValues","name":"Imports Not Used As Values"},{"anchor":"inlineSourceMap","name":"Inline Source Map"},{"anchor":"inlineSources","name":"Inline Sources"},{"anchor":"mapRoot","name":"Map Root"},{"anchor":"newLine","name":"New Line"},{"anchor":"noEmit","name":"No Emit"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"No Emit On Error"},{"anchor":"outDir","name":"Out Dir"},{"anchor":"outFile","name":"Out File"},{"anchor":"preserveConstEnums","name":"Preserve Const Enums"},{"anchor":"preserveValueImports","name":"Preserve Value Imports"},{"anchor":"removeComments","name":"Remove Comments"},{"anchor":"sourceMap","name":"Source Map"},{"anchor":"sourceRoot","name":"Source Root"},{"anchor":"stripInternal","name":"Strip Internal"}]},{"display":"JavaScript Support","anchor":"JavaScript_Support_6247","options":[{"anchor":"allowJs","name":"Allow JS"},{"anchor":"checkJs","name":"Check JS"},{"anchor":"maxNodeModuleJsDepth","name":"Max Node Module JS Depth"}]},{"display":"Editor Support","anchor":"Editor_Support_6249","options":[{"anchor":"disableSizeLimit","name":"Disable Size Limit"},{"anchor":"plugins","name":"Plugins"}]},{"display":"Interop Constraints","anchor":"Interop_Constraints_6252","options":[{"anchor":"allowSyntheticDefaultImports","name":"Allow Synthetic Default Imports"},{"anchor":"esModuleInterop","name":"ES Module Interop"},{"anchor":"forceConsistentCasingInFileNames","name":"Force Consistent Casing In File Names"},{"anchor":"isolatedModules","name":"Isolated Modules"},{"anchor":"preserveSymlinks","name":"Preserve Symlinks"},{"anchor":"verbatimModuleSyntax","name":"Verbatim Module Syntax"}]},{"display":"Backwards Compatibility","anchor":"Backwards_Compatibility_6253","options":[{"anchor":"charset","name":"Charset"},{"anchor":"keyofStringsOnly","name":"Keyof Strings Only"},{"anchor":"noImplicitUseStrict","name":"No Implicit Use Strict"},{"anchor":"noStrictGenericChecks","name":"No Strict Generic Checks"},{"anchor":"out","name":"Out"},{"anchor":"suppressExcessPropertyErrors","name":"Suppress Excess Property Errors"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Suppress Implicit Any Index Errors"}]},{"display":"Language and Environment","anchor":"Language_and_Environment_6254","options":[{"anchor":"emitDecoratorMetadata","name":"Emit Decorator Metadata"},{"anchor":"experimentalDecorators","name":"Experimental Decorators"},{"anchor":"jsx","name":"JSX"},{"anchor":"jsxFactory","name":"JSX Factory"},{"anchor":"jsxFragmentFactory","name":"jsxFragmentFactory"},{"anchor":"jsxImportSource","name":"jsxImportSource"},{"anchor":"lib","name":"Lib"},{"anchor":"moduleDetection","name":"Module Detection"},{"anchor":"noLib","name":"No Lib"},{"anchor":"reactNamespace","name":"React Namespace"},{"anchor":"target","name":"Target"},{"anchor":"useDefineForClassFields","name":"Use Define For Class Fields"}]},{"display":"Compiler Diagnostics","anchor":"Compiler_Diagnostics_6251","options":[{"anchor":"diagnostics","name":"Diagnostics"},{"anchor":"explainFiles","name":"Explain Files"},{"anchor":"extendedDiagnostics","name":"Extended Diagnostics"},{"anchor":"generateCpuProfile","name":"Generate CPU Profile"},{"anchor":"listEmittedFiles","name":"List Emitted Files"},{"anchor":"listFiles","name":"List Files"},{"anchor":"traceResolution","name":"Trace Resolution"}]},{"display":"Projects","anchor":"Projects_6255","options":[{"anchor":"composite","name":"Composite"},{"anchor":"disableReferencedProjectLoad","name":"disableReferencedProjectLoad"},{"anchor":"disableSolutionSearching","name":"Disable Solution Searching"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Disable Source Project Reference Redirect"},{"anchor":"incremental","name":"Incremental"},{"anchor":"tsBuildInfoFile","name":"TS Build Info File"}]},{"display":"Output Formatting","anchor":"Output_Formatting_6256","options":[{"anchor":"noErrorTruncation","name":"No Error Truncation"},{"anchor":"preserveWatchOutput","name":"Preserve Watch Output"},{"anchor":"pretty","name":"Pretty"}]},{"display":"Completeness","anchor":"Completeness_6257","options":[{"anchor":"skipDefaultLibCheck","name":"Skip Default Lib Check"},{"anchor":"skipLibCheck","name":"Skip Lib Check"}]},{"display":"コマンドライン","anchor":"Command_line_Options_6171","options":[]},{"display":"Watch Options","anchor":"Watch_and_Build_Modes_6250","options":[{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Assume Changes Only Affect Direct Dependencies"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"watchFile"},{"anchor":"watchDirectory","name":"watchDirectory"},{"anchor":"fallbackPolling","name":"fallbackPolling"},{"anchor":"synchronousWatchDirectory","name":"Synchronous Watch Directory"},{"anchor":"excludeDirectories","name":"Exclude Directories"},{"anchor":"excludeFiles","name":"Exclude Files"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"Enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"Disable Filename Based Type Acquisition"}]}]}},"staticQueryHashes":[]}