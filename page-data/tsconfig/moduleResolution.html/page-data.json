{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/moduleResolution.html","result":{"pageContext":{"title":"moduleResolution","lang":"en","html":"<p>Specify the module resolution strategy:</p>\n<ul>\n<li>\n<p><code>'node16'</code> or <code>'nodenext'</code> for modern versions of Node.js. Node.js v12 and later supports both ECMAScript imports and CommonJS <code>require</code>, which resolve using different algorithms. These <code>moduleResolution</code> values, when combined with the corresponding <a href=\"#module\"><code>module</code></a> values, picks the right algorithm for each resolution based on whether Node.js will see an <code>import</code> or <code>require</code> in the output JavaScript code.</p>\n</li>\n<li>\n<p><code>'node10'</code> (previously called <code>'node'</code>) for Node.js versions older than v10, which only support CommonJS <code>require</code>. You probably won’t need to use <code>node10</code> in modern code.</p>\n</li>\n<li>\n<p><code>'bundler'</code> for use with bundlers. Like <code>node16</code> and <code>nodenext</code>, this mode supports package.json <code>\"imports\"</code> and <code>\"exports\"</code>, but unlike the Node.js resolution modes, <code>bundler</code> never requires file extensions on relative paths in imports.</p>\n<p><code>bundler</code> does not support resolution of <code>require</code> calls. In TypeScript files, this means the <code>import mod = require(\"foo\")</code> syntax is forbidden; in JavaScript files, <code>require</code> calls are not errors but only ever return the type <code>any</code> (or whatever an ambient declaration of a global require function is declared to <code>return</code>).</p>\n</li>\n<li>\n<p><code>'classic'</code> was used in TypeScript before the release of 1.6. <code>classic</code> should not be used.</p>\n</li>\n</ul>\n<p>There are reference pages explaining the <a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html#module-resolution\">theory behind TypeScript’s module resolution</a> and the <a href=\"/docs/handbook/modules/reference.html#the-moduleresolution-compiler-option\">details of each option</a>.</p>","redirectHref":"/tsconfig#moduleResolution"}},"staticQueryHashes":[]}