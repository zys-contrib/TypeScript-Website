{"componentChunkName":"component---src-templates-documentation-tsx","path":"/zh/docs/handbook/2/basic-types.html","result":{"data":{"markdownRemark":{"id":"a4142916-a4ec-5e79-9d83-3049d7926ad4","excerpt":"JavaScript 中的每个值会随着我们执行不同的操作表现出一系列的行为。 这听起来很抽象，看下面的例子，考虑一下针对变量 message 可能执行的操作。 如果我们拆分这个过程，那么第一行代码就是访问了 message 的 toLowerCase 方法并调用它； 第二行代码则尝试直接调用 message…","html":"<p>JavaScript 中的每个值会随着我们执行不同的操作表现出一系列的行为。</p>\n<p>这听起来很抽象，看下面的例子，考虑一下针对变量 <code>message</code> 可能执行的操作。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 访问 message 的 toLowerCase 方法并调用它</span></div><div class='line'><span style=\"color: #001080\">message</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toLowerCase</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 调用 message 函数</span></div><div class='line'><span style=\"color: #795E26\">message</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>如果我们拆分这个过程，那么第一行代码就是访问了 <code>message</code> 的 <code>toLowerCase</code> 方法并调用它；</p>\n<p>第二行代码则尝试直接调用 <code>message</code> 函数。</p>\n<p>不过让我们假设一下，我们并不知道 <code>message</code> 的值 —— 这是很常见的一种情况，仅从上面的代码中我们无法确切得知最终的结果。\n每个操作的结果完全取决于 <code>message</code> 的初始值。</p>\n<ul>\n<li><code>message</code> 是否可以调用？</li>\n<li>它有 <code>toLowerCase</code> 属性吗？</li>\n<li>如果有这个属性，那么 <code>toLowerCase</code> 可以调用吗？</li>\n<li>如果 <code>message</code> 以及它的属性都是可以调用的，那么分别返回什么？</li>\n</ul>\n<p>在编写 JavaScript 代码的时候，这些问题的答案经常需要我们自己记在脑子里，而且我们必须得祈祷自己处理好了所有细节。</p>\n<p>假设 <code>message</code> 是这样定义的：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">message</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>你可能很容易猜到，如果执行 <code>message.toLowerCase()</code>，我们将会得到一个所有字母都是小写的字符串。</p>\n<p>如果执行第二行代码呢？</p>\n<p>熟悉 JavaScript 的你肯定猜到了，这会抛出一个异常：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">txt</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">TypeError: message is not a function</span></div></code></div></pre>\n<p>如果可以避免这样的错误就好了。</p>\n<p>当我们执行代码的时候，JavaScript 运行时会计算出值的<strong>类型</strong> —— 这种类型有什么行为和功能，从而决定采取什么措施。</p>\n<p>这就是上面的代码会抛出 <code>TypeError</code> 的原因 —— 它表明字符串 <code>\"Hello World!\"</code> 无法作为函数被调用。</p>\n<p>对于诸如 <code>string</code> 或者 <code>number</code> 这样的原始类型，我们可以通过 <code>typeof</code> 操作符在运行时计算出它们的类型。</p>\n<p>但对于像函数这样的类型，并没有对应的运行时机制去计算类型。</p>\n<p>举个例子，看下面的函数：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">flip</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>从代码可以<strong>看出</strong>，仅当存在一个带有 <code>flip</code> 属性的对象时，这个函数才可以正常运行，但 JavaScript 无法在代码执行时以一种我们可以检查的方式传递这个信息。</p>\n<p>要让纯 JavaScript 告诉我们 <code>fn</code> 在给定特定参数的时候会做什么事，唯一的方法就是实际调用 <code>fn</code> 函数。</p>\n<p>这样的行为使得我们很难在代码执行前进行相关的预测，也意味着我们在编写代码的时候，很难搞清楚代码会做什么事。</p>\n<p>从这个角度看，所谓的<strong>类型</strong>其实就是描述了什么值可以安全传递给 <code>fn</code>，什么值会引起报错。</p>\n<p>JavaScript 只提供了动态类型 —— 执行代码，然后才能知道会发生什么事。</p>\n<p>那么不妨采用一种替代方案，使用一个静态的类型系统，在代码实际执行前预测代码的行为。</p>\n<h2 id=\"静态类型检查\" style=\"position:relative;\"><a href=\"#%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\" aria-label=\"静态类型检查 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态类型检查</h2>\n<p>还记得之前我们将字符串作为函数调用时，抛出的 <code>TypeError</code> 错误吗？</p>\n<p><strong>很多人</strong>不希望在执行代码时看到任何错误 —— 毕竟这些都是 bug！</p>\n<p>当我们编写新代码的时候，我们也会尽量避免引入新的 bug。</p>\n<p>如果我们只是添加了一点代码，保存文件，重新运行代码，然后马上看到报错，那么我们或许可以快速定位到问题 —— 但这种情况毕竟只是少数。</p>\n<p>我们可能没有全面、彻底地进行测试，以至于没有发现一些潜在错误！</p>\n<p>或者，如果我们幸运地发现了这个错误，我们可能最终会进行大规模的重构，并添加许多不同的代码。</p>\n<p>理想的方案应该是，我们有一个工具可以在代码执行前找出 bug。</p>\n<p>而这正是像 TypeScript 这样的静态类型检查器所做的事情。</p>\n<p><strong>静态类型系统</strong>描述了程序运行时值的结构和行为。</p>\n<p>像 TypeScript 这样的静态类型检查器会利用类型系统提供的信息，并在事态发展不对劲的时候告知我们。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const message: \"hello!\"' >message</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello!\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-err><data-lsp lsp='const message: \"hello!\"' >message</data-lsp></data-err></span><span style=\"color: #000000\">();</span></div><span class=\"error\"><span>This expression is not callable.\n  Type 'String' has no call signatures.</span><span class=\"code\">2349</span></span><span class=\"error-behind\">This expression is not callable.\n  Type 'String' has no call signatures.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBOAUAMZwB2iALqALaSKICGA5pKALygBEAFpADY9wBCdgG48earUaQAFAEphQA'>Try</a></div></pre>\n<p>用 TypeScript 运行上一个例子，它会在我们执行代码之前首先抛出一个错误。</p>\n<h2 id=\"非异常失败\" style=\"position:relative;\"><a href=\"#%E9%9D%9E%E5%BC%82%E5%B8%B8%E5%A4%B1%E8%B4%A5\" aria-label=\"非异常失败 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>非异常失败</h2>\n<p>目前为止，我们讨论的都是运行时错误 —— JavaScript 运行时告诉我们，它觉得某个地方有异常。</p>\n<p>这些异常之所以能够抛出，是因为 <a href=\"https://tc39.github.io/ecma262/\">ECMAScript 规范</a> 明确规定了针对异常应该表现的行为。</p>\n<p>举个例子，规范指出，试图调用无法调用的东西应该抛出一个错误。</p>\n<p>也许这听上去像是“显而易见的行为”，并且你会觉得，访问对象上不存在的属性时，也会抛出一个错误。</p>\n<p>但恰恰相反，JavaScript 的表现和我们的预想不同，它返回的是值 <code>undefined</code>。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">user</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'Daniel'</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">age:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #001080\">user</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">location</span><span style=\"color: #000000\">;       </span><span style=\"color: #008000\">// 返回 undefined</span></div></code></div></pre>\n<p>最终，我们需要一个静态类型系统来告诉我们，哪些代码在这个系统中被标记为错误的代码 —— 即使它是不会马上引起错误的“有效” JavaScript 代码。</p>\n<p>在 TypeScript 中，下面的代码会抛出一个错误，指出 <code>location</code> 没有定义：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: {&#10;    name: string;&#10;    age: number;&#10;}' >user</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Daniel\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) age: number' >age</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const user: {&#10;    name: string;&#10;    age: number;&#10;}' >user</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >location</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'location' does not exist on type '{ name: string; age: number; }'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'location' does not exist on type '{ name: string; age: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBjOAO0QBdQBXRGUAXlAG9dRQiBDAW0lQCIARNkQCWkADY8ANM1BsA5t3QA2KQF8A3LlxUYAOlFx8bUkOJqgA'>Try</a></div></pre>\n<p>虽然有时候这意味着你需要在表达的内容上进行权衡，但我们的目的是为了找到程序中更多合法的 bug。</p>\n<p>而 TypeScript 也的确可以捕获到<strong>很多</strong>合法的 bug：</p>\n<p>举个例子，拼写错误：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\"> </span></div><div class='line'><span style=\"color: #008000\">// 你需要花多久才能注意到拼写错误？</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >toLocaleLowercase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >toLocalLowerCase</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\"> </span></div><div class='line'><span style=\"color: #008000\">// 实际上正确的拼写是这样的……</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const announcement: \"Hello World!\"' >announcement</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLocaleLowerCase(locales?: string | string[] | undefined): string' >toLocaleLowerCase</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAGNqRQF1AIaQwCukGApgLYWT4C8oARABIUA270oA6suwBMAhEwDcaUGhChABvKAAdMCBkYEagwFiagUTlAskaBfgMAXNoHhDQAxKgH6NAmYqBMVMD30YHx-tEVLlqtXADpc0ADLQMBdhU8B3CnhvFAoACgBKcTtoMkoaOlcPLx8AoIBhAlDI8UlpQDztQFE0wCg5QGNrQDsPQBC3U0B6M0BN+MB2C0rAMgJm22JYhwSXN09vXzT4TOyooA'>Try</a></div></pre>\n<p>未调用的函数：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function flipCoin(): boolean' >flipCoin</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// 应该是 Math.random()</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Operator '&lt;' cannot be applied to types '() =&gt; number' and 'number'.</span><span class=\"code\">2365</span></span><span class=\"error-behind\">Operator '&lt;' cannot be applied to types '() =&gt; number' and 'number'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBMAzAGwCsRAZgpNgC4BLaJFCd8AgA4BhaAMgAKAJSgA3kVChSgFL1Ap9GB6M1ABZXHwAWAOnK5IaaAFsl60ORR8E5EcbOXrtu6AAeUAAGczYAbiIAXyA'>Try</a></div></pre>\n<p>或者是基本的逻辑错误：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const value: \"a\" | \"b\"' >value</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() &lt; </span><span style=\"color: #098658\">0.5</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const value: \"a\" | \"b\"' >value</data-lsp></span><span style=\"color: #000000\"> !== </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const value: \"a\"' >value</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types '\"a\"' and '\"b\"' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types '\"a\"' and '\"b\"' have no overlap.</span><div class='line'><span style=\"color: #008000\">// 永远无法到达这个分支</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUAMZwB2iALqAG4CGANgK6SgC8oAstWQBYB001xACZwAtgAoAlKAA8oAAw8ArKAD8oAETV1oVOoBG6gNx4AlgDNQYmgyYBCZq03qpAbzyhQIUDx94AvqCQtIhM5pbWjCwOGgaueF6AHDaAO-GAB6aAqzaADEqAffGAm-GAVHKAYEqA9Kb+QA'>Try</a></div></pre>\n<h2 id=\"类型工具\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%B7%A5%E5%85%B7\" aria-label=\"类型工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型工具</h2>\n<p>TypeScript 可以在我们的代码出现错误时捕获 bug。</p>\n<p>这很好，但更关键的是，它<strong>也</strong>能够在一开始就防止我们的代码出现错误。</p>\n<p>类型检查器可以通过获取的信息检查我们是否正在访问变量或者其它属性上的正确属性。</p>\n<p>一旦它获取到了这些信息，它也能够提示你可能想要访问的属性。</p>\n<p>这意味着 TypeScript 也能用于编辑代码。我们在编辑器中输入的时候，核心的类型检查器能够提供报错信息和代码补全。</p>\n<p>人们经常会谈到 TypeScript 在工具层面的作用，这就是一个典型的例子。</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(alias) function express(): core.Express&#10;(alias) namespace express&#10;import express' >express</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='(alias) express(): Express&#10;import express' >express</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Application.get: &lt;ParamsDictionary, any, any, QueryString.ParsedQs>(path: PathParams, ...handlers: RequestHandler&lt;ParamsDictionary, any, any, QueryString.ParsedQs>[]) => Express (+3 overloads)' >get</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"/\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) req: Request&lt;ParamsDictionary, any, any, QueryString.ParsedQs>' >req</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) res: Response&lt;any>' >res</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >sen</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>sen</span>d<span></li><li class=''><span><span class='result-found'>sen</span>dDate<span></li><li class='deprecated'><span><span class='result-found'>sen</span>dfile<span></li><li class=''><span><span class='result-found'>sen</span>dFile<span></li><li class=''><span><span class='result-found'>sen</span>dStatus<span></li></ul></span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const app: Express' >app</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Application.listen(port: number, callback?: ((...args: any[]) => void) | undefined): Server (+5 overloads)' >listen</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3000</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAggUxQWWgCYCuANlgJKQAuWSADmgJYC2dyVoWAHnfDiqABmSZqABE3XvzEBuNAGNokFBwCGdOqAC8nHnxQoAFAEo5adXQB0AcyxVDY4GIA0QopHlVGS0Ib4BHV31jUABvNFBQfUsULEgMMEik0AA9AB80AF9TNHMNSxJGFTjDAGYABkrTIA'>Try</a></div></pre>\n<p>TypeScript 在工具层面的作用非常强大，远不止拼写时进行代码补全和错误信息提示。</p>\n<p>支持 TypeScript 的编辑器可以通过“快速修复”功能自动修复错误，重构产生易组织的代码。同时，它还具备有效的导航功能，能够让我们跳转到某个变量定义的地方，或者找到对于给定变量的所有引用。</p>\n<p>所有这些功能都建立在类型检查器上，并且是跨平台的，因此<a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\">你最喜欢的编辑器很可能也支持了 TypeScript</a>。</p>\n<h2 id=\"typescript-编译器--tsc\" style=\"position:relative;\"><a href=\"#typescript-%E7%BC%96%E8%AF%91%E5%99%A8--tsc\" aria-label=\"typescript 编译器  tsc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 编译器 —— tsc</h2>\n<p>我们一直在讨论类型检查器，但目前为止还没上手使用过。</p>\n<p>是时候和我们的新朋友 —— TypeScript 编译器 <code>tsc</code> 打交道了。</p>\n<p>首先，通过 npm 进行安装。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm install -g typescript</span></div></code></div></pre>\n<blockquote>\n<p>这将全局安装 TypeScript 的编译器 <code>tsc</code>。如果你更倾向于安装在本地的 node_modules 文件夹中，那你可能需要借助 npx 或者类似的工具才能便捷地运行 tsc 指令。</p>\n</blockquote>\n<p>现在，我们新建一个空文件夹，尝试编写第一个 TypeScript 程序：<code>hello.ts</code> ：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 和世界打个招呼</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;Hello world!&apos;</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEhiVQ0OUGVdGUjQqOUNtGgfFQFAGMD2A7AzpgGwFMA6AzAcwAoByACSIPNAHdMAnAgEwEIaBKANxA'>Try</a></div></pre>\n<p>注意这行代码没有任何多余的修饰，它看起来就和使用 JavaScript 编写的 “hello world” 程序一模一样。</p>\n<p>现在，让我们运行 <code>typescript</code> 安装包自带的 <code>tsc</code> 指令进行类型检查。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc hello.ts</span></div></code></div></pre>\n<p>看！</p>\n<p>等等，“看”<strong>什么</strong>呢？</p>\n<p>我们运行了 <code>tsc</code> 指令，但什么事情也没有发生！</p>\n<p>是的，毕竟这行代码没有类型错误，所以控制台中当然看不到报错信息的输出。</p>\n<p>不过再检查一下 —— 我们其实得到了一个输出<strong>文件</strong>。</p>\n<p>如果我们查看当前目录，会发现除了 <code>hello.ts</code> 文件外还有一个 <code>hello.js</code> 文件。</p>\n<p>而 <code>hello.js</code> 文件是 <code>tsc</code> <strong>编译</strong>或者<strong>转换</strong> <code>hello.ts</code> 文件之后输出的纯 JavaScript 文件。</p>\n<p>如果检查 <code>hello.js</code> 文件的内容，我们可以看到 TypeScript 编译器处理完 <code>.ts</code> 文件后产出的内容：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 和世界打个招呼</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">'Hello world!'</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>在这个例子中，TypeScript 几乎没有需要转译的内容，所以转译前后的代码看起来一模一样。</p>\n<p>编译器总是试图产出清晰可读的代码，这些代码看起来就像正常的开发者编写的一样。</p>\n<p>虽然这不是一件容易的事情，但 TypeScript 始终保持缩进，关注跨行的代码，并且会尝试保留注释。</p>\n<p>如果我们刻意引入了一个类型检查错误呢？</p>\n<p>我们重写一下 <code>hello.ts</code> ：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// This is an industrial-grade general-purpose greeter function:</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: any, date: any): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: any' >person</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: any' >date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: any' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: any' >date</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: any, date: any): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Brendan\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAlAFQBYEsVQDQBDSIyAEwFcUAXePEgGwFoBzeEygU1HZ6QeXNgAdq8UdBR9OPHnWGgAZtUgBjOnmiQAXGlUatO-vHl0AFKOEodAGlCUSigJSgA3mlCh1O28x4AOmZodgsAAwAJHmYQ0AASd2tUHQBfBzpoJwBPIkJEp0VUgEJwlwBuNFS0NDkFCwAiACEzKjIGiqA'>Try</a></div></pre>\n<p>如果我们再次执行 <code>tsc hello.ts</code>，那么会注意到命令行抛出了一个错误！</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">txt</div><div class='code-container'><code><div class='line'><span style=\"color: undefined\">Expected 2 arguments, but got 1.</span></div></code></div></pre>\n<p>TypeScript 告诉我们，我们少传了一个参数给 <code>greet</code> 函数 —— 本来应该是要传入参数的。</p>\n<p>目前为止，我们编写的仍然是标准的 JavaScript 代码，但类型检查依然可以发现我们代码中的问题。</p>\n<p>感谢 TypeScript！</p>\n<h2 id=\"报错时仍产出文件\" style=\"position:relative;\"><a href=\"#%E6%8A%A5%E9%94%99%E6%97%B6%E4%BB%8D%E4%BA%A7%E5%87%BA%E6%96%87%E4%BB%B6\" aria-label=\"报错时仍产出文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>报错时仍产出文件</h2>\n<p>有一件事你可能没有注意到，在上面的例子中，我们的 <code>hello.js</code> 文件再次发生了改动。</p>\n<p>如果我们打开这个文件，会发现内容和输入的文件内容是一样的。</p>\n<p>这可能有点出乎意料，毕竟 <code>tsc</code> 刚才报错了。但这种结果其实和 TypeScript 的核心原则有关：大多数时候，<strong>你</strong>比 TypeScript 更了解代码。</p>\n<p>再次重申，对代码进行类型检查，会限制可以运行的程序的种类，因此类型检查器会进行权衡，以确定哪些代码是可以被接受的。</p>\n<p>大多数时候，这样没什么问题，但有的时候，这些检查会对我们造成阻碍。</p>\n<p>举个例子，想象你现在正把 JavaScript 代码迁移到 TypeScript 代码，并产生了很多类型检查错误。</p>\n<p>最后，你不得不花费时间解决类型检查器抛出的错误，但问题在于，原始的 JavaScript 代码本身就是可以运行的！为什么把它们转换为 TypeScript 代码之后，反而就不能运行了呢？</p>\n<p>所以 TypeScript 并不会对你造成阻碍。</p>\n<p>当然，随着时间的推移，你可能希望对错误采取更具防御性的措施，同时也让 TypeScript 采取更加严格的行为。</p>\n<p>在这种情况下，你可以开启 <a href=\"https://www.typescriptlang.org/tsconfig#noEmitOnError\">noEmitOnError</a> 编译选项。</p>\n<p>尝试修改你的 <code>hello.ts</code> 文件，并使用参数去运行 <code>tsc</code> 指令：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">tsc --noEmitOnError hello.ts</span></div></code></div></pre>\n<p>现在你会发现，<code>hello.js</code> 没有再发生改动了。</p>\n<h2 id=\"显式类型\" style=\"position:relative;\"><a href=\"#%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B\" aria-label=\"显式类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>显式类型</h2>\n<p>目前为止，我们还没有告诉 TypeScript <code>person</code> 和 <code>date</code> 是什么。</p>\n<p>我们修改一下代码，告诉 TypeScript <code>person</code> 是一个 <code>string</code> ，<code>data</code> 则应该是一个 <code>Date</code> 对象。</p>\n<p>我们也会通过 <code>date</code> 去调用 <code>toDateString</code> 方法。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIoVKjGMgDSIAmAhlOmQCIvoCUiA3gChEiCAmIAbdADpxcZNgAGACXTjZiACR98RBAF96UOMwCeiGIU19mrKUc6sAypWrzuegIQLuAbgF6gA'>Try</a></div></pre>\n<p>我们所做的事情，是给 <code>person</code> 和 <code>date</code> 添加<strong>类型注解</strong>，描述 <code>greet</code> 调用的时候应该接受什么类型的参数。</p>\n<p>你可以将这个签名解读为“<code>greet</code> 接受 <code>string</code> 类型的 <code>person</code>，以及 <code>Date</code> 类型的 <code>date</code>”。</p>\n<p>有了类型注解之后，TypeScript 就能告诉我们，哪些情况下对于 <code>greet</code> 的调用可能是不正确的。</p>\n<p>比如……</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;() => string' >Date</data-lsp></span><span style=\"color: #000000\">());</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type 'Date'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type 'Date'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAGYCuAdgMYAuAlnCaAObSSQUAUADjIraohdFRL0ANKAAmAQwqRUAESmQAlKADeeUKDK1uAG0gA6HXHqsABgAlIOo6AAkKzkloBfURTiSAnqCqI7KyWl9d3lpAGV+QRNFZwBCU0UAbjxnPDxGZjYAIgBZCTExX1os0VDIVkUkoA'>Try</a></div></pre>\n<p>哈？</p>\n<p>TypeScript 报错提示第二个参数有问题，但这是为什么呢？</p>\n<p>你可能会有点惊讶，因为在 JavaScript 中直接调用 <code>Date()</code> 返回的是 <code>string</code>。</p>\n<p>另一方面，通过 <code>new Date()</code> 去构造一个 <code>Date</code>，则可以如预期那样返回一个 <code>Date</code> 对象。</p>\n<p>不管怎样，我们可以快速修复这个错误：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line dim'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) person: string' >person</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) date: Date' >date</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Date.toDateString(): string' >toDateString</data-lsp></span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line dim'><span style=\"color: #000000\">}</span></div><div class='line dim'><span style=\"color: #000000\"> </span></div><div class='line highlight'><span style=\"color: #795E26\"><data-lsp lsp='function greet(person: string, date: Date): void' >greet</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #000000\">());</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwE4FN1QBQAd2oDOCAXIoVKjGMgDSIAmAhlOmQCIvoCUiA3gChEiCAmIAbdADpxcZNgAGACXTjZiACR98RBAF96UOMwCeiGIU19mrKUc6sAypWrzuegIQLuAbgF6hATRMHAAiAFkmBgYLBFD6MHQAd0QHdGxuXyA'>Try</a></div></pre>\n<p>记住，我们并不总是需要显式地进行类型注解。</p>\n<p>在很多情况下，即使省略了类型注解，TypeScript 也可以为我们<strong>推断出</strong>（或者“搞清楚”）类型。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let msg: string' style='border-bottom: solid 2px lightgrey;'>msg</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hello there!\"</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>let msg: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAtgzg5hAvBARACxMYB7CYMBOIAhCgNwBQA9FRBAHoD8QA'>Try</a></div></pre>\n<p>即使我们没有告诉 TypeScript <code>msg</code> 的类型是 <code>string</code>，它自己也能够搞清楚。</p>\n<p>这是一个特性，在类型系统能够正确地进行类型推断的时候，最好不要手动添加类型注解了。</p>\n<blockquote>\n<p>注意：代码信息会在上面的代码示例中展示出来。如果将鼠标放到变量上面，那么编辑器也会有相同的提示。</p>\n</blockquote>\n<h2 id=\"擦除类型\" style=\"position:relative;\"><a href=\"#%E6%93%A6%E9%99%A4%E7%B1%BB%E5%9E%8B\" aria-label=\"擦除类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>擦除类型</h2>\n<p>我们看一下，通过 <code>tsc</code> 将上面的 <code>greet</code> 函数编译成 JavaScript 后会发生什么事：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\", today is \"</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000\">(), </span><span style=\"color: #A31515\">\"!\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Date</span><span style=\"color: #000000\">());</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFygmQCsmAZgK4B2AxuqrM6EQSWQAoADiQKQulSOgKpmRADSgAJnnQlKAEVUkAlKADemUKFZdxAGxIA6c7CICABgAkS526AAk+kWK4BfRXRYFQBPUFRIT30VNSsgrTUAZWlZex0-AEIHHQBuTD9MTF5+dAEAIgBZPCUlCK4yxWYSeFAEkgEdXKA'>Try</a></div></pre>\n<p>注意到有两个变化：</p>\n<ol>\n<li>我们的 <code>person</code> 和 <code>date</code> 参数的类型注解不见了。</li>\n<li>我们的“模板字符串” —— 使用反引号（<code>`</code>）包裹的字符串 —— 变成了通过 <code>+</code> 拼接的普通字符串。</li>\n</ol>\n<p>稍后再解释第二点，我们先来看第一个变化。</p>\n<p>类型注解并不属于 JavaScript（或者专业上所说的 ECMAScript）的内容，所以没有任何浏览器或者运行时能够直接执行不经处理的 TypeScript 代码。</p>\n<p>这也是为什么 TypeScript 首先需要一个编译器 —— 它需要经过编译，才能去除或者转换 TypeScript 独有的代码，从而让这些代码可以在浏览器上运行。</p>\n<p>大多数 TypeScript 独有的代码都会被擦除，在这个例子中，可以看到类型注解的代码完全被擦除了。</p>\n<blockquote>\n<p>**记住：**类型注解永远不会改变你的程序在运行时的行为</p>\n</blockquote>\n<h2 id=\"降级\" style=\"position:relative;\"><a href=\"#%E9%99%8D%E7%BA%A7\" aria-label=\"降级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>降级</h2>\n<p>上面的另一个变化，就是我们的模板字符串从：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">person</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">date</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>被重写为：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">person</span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\", today is \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000\">() + </span><span style=\"color: #A31515\">\"!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>为什么会这样子呢？</p>\n<p>模板字符串是 ECMAScript 2015（或者 ECMAScript6、ES2015、ES6 等）引入的新特性。</p>\n<p>TypeScript 可以将高版本 ECMAScript 的代码重写为类似 ECMAScript3 或者 ECMAScript5 （也就是 ES3 或者 ES5）这样较低版本的代码。</p>\n<p>类似这样将更新或者“更高”版本的 ECMAScript 向下降级为更旧或者“更低”版本的代码，就是所谓的<strong>降级</strong>。</p>\n<p>默认情况下，TypeScript 会转化为 ES3 代码，这是一个非常旧的 ECMAScript 版本。我们可以使用 <a href=\"https://www.typescriptlang.org/tsconfig#target\">target</a> 选项将代码往较新的 ECMAScript 版本转换。</p>\n<p>通过使用 <code>--target es2015</code> 参数进行编译，我们可以得到 ECMAScript2015 版本的目标代码，这意味着这些代码能够在支持 ECMAScript2015 的环境中执行。</p>\n<p>因此，运行 <code>tsc --target es2015 hello.ts</code> 之后，我们会得到如下代码：</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">person</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">date</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`Hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">person</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, today is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\">date</span><span style=\"color: #000000FF\">.</span><span style=\"color: #795E26\">toDateString</span><span style=\"color: #000000FF\">()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">greet</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Maddison\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Date</span><span style=\"color: #000000\">());</span></div></code></div></pre>\n<blockquote>\n<p>虽然默认的目标代码采用的是 ES3 语法，但现在浏览器大多数都已经支持 ES2015 了。</p>\n<p>所以，大多数开发者可以安全地指定目标代码采用 ES2015 或者是更高的 ES 版本，除非你需要着重兼容某些古老的浏览器。</p>\n</blockquote>\n<h2 id=\"严格性\" style=\"position:relative;\"><a href=\"#%E4%B8%A5%E6%A0%BC%E6%80%A7\" aria-label=\"严格性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>严格性</h2>\n<p>不同的用户会由于不同的理由去选择使用 TypeScript 的类型检查器。</p>\n<p>一些用户寻求的是一种更加松散、可选的开发体验，他们希望类型检查仅作用于部分代码，同时还可享受 TypeScript 提供的功能。</p>\n<p>这也是 TypeScript 默认提供的开发体验，类型是可选的，推断会使用最松散的类型，对于潜在的 <code>null/undefined</code> 类型的值也不会进行检查。</p>\n<p>就像 <code>tsc</code> 在编译报错的情况下仍然能够正常产出文件一样，这些默认的配置会确保不对你的开发过程造成阻碍。</p>\n<p>如果你正在迁移现有的 JavaScript 代码，那么这样的配置可能刚好适合。</p>\n<p>另一方面，大多数的用户更希望 TypeScript 可以快速地、尽可能多地检查代码，这也是这门语言提供了严格性设置的原因。</p>\n<p>这些严格性设置将静态的类型检查从一种切换开关的模式（对于你的代码，要么全部进行检查，要么完全不检查）转换为接近于刻度盘那样的模式。</p>\n<p>你越是调节它，TypeScript 就会为你检查越多东西。</p>\n<p>这可能需要额外的工作，但从长远来看，这是值得的，它可以带来更彻底的检查以及更精细的工具。</p>\n<p>如果可能，新的代码库应该始终启用这些严格性配置。</p>\n<p>TypeScript 有几个和类型检查相关的严格性设置，它们可以随时打开或关闭，如若没有特殊说明，我们文档中的例子都是在开启所有严格性设置的情况下执行的。</p>\n<p>CLI 中的 <a href=\"/tsconfig#strict\">strict</a> 配置项，或者 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\"><code>tsconfig.json</code></a> 中的 <code>\"strict: true\"</code> 配置项，可以一次性开启全部严格性设置。但我们也可以单独开启或者关闭某个设置。</p>\n<p>在所有这些设置中，尤其需要关注的是 <a href=\"/tsconfig#noImplicitAny\"><code>noImplicitAny</code></a> 和 <a href=\"/tsconfig#strictNullChecks\"><code>strictNullChecks</code></a>。</p>\n<h2 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h2>\n<p>回想一下，在前面的某些例子中，TypeScript 没有为我们进行类型推断，这时候变量会采用最宽泛的类型：<code>any</code>。这并不是一件最糟糕的事情 —— 毕竟，使用 <code>any</code> 类型基本就和纯 JavaScript 一样了。</p>\n<p>但是，使用 <code>any</code> 通常会和使用 TypeScript 的目的相违背。</p>\n<p>你的程序使用越多的类型，那么在验证和工具上你的收益就越多，这意味着在编码的时候你会遇到越少的 bug。</p>\n<p>启用 <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a> 配置项，在遇到被隐式推断为 <code>any</code> 类型的变量时就会抛出一个错误。</p>\n<h2 id=\"strictnullchecks\" style=\"position:relative;\"><a href=\"#strictnullchecks\" aria-label=\"strictnullchecks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code></h2>\n<p>默认情况下，<code>null</code> 和 <code>undefined</code> 可以被赋值给其它任意类型。</p>\n<p>这会让你的编码更加容易，但世界上无数多的 bug 正是由于忘记处理 <code>null</code> 和 <code>undefined</code> 导致的 —— 有时候它甚至会带来<a href=\"https://www.youtube.com/watch?v=ybrQvs4x0Ps\">数十亿美元的损失</a>！</p>\n<p><a href=\"https://www.typescriptlang.org/tsconfig#strictNullChecks\">strictNullChecks</a> 配置项让处理 <code>null</code> 和 <code>undefined</code> 的过程更加明显，让我们<strong>不用</strong>担心自己是否<strong>忘记</strong>处理 <code>null</code> 和 <code>undefined</code>。</p>","headings":[{"value":"静态类型检查","depth":2},{"value":"非异常失败","depth":2},{"value":"类型工具","depth":2},{"value":"TypeScript 编译器 —— tsc","depth":2},{"value":"报错时仍产出文件","depth":2},{"value":"显式类型","depth":2},{"value":"擦除类型","depth":2},{"value":"降级","depth":2},{"value":"严格性","depth":2},{"value":"noImplicitAny","depth":2},{"value":"strictNullChecks","depth":2}],"frontmatter":{"permalink":"/zh/docs/handbook/2/basic-types.html","title":"基础","disable_toc":null,"handbook":null,"oneline":"学习 TypeScript 的第一步：基本类型。","preamble":"<p>欢迎来到手册的第一页。如果这是你第一次接触到 TypeScript —— 你可能需要先阅读一下'<a href='https://www.typescriptlang.org/docs/handbook/intro.html#get-started'>入门</a>'指南</p>\n","deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"The TypeScript Handbook","oneline":"Your first step to learn TypeScript","permalink":"/docs/handbook/intro.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"常见类型","oneline":"The language primitives.","permalink":"/zh/docs/handbook/2/everyday-types.html"}}}},"pageContext":{"id":"1-基础","slug":"/zh/docs/handbook/2/basic-types.html","repoPath":"/packages/documentation/copy/zh/handbook-v2/Basics.md","previousID":"2401f722-f00c-5bb7-901d-341f89ec48bc","nextID":"fa5fed1d-7ca9-55da-a7eb-c89167edede3","lang":"zh","modifiedTime":"2024-10-21T12:35:09.577Z"}},"staticQueryHashes":[]}