{"componentChunkName":"component---src-templates-documentation-tsx","path":"/zh/docs/handbook/2/conditional-types.html","result":{"data":{"markdownRemark":{"id":"3e17f9d7-8b4f-5d66-9226-019ee07ee1ac","excerpt":"大多数有效程序的核心是，我们必须依据输入做出一些决定。\nJavaScript 程序也是如此，但是由于值可以很容易地被内省，这些决定也是基于输入的类型。\n条件类型 有助于描述输入和输出类型之间的关系。 条件类型看起来有点像 JavaScript 中的条件表达式（条件 ? true 表达式 : false…","html":"<p>大多数有效程序的核心是，我们必须依据输入做出一些决定。\nJavaScript 程序也是如此，但是由于值可以很容易地被内省，这些决定也是基于输入的类型。\n<em>条件类型</em> 有助于描述输入和输出类型之间的关系。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Animal.live(): void' >live</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.woof(): void' >woof</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example1 = number' style='border-bottom: solid 2px lightgrey;'>Example1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example1 = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Example2 = string' style='border-bottom: solid 2px lightgrey;'>Example2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='interface RegExp' >RegExp</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Animal' >Animal</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Example2 = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgIImAWzgG2QbwChlkdgA3CACgEoAuZcge2ABMBuQgX0NElkQoAIkwDmyCAA9IIVgGc0GbHiIkA7kyYxaDZm049CYAJ4AHFAFFJcTKZwQAjMgC8yEeKkz5irLmQB+ZBAAV0wAI2hkBjkwKFBRTgB6RJJkAD1-QiMzS2tbewAmF2QAJQhRK1MJaQhZBXRfPECQ8Mjo2PiklJIMoA'>Try</a></div></pre>\n<p>条件类型看起来有点像 JavaScript 中的条件表达式（<code>条件 ? true 表达式 : false 表达式</code>）：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type SomeType = any' >SomeType</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='type OtherType = any' >OtherType</data-lsp></span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\"><data-lsp lsp='type TrueType = any' >TrueType</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\"><data-lsp lsp='type FalseType = any' >FalseType</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAyg9gWwgFXNAvFAhgOxAbgChRIoB5YACwgCdVTNcDi0pkaBXFVxvIk6ADEsAGwDO3Btj4tSMYBwBmiqOkJQoAek1QAtPoDGHYPt3rYiSdAgAPYBBwATMeSq160APxtOVqAC4oYXErfCA'>Try</a></div></pre>\n<p>当 <code>extends</code> 左边的类型可以赋值给右边的类型时，你将获得第一个分支（“true” 分支）中的类型；否则你将获得后一个分支（“false” 分支）中的类型。</p>\n<p>从上面的例子中，条件类型可能不会立即显得很有用 - 我们可以告诉自己是否 <code>Dog extends Animal</code> 并选择 <code>number</code> 或 <code>string</code>！\n但是条件类型的威力来自于将它们与泛型一起使用。</p>\n<p>让我们以下面的 <code>createLabel</code> 函数为例:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) IdLabel.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* 一些字段 */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) NameLabel.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* 其它字段 */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(name: string): NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(nameOrId: string | number): IdLabel | NameLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel(id: number): IdLabel (+2 overloads)' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nameOrId: string | number' >nameOrId</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMoAByg2XKDq2oFbrZO1YBuEgF8SoSLEQoAcnAYRseQqXIhlEGgGcwUUAHM2nQG6KgYO1BwsZJIkYdEAjDAA9iGQIoEOJDUCAApKGnomaABKGgxA-HEnFzdPb19-VVxg7RV9QxNo5CUVOITnVw8vHz8AzPwg7IgAeSgMXKMQUwAfWkZmAtja5G6ijPVSpIrU6tGsnWbW5AN2rp6IqH6sQeGdOOIyZDAACyh3AHdkACJnYAYAB3wIFXAIdAvxCSA'>Try</a></div></pre>\n<p>这些 createLabel 的重载描述了单个基于输入类型进行选择的 JavaScript 函数。注意以下几点：</p>\n<ol>\n<li>如果一个库不得不在其 API 中一遍又一遍地做出相同的选择，这就变得很麻烦。</li>\n<li>我们必须创建三个重载：一种用于我们 <em>确定</em> 类型时的每种情况（一个用于 <code>string</code>，一个用于 <code>number</code>），一个用于最一般的情况（接受一个 <code>string | number</code>）。对于 <code>createLabel</code> 可以处理的每个新类型，重载的数量都会呈指数增长。</li>\n</ol>\n<p>相反，我们可以将该逻辑转换为条件类型：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type NameOrId&lt;T extends string | number>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='interface IdLabel' >IdLabel</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\"><data-lsp lsp='interface NameLabel' >NameLabel</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMoAByg2XKDq2oFbrZO1YBuEgF8SoSLEQoAcnAYRseQqXIhlEGgGcwUUAHM2nQG6KgYO1BwsZJKtWyALSuEdMK+ckwATwAOijoA8lAYADwAKsgQAB6QIOh6tIzMyAA+yAZGIMYAfMgAvMjRcQlJKUzQZMgA-GhYuAQ1NEoqagSiQA'>Try</a></div></pre>\n<p>然后，我们可以使用该条件类型将重载简化为没有重载的单个函数。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >createLabel</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idOrName: T extends string | number' >idOrName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='type NameOrId&lt;T extends string | number> = T extends number ? IdLabel : NameLabel' >NameOrId</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in createLabel&lt;T extends string | number>(idOrName: T): NameOrId&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"unimplemented\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let a: NameLabel' style='border-bottom: solid 2px lightgrey;'>a</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"typescript\">(idOrName: \"typescript\"): NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"typescript\"</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let a: NameLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let b: IdLabel' style='border-bottom: solid 2px lightgrey;'>b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;2.8>(idOrName: 2.8): IdLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2.8</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>let b: IdLabel</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let c: IdLabel | NameLabel' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function createLabel&lt;\"hello\" | 42>(idOrName: \"hello\" | 42): IdLabel | NameLabel' >createLabel</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #000000\">() ? </span><span style=\"color: #A31515\">\"hello\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>let c: NameLabel | IdLabel</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIBMAycBGEA2yA3gFDLLDoBcyIArgLZ5TID0AVMoAByg2XKDq2oFbrZO1YBuEgF8SoSLEQoAcnAYRseQqXIhlEGgGcwUUAHM2nQG6KgYO1BwsZJJgAngAdFOgPJQMAHgAqyCAAPSBB0PVpGZmQAH2QDIxBjAD5kAF5kfyCQsIimaDJkAH40LFwCApolFTUCcVZWZABaZoQ6MGbGkhg6EAQwYAB7EGQEKAg4SBr8PwDgiFDw+jyWWPiTJIAKSk8q3QyASkqPL3Q-FM1kMAALKAGAd2QAIh7gBmd8CBVwCHRH8SkSB8wMg4GkRmMJqoyvgNo8nK49KNgM4wI99nUGsgAHqFEiAiDAnBg0bjSbQjYAJgAdAAOdEkerkHF4oEjYkQsnqDYAWQmVypUDgoQGDA2+yKTyuBHwA0eyBoABYKfTGdjCkA'>Try</a></div></pre>\n<h3 id=\"条件类型约束\" style=\"position:relative;\"><a href=\"#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F\" aria-label=\"条件类型约束 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>条件类型约束</h3>\n<p>通常，条件类型的检查将为我们提供一些新信息。\n就像使用类型守卫缩小范围可以给我们提供更具体的类型一样，条件类型的 true 分支将根据我们检查的类型进一步约束泛型。</p>\n<p>让我们来看看下面的例子：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><span class=\"error\"><span>Type '\"message\"' cannot be used to index type 'T'.</span><span class=\"code\">2536</span></span><span class=\"error-behind\">Type '\"message\"' cannot be used to index type 'T'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDMA2AUAC4CeADpKALKSKICGA5pAPIBmAPACoB8oAvKBwDaAIgC21Oo2EBdANxA'>Try</a></div></pre>\n<p>在本例中，TypeScript 产生错误是因为不知道 <code>T</code> 有一个名为 <code>message</code> 的属性。\n我们可以约束 <code>T</code>，TypeScript 也不会再抱怨了：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> }&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T extends { message: unknown; }>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): void' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T extends { message: unknown; }> = T[\"message\"]' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCpQgA9gIA7AE3igG8oBbBZNALigFdSBrUgewHdSUAL4A+KAF4ouANoAiBolQRZAXQDcAKA0BLUiQBOmJAGNoAUTpJtAGxoao9Rktbxg+3Sk1Ctug0dNQACI8KHYOAEZI+pwAFACUrABuPNrkXlqgkFAWVtZwimgAwjx6ZMBUkvlMGDg5NiKaAPSNDlAAegD8QA'>Try</a></div></pre>\n<p>然而，如果我们希望 <code>MessageOf</code> 接受任何类型，并且在 <code>message</code> 属性不可用的情况下默认为 <code>never</code> 之类的类型，我们应该怎么做呢？\n我们可以通过移出约束并引入条件类型来实现这一点：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) message: unknown' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\"> } ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type MessageOf&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"message\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Email.message: string' >message</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dog.bark(): void' >bark</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EmailMessageContents = string' style='border-bottom: solid 2px lightgrey;'>EmailMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Email' >Email</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>type EmailMessageContents = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DogMessageContents = never' style='border-bottom: solid 2px lightgrey;'>DogMessageContents</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type MessageOf&lt;T> = T extends {&#10;    message: unknown;&#10;} ? T[\"message\"] : never' >MessageOf</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dog' >Dog</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>type DogMessageContents = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshDO8CGBzCB5AZgHgCoD4oBeKXKCAD2AgDsATeKAbygFsFk0AuKAVxoDWNAPYB3GlAC+UAPykA2gCJ2iVBEUBdKDxoQAbhABOAbgBQpgJY1qhzEgDG0AKKskFgDbNTUNhzU94YEMrFDNJcysbO0coABFhFC8fACMkQwEACgBKHj1hCzow81BIKBc3dzhVNABhYWtaYEYSKs4MHHKPfDMAeh6fKAA9GWLwaHiUVrU6hutm2D80LGwJ7tM+geGgA'>Try</a></div></pre>\n<p>在 true 分支中，TypeScript 知道 <code>T</code> <em>将</em> 有一个 <code>message</code> 属性。</p>\n<p>作为另一个示例，我们还可以编写一个名为 <code>Flatten</code> 的类型，它将数组类型扁平为它们的元素类型，但在其他情况下不会处理它们：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">] : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type Flatten&lt;T>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Extracts out the element type.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Leaves the type alone.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;T> = T extends any[] ? T[number] : T' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFQHxQLxSZQQAeKqAJgM5QKogDaAulAPyEOoCuAtgEYQATiwBchANwAoSQHoZUAKJlBCAMbAaAey7AowABbQIcCDzS7QkAHSTL0AMrBB+WImRp0VJwEtUAc2ZsKTkoUIA9VmkQgBkIBAA3CBoDaDtaOE1UCBs0gDleF3gkcnRufiEg2Xlw1iA'>Try</a></div></pre>\n<p>当 <code>Flatten</code> 被赋予数组类型时，它使用带 <code>number</code> 的索引访问来提取 <code>string[]</code> 的元素类型。\n否则，它只返回给定的类型。</p>\n<h3 id=\"在条件类型中推断\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%AD%E6%8E%A8%E6%96%AD\" aria-label=\"在条件类型中推断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在条件类型中推断</h3>\n<p>我们发现自己使用条件类型来应用约束，然后提取出类型。\n这最终成为一种非常常见的操作，条件类型使其变得更容易。</p>\n<p>条件类型为我们提供了一种使用 <code>infer</code> 关键字从 true 分支中与之进行比较的类型中进行推断的方法。\n例如，我们可以在 <code>Flatten</code> 中推断元素类型，而不是使用索引访问类型“手动”提取它：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Flatten&lt;Type> = Type extends (infer Item)[] ? Item : Type' >Flatten</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\">&gt; ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Item' >Item</data-lsp></span><span style=\"color: #000000\"> : </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type Flatten&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYgNgQ2MCA7APAFXBAfFAXim0iggA8VUATAZygEEAnJhEdAS1QDMImoAkigC2+APyCRUAFzEcAbiA'>Try</a></div></pre>\n<p>在这里，我们使用 <code>infer</code> 关键字以声明方式引入一个名为 <code>Item</code> 的新泛型类型变量，而不是指定如何在 true 分支中检索元素类型 <code>T</code>。\n这使我们不必考虑如何挖掘和探索我们感兴趣的类型的结构。</p>\n<p>我们可以使用 <code>infer</code> 关键字编写一些有用的助手类型别名。\n例如，对于简单的情况，我们可以从函数类型中提取返回类型：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type GetReturnType&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: never[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">infer</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Return' >Return</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Num = number' style='border-bottom: solid 2px lightgrey;'>Num</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Num = number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Str = string' style='border-bottom: solid 2px lightgrey;'>Str</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Str = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Bools = boolean[]' style='border-bottom: solid 2px lightgrey;'>Bools</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GetReturnType&lt;Type> = Type extends (...args: never[]) => infer Return ? Return : never' >GetReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: boolean' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: boolean' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">[]&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Bools = boolean[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hwCV4FcBOA7AKuCAebkAfFALxQHQQAewE6AJgM5QAUAdBwIaoDmjAXFHQQAbhFQBtALoBKUsQCW6AGbioSYGnQAoKFAD86lBl1RBwsagDc27aEhQAcsgC2pWPA1aKuFnJLE6K4ARuKENgD0EXpQAHr6tvbQAMrAqO5wiMZYOL5UgoxpSjz+xIWoxeHaUTHxiThQAEIA9s0ANsxkmV4YPiycgsGtbRCc6AA0UMGDw6PopVOzY9JVNXrxQA'>Try</a></div></pre>\n<p>当从具有多个调用签名的类型（如重载函数的类型）进行推断时，将从 <em>最后一个</em> 签名进行推断（这也许是最宽松的万能情况）。无法基于参数类型列表执行重载决议。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: number): string (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function stringOrNum(x: string | number): string | number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string | number' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function stringOrNum(x: string): number (+2 overloads)' >stringOrNum</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwGcMYtUBzAeRgDlkBbACgA8AuQ40sgSjdXoCMQMANwAoUJFgIU6bHnYlyVWo1bw+dQTB4LOYidDhI0mXPiKLKNeszYXO8AD7qBQnffJOXmoWNEYATwAHBAAVAEZ4AF54ACUQDGQYVFDgkAAeQJCcRF0lazoAPjEAehL4CoA9AH4gA'>Try</a></div></pre>\n<h2 id=\"分配条件类型\" style=\"position:relative;\"><a href=\"#%E5%88%86%E9%85%8D%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\" aria-label=\"分配条件类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分配条件类型</h2>\n<p>当传入的类型参数为联合类型时，他们会被 <em>分配类型</em> 。\n以下面的例子为例：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcQA'>Try</a></div></pre>\n<p>如果我们将联合类型传入 <code>ToArray</code>，则条件类型将应用于该联合类型的每个成员。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArray&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrArrOrNumArr = string[] | number[]' style='border-bottom: solid 2px lightgrey;'>StrArrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type StrArrOrNumArr = string[] | number[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKEmhIUAMrAkyJAHkkAOQCuAWxWFYiFOgx0lASyoBzKAB9BugEZjcUgPRuoXgHqsgA'>Try</a></div></pre>\n<p>这里发生的情况是 <code>StrOrNumArray</code> 分布在以下位置：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmUAHyjdcAIwjwA3EA'>Try</a></div></pre>\n<p>并在联合类型的每个成员类型上映射到有效的内容：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">&gt; | </span><span style=\"color: #001080\"><data-lsp lsp='type ToArray&lt;Type> = Type extends any ? Type[] : never' >ToArray</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgDw3BAfFAXlhyggA9gIA7AEwGcpUqQoB+YyAbQF0oAuKFQgA3CEgDcAKFCQoAZWBJkSAPJIAcgFcAtssKSoUAPRGoAWgsBjTcAtmDsRCnQY6igJZUA5vgA+j5RcqHQAjMVxxIA'>Try</a></div></pre>\n<p>所以我们得到：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #001080\">number</span><span style=\"color: #000000\">[];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAysBOBBe8Dy8ByBXAts+UAvAFBRQD05UAtLQMZbC3WlQDOCAlgHYDmA2gF0oAHyjdcAIwjwhAbiA'>Try</a></div></pre>\n<p>通常，分布性是所需的行为。\n要避免这种行为，可以用方括号括起 <code>extends</code> 关键字的两边。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">] ? </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in type ToArrayNonDist&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">[] : </span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// &apos;StrOrNumArr&apos; 不再是一个联合类型</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StrOrNumArr = (string | number)[]' style='border-bottom: solid 2px lightgrey;'>StrOrNumArr</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ToArrayNonDist&lt;Type> = [Type] extends [any] ? Type[] : never' >ToArrayNonDist</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type StrOrNumArr = (string | number)[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKg9gQQE5IIYgHJwHYBECWAzsADwzgQB8UAvFANrmQC6UEAHsBNgCaEOpsIVgH5YFeqwBcUbBABuEJAG4AUKoD0GqAHIAysCQB5JBgCuAW2RIdUQLBygWMVA9GaAAOUBUcoBUAwBAqgbx9A0eqqoJBQBsamlta0sIgo6Fh4RKTESPjYAOZQAD6ylgBGSpRqWlAlAHoiQA'>Try</a></div></pre>","headings":[{"value":"条件类型约束","depth":3},{"value":"在条件类型中推断","depth":3},{"value":"分配条件类型","depth":2}],"frontmatter":{"permalink":"/zh/docs/handbook/2/conditional-types.html","title":"条件类型","disable_toc":null,"handbook":null,"oneline":"Create types which act like if statements in the type system.","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Indexed Access Types","oneline":"Using Type['a'] syntax to access a subset of a type.","permalink":"/docs/handbook/2/indexed-access-types.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Mapped Types","oneline":"Generating types by re-using an existing type.","permalink":"/docs/handbook/2/mapped-types.html"}}}},"pageContext":{"id":"1-条件类型","slug":"/zh/docs/handbook/2/conditional-types.html","repoPath":"/packages/documentation/copy/zh/handbook-v2/Type Manipulation/Conditional Types.md","previousID":"bbf36692-5f42-5b37-8580-7f3c6462bcc4","nextID":"69976ebb-a11c-50cf-87aa-3b44aca7fa20","lang":"zh","modifiedTime":"2024-10-21T12:35:09.577Z"}},"staticQueryHashes":[]}