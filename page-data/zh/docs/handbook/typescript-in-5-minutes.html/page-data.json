{"componentChunkName":"component---src-templates-documentation-tsx","path":"/zh/docs/handbook/typescript-in-5-minutes.html","result":{"data":{"markdownRemark":{"id":"a0bae432-02af-57d2-8777-4a96a8b4d952","excerpt":"TypeScript 与 JavaScript 有着不同寻常的关系。TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层： TypeScript 的类型系统。 例如，JavaScript 提供了诸如 string 和 number…","html":"<p>TypeScript 与 JavaScript 有着不同寻常的关系。TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层： TypeScript 的类型系统。</p>\n<p>例如，JavaScript 提供了诸如 <code>string</code> 和 <code>number</code> 这样的原始类型，但它不检查你在赋值时与类型是否匹配。TypeScript 提供了这样的功能。</p>\n<p>这意味着你现有的运行良好的 JavaScript 代码也是 TypeScript 代码。TypeScript 的主要好处是，它可以检查代码中的意外行为，从而降低出现错误的机会。</p>\n<p>本教程提供 TypeScript 的简要概述，重点介绍其类型系统。</p>\n<h2 id=\"类型推断\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\" aria-label=\"类型推断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型推断</h2>\n<p>TypeScript 可以识别 JavaScript 语言，在许多情况下可以推断类型。例如，在创建变量并将其赋值给特定值时， TypeScript 将使用该值作为其类型。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let helloWorld: string' style='border-bottom: solid 2px lightgrey;'>helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let helloWorld: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAFizA9gdXgJ2AEwgXggIgBKwITJrq4DcAUAPQ0QQB6A-EA'>Try</a></div></pre>\n<p>通过感知 JavaScript 的工作原理，TypeScript 可以构建一个接受 JavaScript 代码但具有类型的类型系统。这个类型系统使得我们不需要添加额外的字符来显式地指定类型。在上面的例子中，TypeScript就是这样知道 <code>helloWorld</code> 是 <code>string</code> 类型的。</p>\n<p>你可能已经在 Visual Studio Code 中编写了 JavaScript，并已使用了编辑器的自动补全功能。Visual Studio Code 使用了 TypeScript 的引擎，以便更容易地处理 JavaScript。</p>\n<h2 id=\"定义类型\" style=\"position:relative;\"><a href=\"#%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B\" aria-label=\"定义类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义类型</h2>\n<p>你可以在 JavaScript 中使用各种各样的设计模式。然而，某些设计模式使得类型难以自动推断（例如，使用动态编程的模式）。为了使类型推断涵盖这些情况， TypeScript 支持扩展 JavaScript 语言，它可以让 TypeScript 知道如何去推断类型。</p>\n<p>例如，要创建具有推断类型的对象，该类型包括 <code>name: string</code> 和 <code>id: number</code>，你可以这么写：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: {&#10;    name: string;&#10;    id: number;&#10;}' >user</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hayes\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBArhApgJxgXhgbwFAxmAQwFtEAuGAIgAkCBPRCCgGlxgEsATcgBhYF8A3EA'>Try</a></div></pre>\n<p>你可以使用 <code>interface</code> 关键字声明显式地描述此对象的<em>内部数据的类型</em>（译者注：下文可能译为“结构”）：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdrIN4ChnIhwC2EAXMumFKAOYDc+ywAJhSAK7EBG0jAvkA'>Try</a></div></pre>\n<p>然后你可以声明一个符合此接口（<code>interface</code>）的 JavaScript 对象，在变量声明后使用像 <code>: TypeName</code> 这样的语法：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---分割线---</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: User' >user</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hayes\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdrIN4ChnIhwC2EAXMumFKAOYDc+ywAJhSAK7EBG0jAvrgD0Q5AFoJgMCVATkqB+vwljcCAPYgqyDpigUMWALw4mRUhQBEACTgBPCOlMAaJqwoAGR-3pA'>Try</a></div></pre>\n<p>如果提供的对象与提供的接口不匹配，TypeScript 将警告：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: User' >user</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) username: string' >username</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hayes\"</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Type '{ username: string; id: number; }' is not assignable to type 'User'.\n  Object literal may only specify known properties, and 'username' does not exist in type 'User'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ username: string; id: number; }' is not assignable to type 'User'.\n  Object literal may only specify known properties, and 'username' does not exist in type 'User'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAEsA7AFxgDMBDAY0lAFVEZQBvHUUA8gW0lUSOkIBzANytQeACaoCAV04AjGKIC+OHJTgE+oGQ2ip6jALzMxumB26oARAAlyAT0iJrAGjGTUABnfLhQA'>Try</a></div></pre>\n<p>由于 JavaScript 支持类和面向对象编程，TypeScript 也支持。你可以将接口声明与类一起使用：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class UserAccount' >UserAccount</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.name: string' >name</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) name: string' >name</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserAccount.id: number' >id</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const user: User' >user</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor UserAccount(name: string, id: number): UserAccount' >UserAccount</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Murphy\"</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGdrIN4ChnIhwC2EAXMumFKAOYDc+ywAJhSAK7EBG0jAvrlwIANnHTo0mKAEEECAPYdwOJkVIUqNEAyat2XXlEZNFILRwRgFUABTrylanQA0zNoUPQAlKoIEwAAtgdAA6B2QAXkISCEZ-ZCCQ0NYo93jkQUFhBXMwZA5pCgwsaJAIAHcpaDlFZTBbACIAWQ4oAAdAgE9GtwBGb3ogA'>Try</a></div></pre>\n<p>您可以使用接口对参数进行注释，并将值返回给函数：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.name: string' >name</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) User.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---分割线---</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getAdminUser(): User' >getAdminUser</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">//...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function deleteUser(user: User): void' >deleteUser</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) user: User' >user</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface User' >User</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEtIBcCm8AzAQwGNdQBVFfUAbzVFEiIFtcAuUFbeLAcwDcDUBgAmnSAFcWAI3xCAvmhCgAtOsBgSoCclQP1+61WgKTIJbBmiRQfXNgCCollir4AFAEpOz+HWEgAdAFoSobGpuaWorgANja4Xi6S1PCeSW4+jCoBfkFAA'>Try</a></div></pre>\n<p>JavaScript 中已经有一些基本类型可用：<code>boolean</code>、 <code>bigint</code>、 <code>null</code>、<code>number</code>、 <code>string</code>、 <code>symbol </code> 和 <code>undefined</code>，它们都可以在接口中使用。TypeScript 将此列表扩展为更多的内容，例如 <code>any</code> （允许任何类型）、<a href=\"/play#example/unknown-and-never\"><code>unknown</code></a> （确保使用此类型的人声明类型是什么）、 <a href=\"/play#example/unknown-and-never\"><code>never</code></a> （这种类型不可能发生）和 <code>void</code> （返回 <code>undefined</code> 或没有返回值的函数）。</p>\n<p>构建类型有两种语法： <a href=\"/play/?e=83#example/types-vs-interfaces\">接口和类型</a>。 你应该更喜欢 <code>interface</code>。当需要特定功能时使用 <code>type</code> 。</p>\n<h2 id=\"组合类型\" style=\"position:relative;\"><a href=\"#%E7%BB%84%E5%90%88%E7%B1%BB%E5%9E%8B\" aria-label=\"组合类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组合类型</h2>\n<p>使用 TypeScript，可以通过组合简单类型来创建复杂类型。有两种流行的方法可以做到这一点：联合和泛型。</p>\n<h3 id=\"联合\" style=\"position:relative;\"><a href=\"#%E8%81%94%E5%90%88\" aria-label=\"联合 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>联合</h3>\n<p>使用联合，可以声明类型可以是许多类型中的一种。例如，可以将 <code>boolean</code> 类型描述为 <code>true</code> 或 <code>false</code> ：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MyBool = boolean' >MyBool</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAsiBCB7RAbKBeKwBOBXaAPlAGYCGKAzhANxA'>Try</a></div></pre>\n<p>_注意：_如果将鼠标悬停在上面的 <code>MyBool</code> 上，您将看到它被归类为 <code>boolean</code>。这是结构化类型系统的一个属性。下面有更加详细的信息。</p>\n<p>联合类型的一个流行用法是描述 <code>string</code> 或者 <code>number</code> 的<a href=\"/docs/handbook/2/everyday-types.html#literal-types\">字面量</a>的合法值。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type WindowStates = \"open\" | \"closed\" | \"minimized\"' >WindowStates</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"open\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"closed\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"minimized\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type LockStates = \"locked\" | \"unlocked\"' >LockStates</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"locked\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"unlocked\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9' >PositiveOddNumbersUnderTen</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA6glgOwCYHsDuBlYBDYEDOUAvFAEQqQKlQA+ZAxgDYr4RLV2kC2icPAXm1IBuAFChIUADIp6Aayy4CxMs3lDaZAK4I1coWInQACizjA4ANwgB5JEgByWrgCMIAJ3wBVZB4AqEAgqAIyaAMyaAKyaAOyaAJzCQA'>Try</a></div></pre>\n<p>联合也提供了一种处理不同类型的方法。例如，可能有一个函数处理 <code>array</code> 或者 <code>string</code>：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function getLength(obj: string | string[]): number' >getLength</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAcwKZQDKrMqALACjgCMArALkQGcoAnGHRAH2roeQG0BdASkQG8AUIkS10IWkhKkAdABtsuPAG5BAXyA'>Try</a></div></pre>\n<p>要了解变量的类型， 使用 <code>typeof</code>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>推断语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td><code>typeof s === \"string\"</code></td>\n</tr>\n<tr>\n<td>number</td>\n<td><code>typeof n === \"number\"</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>typeof b === \"boolean\"</code></td>\n</tr>\n<tr>\n<td>undefined</td>\n<td><code>typeof undefined === \"undefined\"</code></td>\n</tr>\n<tr>\n<td>function</td>\n<td><code>typeof f === \"function\"</code></td>\n</tr>\n<tr>\n<td>array</td>\n<td><code>Array.isArray(a)</code></td>\n</tr>\n</tbody>\n</table>\n<p>例如，你可以使函数根据传递的是字符串还是数组返回不同的值：</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function wrapInArray(obj: string | string[]): string[]' >wrapInArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string' style='border-bottom: solid 2px lightgrey;'>obj</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(parameter) obj: string</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAdwE4EMAOBJMBBVDATwAo4AjAKwC5EBnKVGMAc0QB97HmWBtAXQCUiAN4AoRIhjBEJKEUwBTODIqVEAXi2IARAyasdw8ZMmpFUEKiS81-ANxiA9E9NvTAPQD8ExAF9fc0trRDVHPyA'>Try</a></div></pre>\n<h3 id=\"泛型\" style=\"position:relative;\"><a href=\"#%E6%B3%9B%E5%9E%8B\" aria-label=\"泛型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>泛型</h3>\n<p>泛型为类型提供变量。一个常见的例子是数组。没有泛型的数组可以包含任何内容。带有泛型的数组可以描述数组包含的值。</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">StringArray</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NumberArray</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ObjectWithNameArray</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }&gt;;</span></div></code></div></pre>\n<p>你可以声明自己使用泛型的类型：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Backpack&lt;Type>' >Backpack</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Backpack&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) Backpack&lt;Type>.add: (obj: Type) => void' >add</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Type' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Backpack&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(property) Backpack&lt;Type>.get: () => Type' >get</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Type in Backpack&lt;Type>' >Type</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 这一行是一个简写，可以告诉 TypeScript 有一个常量，叫做`backpack`，并且不用担心它是从哪</span></div><div class='line'><span style=\"color: #008000\">// 里来的。</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const backpack: Backpack&lt;string>' >backpack</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Backpack&lt;Type>' >Backpack</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 对象是一个字符串，因为我们在上面声明了它作为 Backpack 的变量部分。</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const object: string' >object</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const backpack: Backpack&lt;string>' >backpack</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Backpack&lt;string>.get: () => string' >get</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 因为 backpack 变量是一个字符串，不能将数字传递给 add 函数。</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const backpack: Backpack&lt;string>' >backpack</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Backpack&lt;string>.add: (obj: string) => void' >add</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>23</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAEI0DWADswDwAqAni5AHygA3nlChKAEwmoAFHABGAK1Q8+ASlABeQQDc4BCQG5RoAOaQSsjdtCrIxgL548IUIE34wABygGQjA9GYfAVHKAAd6AmYqAMP+A98qAp3KAUiqAk9G2vJAAytTQBCwkoICQ5gGAHHqA84mhgNfKgFoKAAbyzGzUTGWhgG56gChygLBygBSugKNGgMP6gMHaPoBzcoBXKi5ggDOJgKbmgCFugEAMeBKQ1AA2lNB01HBEiJmVNdVMqIw7HJtpRKb8xsOggJ-agIYxfv6A6tqAZN6ATHKhgAdqgFxygIhGgDdygBTqgCg5QBG6YAHjUAcGaAMLluoAdeU+DCqzFAE0AG8r5QAXCYAwJRmaw2mQUinmmU0oG2rGYADpzCQZGoLq4vqTETVQGj7s83s1AL8BgDAdQAOpg9AATygCQEwCbfuIpKBAL+KfJmZN2FMkEhkmDpQA'>Try</a></div></pre>\n<h2 id=\"结构化的类型系统（structural-type-system）\" style=\"position:relative;\"><a href=\"#%E7%BB%93%E6%9E%84%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%EF%BC%88structural-type-system%EF%BC%89\" aria-label=\"结构化的类型系统（structural type system） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结构化的类型系统（structural type system）</h2>\n<p>TypeScript 的一个核心原则是类型检查基于对象的属性和行为（type checking focuses on the <em>shape</em> that values have）。这有时被叫做“鸭子类型”或“结构类型”（structural typing）。</p>\n<p>在结构化的类型系统当中，如果两个对象具有相同的结构，则认为它们是相同类型的。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// 打印 \"12, 26\"</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const point: {&#10;    x: number;&#10;    y: number;&#10;}' >point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const point: {&#10;    x: number;&#10;    y: number;&#10;}' >point</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnnjBSARhg6EMgA26AOYYsACgAOZWeACUuJglEBndOIgA6SVLkADACQ4FBolwA0yS9eZdTqxjzwB6L8kDKRoAOysgARACMAEwO4QBswXhaINrYCpjgyAC8uMRkEQ6syDHIXIzGKmCKqWDuQA'>Try</a></div></pre>\n<p><code>point</code> 变量从未声明为 <code>Point</code> 类型。 但是，在类型检查中，TypeScript 将 <code>point</code> 的结构与 <code>Point</code>的结构进行比较。它们的结构相同，所以代码通过了。</p>\n<p>结构匹配只需要匹配对象字段的子集。</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const point3: {&#10;    x: number;&#10;    y: number;&#10;    z: number;&#10;}' >point3</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) z: number' >z</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">89</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const point3: {&#10;    x: number;&#10;    y: number;&#10;    z: number;&#10;}' >point3</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 打印 \"12, 26\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const rect: {&#10;    x: number;&#10;    y: number;&#10;    width: number;&#10;    height: number;&#10;}' >rect</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">33</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) width: number' >width</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) height: number' >height</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">80</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const rect: {&#10;    x: number;&#10;    y: number;&#10;    width: number;&#10;    height: number;&#10;}' >rect</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 打印 \"33, 3\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const color: {&#10;    hex: string;&#10;}' >color</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) hex: string' >hex</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"#187ABF\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const color: {&#10;    hex: string;&#10;}' >color</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '{ hex: string; }' is not assignable to parameter of type 'Point'.\n  Type '{ hex: string; }' is missing the following properties from type 'Point': x, y</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '{ hex: string; }' is not assignable to parameter of type 'Point'.\n  Type '{ hex: string; }' is missing the following properties from type 'Point': x, y</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAApzEmgDeeooAHqkQK4BbAEYwA3B1ABPXoJHRxAXzx5yfItRIE4RUABs4Ac0bMAFAAdUx0gEo2E6tsRxdkAHT6DJgAYASVmdcuBQAaUD8AyQUva0U8EFAAWiTqPhIkhLwHIkQWMyZSDFAAXjZuVABGNFDpdAA2UIAvVAAOAE5QBXEPKxJzfJIMGNB4wGUjQAdlUAAiStC0WsnlLJzQaEgNYtKeUAwMatRd0AB3AgATEgALfYAGUPPIAgNzkharjq7DHpNVjSHRicmdqEMAtMo4WA59NANqxQHctpMAMTlZoAdgAggAhABikzeeG6-RMEIQMSAA'>Try</a></div></pre>\n<p>类和对象确定结构的方式没有区别：</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Point' >Point</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.x: number' >x</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Point' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Point.y: number' >y</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---分割线---</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class VirtualPoint' >VirtualPoint</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) VirtualPoint.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) VirtualPoint.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) VirtualPoint.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) VirtualPoint.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const newVPoint: VirtualPoint' >newVPoint</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor VirtualPoint(x: number, y: number): VirtualPoint' >VirtualPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">13</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">56</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function logPoint(p: Point): void' >logPoint</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const newVPoint: VirtualPoint' >newVPoint</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// 打印 \"13, 56\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAApzEmgDeeooAHqkQK4BbAEYwA3B1ABPXoJHRxAXzx5yfItRIE4RUABs4Ac0bMAFAAdUx0gEo2E6tsRxdkAHT6DJgAYASVmdcuBQAaUD8AyQUva0U8EFAAWiTAMCVAJyVAfr8khLxqXUpERFAANQJoEj5KXSsWdk4eUH5hMQlpBtlm+0cSaD4NBBN6xrlQ1qGYW1rOUBIACwJEQNAAXm5xKem5hcllqTXQJSUcrobIAHci6p2iM+LS8srqkwBGDFCcADYYvA9H6-PqmKgeKAZSNAA7KoAARC83u8IUA'>Try</a></div></pre>\n<p>如果对象或类具有所有必需的属性，则 TypeScript 将表示是它们匹配的，而不关注其实现细节。</p>\n<h2 id=\"下一步\" style=\"position:relative;\"><a href=\"#%E4%B8%8B%E4%B8%80%E6%AD%A5\" aria-label=\"下一步 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>下一步</h2>\n<p>这是对一般的 TypeScript 中使用的语法和工具的简要概述。参见：</p>\n<ul>\n<li>阅读完整手册<a href=\"/docs/handbook/intro.html\">由始至终</a> （30 分钟）</li>\n<li>探索 <a href=\"/play#show-examples\">Playground 上的示例</a></li>\n</ul>","headings":[{"value":"类型推断","depth":2},{"value":"定义类型","depth":2},{"value":"组合类型","depth":2},{"value":"联合","depth":3},{"value":"泛型","depth":3},{"value":"结构化的类型系统（structural type system）","depth":2},{"value":"下一步","depth":2}],"frontmatter":{"permalink":"/zh/docs/handbook/typescript-in-5-minutes.html","title":"为 JavaScript 程序员准备的 TypeScript","disable_toc":null,"handbook":null,"oneline":"学习 TypeScript 对 Javascript 的扩展","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-为-javascript-程序员准备的-typescript","slug":"/zh/docs/handbook/typescript-in-5-minutes.html","repoPath":"/packages/documentation/copy/zh/get-started/TS for JS Programmers.md","lang":"zh","modifiedTime":"2024-10-21T12:35:09.573Z"}},"staticQueryHashes":[]}