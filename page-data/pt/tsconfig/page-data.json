{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/pt/tsconfig","result":{"data":{"markdownRemark":{"id":"c482f15f-8309-5d37-866f-2bddb7f36f35","html":"<div class=\"tsconfig raised main-content-block markdown\"><article id='Top Level'>\n<h3 id=\"root-fields\" style=\"position:relative;\"><a href=\"#root-fields\" aria-label=\"root fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Fields</h3>\n<p>Starting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Arquivos - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica uma lista de arquivos permitidos para incluir no programa. Um erro ocorre se qualquer um dos arquivos não puder ser encontrado.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {},</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span></div><div class='line'><span style=\"color: #000000\">  ]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Esta opção é útil quando você tem uma quantia pequena de arquivos e não precisa utilizar um glob para se referir a diversos arquivos.\nSe você precisa utilizar glob, então use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Estender - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>O valor de <code>extends</code> é uma <em>string</em> que contém o caminho para outro arquivo de configuração do qual ele herdará.\nO caminho pode usar o estilo de resolução do Node.Js</p>\n<p>A configuração do aquivo base é carregada primeiro, e então sobrescrita por aquelas presentes no arquivo de configuração herdado. Todos os caminhos relativos encontrados no arquivo de configuração serão resolvidos relativamente ao arquivo de configuração em que estes se originaram.</p>\n<p>Vale notar que <code>files</code>, <code>include</code> e <code>exclude</code> da configuração que está sendo estendida <em>sobrescreve</em> aquelas definidas na configuração base, e circularidade entre arquivos de configuração não é permitida.</p>\n<p>Atualmente, a única propriedade de <em>top-level</em> que é excluída da herança é <a href=\"#references\"><code>references</code></a>.</p>\n<h5 id=\"exemplo\" style=\"position:relative;\"><a href=\"#exemplo\" aria-label=\"exemplo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#noImplicitAny'><data-lsp lsp=\"Enable error reporting for expressions and declarations with an implied `any` type..\">noImplicitAny</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Propriedades com caminhos relativos encontrados no arquivo de configuração, e que não sejam excluídas da herança, serão resolvidos relativamente ao arquivo de configuração em que estas se originaram.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Incluir - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica um array de nomes de arquivos ou padrões a serem incluídos no programa.\nEsses nomes de arquivo são resolvidos em relação ao diretório que contém o arquivo tsconfig.json.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Isso incluirá:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock</span></div></code></div></pre>\n<p><code>include</code> e <code>exclude</code> suporta caracteres curinga para criar padrões globais:</p>\n<ul>\n<li><code>*</code> corresponde a zero ou mais caracteres (excluindo separadores de diretório)</li>\n<li><code>?</code> corresponde a qualquer caractere (excluindo separadores de diretório)</li>\n<li><code>**/</code> corresponde a qualquer diretório aninhado a qualquer nível</li>\n</ul>\n<p>Se um padrão global não incluir uma extensão de arquivo, apenas os arquivos com extensões compatíveis serão incluídos (por exemplo: <code>.ts</code>, <code>.tsx</code>, e <code>.d.ts</code> por padrão, com <code>.js</code> e <code>.jsx</code> se <code>allowJs</code> for definido como verdadeiro).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[]</code> if <a href=\"#files\"><code>files</code></a> is specified; <code>**/*</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li><li><p><a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Excluir - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica uma array de nomes de arquivos ou padrões que devem ser ignorando durante o <code>include</code>.</p>\n<p><strong>Importante</strong>: <code>exclude</code> altera <em>apenas</em> os arquivos que estão nos resultados da configuração <code>include</code>.\nUm arquivo marcado como <code>exclude</code> ainda pode fazer parte do seu código através de uma instrução <code>import</code>, uma inclusão de <code>types</code>, uma diretiva <code>/// &#x3C;reference</code> ou sendo relacionado na lista de <code>files</code>.</p>\n<p>Não é um mecanismo que <strong>impede</strong> um arquivo ser incluído no código base - apenas altera o que a configuração <code>include</code> pode selecionar.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>node_modules bower_components jspm_packages <a href=\"#outDir\"><code>outDir</code></a></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a></p>\n</li><li><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> Referências - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>As referências de projetos são uma forma de estruturar seus programas TypeScript em partes menores.\nUsar referências de projetos pode melhorar muito o tempo de construção e de interação com o editor, forçar uma separação lógica entre os elementos e organizar seu código de novas formas e métodos mais aprimorados.</p>\n<p>Você pode ler mais sobre como as referências funcionam na seção <a href=\"/docs/handbook/project-references.html\">Referências de Projetos</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='compilerOptions'>\n<h3 id=\"opções-do-compilador\" style=\"position:relative;\"><a href=\"#op%C3%A7%C3%B5es-do-compilador\" aria-label=\"opções do compilador permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opções do compilador</h3>\n<p>Essas são a maioria das opções do TypeScript e descrevem como o compilador deve funcionar.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Type_Checking_6248\">Type Checking</a></li>\n<li><a href=\"#Modules_6244\">Modules</a></li>\n<li><a href=\"#Emit_6246\">Emit</a></li>\n<li><a href=\"#JavaScript_Support_6247\">JavaScript Support</a></li>\n<li><a href=\"#Editor_Support_6249\">Editor Support</a></li>\n<li><a href=\"#Interop_Constraints_6252\">Interop Constraints</a></li>\n<li><a href=\"#Backwards_Compatibility_6253\">Backwards Compatibility</a></li>\n<li><a href=\"#Language_and_Environment_6254\">Language and Environment</a></li>\n<li><a href=\"#Compiler_Diagnostics_6251\">Compiler Diagnostics</a></li>\n<li><a href=\"#Projects_6255\">Projects</a></li>\n<li><a href=\"#Output_Formatting_6256\">Output Formatting</a></li>\n<li><a href=\"#Completeness_6257\">Completeness</a></li>\n<li><a href=\"#Command_line_Options_6171\">Linha de comando</a></li>\n<li><a href=\"#Watch_and_Build_Modes_6250\">Watch Options</a></li>\n</ul></nav>\n<div>\n<div class='category'>\n<h2 id='Type_Checking_6248' ><a href='#Type_Checking_6248' name='Type_Checking_6248' aria-label=\"Link to the section Type Checking\" aria-labelledby='Type_Checking_6248'>#</a>Type Checking</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Permitir Código Não Executado - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando:</p>\n<ul>\n<li><code>undefined</code> (padrão) dá sugestões como avisos para o editor</li>\n<li><code>true</code> todo o código não executável é ignorado</li>\n<li><code>false</code> exibe um erro de compilação quando código não executável é detectado</li>\n</ul>\n<p>Mude para false para desabilitar os avisos sobre código não executável.\nEstes avisos são somente sobre código que são provavelmente inalcançáveis e nunca serão executados por conta do uso da sintaxe do JavaScript como, por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Com <code>\"allowUnreachableCode\": false</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(n: number): boolean' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA'>Try</a></div></pre>\n<p>Isso não afeta os erros exibidos com base em código que <em>parece</em> ser inalcançável devido à análise de tipos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Permitir Labels Não Utilizadas - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Defina como false para desabilitar os avisos sobre labels não utilizadas.</p>\n<p>Labels são muito raras no JavaScript e, tipicamente, indicam uma tentativa de escrever um objeto literal:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function verificarIdade(idade: number): void' >verificarIdade</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idade: number' >idade</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Esquecemos o &apos;return&apos;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) idade: number' >idade</data-lsp></span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">18</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    <data-err>verificado</data-err>: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSb0mii0AJJMiTSAApJWnanoBbTtACUoAN55QoQgFFEARzqRRkE3ESg4oAHJoSHE6aBoAu1AlUH1DSFAAPlAARhwrW3t7BWglFW04VHFodwBuKIBfPAqgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Sempre Estrito - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Garante que seus arquivos sejam analisados no modo estrito do ECMAScript e emitam “use strict” para cada arquivo fonte.</p>\n<p>O modo <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">estrito do ECMAScript</a> foi introduzido no ES5 e fornece ajustes de comportamento para o runtime do engine JavaScript para melhorar o desempenho e faz um conjunto de erros serem lançados em vez de ignorá-los silenciosamente.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exactOptionalPropertyTypes-config'><a aria-label=\"Link to the compiler option: exactOptionalPropertyTypes\" id='exactOptionalPropertyTypes' href='#exactOptionalPropertyTypes' name='exactOptionalPropertyTypes' aria-labelledby=\"exactOptionalPropertyTypes-config\">#</a> Exact Optional Property Types - <code>exactOptionalPropertyTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on <code>type</code> or <code>interfaces</code> which have a <code>?</code> prefix.</p>\n<p>For example, this interface declares that there is a property which can be one of two strings: ‘dark’ or ‘light’ or it should not be in the object.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">UserDefaults</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// The absence of a value represents 'system'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">colorThemeOverride</span><span style=\"color: #000000\">?: </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Without this flag enabled, there are three values which you can set <code>colorThemeOverride</code> to be: “dark”, “light” and <code>undefined</code>.</p>\n<p>Setting the value to <code>undefined</code> will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn’t quite accurate; <code>colorThemeOverride: undefined</code> is not the same as <code>colorThemeOverride</code> not being defined. For example, <code>\"colorThemeOverride\" in settings</code> would have different behavior with <code>undefined</code> as the key compared to not being defined.</p>\n<p><code>exactOptionalPropertyTypes</code> makes TypeScript truly enforce the definition provided as an optional property:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function getUserSettings(): UserDefaults' >getUserSettings</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"dark\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"light\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// But not:</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const settings: UserDefaults' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UserDefaults.colorThemeOverride?: \"dark\" | \"light\"' >colorThemeOverride</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span><span class=\"code\">2412</span></span><span class=\"error-behind\">Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9efACwBGXkww5EFAGYJIoAKoMKAEUgKArvkQNQAbyahQ8LPizEaAC0gBbSMgBu7DABNIAfh4Aid7DEANa+oAA+oL74GADmNoi+ANxMAL5MnvD4gUpy2jhI2DigMZCIqhQAyqWYODEMABQAlDzlxJo6egzJrAC0ffDaiH09TOY4DIigaog1daAAvMWlrVUz0nVNydOzDAB05pbWdo4ubp4LkQHBSUzb63sHVrYOTq7ExB5Ki1Gx8TcsYAAQoNQDgsIguLdqvd9hYnsdXmcvqA8p45NJIO5EkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> Sem casos de Fallthrough no Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Reportar erros para casos de fallthrough em instruções switch.\nGarante que qualquer caso não vazio dentro de uma instrução switch inclua <code>break</code> ou<code>return</code>.\nIsso significa que você não enviará acidentalmente um bug de fallthrough.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const a: number' >a</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">:</span></div><span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"par\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"impar\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARAAO8Bjh1oZOLmSgAIye3j6y-kEhYeH0KtGx8V5Oahik8ADWhgC+QA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> Sem 'Any' Implícito - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Em alguns casos, onde nenhuma anotação de tipo está presente, o TypeScript retornará o tipo <code>any</code> para uma variável, quando não puder inferir o tipo.</p>\n<p>Isto pode fazer com que alguns erros sejam omitidos, por exemplo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Nenhum erro?</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">42</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQAOWqQAFg3ihqAJ0XQA-MNDp2laMmoA6ZNADmPfZQYAjLIq4BmXrwDctAL71uAFgBMzoA'>Try</a></div></pre>\n<p>Ativando <code>noImplicitAny</code> no entanto, o TypeScript irá emitir um erro sempre que inferir <code>any</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(s: any): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) s: any' >s</data-lsp></data-err></span><span style=\"color: #000000\">) {</span></div><span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: any' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >subtr</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitOverride-config'><a aria-label=\"Link to the compiler option: noImplicitOverride\" id='noImplicitOverride' href='#noImplicitOverride' name='noImplicitOverride' aria-labelledby=\"noImplicitOverride-config\">#</a> No Implicit Override - <code>noImplicitOverride</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.</p>\n<p>For example, imagine you are modeling a music album syncing system:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaATA9gO4B2I+YuAFAJQbY7QD0j0AIgKYBmYSIALtATsAFmABuAS3wAnegF9MCzKEgwAyqOntc8ZGnYAPPu2K4Yu1HRwESZCjSsNm0APJj206RNztoffNAA5uwCEsScAZzS+GgoYMQAntAQ+EjSwOwQ8opAA'>Try</a></div></pre>\n<p>Then when you add support for machine-learning generated playlists, you refactor the <code>Album</code> class to have a ‘setup’ function instead:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Default behavior</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from algorithm</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) SharedAlbum.download(): void' >download</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Override to get info from many sources</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaECmALkgA4AUAlBtjtAPS3QAieAZmEiAdAngBZgA3AJYB7AE7UAvpmmZQkGAFkAMvGRo8ADwJ4AdgBMYa1FRz4iZSlhp0GAeQF4xYofrzQCI6AHNC0IbosXixiImhgIN7iQgS8KFIymHLgUNAAyvxiePrGGtp6hnCIJtbQ+iIA7rogImD6FKY09NAOTi5uHl6+XAFB0CFh0ChgugCeuCJIYsB4EAmSQA'>Try</a></div></pre>\n<p>In this case, TypeScript has provided no warning that <code>download</code> on <code>SharedAlbum</code> <em>expected</em> to override a function in the base class.</p>\n<p>Using <code>noImplicitOverride</code> you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword <code>override</code>.</p>\n<p>The following example has <code>noImplicitOverride</code> enabled, and you can see the error received when <code>override</code> is missing:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Album.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class MLAlbum' >MLAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">override</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) MLAlbum.setup(): void' >setup</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class SharedAlbum' >SharedAlbum</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-err><data-lsp lsp='(method) SharedAlbum.setup(): void' >setup</data-lsp></data-err></span><span style=\"color: #000000\">() {}</span></div><span class=\"error\"><span>This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><span class=\"code\">4114</span></span><span class=\"error-behind\">This member must have an 'override' modifier because it overrides a member in the base class 'Album'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwPIDcBTAJyNQBMCAoECYo6IgZwC5QAWARg7cvWQENGjUAEFkAIwCu8UAG9KoUIwJZJiABQBKOQF9Ke3gKGgAsgBkxUmQQAeWApDLDL0uQtDRCJcgSUq1Wrr6lIaCwgDKABb8RARkLtZ2Dk6iEq7yisqqGtqyejpAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.3\" href=\"/docs/handbook/release-notes/typescript-4-3.html\">4.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> Sem Retornos Implícitos - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando habilitado, o TypeScript verificará todos os caminhos de código em uma função para garantir que eles retornem um valor.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function procurarFabricanteDeFonesDeOuvido(cor: \"azul\" | \"preto\"): string' >procurarFabricanteDeFonesDeOuvido</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) cor: \"azul\" | \"preto\"' >cor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"azul\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"preto\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) cor: \"azul\" | \"preto\"' >cor</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"azul\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgAO8lp0AhtAGIcBG0WpQ7lqkACKRuDSIkkB5UgDdaAEzgAKSglQAiDgC9SAG12gAPqF0tI1OLoCUqRNUHkA5qADehUKFrEoFoIoAC84VaGJo7evn6g0LbsjLp8kBzUiLoA3HEAvqCQxoiQsfFWfHAlOfmEeUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> Sem 'This' Implícito - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Emite erro nas expressões ‘this’ com tipo ‘any’ implícito.</p>\n<p>Por exemplo, a classe abaixo retorna uma função que tenta acessar <code>this.largura</code> e <code>this.area</code> – mas o contexto para <code>this</code> dentro da função dentro de <code>funcaoObterArea</code> não é a instância de <code>Retangulo</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Retangulo' >Retangulo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Retangulo.largura: number' >largura</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Retangulo.altura: number' >altura</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) largura: number' >largura</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) altura: number' >altura</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Retangulo.largura: number' >largura</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) largura: number' >largura</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Retangulo.altura: number' >altura</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) altura: number' >altura</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Retangulo.funcaoObterArea(): () => number' >funcaoObterArea</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >largura</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >altura</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQAuJAdgOYCuRcoA3nqKKdC9BKp6zALYAjGAG5uoEkRrNBwsZOgzZBOPUQ1ozAjQQAKPgKGgREmABo5CpRatqAlJ1k8aACwCWiAHRmjqAAvLwk-I4yPJ6+AfKKgqH2iSTRoAC+eLIAZsz0BCRwAPLiNDAAgtCQJMZuXDGg1Yn0oHkFND7aoHXujTzNSq3efoER5qAAVKAj8Q6C6TwZ6VkZQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> Sem acesso a propriedade pela assinatura do índice - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Esta configuração garante a consistência entre acessar o campo pela sintaxe “ponto” (<code>obj.chave</code>), e “indexado” (<code>obj[\"chave\"]</code>) e a forma que a propriedade é declarada no tipo.</p>\n<p>Sem esta flag, o Typescript irá permitir que você use a sintaxe de ponto para acessar os campos que não estão definidos:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ConfiguracoesDoJogo' >ConfiguracoesDoJogo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Propriedades diretamente conhecidas</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.velocidade: \"rápido\" | \"médio\" | \"lento\"' >velocidade</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"rápido\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"médio\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"lento\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.qualidade: \"alta\" | \"baixa\"' >qualidade</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"alta\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"baixa\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Assume qualquer coisa desconhecida para a interface</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// como um string.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) chave: string' >chave</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' >configuracoes</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function obterConfiguracoes(): ConfiguracoesDoJogo' >obterConfiguracoes</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' style='border-bottom: solid 2px lightgrey;'>configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.velocidade: \"rápido\" | \"médio\" | \"lento\"' >velocidade</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const configuracoes: ConfiguracoesDoJogo</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' style='border-bottom: solid 2px lightgrey;'>configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.qualidade: \"alta\" | \"baixa\"' >qualidade</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const configuracoes: ConfiguracoesDoJogo</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Acessadores de chaves desconhecidas são permitidas</span></div><div class='line'><span style=\"color: #008000\">// neste projeto, e são do tipo `string`</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' style='border-bottom: solid 2px lightgrey;'>configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(index) ConfiguracoesDoJogo[string]: string' >nomeDeUsuario</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const configuracoes: ConfiguracoesDoJogo</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgAmkBjAGwENpJQAzAVwDsCAXASzltDgCMGYBhVypgHNq0EgTiREACgCUqPrQHDR4yQBE4AKTiC4AbmwhQAWlMFqDU8exNa3aJTEUFSkWImIN23aADe2UFAjAAV4AAdoJkhcEnxEUFwmcgYSAFtIOwpxWgALQiYYxADQADdIIjgCAtjIVAAiaABDsIK4OtAAH1A61IBLxLbO7qIMhjaDQIBHahIiavx62ZT2rrqOEiYADxI6g2KjAEFERGp00GnZ6ZhQcSZEEgTJbLyqmNAwsgeH23tHAkh9mBxKk4KBTqBEAxIrRBAA6YoAbQIORIZVQkOhggAuuiobZBAYAL7YbDZSE3fhCNyqeIAXnYXF4lOU7kksgM2VcKg8sLKFVeNQMRkCItAAD0APyk5nUnkXOYxfBCsCiwKSkmHf7HWIISSPG4osrxOLPfKFCEAY9BYRgqSYzEKhjAtEk3He8AAVpAxgAaUAURBWhKg5hhUEAAwx+PD0sUVO5klhtDg6TUkAAqicyCxlaq1RKgA'>Try</a></div></pre>\n<p>Ativar esta flag irá gerar um erro porque o campo desconhecido usa a sintaxe ponto invés da sintaxe indexada.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' >configuracoes</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function obterConfiguracoes(): ConfiguracoesDoJogo' >obterConfiguracoes</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' >configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.velocidade: \"rápido\" | \"médio\" | \"lento\"' >velocidade</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' >configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) ConfiguracoesDoJogo.qualidade: \"alta\" | \"baixa\"' >qualidade</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Este precisa ser configuracoes[\"nomeDeUsuario\"]</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const configuracoes: ConfiguracoesDoJogo' style='border-bottom: solid 2px lightgrey;'>configuracoes</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(index) ConfiguracoesDoJogo[string]: string' >nomeDeUsuario</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'nomeDeUsuario' comes from an index signature, so it must be accessed with ['nomeDeUsuario'].</span><span class=\"code\">4111</span></span><span class=\"error-behind\">Property 'nomeDeUsuario' comes from an index signature, so it must be accessed with ['nomeDeUsuario'].</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>const configuracoes: ConfiguracoesDoJogo</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgQQHZwAK8ADjAC4CeAggMZ2SKIBi8AtgJL4AmkAHgGUAlgHN8AQwoBXaJGx86AGwlzQAM2n46FYXHyg4AIwowAwvvVjZEunCYAKAJSoL+K6Jt2mAETgApOFE4AG5sYXxTaHVbSFA3Dy97RD9A4NAAb2xQUAA3SCU4OmEeCT5UACJoAEPSErgK0AAfUAr2AEuePUaWiqVISIawnIBHaQklErLISomKCR7WowlhfgXh0ABtOgALCXzURApoCNEAXUPj07CAX1wwAFonumkKJ4fsO3wj0C-E6FsyVAAF5DCZzJZrADvIhnGE-lDAUwAHT5QrFUp8eGQzzQ5LIsYTKZY7D3UAAUSOcVIcmKiAkoEQMF+OKSTE2FUI7EgPkgAFVEOMTg0zp9WXiUVyefzBao9GE8DklaAAHoAfiAA'>Try</a></div></pre>\n<p>O objetivo desta flag é para sinalizar a intenção em sua sintaxe de chamada sobre quão certo você está sobre a existência desta propriedade.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript tem uma maneira para descrever objetos que têm chaves desconhecidas, mas valores conhecidos, através da assinatura de índice.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Propriedades desconhecidas são cobertas por esta assinatura de índice.</span></div><div class='line'><span style=\"color: #000000\">  [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) propName: string' >propName</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Declarada como existente</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Não declarada, mas por causa da assinatura</span></div><div class='line'><span style=\"color: #008000\">// de índice, é considerada uma string</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnd: string' style='border-bottom: solid 2px lightgrey;'>nodeEnd</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnd: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AAVcAB14QAJnC0RKe8gjwALCAmA7K5AMc5kxgEbQwcSmpxRk+18jflQODAAVyg4ZD1kAFuQLWAkADphAG0NHDUGOEJJHn4AXRzpWQBfOT0EABsyFGMQbm9MTnQsXAIiMFIKIRpFZAARcyqwnQccfHsIAA9gbnaIGlr68gBPckzCZABeBowE5jYhRbBkHEptol3xIV76ZAA9AH45XoY7CMGyXTgAGmR8N2QHi8CDgwXI4RG-kCITCPSUkRicSQvwAl6M6pZoF9kMF-lxcjIFnh6iAcHp0Fotjs9iI+qgAPqoBjEa5KW6PIA'>Try</a></div></pre>\n<p>Ativar <code>noUncheckedIndexedAccess</code> adicionará <code>undefined</code> para qualquer campo não declarado no tipo.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface EnvironmentVars' >EnvironmentVars</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Declarada como existente</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const sysName: string' >sysName</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.NAME: string' >NAME</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const os: string' style='border-bottom: solid 2px lightgrey;'>os</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) EnvironmentVars.OS: string' >OS</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const os: string</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Não declarada, mas por causa da assinatura</span></div><div class='line'><span style=\"color: #008000\">// de índice, é considerada uma string</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nodeEnd: string | undefined' style='border-bottom: solid 2px lightgrey;'>nodeEnd</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const env: EnvironmentVars' >env</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(index) EnvironmentVars[string]: string | undefined' >NODE_ENV</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const nodeEnd: string | undefined</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AAVcAB14QAJnC0RKe8gjwALCAmA7K5AMc5kxgEbQwcSmpxRk+18jflQODAAVyg4ZD1kAFuQLWAkADphAG0NHDUGOEJJHn4AXRzpWQBfGkVkAAEQHABVEAQzBABrbQBJWIgAD20mBCRycjKlAFpRhGCwUeGaPQQAGzIUYxBub0xOdCxcAiIwUgohIeQAEXMFsJ0HHHx7LuBuXYgaZdXyAE9yTMJkAF41jASzDYQheYGQOEofyIAPEQnK9GQAD0APxycoMOwRM5kXRwAA0yHwbmQHi8CDgwXI4Uu-kCITCR0iMTiSAJAEuritLNBcchgkSuLkZM88Ktqnp0Fpfv9ASJjqgAPqoBjEOFKBEooA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> Sem Variáveis Locais Não Utilizadas - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Reporta erros em variáveis locais não utilizadas.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const criaTeclado: (modeloID: number) => {&#10;    tipo: string;&#10;    modeloID: number;&#10;}' >criaTeclado</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) modeloID: number' >modeloID</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='const modeloPadraoID: 23' >modeloPadraoID</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>'modeloPadraoID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modeloPadraoID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: string' >tipo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"teclado\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modeloID: number' >modeloID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25AJa4AKimz5caaKAC8oABQBbaGhT5oASQAi9REoBGFAJRyAfKADeRUPy69QKtRoAKU8ri3a5oAEwsAbhtQchQeBHJIK1AeQQAHaHoAIh5xSWkkgBpHVXUvUABfIKKgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> Sem Parâmetros Não Utilizados - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Reporta erros em parâmetros não utilizados em funções.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const criaTecladoPadrao: (modeloID: number) => {&#10;    tipo: string;&#10;    modeloID: number;&#10;}' >criaTecladoPadrao</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) modeloID: number' >modeloID</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><span class=\"error\"><span>'modeloID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modeloID' is declared but its value is never read.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const modeloPadraoID: 23' >modeloPadraoID</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">23</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: string' >tipo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"teclado\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) modeloID: number' >modeloID</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const modeloPadraoID: 23' >modeloPadraoID</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjgCWWACoouAGyxpo2NHmigAvKAAU+aGhRToASQAijRPgBGpAJSqAfKADe5UIN79QWnXoVKjq0ACY2AG4nUBxiBBxIB1AiYQAHaEYAIhJpWWhkgBp3bV0DY1zPeVkfQ1AAXxCqoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Modo estrito - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A opção <code>strict</code> permite uma ampla gama de comportamento de verificação de tipo que resulta em melhores garantias de correção do programa.\nAtivar isso equivale a ativar todas as opções da <em>família do modo restrito</em>, que são descritas abaixo.\nVocê pode desativar as verificações de família de modo restrito individualmente conforme necessário.</p>\n<p>Versões futuras do TypeScript podem introduzir verificação rigorosas adicionais dentro desta opção, portanto, as atualizações do TypeScript podem resultar em novos erros de tipo em seu programa.\nQuando apropriado e possível, uma opção correspondente será adicionado para desativar esse comportamento.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a></p>\n</li><li><p><a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a></p>\n</li><li><p><a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a></p>\n</li><li><p><a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a></p>\n</li><li><p><a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a></p>\n</li><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li><li><p><a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li><li><p><a href='#useUnknownInCatchVariables' aria-label=\"Jump to compiler option info for useUnknownInCatchVariables\" ><code>useUnknownInCatchVariables</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Bind Call Apply Restritos - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido, o TypeScript verificará se os métodos integrados das funções <code>call</code>, <code>bind</code> e <code>apply</code> são invocados com os argumentos corretos para a função subjacente:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Com strictBindCallApply ativado</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n1: number' >n1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n2: number' >n2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.call&lt;undefined, [x: string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizDZOAW1AwEyNFjyFS5CqFzR4AN1yZOTAGZ10yeJ3Sgj6ABQAPGvIwBzAJSgA3k1ChYDaDpYKxJcHgYASXRoBzcAbiYAX3FESxhQdABGUABea3QAOkQCfFtTTAYjDAZMABpQACJMgAYG+JS06Ay+XPyikrKsSuq66wJIBnigA'>Try</a></div></pre>\n<p>Caso contrário, essas funções aceitarão qualquer argumento e retornarão <code>any</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Com strictBindCallApply desativado</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function parseInt(string: string, radix?: number | undefined): number' >parseInt</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Nota: Sem erro; tipo do retorno é &apos;any&apos;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const n: any' >n</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): number' >fn</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any' >call</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIo2A9gLagwLI0WPIVLkKoTI0i5o8AG65MnZrQCu6ZPE7o66ABQAPGvwwBzAJSgA3s1ChYjaGti6SuWEwCS6aEYsA3MwAvqzsAHKc0Lg0AMqMvIywsJwBoHIknJJZjtCcrlkAl6AA5LjoFCXMiDowoLoAvHoAdIgE+PoaUrQYjJgANHQMjIFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Tipo de Funções Restritos - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando ativado, esta opção faz com que os parâmetros das funções sejam verificados mais corretamente.</p>\n<p>Aqui está um exemplo básico com <code>strictFunctionTypes</code> desativado:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Atribuição não segura</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let func: StringOrNumberFunc' >func</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void' >StringOrNumberFunc</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// Chamada não segura - vai quebrar</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='let func: (ns: string | number) => void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACCEUlo8ADnAMc4ZcP5pMJosLTMStA07FThQsIx8cmp7JlcPh3OABa0CbTNtKMjTJPToAC0DbTwoACOaKRJ07Cs7NwAjAAM3iAA'>Try</a></div></pre>\n<p>Com <code>strictFunctionTypes</code> ativado, o erro é detectado corretamente:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOuNumeroFn = (ns: string | number) => void' >StringOuNumeroFn</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ns: string | number' >ns</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Atribuição não segura é prevenida</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let func: StringOuNumeroFn' >func</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type StringOuNumeroFn = (ns: string | number) => void' >StringOuNumeroFn</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOuNumeroFn'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOuNumeroFn'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQB5cQEOANKAWgA1KEZSycADJwA7jADCAQ0SR63bgG4cAXxw4yATwAOkUADKbBycSgQAcgQAtjBwAGI0ALyg9EQooKzsXKAAPqBE0QBGMLyJAHygAG5wFAAmLjggoACCwYUEFADnAMdw+b0ZkJwE0NagAJegPtCQlZBEddY4kmS0xCSoQVmhEdGxCaDJdE5AA'>Try</a></div></pre>\n<p>Durante o desenvolvimento desse recurso, descobrimos um grande número de hierarquias de classes profundamente não seguras, incluindo algumas no DOM.\nPor causa disso, a configuração apenas se aplica a funções escritas na sintaxe <em>function</em>, não àquelas na sintaxe <em>method</em>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type PareceUmMetodo = {&#10;    func(x: string | number): void;&#10;}' >PareceUmMetodo</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string | number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Olá, \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: string' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) String.toLowerCase(): string' >toLowerCase</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Por fim, uma atribuição insegura, porém não detectada.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const m: PareceUmMetodo' >m</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type PareceUmMetodo = {&#10;    func(x: string | number): void;&#10;}' >PareceUmMetodo</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function fn(x: string): void' >fn</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const m: PareceUmMetodo' >m</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) func(x: string | number): void' >func</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACghgJwgYwgVQLYFkLAPYAmeUAvFAN4BQUUAZgK4B2yAFAB4BcUAzsAgJaMA5lAA+URvQwAjCAgCUXAG55+BANyUAvpsoNmwfnkZ1G7LrwHD5FalGTHueADYQAdM7xCWAIgDyzgCHADRQPlAA1FBsbvgAMngA7nIAwnDcECzy8ppalJQA9AWweAh0-BihUnBQcHz80vT8AOcAx8SCGUL0CHChYKUAlxgS7VAEuCjAcARwbpQOjLxQGFzwSKiYOPhEpLY0+shctIzB2poYbocsAIwADDlAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Checagem estrita de nulos - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando <code>strictNullChecks</code> é <code>false</code>, <code>null</code> e <code>undefined</code> são efetivamentes ignorados pela linguagem. Isso pode levar a erros inesperados em tempo de execução.</p>\n<p>Quando <code>strictNullChecks</code> é <code>true</code>, <code>null</code> e <code>undefined</code> têm seus próprios tipos distintos e você obterá um erro de tipo se tentar usá-los onde um valor concreto é esperado.</p>\n<p>Por exemplo, com este código TypeScript, <code>usuarios.find</code> você não tem garantia de que realmente encontrará um usuário, mas você pode escrever o código como se ele fosse:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nomeDeUsuarioLogado: string' >nomeDeUsuarioLogado</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuarios: {&#10;    nome: string;&#10;    idade: number;&#10;}[]' >usuarios</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Henrique\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Carol\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuarioLogado: {&#10;    nome: string;&#10;    idade: number;&#10;}' >usuarioLogado</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const usuarios: {&#10;    nome: string;&#10;    idade: number;&#10;}[]' >usuarios</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ nome: string; idade: number; }>.find(predicate: (value: {&#10;    nome: string;&#10;    idade: number;&#10;}, index: number, obj: {&#10;    nome: string;&#10;    idade: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    nome: string;&#10;    idade: number;&#10;} (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    nome: string;&#10;    idade: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    nome: string;&#10;    idade: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const nomeDeUsuarioLogado: string' >nomeDeUsuarioLogado</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const usuarioLogado: {&#10;    nome: string;&#10;    idade: number;&#10;}' >usuarioLogado</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoJQoC2+ACL4AqpDSt4CgDIK2VCQvIwEStgG569RSuig0h4wsigAvKAA2vSgoADeapr45ABEABL4SggAjmj4sQA0oPASVjGgwvygAL6ZoRFRWnHYrAoYWTl5UuQAzMVl9AC6zq7Kql5GCGYWVgoBnt7DkAB0FPBKEgAUS2gAlAEAfJ4z6loB-oF7OvpTJuaW1mvObpD1+DMYFqtnI5cKM7n510A'>Try</a></div></pre>\n<p>Configurar <code>strictNullChecks</code> para <code>true</code> irá gerar um erro de que você não garantiu a existência de <code>usuarioLogado</code> antes de tentar usá-lo.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nomeDeUsuarioLogado: string' >nomeDeUsuarioLogado</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuarios: {&#10;    nome: string;&#10;    idade: number;&#10;}[]' >usuarios</data-lsp></span><span style=\"color: #000000\"> = [</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Henrique\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  { </span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Carol\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">32</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuarioLogado: {&#10;    nome: string;&#10;    idade: number;&#10;} | undefined' >usuarioLogado</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const usuarios: {&#10;    nome: string;&#10;    idade: number;&#10;}[]' >usuarios</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;{ nome: string; idade: number; }>.find(predicate: (value: {&#10;    nome: string;&#10;    idade: number;&#10;}, index: number, obj: {&#10;    nome: string;&#10;    idade: number;&#10;}[]) => unknown, thisArg?: any): {&#10;    nome: string;&#10;    idade: number;&#10;} | undefined (+1 overload)' >find</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    nome: string;&#10;    idade: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) u: {&#10;    nome: string;&#10;    idade: number;&#10;}' >u</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const nomeDeUsuarioLogado: string' >nomeDeUsuarioLogado</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const usuarioLogado: {&#10;    nome: string;&#10;    idade: number;&#10;} | undefined' >usuarioLogado</data-lsp></data-err></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) idade: number' >idade</data-lsp></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>'usuarioLogado' is possibly 'undefined'.</span><span class=\"code\">18048</span></span><span class=\"error-behind\">'usuarioLogado' is possibly 'undefined'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqF1wAtpAAikAKqJRVPnAAycahRVxUPfruoBuIkR19MlBRGzs4RFAAXlAAbSJQUABvQxNIVAAiAAlIXX4AR1FIDIAaUD4VV3TQAEY0UABfEoTk1NNMqSo4cVLyyrVUQkbmgF0-AL0DUNt+R2dXOGiQsNnEADoAMz5dFQAKXdEASmiAPhC1o1NoqJjL8ysV+ycXN0O-QMRuyDXxZwPHuYvOBrCpVN5AA'>Try</a></div></pre>\n<p>O segundo exemplo falhou porque a função <code>find</code> do array se parece um pouco com esta simplificação:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Quando strictNullChecks: true</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Quando strictNullChecks: false, o undefined é removido do sistema de tipos,</span></div><div class='line'><span style=\"color: #008000\">// permitindo que você escreva um código que assume que sempre encontrou um resultado</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">find</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">predicate</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">index</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">S</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Inicialização restrita de propriedade - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido como <code>true</code>, o TypeScript gerará um erro quando uma propriedade de classe for declarada, mas não definida no construtor.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Conta' >Conta</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Conta.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Conta.tipo: string' >tipo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"usuario\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) Conta.email: string' >email</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Conta.endereco: string | undefined' >endereco</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Conta.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Note que this.email não foi atribuído</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAMJwB2ALiaAN56ig1wC2kqid0ASxoBzANytQdAQAc4oALygARAFdEKkoLhLxEyJxICivfkLF6aAExiQCcE4JGgAPqBVXIAMyGRLutnY0fNAqBHQIABQc3A5mAJTMEmx0ABYCiAB00ZAK7FyQ4mxsIKAAcnB0OQCOKjmp6Rn6hkTsAMdynnACoCSmAEYqALeWcBIAvnhjQA'>Try</a></div></pre>\n<p>No caso acima:</p>\n<ul>\n<li><code>this.nome</code> é atribuído especificamente.</li>\n<li><code>this.tipo</code> é atribuído por padrão.</li>\n<li><code>this.email</code> não é atribuído e gera um erro.</li>\n<li><code>this.endereco</code> é declarado como possível <code>undefined</code>, o que significa que não precisa ser atribuído.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useUnknownInCatchVariables-config'><a aria-label=\"Link to the compiler option: useUnknownInCatchVariables\" id='useUnknownInCatchVariables' href='#useUnknownInCatchVariables' name='useUnknownInCatchVariables' aria-labelledby=\"useUnknownInCatchVariables-config\">#</a> Use Unknown In Catch Variables - <code>useUnknownInCatchVariables</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from <code>any</code> to <code>unknown</code>. Allowing for code like:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// We have to verify err is an</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// error before using it as one.</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='var err: unknown' >err</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var err: Error' >err</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Error.message: string' >message</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFcGcFMFUB2BrRB7A7ogkogwgIYAuAxgBYBqBATgJYEBGANrNAFBHUCeoA3m6FAhQAOjFsAvqBLFyoABSxq1AJR8BQsAHVYoMgQBuuomlBG6AMx5LqoWtFAFEG4TbS2GsC+90xaiAHM7IkcHNERYEQ1aCwUbO0RoIicSWDRYgFFldzV+QUEScOg0FhEmNADFZREAW1ZoAgDYFQBuDQlJIA'>Try</a></div></pre>\n<p>This pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown <em>is</em> a Error subclass ahead of time. With the flag <code>useUnknownInCatchVariables</code> enabled, then you do not need the additional syntax (<code>: unknown</code>) nor a linter rule to try enforce this behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#strict\"><code>strict</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.4\" href=\"/docs/handbook/release-notes/typescript-4-4.html\">4.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Modules_6244' ><a href='#Modules_6244' name='Modules_6244' aria-label=\"Link to the section Modules\" aria-labelledby='Modules_6244'>#</a>Modules</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowArbitraryExtensions-config'><a aria-label=\"Link to the compiler option: allowArbitraryExtensions\" id='allowArbitraryExtensions' href='#allowArbitraryExtensions' name='allowArbitraryExtensions' aria-labelledby=\"allowArbitraryExtensions-config\">#</a> Allow Arbitrary Extensions - <code>allowArbitraryExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In TypeScript 5.0, when an import path ends in an extension that isn’t a known JavaScript or TypeScript file extension, the compiler will look for a declaration file for that path in the form of <code>{file basename}.d.{extension}.ts</code>.\nFor example, if you are using a CSS loader in a bundler project, you might want to write (or generate) declaration files for those stylesheets:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">css</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/* app.css */</span></div><div class='line'><span style=\"color: #800000\">.cookie-banner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #E50000\">display</span><span style=\"color: #000000\">: </span><span style=\"color: #0451A5\">none</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// app.d.css.ts</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">css</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">css</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// App.tsx</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">styles</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./app.css\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">styles</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">cookieBanner</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div></code></div></pre>\n<p>By default, this import will raise an error to let you know that TypeScript doesn’t understand this file type and your runtime might not support importing it.\nBut if you’ve configured your runtime or bundler to handle it, you can suppress the error with the new <code>--allowArbitraryExtensions</code> compiler option.</p>\n<p>Note that historically, a similar effect has often been achievable by adding a declaration file named <code>app.css.d.ts</code> instead of <code>app.d.css.ts</code> - however, this just worked through Node’s <code>require</code> resolution rules for CommonJS.\nStrictly speaking, the former is interpreted as a declaration file for a JavaScript file named <code>app.css.js</code>.\nBecause relative files imports need to include extensions in Node’s ESM support, TypeScript would error on our example in an ESM file under <code>--moduleResolution node16</code> or <code>nodenext</code>.</p>\n<p>For more information, read up <a href=\"https://github.com/microsoft/TypeScript/issues/50133\">the proposal for this feature</a> and <a href=\"https://github.com/microsoft/TypeScript/pull/51435\">its corresponding pull request</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowImportingTsExtensions-config'><a aria-label=\"Link to the compiler option: allowImportingTsExtensions\" id='allowImportingTsExtensions' href='#allowImportingTsExtensions' name='allowImportingTsExtensions' aria-labelledby=\"allowImportingTsExtensions-config\">#</a> Allow Importing TS Extensions - <code>allowImportingTsExtensions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--allowImportingTsExtensions</code> allows TypeScript files to import each other with a TypeScript-specific extension like <code>.ts</code>, <code>.mts</code>, or <code>.tsx</code>.</p>\n<p>This flag is only allowed when <code>--noEmit</code> or <code>--emitDeclarationOnly</code> is enabled, since these import paths would not be resolvable at runtime in JavaScript output files.\nThe expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between <code>.ts</code> files work.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Permitir Acesso Global UMD - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando setado para <code>true</code>, a flag <code>allowUmdGlobalAccess</code> deixa que você acesse todos os exports UMD como globais de dentro dos arquivos de módulo. Um arquivo de módulo é um arquivo que tem imports e/ou exports. Sem essa configuração, usando um export de dentro de um módulo UMD vai pedir uma declaração de import.</p>\n<p>Um caso de exemplo para essa flag seria um projeto web onde você sabe que uma biblioteca em particular (como o jQuery ou Lodash) vai estar sempre disponível em runtime, mas você não pode acessá-la com um import.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> URL Base - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite definir um diretório base para resolver nomes de módulo não absolutos.</p>\n<p>Você pode definir uma pasta raiz na qual pode fazer a resolução absoluta do arquivo. Por exemplo.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">URLBase\n├── ex.ts\n├── ola\n│   └── mundo.ts\n└── tsconfig.json</span></div></code></div></pre>\n<p>Com <code>\"baseUrl\": \"./\"</code> no projeto, o TypeScript vai procurar por arquivos começando na mesma pasta do <code>tsconfig.json</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">olaMundo</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"ola/mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">olaMundo</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Se você estiver cansado de importações sempre parecidas com <code>\"../\"</code> ou <code>\"./\"</code>, ou precisando\nalterá-las à medida que move arquivos, essa é uma ótima maneira de simplificar isso.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='customConditions-config'><a aria-label=\"Link to the compiler option: customConditions\" id='customConditions' href='#customConditions' name='customConditions' aria-labelledby=\"customConditions-config\">#</a> Custom Conditions - <code>customConditions</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--customConditions</code> takes a list of additional <a href=\"https://nodejs.org/api/packages.html#nested-conditions\">conditions</a> that should succeed when TypeScript resolves from an <a href=\"https://nodejs.org/api/packages.html#exports\"><code>exports</code></a> or <a href=\"https://nodejs.org/api/packages.html#imports\"><code>imports</code></a> field of a <code>package.json</code>.\nThese conditions are added to whatever existing conditions a resolver will use by default.</p>\n<p>For example, when this field is set in a <code>tsconfig.json</code> as so:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2022\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleResolution\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"bundler\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"customConditions\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"my-condition\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Any time an <code>exports</code> or <code>imports</code> field is referenced in <code>package.json</code>, TypeScript will consider conditions called <code>my-condition</code>.</p>\n<p>So when importing from a package with the following <code>package.json</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">jsonc</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"exports\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\".\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"my-condition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./foo.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"node\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./bar.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"import\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./baz.mjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"require\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./biz.mjs\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript will try to look for files corresponding to <code>foo.mjs</code>.</p>\n<p>This field is only valid under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Módulo - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Define o sistema de módulo para o programa. Consulte o capítulo <a href='/docs/handbook/modules.html#ambient-modules'> Módulos </a> do manual para obter mais informações. Você provavelmente deseja <code>\"CommonJS\"</code>.</p>\n<p>Aqui está um exemplo de saída para este arquivo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const twoPi: number' >twoPi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(alias) const valueOfPi: 3.142&#10;import valueOfPi' >valueOfPi</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRCgAtNux8i2zerBQ4SNJlDREAE3pUC1aKiatQAb268BwsaAC+oJDMuKigAEQUwHiEJGQEYWq0jCxs0ZxEAO64vlI8-EKi4gBUoKpAA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHADNUz6BDZC6rHqR0PeukgA6CZlIAPAA6wATukHC1ANx7FCpAPLsACqlABeUAGZJARgAsAJgDcrCJ258BqevnnSWOAC0wVSE6MGBmKjISqqgAN6g2roGxqYAvqDsyrSgAESSwDQaYhJ5LrKKKmrFIqDo8LAm5kk6eobNAFSgzkA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">factory</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\"> !== </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\">) </span><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">define</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">amd</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">factory</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADNUyA7AQ2QtAGNYXJ0bFukgA6EZlIAPAA6wATuh58BoAG5tihUgHkGABVSgAvKADMogIwAWAEwBuOqAC0r7oXSvnTxs1LtOSlQWfGlxSExUZDlFUABvdU1tPUNQAF9QBnlYZFAAIlFgXn5BYUg8x0lZBSVi1XR4WFTTDS1dAyMAKlAHIA'>Try</a></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">define</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">require</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwAzVMgOxotAGNZXJ0qrdJAB0wzKQAeAB1gAndN179QANyrFCpAPKMACqlABeUAGYRARgAsAJgDc9UAFoXXQuhdPHTFqXbJOVFZ8KTFITFRkWQVQAG81DS1dA1AAX1BGOVhkUAAiEWAePgEhSFyHCRl5RSKVdHhYFJN1TR19QwAqUHsgA'>Try</a></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">System</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">register</span><span style=\"color: #000000\">([</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">exports_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__moduleName</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">context_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">id</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">setters:</span><span style=\"color: #000000\"> [</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1_1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">        ],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">execute</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #795E26\">exports_1</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"twoPi\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwAzVMgOwENkLQBjWBzpcO6SADpxmUgA8ADrABO6AULqgAbl2KFSAeRYAFVKAC8oAMwSAjABYATAG4moALQf+hdB7evW7KTcvJSoHPhyUpCYqMiKKqAA3lo6eoYmoAC+oCxKsMigAEQSwILC6KLihS4yCsqqZRro8LAZFtq6BsamAFSgzkA'>Try</a></div></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcAM1TJoENkLQBjWDUjpONdJAB04zAwAOsAE7p+g4aABunYoVIB5FgAVUoALygAzBICMAFgBMAbmxgAtG76F0bl84hsO3LyoNPgMUpCYqMjySqAA3hpaOvpGoAC+oCwKsMigAEQSwAJCImKQeU4y9DHKxWro8LCpZpraeobGAFSgjkA'>Try</a></div></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGe7McAM1TIDsBDZC0AY1gdI6Lh3SQAdBMykAHgAdYAJ3QChI0ADcuxQqQDyLAAqpQAXlABmSQEYALDQDcTUAFoP-Qug9vXrdlJuXkpUDnx5aUhMVGQlVVAAb21dfSNTUABfUBZlWGRQACJJYEFhUXFIQpdZRRU1Ms10eFgMyx09QxMzACpQZyA'>Try</a></div></pre>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">constants_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"./constants\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">twoPi</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">constants_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">valueOfPi</span><span style=\"color: #000000\"> * </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlADtYrTsxwAzVMqgQ2QtAGNbJ07KukgA6EZlIAPAA6wATul78lAN3bFCpAPJMACqlABeUAGZRARgAsAJgDcDUAFoXPQuhdPHzVqQ5dKVCp8aXFITFRkOUVQAG9QdU0dfUMAX1AmeVhkUAAiUWA+KgEhEVyHSVkFJSKBUHR4WANjBI0tXWaAKlB7IA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>CommonJS</code> if <a href=\"#target\"><code>target</code></a> is <code>ES3</code> or <code>ES5</code>; <code>ES6</code>/<code>ES2015</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>none</code></p>\n</li><li><p><code>commonjs</code></p>\n</li><li><p><code>amd</code></p>\n</li><li><p><code>umd</code></p>\n</li><li><p><code>system</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li><li><p><a href='#allowImportingTsExtensions' aria-label=\"Jump to compiler option info for allowImportingTsExtensions\" ><code>allowImportingTsExtensions</code></a></p>\n</li><li><p><a href='#allowArbitraryExtensions' aria-label=\"Jump to compiler option info for allowArbitraryExtensions\" ><code>allowArbitraryExtensions</code></a></p>\n</li><li><p><a href='#resolveJsonModule' aria-label=\"Jump to compiler option info for resolveJsonModule\" ><code>resolveJsonModule</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Resolução de Módulos - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica a estratégia de resolução de módulos: <code>node</code> (Node.js) ou <code>classic</code> (utilizada no TypeScript antes da versão 1.6).\nVocê provavelmente não vai precisar utilizar <code>classic</code> em código mais recente.</p>\n<p>Veja a página de referência em: <a href=\"/docs/handbook/module-resolution.html\">Resolução de Módulos</a></p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>Classic</code> if <a href=\"#module\"><code>module</code></a> is <code>AMD</code>, <code>UMD</code>, <code>System</code>, or <code>ES6</code>/<code>ES2015</code>; Matches if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>Node</code> otherwise.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>classic</code></p>\n</li><li><p><code>node10</code>/<code>node</code></p>\n</li><li><p><code>node16</code></p>\n</li><li><p><code>nodenext</code></p>\n</li><li><p><code>bundler</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li><li><p><a href='#paths' aria-label=\"Jump to compiler option info for paths\" ><code>paths</code></a></p>\n</li><li><p><a href='#baseUrl' aria-label=\"Jump to compiler option info for baseUrl\" ><code>baseUrl</code></a></p>\n</li><li><p><a href='#rootDirs' aria-label=\"Jump to compiler option info for rootDirs\" ><code>rootDirs</code></a></p>\n</li><li><p><a href='#moduleSuffixes' aria-label=\"Jump to compiler option info for moduleSuffixes\" ><code>moduleSuffixes</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleSuffixes-config'><a aria-label=\"Link to the compiler option: moduleSuffixes\" id='moduleSuffixes' href='#moduleSuffixes' name='moduleSuffixes' aria-labelledby=\"moduleSuffixes-config\">#</a> Module Suffixes - <code>moduleSuffixes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Provides a way to override the default list of file name suffixes to search when resolving a module.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"moduleSuffixes\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\".ios\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\".native\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Given the above configuration, an import like the following:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>TypeScript will look for the relative files <code>./foo.ios.ts</code>, <code>./foo.native.ts</code>, and finally <code>./foo.ts</code>.</p>\n<p>Note the empty string <code>\"\"</code> in <a href=\"#moduleSuffixes\"><code>moduleSuffixes</code></a> which is necessary for TypeScript to also look-up <code>./foo.ts</code>.</p>\n<p>This feature can be useful for React Native projects where each target platform can use a separate tsconfig.json with differing <code>moduleSuffixes</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> Sem Resolução - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão, o TypeScript examinará o conjunto inicial de arquivos para as diretivas <code>import</code> e<code>&#x3C;reference</code> e adicionará esses arquivos resolvidos ao seu programa.</p>\n<p>Se <code>noResolve</code> estiver definido, este processo não acontecerá.\nNo entanto, as instruções <code>import</code> ainda são verificadas para ver se elas resolvem para um módulo válido, então você precisa ter certeza de que isso é satisfeito por algum outro meio.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Caminhos - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Uma série de entradas que remapeiam as importações para locais de pesquisa relativos à <code>baseUrl</code>, há uma cobertura mais abrangente de <code>paths</code> no <a href=\"/docs/handbook/module-resolution.html#path-mapping\">manual</a>.</p>\n<p><code>paths</code> permite que você declare como o TypeScript deve resolver importações nos seus <code>requires</code> e <code>imports</code>.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #000000\">, </span><span style=\"color: #008000\">// isto deve ser especificado se \"paths\" está especificado.</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #000000\">] </span><span style=\"color: #008000\">// este mapeamento é relativo à \"baseUrl\"</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Isto permitiria que você escreva <code>import \"jquery\"</code>, e obtenha toda a digitação correta localmente.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_config/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"environments/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"app/_shared/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"helpers/*\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"tests/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Neste caso, você pode infomar o resolvedor de arquivos do TypeScript para dar suporte à vários prefixos personalizados para encontrar código.\nEste padrão pode ser usado para evitar caminhos relativos longos no seu código base.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolução de módulo JSON - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite importar módulos com um uma extensão ‘.json’, que é uma prática comum em projetos node. Isso inclui gerar um arquivo <code>import</code> baseado na forma estática do JSON.</p>\n<p>O TypeScript não suporta a resolução de arquivos JSON por padrão:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><span class=\"error\"><span>Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><span class=\"code\">2732</span></span><span class=\"error-behind\">Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMaBQIIAzASwBtIA7AQwFtJVFIAXJ4igc0QDoArROCrgDeuUGNAAiaJAAOcCagkAVAJ4zIAZQDG0YjKYSANKPESAJtBULQhKqUbHxks5ABGAV3bXb9yLgC++GDgJOTUdKhsLgAeXEyIuMQ0ctBMoIwsbJw28DSSXMAZrBzcfAISANy4uEVZ3C4e7KAAvK2gTNDukFW1JVwWKi1taBVAA'>Try</a></div></pre>\n<p>Ativar essa opção permite importar JSON e validar os tipos nesse arquivo JSON.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: settings.json</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"debug\": boolean' >debug</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='import settings' >settings</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) \"dry\": boolean' >dry</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUCBNJInADYBukAUqQHYCycAJgK5mQFjgC2L7kVAGM4PPnQBWiLhD5sOAJRLlWAFwCWcOqjotOhcADN1HOgEMeg0IkiqNdAOaIAdFK14A3nlA-QAImIABzg-VD8AFQBPQMgAZSFodUDVPwAab18-ZmhI0NBDMzIbdN9-ZkgAI1YHPIKizgBfGSMTSHNLVHU6coAPZ1VpdR5g6FVrW3snfPgef2dgGzsup1d6PwBuPDxFyZdyqodQAF4T0FVoVkhNneW9nOPTtHWgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonExports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonExports\" id='resolvePackageJsonExports' href='#resolvePackageJsonExports' name='resolvePackageJsonExports' aria-labelledby=\"resolvePackageJsonExports-config\">#</a> Resolve package.json Exports - <code>resolvePackageJsonExports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonExports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#exports\">the <code>exports</code> field of <code>package.json</code> files</a> if it ever reads from a package in <code>node_modules</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonImports' aria-label=\"Jump to compiler option info for resolvePackageJsonImports\" ><code>resolvePackageJsonImports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolvePackageJsonImports-config'><a aria-label=\"Link to the compiler option: resolvePackageJsonImports\" id='resolvePackageJsonImports' href='#resolvePackageJsonImports' name='resolvePackageJsonImports' aria-labelledby=\"resolvePackageJsonImports-config\">#</a> Resolve package.json Imports - <code>resolvePackageJsonImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><code>--resolvePackageJsonImports</code> forces TypeScript to consult <a href=\"https://nodejs.org/api/packages.html#imports\">the <code>imports</code> field of <code>package.json</code> files</a> when performing a lookup that starts with <code>#</code> from a file whose ancestor directory contains a <code>package.json</code>.</p>\n<p>This option defaults to <code>true</code> under the <code>node16</code>, <code>nodenext</code>, and <code>bundler</code> options for <a href=\"#moduleResolution\"><code>--moduleResolution</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> when <a href=\"#moduleResolution\"><code>moduleResolution</code></a> is <code>node16</code>, <code>nodenext</code>, or <code>bundler</code>; otherwise <code>false</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li><li><p><a href='#customConditions' aria-label=\"Jump to compiler option info for customConditions\" ><code>customConditions</code></a></p>\n</li><li><p><a href='#resolvePackageJsonExports' aria-label=\"Jump to compiler option info for resolvePackageJsonExports\" ><code>resolvePackageJsonExports</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Diretório Raiz - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Padrão</strong>: O caminho mais longo em comum entre todos os arquivos que não são de declaração. Se <code>composite</code> está definido, o padrão será o diretório contendo o arquivo <code>tsconfig.json</code>.</p>\n<p>Quando TypeScript compila os arquivos, ele mantém a estrutura dos diretório de saída igual a dos diretório de entrada.</p>\n<p>Por exemplo, suponhamos que você tenha alguns arquivos de entrada:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MeuProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts</span></div></code></div></pre>\n<p>O valor inferido para <code>rootDir</code> é o caminho mais longo em comum entre todos os arquivos que não são de declaração, que neste caso é <code>core/</code>.</p>\n<p>Se o seu <code>outDir</code> fosse <code>dist</code>, TypeScript escreveria esta árvore:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MeuProj\n├── dist\n│   ├── a.js\n│   ├── b.js\n│   ├── sub\n│   │   ├── c.js</span></div></code></div></pre>\n<p>Contudo, você pode ter a intenção de que <code>core</code> seja parte da estrutura do diretório de saída.\nAo definir <code>rootDir: \".\"</code> em <code>tsconfig.json</code>, TypeScript escreveria esta árvore:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MeuProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js</span></div></code></div></pre>\n<p>Importante, a opção <code>rootDir</code> <strong>não altera quais arquivos se tornam parte da compilação</strong>, pois não há interação com <code>include</code>, <code>exclude</code>, ou com a propriedade <code>files</code> em <code>tsconfig.json</code>.</p>\n<p>Note que TypeScript nunca irá escrever um arquivo de saída em um diretório fora de <code>outDir</code>, e nunca irá pular a emissão de um arquivo.\nPor este motivo, <code>rootDir</code> também impõe que todos arquivos que precisam ser emitidos estejam abaixo do caminho <code>rootDir</code>.</p>\n<p>Por exemplo, digamos que você tivesse esta árvore:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">MeuProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── ajudantes.ts</span></div></code></div></pre>\n<p>Seria um erro especificar <code>rootDir</code> como <code>core</code> <em>e</em> <code>include</code> como <code>*</code>, porque estaria sendo criado um arquivo (<code>ajudantes.ts</code>) que precisaria ser emitido <em>fora</em> do <code>outDir</code> (i.e. <code>../ajudantes.js</code>).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Diretórios Raiz - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usando <code>rootDirs</code>, você pode informar ao compilador que existem vários diretórios raiz agindo como um único diretório raiz “virtual”.\nIsso faz com que o compilador resolva importações relativas de módulos como se estes diretórios fossem um único diretório raiz.</p>\n<p>Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\"> src\n └── views\n     └── view1.ts (pode importar \"./template1\", \"./view2`)\n     └── view2.ts (pode importar \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (pode importar \"./view1\", \"./view2\")</span></div></code></div></pre>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Esta propriedade não altera como TypeScript emite JavaScript, mas apenas emula a suposição de que\nos arquivos JavaScript poderão trabalhar através desses caminhos relativos em tempo de execução.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Raizes de Tipo - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão todos pacotes <code>@types</code> <em>visíveis</em> são incluídos na sua compilação.\nPacotes em <code>node_modules/@types</code> de qualquer diretório adjacente são considerados <em>visíveis</em>.\nPor exemplo, isso significa pacotes dentro de <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, e assim por diante.</p>\n<p>Se <code>typeRoots</code> está especificado, <em>somente</em> pacotes dentro de <code>typeRoots</code> serão incluídos. Por exemplo:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#typeRoots'><data-lsp lsp=\"Specify multiple folders that act like `./node_modules/@types`.\">typeRoots</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Este arquivo de configuração vai incluir <em>todos</em> os pacotes definidos em <code>./typings</code> e <code>./vendor/types</code> , e nenhum pacote de <code>./node_modules/@types</code>.\nTodo os caminhos são relativos ao arquivo <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Tipos - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Por padrão todos pacotes <code>@types</code> <em>visíveis</em> são incluídos na sua compilação.\nPacotes em <code>node_modules/@types</code> de qualquer diretório adjacente são considerados <em>visíveis</em>.\nPor exemplo, isso significa pacotes dentro de <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, e assim por diante.</p>\n<p>Se <code>types</code> está especificado, somente pacotes listados serão incluídos no escopo global. Por exemplo:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Este arquivo <code>tsconfig.json</code> <em>somente</em> irá incluir <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> e <code>./node_modules/@types/express</code>.\nOutros pacotes dentro de <code>node_modules/@types/*</code> não serão incluídos.</p>\n<h3 id=\"o-que-isto-reflete\" style=\"position:relative;\"><a href=\"#o-que-isto-reflete\" aria-label=\"o que isto reflete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O que isto reflete?</h3>\n<p>Esta opção não altera como <code>@types/*</code> são incluídos no código da sua aplicação, por exemplo se você tivesse o <code>compilerOptions</code> acima, com o seguinte código:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">moment</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"moment\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">moment</span><span style=\"color: #000000\">().</span><span style=\"color: #795E26\">format</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"MMMM Do YYYY, h:mm:ss a\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>O import <code>moment</code> estaria completamente tipado.</p>\n<p>Quando você tem esta opção definida, ao não incluir um módulo no vetor de <code>types</code>, ela:</p>\n<ul>\n<li>Não vai adicionar globais ao seu projeto (p. ex. <code>process</code> no node, ou <code>expect</code> no Jest)</li>\n<li>Não vai fazer com que exports apareçam como recomendações de auto-import</li>\n</ul>\n<p>Esta opção difere de <a href=\"#typeRoots\"><code>typeRoots</code></a>, pois serve para especificar somente os tipos exatos a serem incluídos, enquanto <a href=\"#typeRoots\"><code>typeRoots</code></a> permite que você defina diretórios específicos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Emit_6246' ><a href='#Emit_6246' name='Emit_6246' aria-label=\"Link to the section Emit\" aria-labelledby='Emit_6246'>#</a>Emit</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Declarações - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gere arquivos <code>.d.ts</code> para cada arquivo TypeScript ou JavaScript dentro do seu projeto.\nEsses arquivos <code>.d.ts</code> são arquivos de definição de tipo que descrevem a API externa do seu módulo.\nCom arquivos <code>.d.ts</code>, ferramentas como o TypeScript podem fornecer intellisense e tipos mais precisos para código que ainda não foi digitado.</p>\n<p>Quando a opção <code>declaration</code> é definida como <code>true</code>, executando o compilador com este código TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let olaMundo: string' >olaMundo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"olá!\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PCCCGBZArgOwCYRwC8cARKgIcCEpA3EA'>Try</a></div></pre>\n<p>Vai gerar um arquivo <code>index</code> como este:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">olaMundo</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"olá!\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttTYyBDAWQFcA7AE1lAF5QAiagQ4CE3ANxA'>Try</a></div></pre>\n<p>Com um outro arquivo correspondente <code>olaMundo.d.ts</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">olaMundo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiy2CICyAVyqxQAXlAAidQEOAhEYDcQA'>Try</a></div></pre>\n<p>Ao trabalhar com arquivos <code>.d.ts</code> para arquivos JavaScript, você pode usar <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> ou usar <a href=\"#outDir\"><code>outDir</code></a> para garantir que os arquivos JavaScript não sejam sobrescritos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Diretório de declarações - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Oferece uma maneira de configurar o diretório raiz para onde os arquivos de declaração são emitidos.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">exemplo\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>com este <code>tsconfig.json</code>:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#declarationDir'><data-lsp lsp=\"Specify the output directory for generated declaration files.\">declarationDir</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"./tipos\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Colocaria o <code>d.ts</code> para o <code>index.ts</code> em uma pasta<code>tipos</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">exemplo\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── tipos\n    └── index.d.ts</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Mapa de declarações - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Gera um sourcemap para arquivos <code>.d.ts</code>, que são mapeados de volta para o arquivo original <code>.ts</code>.\nIsso permitirá que editores como o VS Code acessem o arquivo <code>.ts</code> original ao usar recursos como <em>Ir para definição</em>.</p>\n<p>Você deve fortemente considerar ativar essa opção se estiver usando referências de projeto.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Iteração Downlevel - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Downleveling é o termo do TypeScript para transpilar para uma versão mais antiga do JavaScript.\nEsse sinalizador permite que, em runtimes mais antigos do JavaScript, haja o suporte a uma implementação mais precisa de como o JavaScript moderno interage com novos conceitos.</p>\n<p>O ECMAScript 6 adicionou várias novas primitivas de iteração: o loop <code>for / of</code> (<code>for (el of arr)</code>), operador de spread (<code>[a, ...b]</code>), spread de argumento (<code>fn (... args)</code>) e o <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a>. <code>--downlevelIteration</code> permite que essas primitivas de iteração sejam usadas com mais precisão nos ambientes ES5 se uma implementação do <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a> estiver presente.</p>\n<h4 id=\"exemplo-efeitos-no-for--of\" style=\"position:relative;\"><a href=\"#exemplo-efeitos-no-for--of\" aria-label=\"exemplo efeitos no for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo: Efeitos no <code>for / of</code></h4>\n<p>Sem a flag <code>downlevelIteration</code> ativa, um loop <code>for / of</code> em qualquer objeto sofre um downlevel para um loop <code>for</code> tradicional:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">_i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQB5ADYBDgIR8A3LgBmpLgAomrdoVCkZHSLACUoAN65QoZYVJDEAOiGl4CwjukBfIA'>Try</a></div></pre>\n<p>Isso geralmente é o que as pessoas esperam, mas não é 100% compatível com o comportamento do ECMAScript 6.\nCertas strings, como emoji (😜), têm um <code>.length</code> de 2 (ou até mais!), Mas devem iterar como 1 unidade em um loop <code>for-of</code>.\nConsulte <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">esta postagem no blog de Jonathan New</a> para obter uma explicação mais detalhada.</p>\n<p>Quando o <code>downlevelIteration</code> estiver ativado, o TypeScript usará uma função auxiliar que verifica a implementação do <code>Symbol.iterator</code> (nativo ou polyfill). Se essa implementação estiver ausente, ela retornará à iteração baseada em índice.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__values</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">next</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> !</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> ? </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__values</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(); !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">s</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">s</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1_1</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">str_1_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">return</span><span style=\"color: #000000\">)) </span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">str_1</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEAeUoBDgISqA3LgBmxRQApp5WfNDEj8yLACUoAN65QoS32LUAdJTE8GZ8ToYAvkA'>Try</a></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Nota:</strong> ativar o <code>downlevelIteration</code> não melhora a compatibilidade se o <code>Symbol.iterator</code> não estiver presente no runtime.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"exemplo-efeitos-em-spreads-de-arrays\" style=\"position:relative;\"><a href=\"#exemplo-efeitos-em-spreads-de-arrays\" aria-label=\"exemplo efeitos em spreads de arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo: Efeitos em Spreads de Arrays</h4>\n<p>Isso é um operador spread em um array:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Cria um novo array onde os elementos são: 1 seguido por todos os elementos do arr2</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>Baseado nas descrições, parece fácil fazer um downlevel para ES6:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Mesma coisa, certo?</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>No entanto, isso é claramente diferente em certos casos bem raros.\nPor exemplo, se o array tiver um “buraco” no meio, o índice faltante vai criar uma propriedade <em>própria</em> quando sofrer o spread, mas isso não acontece quando usamos <code>concat</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Fazemos um array onde temos o elemento do índice '1' faltando</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">faltando</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, , </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spread</span><span style=\"color: #000000\"> = [...</span><span style=\"color: #001080\">faltando</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concatenado</span><span style=\"color: #000000\"> = [].</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">faltando</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// true</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">spread</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// false</span></div><div class='line'><span style=\"color: #A31515\">\"1\"</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">concatenado</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Assim como <code>for / of</code>, <code>downlevelIteration</code> vai usar o <code>Symbol.iterator</code> (se presente) para emular de forma mais precisa o comportamento do ES 6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emitir BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controla se o TypeScript emitirá uma <a href=\"https://pt.wikipedia.org/wiki/Marca_de_ordem_de_byte\">BOM (byte order mark)</a> ao gravar arquivos de saída.\nAlguns runtimes exigem uma BOM para interpretar corretamente os arquivos JavaScript; outros exigem que ele não esteja presente.\nO valor padrão de <code>false</code> é geralmente melhor, a menos que você tenha um motivo para alterá-lo.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emitir Somente Declarações - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Só</em> emite arquivos <code>.d.ts</code>; não emite arquivos <code>.js</code>.</p>\n<p>Essa configuração é útil em dois casos:</p>\n<ul>\n<li>Você está usando um transpilador diferente do TypeScript para gerar seu JavaScript.</li>\n<li>Você está usando o TypeScript para gerar apenas arquivos <code>d.ts</code> para seus consumidores.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Importar Auxiliares - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Para algumas operações de mais baixo nível, o TypeScript pode usar alguns códigos auxiliares para operações como extensão de classes, fazer spread de arrays ou objetos e para operações async. Por padrão esses auxiliares são inseridos em cada arquivo utilizado. Isso pode provocar duplicação de códigos se o mesmo auxiliar for usado em diferentes módulos.</p>\n<p>Se <code>importHelpers</code> estiver ligado, as funções auxiliares serão importadas do módulo <a href=\"https://www.npmjs.com/package/tslib\">tslib</a>. Você precisa ter certeza que o módulo <code>tslib</code> pode ser importado no runtime. Isso afeta apenas módulos; Os arquivos de scripts globais não tentarão importar módulos.</p>\n<p>Exemplo com esse TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">arr2</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ligando <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> e mantendo o <code>importHelpers</code> como falso:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = [], </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> ((</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">-- &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">()).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">error:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">error</span><span style=\"color: #000000\"> }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && !</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">])) </span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">error</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">pack</span><span style=\"color: #000000\"> || </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">l</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || !(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">        }</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">to</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">concat</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">ar</span><span style=\"color: #000000\"> || </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">slice</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">from</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA'>Try</a></div></pre>\n<p>Em seguida, ativando <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> e <code>importHelpers</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">__read</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">__spreadArray</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fn</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">arr2</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__spreadArray</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #795E26\">__read</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">arr</span><span style=\"color: #000000\">), </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA'>Try</a></div></pre>\n<p>Você pode utilizar <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> quando fornecer suas próprias implementações dessas funções.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a></p>\n</li><li><p><a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Importações não utilizadas como valores - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa opção controla como o <code>import</code> funciona, são 3 opções diferentes:</p>\n<ul>\n<li>\n<p><code>remove</code>: O comportamento padrão para descartar os <code>import</code> que apenas referenciam tipos.</p>\n</li>\n<li>\n<p><code>preserve</code>: Preserva todas as declarações <code>import</code> que os valores ou tipos nunca são usados. Isso pode permitir que importações/efeitos colaterais sejam mantidos.</p>\n</li>\n<li>\n<p><code>error</code>: Isso mantém todas as importações (as mesmas que a opção de preservar), mas apresentará um erro quando o valor da importação usada for apenas como tipo. Isto pode ser útil se você quiser garantir que nenhum valor vai ser acidentalmente importado, mas ainda vai manter os efeitos colaterais da importação explícitos.</p>\n</li>\n</ul>\n<p>Essa opção funciona porque você pode usar <code>import type</code> para criar explicitamente uma regra <code>import</code> que nunca seja emitida em Javascript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>remove</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>remove</code></p>\n</li><li><p><code>preserve</code></p>\n</li><li><p><code>error</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#preserveValueImports' aria-label=\"Jump to compiler option info for preserveValueImports\" ><code>preserveValueImports</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Mapa de origem embutido - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido, em vez de escrever um arquivo <code>.js.map</code> para fornecer mapas de origem, o TypeScript irá embutir o conteúdo do mapa de origem nos arquivos<code>.js</code>.\nEmbora isso resulte em arquivos JS maiores, pode ser conveniente em alguns cenários.\nPor exemplo, você pode querer depurar arquivos JS em um servidor web que não permite que arquivos <code>.map</code> sejam servidos.</p>\n<p>Mutuamente exclusivo com <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>Por exemplo, com este TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Converte para este JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Em seguida, habilite a construção com <code>inlineSourceMap</code> habilitado, há um comentário na parte inferior do arquivo que inclui um mapa de origem para o arquivo.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Origens Embutidas - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando definido o TypeScript incluirá o conteúdo original do arquivo <code>.ts</code> como uma string incorporada no mapa de origem.\nIsso geralmente é util nos mesmos casos que <code>inlineSourceMap</code>.</p>\n<p>Requer <code>sourceMap</code> ou<code>inlineSourceMap</code> para ser definido.</p>\n<p>Por exemplo, com este TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const helloWorld: \"hi\"' >helloWorld</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA'>Try</a></div></pre>\n<p>Por padrão, converte para este JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Em seguida, habilite a compilação com <code>inlineSources</code> e<code>inlineSourceMap</code> habilitados, há um comentário na parte inferior do arquivo que inclui\num mapa de origem para o arquivo.\nObserve que o final é diferente do exemplo em <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> porque o mapa-fonte agora contém o código-fonte original também.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Raiz do mapa - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifique o local onde o depurador deve localizar os arquivos de mapa em vez dos locais gerados.\nEsta string é tratada literalmente dentro do source-map, por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"mapRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Declararia que <code>index.js</code> terá mapas de origem em <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> Nova linha - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifique a sequência de fim de linha a ser usada ao emitir arquivos: ‘CRLF’ (dos) ou ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>crlf</code></p>\n</li><li><p><code>lf</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> Não Emita - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não emita arquivos de saída do compilador como código-fonte JavaScript, source-maps ou declarações.</p>\n<p>Isso abre espaço para outra ferramenta como <a href=\"https://babeljs.io\">Babel</a> ou <a href=\"https://github.com/swc-project/swc\">swc</a> para lidar com a conversão do arquivo TypeScript em um arquivo que pode ser executado dentro de um ambiente JavaScript.</p>\n<p>Você pode então usar o TypeScript como uma ferramenta para fornecer integração com o editor e como um verificador de tipo de código-fonte.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Em vez de importar auxiliares com <a href=\"#importHelpers\"><code>importHelpers</code></a>, você pode fornecer implementações no escopo global para os auxiliares que você usa e desligar completamente a emissão de funções auxiliares.</p>\n<p>Por exemplo, usar esta função <code>async</code> no ES5 requer uma função do tipo <code>await</code> e uma função do tipo <code>generator</code> para executar:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const getAPI: (url: string) => Promise&lt;{}>' >getAPI</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">async</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) url: string' >url</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA'>Try</a></div></pre>\n<p>O que cria bastante JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__awaiter</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">P</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">P</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\"> : </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">P</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">); }); }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> || (</span><span style=\"color: #0070C1\">P</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fulfilled</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">rejected</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">](</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">)); } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">); } }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">resolve</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">adopt</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">result</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">then</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">fulfilled</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">rejected</span><span style=\"color: #000000\">); }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">generator</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">apply</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_arguments</span><span style=\"color: #000000\"> || [])).</span><span style=\"color: #795E26\">next</span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__generator</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">label:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #795E26\">sent</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; }, </span><span style=\"color: #001080\">trys:</span><span style=\"color: #000000\"> [], </span><span style=\"color: #001080\">ops:</span><span style=\"color: #000000\"> [] }, </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">next:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">Symbol</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">iterator</span><span style=\"color: #000000\">] = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\">() { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">; }), </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">verb</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">]); }; }</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">step</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">TypeError</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">while</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && (</span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)), </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> && (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">] : </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #000000\">] || ((</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #000000\">]) && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">), </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">next</span><span style=\"color: #000000\">) && !(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">])).</span><span style=\"color: #001080\">done</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #AF00DB\">switch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">: </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">], </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">++; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">case</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">                </span><span style=\"color: #AF00DB\">default</span><span style=\"color: #000000\">:</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) && (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> || </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">)) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && (!</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &gt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] && </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]))) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] === </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">; </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) { </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">label</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">); </span><span style=\"color: #AF00DB\">break</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">ops</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">                    </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">trys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">pop</span><span style=\"color: #000000\">(); </span><span style=\"color: #AF00DB\">continue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">            }</span></div><div class='line'><span style=\"color: #000000\">            </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">body</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">thisArg</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">_</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">        } </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) { </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">]; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; } </span><span style=\"color: #AF00DB\">finally</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">t</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; }</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] & </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] ? </span><span style=\"color: #001080\">op</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] : </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">done:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA'>Try</a></div></pre>\n<p>Que pode ser alternado com seus próprios globais por meio deste sinalizador:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getAPI</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">url</span><span style=\"color: #000000\">) { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__awaiter</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">__generator</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">_a</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// Get API</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #000000\">, {}];</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">}); };</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> Não emitir em caso de erro - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não emita arquivos de saída do compilador como código JavaScript, source-maps ou declarações se algum erro for relatado.</p>\n<p>O padrão é <code>false</code>, tornando mais fácil trabalhar com o TypeScript em um ambiente semelhante a um relógio, onde você pode ver os resultados das alterações em seu código em outro ambiente antes de garantir que todos os erros sejam resolvidos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Diretório de saída - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Se especificado, os arquivos <code>.js</code> (como o <code>.d.ts</code>, e <code>.js.map</code>, etc.) serão emitidos para este diretório.\nA estrutura de diretório dos arquivos de origem originais é preservada; consulte <a href=\"#rootDir\">rootDir</a> se a raiz calculada não for o que você pretendia.</p>\n<p>Se não for especificado, os arquivos <code>.js</code> serão emitidos no mesmo diretório que os arquivos<code>.ts</code> de onde foram gerados:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">exemplo</span></div><div class='line'><span style=\"color: #000000\">├── index.js</span></div><div class='line'><span style=\"color: #000000\">└── index.ts</span></div></code></div></pre>\n<p>Com um <code>tsconfig.json</code> como este:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"outDir\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dist\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Executar <code>tsc</code> com essas configurações move os arquivos para a pasta <code>dist</code> especificada:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">$ tsc</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">exemplo</span></div><div class='line'><span style=\"color: #000000\">├── dist</span></div><div class='line'><span style=\"color: #000000\">│   └── index.js</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> Arquivo de saída - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Se especificado, todos os arquivos <em>global</em> (não módulos) serão concatenados no único arquivo de saída especificado.</p>\n<p>Se <code>module</code> for <code>system</code> ou <code>amd</code>, todos os arquivos do módulo também serão concatenados neste arquivo após todo o conteúdo global.</p>\n<p>Nota: <code>outFile</code> não pode ser usado a menos que <code>module</code> seja <code>None</code>, <code>System</code>, ou <code>AMD</code>.\nEsta opção <em>não pode</em> pode ser usada para agrupar módulos CommonJS ou ES6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a></p>\n</li><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Manter Enums Constantes - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não apaga as declarações <code>const enum</code> em seu código gerado. <code>const enum</code> provê uma maneira de reduzir a quantidade de memória utilizada por sua aplicação em tempo de execução emitindo o valor do enum ao invés de sua referência.</p>\n<p>Por exemplo nesse código TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2' >TubRingZooHypothesis</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3' >DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const albumSelecionado: Album.JimmyEatWorldFutures' >albumSelecionado</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='const albumSelecionado: Album.JimmyEatWorldFutures' >albumSelecionado</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #001080\"><data-lsp lsp='const enum Album' >Album</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1' >JimmyEatWorldFutures</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsHTYKADKcBhwwM5gdOwgAZg4yAB05JS0DMxsXDx8AgDcBGQAZjAAFDE5CUkp4OmZQt3osXkF1PRMrBzcvPwQAJT4UpEQIEm5GLYNAEQ0AB7AiQg+8BCgGAZ0uauT1SFAA'>Try</a></div></pre>\n<p>O comportamento padrão <code>const enum</code> é converter qualquer <code>Album.AlgumaCoisa</code> para o literal correspondente, além de remover a referência do enum do JavaScript completamente.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">albumSelecionado</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">albumSelecionado</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUH56CgBlYhpibCC8fglYeNoGZAA6Tm4+QRFxaVl5RQBuTFQAM1AACmzq-MLi-DKK5SnqHNr63gFhMUkZOQVIAEpmbVwCWEKaml9+gCJEAA9sAtJokkhcGmh+GpONruSgA'>Try</a></div></pre>\n<p>Com a opção <code>preserveConstEnums</code> definida como <code>true</code>, o <code>enum</code> existe em tempo de execução e os números ainda são emitidos.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">] = </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">})(</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> || (</span><span style=\"color: #001080\">Album</span><span style=\"color: #000000\"> = {}));</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">albumSelecionado</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">albumSelecionado</span><span style=\"color: #000000\"> === </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> </span><span style=\"color: #008000\">/* Album.JimmyEatWorldFutures */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Excelente escolha.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigOjKkAMqwkrB8OVg6JhgVUrIkAHRqGtp6hsbmltYIANx0XABmoAAULSMdXT3Y-YN2xxKtYxNaugZGphZWNgCUCm4COBhdo5LpGwBE+AAefE6IlKwngAkkzB0ox+D2WNSAA'>Try</a></div></pre>\n<p>Isso essencialmente faz com que <code>const enums</code> seja uma funcionalidade apenas do código-fonte.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#isolatedModules\"><code>isolatedModules</code></a>; <code>false</code> otherwise.</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveValueImports-config'><a aria-label=\"Link to the compiler option: preserveValueImports\" id='preserveValueImports' href='#preserveValueImports' name='preserveValueImports' aria-labelledby=\"preserveValueImports-config\">#</a> Preserve Value Imports - <code>preserveValueImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Deprecated in favor of <a href=\"#verbatimModuleSyntax\"><code>verbatimModuleSyntax</code></a>.</p>\n<p>There are some cases where TypeScript can’t detect that you’re using an import. For example, take the following code:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Animal</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./animal.js\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">eval</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"console.log(new Animal().isDangerous())\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>or code using ‘Compiles to HTML’ languages like Svelte or Vue. <code>preserveValueImports</code> will prevent TypeScript from removing the import, even if it appears unused.</p>\n<p>When combined with <a href=\"#isolatedModules\"><code>isolatedModules</code></a>: imported types <em>must</em> be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#isolatedModules' aria-label=\"Jump to compiler option info for isolatedModules\" ><code>isolatedModules</code></a></p>\n</li><li><p><a href='#importsNotUsedAsValues' aria-label=\"Jump to compiler option info for importsNotUsedAsValues\" ><code>importsNotUsedAsValues</code></a></p>\n</li><li><p><a href='#verbatimModuleSyntax' aria-label=\"Jump to compiler option info for verbatimModuleSyntax\" ><code>verbatimModuleSyntax</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.5\" href=\"/docs/handbook/release-notes/typescript-4-5.html\">4.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Remover Comentários - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Remove todos os comentários do TypeScript ao converter para JavaScript. O padrão é <code>false</code>.</p>\n<p>Por exemplo, esse documento TypeScript que tem um comentário JSDoc:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Tradução de 'Hello World' para português. */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Quando <code>removeComments</code> é definido para <code>true</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSegAquAQwAmrAOcBj2KCH5QAcgAS+ADbKpAdVi5lQuaAAOAwQa3pWAc1YAryADpQnYJnwAPfadABjWDUjpQ0CpqmtpCAAq8AEIASqAAvKAARADyygCHoACyrDRCsIkA3EA'>Try</a></div></pre>\n<p>Sem a opção <code>removeComments</code> ou com ela definida para <code>false</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Tradução de &apos;Hello World&apos; para português. */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorldPTBR</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá Mundo\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6ABVcrACYBXAOcBj2KBH5QAcgAS+du1kB1WLnYjFoAA6thRnejEBzMQCvIAOlA9gmfAA9D50AGNYNSOig0Goa2roiAAoCAEIASqAAvKAARADy7ACHoACyYjQisMkA3EA'>Try</a></div></pre>\n<p>Isso significa que seu comentário vai aparecer no código JavaScript.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Mapas de código - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite a geração de <a href=\"https://developer.mozilla.org/pt-PT/docs/Tools/Debugger/How_to/Use_a_source_map\">mapas de código</a>. Esses arquivos permitem que depuradores e outras ferramentas exibam o código fonte TypeScript original ao trabalhar com os arquivos JavaScript emitidos. Mapas de código são emitidos como arquivos <code>js.map</code> (ou <code>jsx.map</code>) ao lado dos arquivos de saída <code>.js</code> correspondentes.</p>\n<p>Os arquivos <code>.js</code> recebem um container com comentários do mapa de código, indicando para as ferramentas externas onde os arquivos estão. Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Compilando com o <code>sourceMap</code> configurado como <code>true</code>, a criação do arquivo JavaScript seguirá assim:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js</span></div><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">helloWorld</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></div></code></div></pre>\n<p>E isso irá gerar o seguinte arquivo json do mapa:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// helloWorld.js.map</span></div><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #000000\">: </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #000000\">],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #000000\">: [],</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Raiz do código-fonte - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifica a localização onde o depurador deve encontrar os arquivos TypeScript ao invés de outros locais relativos de origem.\nEssa string é processada literalmente dentro do mapa de origem, onde você pode utilizar um caminho ou uma URL:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceMap\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Declara que o <code>index.js</code> tem um arquivo fonte em <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Remover internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não emite declarações para códigos que tenham uma anotação <code>@internal</code> em seu comentário JSDoc.\nEsta é uma opção interna do compilador; use por sua conta em risco, porque o compilador não verifica se o resultado é válido.\nSe você estiver procurando por uma ferramenta para lidar com níveis adicionais de visibilidade dentro de seus arquivos <code>d.ts</code>, veja o <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Dias disponíveis na semana</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const diasNaSemana: 7' >diasNaSemana</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function salarioSemanal(porDia: number): number' >salarioSemanal</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) porDia: number' >porDia</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='const diasNaSemana: 7' >diasNaSemana</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) porDia: number' >porDia</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBLAhgZ0gE3sgDgewHYC3AbgKaaR6KTIkC2ilUMAAvHgC4kBOlANk8HAkAHri7tIAY3zIJGFADlEAZToMqAXkgB2ANzhwoGAGFEvSQFdeJSAEcLDdjkhmA5hYCXtSK4YALKjpIC3pqNUpoQRExCQAzCzxJdnh8ajNELhTVej4ACjEERAAuChCAI24ASkgAbyhILhJ2Cx50JGQlbPVoSAKkfQBfIA'>Try</a></div></pre>\n<p>Com a opção definida como <code>false</code> (padrão):</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Dias disponíveis na semana</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">diasNaSemana</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">salarioSemanal</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">porDia</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmgAIqmGRQOVJAAO0gLcA3LDtAVhoSFmTCLi5eErZRFwg+Ata+0elADpSD9tDQA5YQBlGztLAF5QAHYAbhY5ZQBhYUIBAFdiUABHHLt0WFAsgHMcgEvkUAq7aEsbUBzbK2iLJU9vWF9QADMcigFJaSsssSko2zcACh81YTIKNoAjLFEASlAAb0VQUSx0HNctdUhwmZilUEX1FIBfIA'>Try</a></div></pre>\n<p>Com <code>stripInternal</code> definido como <code>true</code> o <code>d.ts</code> emitido será editado.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** Calcule quanto alguém ganha em uma semana */</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">selarioSemanal</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">porDia</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20ABF42SKEbxIiTQFuAbuiugcoSOhrYc+w+FQYsPB9gfH4bWGhQBU0YC1NIADlsAGUPL2xQAF5QAHYAbnwdQwBhPAUAV3ZQAEdyr2gyUDwAc3KAS5pQZq8SDI9Qcs83NNdtELCyCNAAM3KUBXVNYeUEMlTPHFwACnCTbC4UQYAjTABKUABvfVBYdGhyrDizJPX0g1Bd0wKAXyA'>Try</a></div></pre>\n<p>A JavaScript emitido ainda é o mesmo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='JavaScript_Support_6247' ><a href='#JavaScript_Support_6247' name='JavaScript_Support_6247' aria-label=\"Link to the section JavaScript Support\" aria-labelledby='JavaScript_Support_6247'>#</a>JavaScript Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Permitir JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite que arquivos JavaScript sejam importados dentro do seu projeto ao invés de só permitir arquivos <code>.ts</code> e <code>.tsx</code>. Por exemplo, este arquivo JS:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: carta.js</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const naipePadrao: \"Copas\"' >naipePadrao</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Copas\"</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQ8AHgA4D2hODi5BoK0d8ACsgBM8yBqAC8oAEQBhBnWTlJAbiA'>Try</a></div></pre>\n<p>Quando importado em um arquivo TypeScript, vai emitir um erro:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) naipePadrao: \"Copas\"&#10;import naipePadrao' >naipePadrao</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) naipePadrao: \"Copas\"&#10;import naipePadrao' >naipePadrao</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAu1AdAFaJ61wATAK4UOkAB4AHBK0QcaJSZAAK1AdGpxQAXlAAiAMJxJ1RHoDcBMAFpbjIa1vWrxclToNQJSgIkdZeCS00mygAN6gCkqq6pqgAL6gRPC0+hzAzGzUFnh4jHCUiHCiZHAA5gAUUSpqGnAAlOZAA'>Try</a></div></pre>\n<p>Mas é importado normalmente com a opção <code>allowJS</code> ativada:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) naipePadrao: \"Copas\"&#10;import naipePadrao' >naipePadrao</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) naipePadrao: \"Copas\"&#10;import naipePadrao' >naipePadrao</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQqA9gCYCuCx8AHgA42HnErTvwACsjp5kNUAF5QAIgDCNdsnIyA3JRCgAtDuwMCOrRrDhksWDQDuAKSqaocJGkyhoiOm2IEq0VJ0KgAN6gfALCouKgAL6gkHg0qLLEwLiEyGqUlNg0iOQ0zBYA5gAUoUIiYjQAlKpAA'>Try</a></div></pre>\n<p>Esta opção pode ser utilizada como uma forma de migrar um projeto JavaScript para TypeScript de forma incremental. Permitindo que arquivos <code>.ts</code> e <code>.tsx</code> coexistam no mesmo projeto que os arquivos JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Checar JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Funciona em conjunto com o <code>allowJs</code>. Quando o <code>checkJs</code> está ativado, os erros são relatados também nos arquivos JavaScript. Isto é\no equivalente a incluir <code>// @ts-check</code> na parte superior de todos os arquivos JavaScript incluídos no seu projeto.</p>\n<p>Por exemplo, este é um JavaScript incorreto, de acordo com a definição do tipo <code>parseFloat</code> que acompanha o TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// parseFloat só recebe uma string</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">pi</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">parseFloat</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Quando importado em um módulo TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constantes.js</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constantes\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzkJQBdJD78UA6AK3RLgBMBXAm3wAPAA5wATvXZicoALygxkSSnwAxeJHoAKAMxsAjACYALAEoA3GgxhwuAsTKUchXqLYy0OEhOmgAN7K8gC+oFiScCSgAERswDR0jMyssTZJKHBC8ADmunLWQA'>Try</a></div></pre>\n<p>Você não vai obter nenhum erro. No entanto, se você ativar o <code>checkJs</code> então voce também terá mensagens de erro no seu arquivo JavaScript.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: constantes.js</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) pi: number' >pi</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function parseFloat(string: string): number' >parseFloat</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">3.124</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./constantes\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(alias) (property) pi: number&#10;import pi' >pi</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7ONMR0i0upEQA6GnjlwAJoyk7IADwAOCOrqvjQAXlBWiSSADFyROgAoMHQBGNCwASgBuPBFwCSlZBVRxaSNLHTs8cTkbaDpQAG9XRwBfUFF4OVAAIh1gZVV1TW0qqPrEODNyAHM-B0igA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a></p>\n</li><li><p><a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Profundidade JS do módulo de nó máximo - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A profundidade máxima de dependência para pesquisar em <code>node_modules</code> e carregar arquivos JavaScript.</p>\n<p>Este sinalizador só pode ser usado quando <a href=\"#allowJs\"><code>allowJs</code></a> está habilitado, e é usado se você quiser ter tipos de inferência TypeScript para todo o JavaScript dentro de seu <code>node_modules</code>.</p>\n<p>Idealmente, isso deve ficar em 0 (o padrão), e os arquivos <code>d.ts</code> devem ser usados para definir explicitamente a forma dos módulos.\nNo entanto, há casos em que você pode querer ativar isso em detrimento da velocidade e da precisão potencial.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Editor_Support_6249' ><a href='#Editor_Support_6249' name='Editor_Support_6249' aria-label=\"Link to the section Editor Support\" aria-labelledby='Editor_Support_6249'>#</a>Editor Support</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Desativar limite de tamanho - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Para evitar um possível problema de inchaço da memória ao trabalhar com projetos JavaScript muito grandes, há um limite superior para a quantidade de memória que o TypeScript alocará. Ativar este sinalizador removerá o limite.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Lista de plugins de serviço de linguagem a serem executados dentro do editor.</p>\n<p>Os plugins de serviço de linguagem são uma forma de fornecer informações adicionais a um usuário com base em arquivos TypeScript existentes. Eles podem aprimorar as mensagens existentes entre o TypeScript e um editor ou fornecer suas próprias mensagens de erro.</p>\n<p>Por exemplo:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Adiciona linting SQL com um construtor SQL usando template strings.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Fornece linting CSS dentro de template strings.</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Fornece mensagens de erro ESLint e correções dentro da saída do compilador.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Fornece validação e preenchimento automático dentro das strings do modelo de consulta GraphQL.</li>\n</ul>\n<p>VS Code tem a capacidade de uma extensão para <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">incluir automaticamente plugins de serviço de linguagem</a>, e assim você pode ter alguns rodando em seu editor sem precisar defini-los em seu <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Interop_Constraints_6252' ><a href='#Interop_Constraints_6252' name='Interop_Constraints_6252' aria-label=\"Link to the section Interop Constraints\" aria-labelledby='Interop_Constraints_6252'>#</a>Interop Constraints</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Permitir Imports Sintéticos Padrão - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando está ativo, <code>allowSyntheticDefaultImports</code> permite que você escreva um import como:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Ao invés de:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Quando o módulo <strong>não</strong> especifica um export padrão.</p>\n<p>Isso não afeta o JavaScript que será emitido no TypeScript, somente a checagem de tipos\nEssa opção traz o comportamento do TypeScript in-line com o Babel, onde código extra é emitido no final para que o uso de um export padrão seja mais ergonômico.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#esModuleInterop\"><code>esModuleInterop</code></a> is enabled, <a href=\"#module\"><code>module</code></a> is <code>system</code>, or <a href=\"#module-resolution\"><code>moduleResolution</code></a> is <code>bundler</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> Interoperabilidade de Módulo ES - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Permite interoperabilidade de emição entre Módulos CommonJS e ES através da criação de namespaces para todas as importações.</p>\n<p>TypeScript adere ao padrão EcmaScript para módulos, o que significa que um arquivo com exportações teria que especificamente incluir uma exportação <code>default</code> para dar suporte à sintaxes como <code>import React from \"react\"</code>.\nEste padrão de exportação é raro em módulos para CommonJS. Por exemplo, sem <code>esModuleInterop</code> como true:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilitarios.js</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const obterTamanhoDaString: (str: any) => any' >obterTamanhoDaString</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) str: any' >str</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='var module: {&#10;    exports: typeof module.exports;&#10;}' >module</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\"><data-lsp lsp='module module.exports' >exports</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) obterTamanhoDaString: (str: any) => any' >obterTamanhoDaString</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// @filename: index.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./utilitarios\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const count: any' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='import utils' >utils</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(alias) obterTamanhoDaString(str: any): any&#10;import obterTamanhoDaString' >obterTamanhoDaString</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Checagem JS\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEECGAbHB7Ad1QzHFwMIGUBPAOwBc4GBLSAEVgDMsBXHBgEkAtgAd8AJwbpM4Lixyw6WYbABcoXqxwsGWCS3woAdACsZZOvhGidkXQEE6NDTxwpYaSPjooGofAAjBlgJABUVLDpofHYsKgYDOgBzUABeUAAKPwkASnSAPlAc40UUpgBuNDRhfAATflhjWAAPcSkUdNAAbzRQAODQiOEomLiEpOSAGjQAXyrSCHkylXVQFjo61uNpNBYxSX8tBU6uCXxhUAAiY2BjnT0DIyuF719-b15GLvuTIJDwpForF4okNslMlcAMJwSBYZKwS5IKhXXIVIA'>Try</a></div></pre>\n<p>Isto não vai funcionar porque não existe um objeto <code>default</code> o qual você pode importar. Apesar de parecer que deveria.\nPor conveniência, transpiladores como Babel vão criar um default automaticamente se não encontrarem um existente. Fazendo com que o módulo se pareça um pouco mais com isto:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @filename: utilitarios.js</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">obterTamanhoDaString</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">str</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">todasAsFuncoes</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">obterTamanhoDaString</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">todasAsFuncoes</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Ativando esta flag no compilador, a opção <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a> também será habilitada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code> if <a href=\"#module\"><code>module</code></a> is <code>node16</code> or <code>nodenext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Manter a consistência nos nomes do arquivo - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript diferencia letras maiúsculas e minúsculas no arquivo que está sendo executado.\nIsso pode se tornar um problema se alguns desenvolvedores trabalharem com diferenciação de letras maiúsculas e minúsculas no arquivo, e outros não. Se um arquivo tentar importar <code>fileManager.ts</code> especificando <code>./FileManager.ts</code> em sistemas que não fazem a diferenciação de maiúsculas e minúsculas, vai encontrar o arquivo, porém, em sistemas que fazem essa diferenciação, o arquivo não será encontrado.</p>\n<p>Quando essa opção está definida, o TypeScript vai gerar um erro caso o programa tente incluir um arquivo com padrão diferente - de diferenciação maiúsculas e minúsculas - no sistema.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Módulos Isolados - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Embora você possa usar o TypeScript para produzir código JavaScript a partir do código TypeScript, também é comum usar outros transpilers como <a href=\"https://babeljs.io\">Babel</a> para fazer isso.\nNo entanto, outros transpilers operam apenas em um único arquivo por vez, o que significa que eles não podem aplicar transformações de código que dependem da compreensão de todo o sistema de tipos.\nEsta restrição também se aplica à API <code>ts.transpileModule</code> do TypeScript que é usada por algumas ferramentas de construção.</p>\n<p>Essas limitações podem causar problemas de tempo de execução com alguns recursos do TypeScript, como <code>const enum</code>s e<code>namespace</code>s.\nDefinir o sinalizador <code>isolatedModules</code> diz ao TypeScript para avisá-lo se você escrever certo código que não pode ser interpretado corretamente por um processo de transpilação de arquivo único.</p>\n<p>Isso não altera o comportamento do seu código ou, de outra forma, altera o comportamento do processo de verificação e emissão do TypeScript</p>\n<p>Alguns exemplos de código que não funcionam quando <code>isolatedModules</code> está habilitado.</p>\n<h4 id=\"exportações-de-identificadores-sem-valor\" style=\"position:relative;\"><a href=\"#exporta%C3%A7%C3%B5es-de-identificadores-sem-valor\" aria-label=\"exportações de identificadores sem valor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exportações de identificadores sem valor</h4>\n<p>No TypeScript, você pode importar um <em>type</em> e depois exportá-lo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='import someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"someModule\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='import someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='export someType' >someType</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='export someFunction' >someFunction</data-lsp></span><span style=\"color: #000000\"> };</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1BWiwFMAVATxwoBpTyKAxAV0gGN8NpJQAX1AAzJFlAAiMpQCy0ACbsANhUkBuNGhltOPPpAAUASk1oKADzzxCJHbXpMdHbr35D1QA'>Try</a></div></pre>\n<p>Como não há valor para <code>someType</code>, o<code>export</code> emitido não tentará exportá-lo (isso seria um erro de tempo de execução em JavaScript):</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">someFunction</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Transpiladores de arquivo único não sabem se <code>someType</code> produz um valor ou não, então é um erro exportar um nome que se refere apenas a um tipo.</p>\n<h4 id=\"arquivos-non-module\" style=\"position:relative;\"><a href=\"#arquivos-non-module\" aria-label=\"arquivos non module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arquivos Non-Module</h4>\n<p>Se <code>isolatedModules</code> estiver definido, todos os arquivos de implementação devem ser <em>modules</em> (o que significa que tem alguma forma de<code>import</code> / <code>export</code>). Ocorre um erro se algum arquivo não for um módulo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(): void' >fn</data-lsp></span><span style=\"color: #000000\">() {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYAMAOAUCBAJaJwA2AhgC6QAmAsnLQK5mSJ4BmzAdgMZUicHqE48AFAEpQAbwC+QA'>Try</a></div></pre>\n<p>Esta restrição não se aplica a arquivos <code>.d.ts</code></p>\n<h4 id=\"referências-a-membros-const-enum\" style=\"position:relative;\"><a href=\"#refer%C3%AAncias-a-membros-const-enum\" aria-label=\"referências a membros const enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referências a membros <code>const enum</code></h4>\n<p>No TypeScript, quando você faz referência a um membro <code>const enum</code>, a referência é substituída por seu valor real no JavaScript emitido. Alterando este TypeScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.Zero = 0' >Zero</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='const enum Numbers' >Numbers</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(enum member) Numbers.One = 1' >One</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEBGIMa8A3gFDzwBaFS8AvPAAwA098A8igQcAjLwC+tZOiQQQAOghIA5gAoS+cpXnMYrANTEyFNPMEgAlAG4gA'>Try</a></div></pre>\n<p>Para este JavaScript:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlRAI3y5IoAN6ZQoAFqzYoALygADABploAPI1820AEZDAX0y9+sNvgB0bWAHMAFJOQy5Luq4mgDUEtKykC6m+ACUANxAA'>Try</a></div></pre>\n<p>Sem o conhecimento dos valores desses membros, outros transpiladores não podem substituir as referências a <code>Number</code>, o que seria um erro de tempo de execução se deixado sozinho (uma vez que não há objeto <code>Numbers</code> em tempo de execução).\nPor causa disso, quando <code>isolatedModules</code> é definido, é um erro fazer referência a um membro ambiente <code>const enum</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preservar Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Esta opção serve para refletir a mesma flag do Node.js; que não resolve o caminho real de links simbólicos.</p>\n<p>Esta flag também exibe o comportamento oposto ao da opção <code>resolve.symlinks</code> do Webpack (ou seja, definir <code>preserveSymlinks</code> do TypeScript para true é o mesmo que definir <code>resolve.symlinks</code> do Webpack para false, e vice-versa).</p>\n<p>Com esta opção habilitada, as referências para módulos e pacotes (ex. diretivas <code>import</code> e <code>/// &#x3C;reference type=\"...\" /></code>) são todas resolvidas em relação ao local do symlink em si, em vez de relativas ao caminho que o symlink resolve.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='verbatimModuleSyntax-config'><a aria-label=\"Link to the compiler option: verbatimModuleSyntax\" id='verbatimModuleSyntax' href='#verbatimModuleSyntax' name='verbatimModuleSyntax' aria-labelledby=\"verbatimModuleSyntax-config\">#</a> Verbatim Module Syntax - <code>verbatimModuleSyntax</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript does something called <em>import elision</em>.\nBasically, if you write something like</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript detects that you’re only using an import for types and drops the import entirely.\nYour output JavaScript might look something like this:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">drive</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">car</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Most of the time this is good, because if <code>Car</code> isn’t a value that’s exported from <code>./car</code>, we’ll get a runtime error.</p>\n<p>But it does add a layer of complexity for certain edge cases.\nFor example, notice there’s no statement like <code>import \"./car\";</code> - the import was dropped entirely.\nThat actually makes a difference for modules that have side-effects or not.</p>\n<p>TypeScript’s emit strategy for JavaScript also has another few layers of complexity - import elision isn’t always just driven by how an import is used - it often consults how a value is declared as well.\nSo it’s not always clear whether code like the following</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>should be preserved or dropped.\nIf <code>Car</code> is declared with something like a <code>class</code>, then it can be preserved in the resulting JavaScript file.\nBut if <code>Car</code> is only declared as a <code>type</code> alias or <code>interface</code>, then the JavaScript file shouldn’t export <code>Car</code> at all.</p>\n<p>While TypeScript might be able to make these emit decisions based on information from across files, not every compiler can.</p>\n<p>The <code>type</code> modifier on imports and exports helps with these situations a bit.\nWe can make it explicit whether an import or export is only being used for type analysis, and can be dropped entirely in JavaScript files by using the <code>type</code> modifier.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// This statement can be dropped entirely in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">car</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// The named import/export 'Car' can be dropped in JS output</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Car</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./car\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p><code>type</code> modifiers are not quite useful on their own - by default, module elision will still drop imports, and nothing forces you to make the distinction between <code>type</code> and plain imports and exports.\nSo TypeScript has the flag <code>--importsNotUsedAsValues</code> to make sure you use the <code>type</code> modifier, <code>--preserveValueImports</code> to prevent <em>some</em> module elision behavior, and <code>--isolatedModules</code> to make sure that your TypeScript code works across different compilers.\nUnfortunately, understanding the fine details of those 3 flags is hard, and there are still some edge cases with unexpected behavior.</p>\n<p>TypeScript 5.0 introduces a new option called <code>--verbatimModuleSyntax</code> to simplify the situation.\nThe rules are much simpler - any imports or exports without a <code>type</code> modifier are left around.\nAnything that uses the <code>type</code> modifier is dropped entirely.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Erased away entirely.</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">type</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">A</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import { b } from \"bcd\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bcd\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Rewritten to 'import {} from \"xyz\";'</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">xyz</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"xyz\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>With this new option, what you see is what you get.</p>\n<p>That does have some implications when it comes to module interop though.\nUnder this flag, ECMAScript <code>import</code>s and <code>export</code>s won’t be rewritten to <code>require</code> calls when your settings or file extension implied a different module system.\nInstead, you’ll get an error.\nIf you need to emit code that uses <code>require</code> and <code>module.exports</code>, you’ll have to use TypeScript’s module syntax that predates ES2015:</p>\n<table>\n<thead>\n    <tr>\n        <th>Input TypeScript</th>\n        <th>Output JavaScript</th>\n    </tr>\n</thead>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n<td>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">bar</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">baz</span><span style=\"color: #000000\">() {}</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">baz</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n</td>\n</tr>\n</table>\n<p>While this is a limitation, it does help make some issues more obvious.\nFor example, it’s very common to forget to set the <a href=\"https://nodejs.org/api/packages.html#type\"><code>type</code> field in <code>package.json</code></a> under <code>--module node16</code>.\nAs a result, developers would start writing CommonJS modules instead of an ES modules without realizing it, giving surprising lookup rules and JavaScript output.\nThis new flag ensures that you’re intentional about the file type you’re using because the syntax is intentionally different.</p>\n<p>Because <code>--verbatimModuleSyntax</code> provides a more consistent story than <code>--importsNotUsedAsValues</code> and <code>--preserveValueImports</code>, those two existing flags are being deprecated in its favor.</p>\n<p>For more details, read up on <a href=\"https://github.com/microsoft/TypeScript/pull/52203\">the original pull request</a> and <a href=\"https://github.com/microsoft/TypeScript/issues/51479\">its proposal issue</a>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Backwards_Compatibility_6253' ><a href='#Backwards_Compatibility_6253' name='Backwards_Compatibility_6253' aria-label=\"Link to the section Backwards Compatibility\" aria-labelledby='Backwards_Compatibility_6253'>#</a>Backwards Compatibility</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Nas versões anteriores do TypeScript, isso controlava qual codificação era usada ao ler arquivos de texto do disco.\nHoje, o TypeScript assume a codificação UTF-8, mas detectará corretamente as codificações UTF-16 (BE e LE) ou UTF-8 com <a href=\"https://pt.wikipedia.org/wiki/Marca_de_ordem_de_byte\">BOMs</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Somente Strings em KeyOf - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Este sinalizador muda o operador do tipo <code>keyof</code> para retornar<code>string</code> em vez de <code>string | number</code> quando aplicado a um tipo com uma assinatura de índice de string.</p>\n<p>Este sinalizador é usado para ajudar as pessoas a evitar esse comportamento de <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> Sem 'Use Strict' Implícito - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Você não deveria precisar disso. Por padrão, ao emitir um arquivo de módulo para um destino não ES6, o TypeScript emite um prólogo <code>\"use strict\";</code> no topo do arquivo.\nEsta configuração desabilita o prólogo.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> Sem Verificações Genéricas Estritas - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>O TypeScript unificará os parâmetros de tipo ao comparar duas funções genéricas.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: T' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: U' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T, U>(x: T, y: U): [T, U]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T, U>(x: T, y: U): [T, U]' >U</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: S' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: S' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> [</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) S in &lt;S>(x: S, y: S): [S, S]' >S</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f(a: A, b: B): void' >f</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type A = &lt;T, U>(x: T, y: U) => [T, U]' >A</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type B = &lt;S>(x: S, y: S) => [S, S]' >B</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: A' >a</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Ok</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-err><data-lsp lsp='(parameter) a: A' >a</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: B' >b</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Erro</span></div><span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYOBwAXyA'>Try</a></div></pre>\n<p>Esta flag pode ser usada para remover essa verificação.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Saída - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outfile\">outFile</a> ao invés.</p>\n<p>A opção <code>out</code> calcula a localização final do arquivo de uma forma que não é previsível ou consistente.\nEsta opção foi mantida apenas para compatibilidade com versões anteriores e foi descontinuada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li><li><p><a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Prevenir erros de propriedades em excesso - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Desativa o relatório de erros de propriedades em excesso, como o mostrado no exemplo a seguir:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const p: Point' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Point = {&#10;    x: number;&#10;    y: number;&#10;}' >Point</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) m: number' >m</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA'>Try</a></div></pre>\n<p>Esta opção foi adicionada para ajudar as pessoas a migrar para a verificação mais rigorosa de novos objetos literais no <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>Não recomendamos o uso dessa sinalização em uma base de código moderna, você pode prevenir casos únicos em que precise dela usando <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Prevenir erros de implicit any index - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ativando <code>suppressImplicitAnyIndexErrors</code> previne o relato do erros sobre qualquer implícito ao indexar objetos, conforme mostrado no exemplo a seguir:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div><span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA'>Try</a></div></pre>\n<p>Usar <code>suppressImplicitAnyIndexErrors</code> é uma abordagem bastante extrema. É recomendado usar um comentário <code>@ts-ignore</code> ao invés:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #008000\">// @ts-ignore</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Language_and_Environment_6254' ><a href='#Language_and_Environment_6254' name='Language_and_Environment_6254' aria-label=\"Link to the section Language and Environment\" aria-labelledby='Language_and_Environment_6254'>#</a>Language and Environment</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emitir Metadados de Decorators - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ativa o suporte experimental para a emissão de metadados de tipo para decorators que funcionam com o módulo <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>Por exemplo, aqui está o JavaScript</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function LogarMetodo(alvo: any, chaveDaPropriedade: string | symbol, descritor: PropertyDescriptor): void' >LogarMetodo</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) alvo: any' >alvo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) chaveDaPropriedade: string | symbol' >chaveDaPropriedade</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">symbol</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descritor: PropertyDescriptor' >descritor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface PropertyDescriptor' >PropertyDescriptor</data-lsp></span></div><div class='line'><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) alvo: any' >alvo</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) chaveDaPropriedade: string | symbol' >chaveDaPropriedade</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) descritor: PropertyDescriptor' >descritor</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Demo' >Demo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  @</span><span style=\"color: #001080\"><data-lsp lsp='function LogarMetodo(alvo: any, chaveDaPropriedade: string | symbol, descritor: PropertyDescriptor): void' >LogarMetodo</data-lsp></span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Demo.foo(bar: number): void' >foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) bar: number' >bar</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// não faz nada</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const demo: Demo' >demo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Demo(): Demo' >Demo</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5tggFlIlACYkAFDVCg8ANxIAuGegCeAGimgiAC2yzI+bAAUEJWMkgjsIyEqqZk6HqAA+oKipQAjErg3SbKiJkSgQlEzNETBVCIORYUJoASlAAb01SdCpfSAA6XF5xORIkgG4M9mzcPIKecR09A2NTcyRLa0gyiqyc-MLA4KRQroBfGhoiXGwqKlBCFBI0zXBuPkFhEjFNWAYvXCQiUDoSCS9+JXQGb0QU9OlpEFB0AGPFumwALyfrbE0xsYmlUwoBsC1AAF4npAAO5zSALcRlIA'>Try</a></div></pre>\n<p>Com <code>emitDecoratorMetadata</code> não ativo (padrão):</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogarMetodo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">chaveDaPropriedade</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descritor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">alvo</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">chaveDaPropriedade</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descritor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// não faz nada</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogarMetodo</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDm2BAFlIlACYkAFDVCg8ANxIAuLegCeAGg2gijbNsj5sABQQlYySEuxLIBqpmTopoAA+oFRGKABGJLhmmp5URMiUCAaOzoiYRoTxyLBJNACUoADe5qToVFGQAHS40qo6JPkA3KWiFbjVtVKqlta2Dk4uSG4ekM2t5ZU1dXEJXGTjAL40NES42FRUoIQoJMXm4JIy8ookKuawfOG4SESgPCRq4bIG6HwRiIUlmpr06ADHex42AAXqB0B5sOZlstVm1MKBPLtQABecGQFjbSC7VTNIA'>Try</a></div></pre>\n<p>Com <code>emitDecoratorMetadata</code> em true:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__decorate</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> === </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getOwnPropertyDescriptor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">decorate</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">decorate</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">desc</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> - </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &gt;= </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">--) </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">decorators</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">]) </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> ? </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">) : </span><span style=\"color: #795E26\">d</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">)) || </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\"> && </span><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">target</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">key</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">), </span><span style=\"color: #001080\">r</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__metadata</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">metadata</span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Reflect</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">k</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">v</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">LogarMetodo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">alvo</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">chaveDaPropriedade</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">descritor</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">alvo</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">chaveDaPropriedade</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">descritor</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #008000\">// não faz nada</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">__decorate</span><span style=\"color: #000000\">([</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">LogarMetodo</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">Function</span><span style=\"color: #000000\">),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #000000\">, [</span><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">]),</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">__metadata</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">], </span><span style=\"color: #1C6277\">Demo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">demo</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Demo</span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm2MRJKSSAChqhQeAG4kAXJfQBPADTnQRRtiuR82AAoIJLDIkNKSkPZUmMjoOqAAPqBUjigARiS4rhbhVETIIvYBQYiYjoS5yLAiNACUoADebqToVBmQAHS4uibWJDUA3E3qrbgdXTomHl4+-oHBSKHY4QNDLW2d3Tl5XGQrAL40NES42FRUoIQoJA1u4Np6BpTGbrAKqbhIRKByJKap+vZ0Ao0og6o0LBZ6OgAMfXOTYABeoHQS1kFgOByOw0woHCV1AAF5kZAWBdIFcTAMgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Decorators experimentais - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Habilita <a href=\"https://github.com/tc39/proposal-decorators\">suporte experimental a decorators</a>, o qual está em <em>stage 2</em> do processo de padronização do TC39.</p>\n<p>Decorators é uma funcionalidade da linguagem ainda não totalmente ratificada na especificação do JavaScript.\nIsso significa que a versão implementada no TypeScript pode diferir da implementação em JavaScript quando ela for definitivamente decidida pelo TC39.</p>\n<p>Você pode encontrar mais sobre o suporte a decorators no TypeScript <a href=\"/docs/handbook/decorators.html\">no guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Define como a sintaxe JSX é gerada em um arquivo JavaScript.\nIsso afeta apenas a saída JS para arquivos que terminam em <code>.tsx</code>.</p>\n<ul>\n<li><code>preserve</code>: Gera um arquivo <code>.jsx</code> sem alterar o JSX</li>\n<li><code>react</code>: Converte JSX em equivalente <code>React.createElement</code> e gera arquivo<code>.js</code></li>\n<li><code>react-native</code>: Gera arquivo <code>.js</code> sem alterar o JSX</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>preserve</code></p>\n</li><li><p><code>react</code></p>\n</li><li><p><code>react-native</code></p>\n</li><li><p><code>react-jsx</code></p>\n</li><li><p><code>react-jsxdev</code></p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> Fabrica JSX - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Altera a função chamada em arquivos <code>.js</code> ao compilar elementos JSX.\nA alteração mais comum é usar <code>\"h\"</code> ou <code>\"preact.h\"</code> ao invés do padrão <code>\"React.createElement\"</code> se estiver usando <code>preact</code>.</p>\n<p>Esta opção pode ser usada por arquivo muito semelhante a <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">directiva <code>/** @jsx h */</code> do Babel</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p>Any identifier or dotted identifier.</p>\n</li></ul></li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> Fábrica de fragmentos JSX - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Especifique a função que será a fábrica de fragmentos JSX para ser acionada ao usar o react JSX com a opção do compilador <code>jsxFactory</code> especificada, por exemplo <code>Fragment</code>.</p>\n<p>Esta opção pode ser usada por arquivo, muito semelhante a <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">diretiva <code>/** @jsxFrag h */</code> do Babel</a>.).</p>\n<p>Por exemplo, com esse TSConfig:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsx\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsxFactory\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"jsxFragmentFactory\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"Fragment\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Temos esse arquivo TSX:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">OlaMundo</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;&gt;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #000000\">Olá</span><span style=\"color: #800000\">&lt;/div&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;/&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Que seria equivalente, a esse arquivo TSX:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">preact_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">OlaMundo</span><span style=\"color: #000000\"> = () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> ((</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">Fragment</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preact_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">h</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"Ol</span><span style=\"color: #EE0000\">\\u00E1</span><span style=\"color: #A31515\">\"</span><span style=\"color: #000000\">)));</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOJx4ChMGEgAmAMWAAbJAC44wAHaykADwB0AKw6i2x3fPQxoAT3VdT5+VBQBzEEk0xLGW+uduHl6mmhD8UDhQJpRiMChQrkgw6kgcmnoiMWwgELL0KupouDmaxqSkoJCwcADecFwANHAB7p7wAL5w2LhwAERgRFa9ANzlRZoc8ADySigAsvTaEHAAvHAAFACUqwB8G6RwcAA8OweHx7LAAG47MwCHR+SXN2ePp5vDQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.Fragment</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li><li><p><a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> Fonte de importação jsx - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declara o especificador de módulo a ser usado para importar as funções factory <code>jsx</code> e <code>jsxs</code> ao usar <a href=\"#jsx\"><code>jsx</code></a> como <code>\"react-jsx\"</code> ou <code>\"react-jsxdev\"</code> que foi introduzido no TypeScript 4.1.</p>\n<p>Com <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a>, a biblioteca suporta uma nova forma de transformação JSX através de uma importação separada.</p>\n<p>Por exemplo com este código:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">React</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Olá Mundo</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Usando este TSConfig:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>O JavaScript gerado pelo TypeScript é:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\"> && </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__importDefault</span><span style=\"color: #000000\">) || </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> && </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">__esModule</span><span style=\"color: #000000\">) ? </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> : { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mod</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #1C6277\">Object</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">defineProperty</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">value:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">jsx_runtime_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">react_1</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">__importDefault</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">));</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggO1ogE6GyGTZjgBWkAHgFyiECmAhgMboC0NtFEyWABMArgBtmjdrGSDcNfuHStCAc2bpGzSLma0sQ5uzErmoQaImgAUgGUAGqADemUKFS50zQgDMOZxAlkZk9nAF9Xd09vP3YzAElPQg9IVHZA5mDPSGdItwBtSEZIdGTcVQBdRlZcAE8AbkiIiNRkAAdSdFAAJTZOUB8SZFAAIhYOdBHGzB8RXE5UWFxQAEE2toAKAEpctxZ0EUJlgB5oAEYAPgAJZjExWFAAdVIxIWPgc4vGsKA'>Try</a></div></pre>\n<p>Por exemplo se você quiser usar <code>\"jsxImportSource\": \"preact\"</code>, você precisa de um tsconfig como:</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#jsxImportSource'><data-lsp lsp=\"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`\">jsxImportSource</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Que gera um código como:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">jsx_runtime_1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">jsx</span><span style=\"color: #000000\">)(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #000000\">, { </span><span style=\"color: #001080\">children:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Ol</span><span style=\"color: #EE0000\">\\u00E1</span><span style=\"color: #A31515\"> Mundo\"</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">App</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">App</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOGwBWHAB4BJcNBgBlCPShokALjhgi6EZTEwAnmCQctO4vvaSpW3Rmq3RbGCigBzJDC1mAdkhS1mIgEAAm9AA2mnBouKF+ki5+EPxQOFAcpKSBkLBwmPR+GMAQfnAAgmBgABQAlHAA3qRwcEQwquUAPFwAjAB8APKRAIdwALJFYRBd5H39ANykAL5AA'>Try</a></div></pre>\n<p>Ao invés disso, voce pode usar um pragma por arquivo para definir esta opção, por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxImportSource</span><span style=\"color: #008000\"> preact */</span></div><div class='line'></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">App</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #000000\">Olá Mundo</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Adicionaria <code>preact/jsx-runtime</code> como uma importação para a factory <code>_jsx</code></p>\n<p><em>Nota:</em> Para que isso funcione como você esperava, seu arquivo <code>tsx</code> deve incluir um <code>export</code> ou <code>import</code> para que seja considerado um módulo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a></p>\n</li><li><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Biblioteca - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>O TypeScript inclui um conjunto padrão de definições de tipo para APIs JS embutidas (como <code>Math</code>), bem como definições de tipo para coisas encontradas em ambientes de navegador (como <code>document</code>).\nTypeScript também inclui APIs para recursos JS mais recentes que correspondem ao <code>target</code> que você especifica; por exemplo, a definição para <code>Map</code> está disponível se <code>target</code> for <code>ES6</code> ou mais recente.</p>\n<p>Você pode querer alterá-los por alguns motivos:</p>\n<ul>\n<li>Seu programa não roda em um navegador, então você não quer as definições do tipo <code>\"dom\"</code></li>\n<li>Sua plataforma de tempo de execução fornece certos objetos de API JavaScript (talvez por meio de polyfills), mas ainda não suporta a sintaxe completa de uma determinada versão ECMAScript</li>\n<li>Você tem polyfills ou implementações nativas para alguns, mas não todos, de uma versão ECMAScript de nível superior</li>\n</ul>\n<h3 id=\"bibliotecas-de-alto-nível\" style=\"position:relative;\"><a href=\"#bibliotecas-de-alto-n%C3%ADvel\" aria-label=\"bibliotecas de alto nível permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bibliotecas de alto nível</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Definições básicas para todas as funcionalidades ES3 e ES5</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>APIs adicionais disponíveis no ES2015 (também conhecido como ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>APIs adicionais disponíveis no ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>APIs adicionais disponíveis no ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>APIs adicionais disponíveis no ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>APIs adicionais disponíveis no ES2019 - <code>array.flat</code>,<code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>APIs adicionais disponíveis no ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>APIs adicionais disponíveis no ESNext - Isso muda conforme a especificação do JavaScript evolui</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs disponíveis em <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Worker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs para o <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\" style=\"position:relative;\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>Esta lista pode estar desatualizada, você pode ver a lista completa no <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleDetection-config'><a aria-label=\"Link to the compiler option: moduleDetection\" id='moduleDetection' href='#moduleDetection' name='moduleDetection' aria-labelledby=\"moduleDetection-config\">#</a> Module Detection - <code>moduleDetection</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting controls how TypeScript determines whether a file is a\n<a href=\"/docs/handbook/modules/theory.html#scripts-and-modules-in-javascript\">script or a module</a>.</p>\n<p>There are three choices:</p>\n<ul>\n<li>\n<p><code>\"auto\"</code> (default) - TypeScript will not only look for import and export statements, but it will also check whether the <code>\"type\"</code> field in a <code>package.json</code> is set to <code>\"module\"</code> when running with <a href=\"#module\"><code>module</code></a>: <code>nodenext</code> or <code>node16</code>, and check whether the current file is a JSX file when running under <a href=\"#jsx\"><code>jsx</code></a>: <code>react-jsx</code>.</p>\n</li>\n<li>\n<p><code>\"legacy\"</code> - The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.</p>\n</li>\n<li>\n<p><code>\"force\"</code> - Ensures that every non-declaration file is treated as a module.</p>\n</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>\"auto\": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.</p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>legacy</code></p>\n</li><li><p><code>auto</code></p>\n</li><li><p><code>force</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.7\" href=\"/docs/handbook/release-notes/typescript-4-7.html\">4.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> Sem Biblioteca - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Desabilita a inclusão automática de qualquer arquivo de biblioteca.\nSe esta opção estiver definida, <code>lib</code> é ignorada.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> Namespace do React - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> ao invés disso. Especifica o objeto invocado por <code>createElement</code> ao direcionar <code>react</code> para arquivos TSX.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Runtime alvo - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Navegadores modernos suportam todas as funcionalidades ES6, então <code>ES6</code> é uma boa escolha.\nVocê pode definir um alvo (target) mais baixo se o deploy do seu código for feito em ambientes antigos, ou um alvo mais alto se o seu código é garantido de rodar em ambientes mais novos.</p>\n<p>A configuração <code>target</code> altera quais funcionalidades JS serão niveladas para baixo e quais ficarão inalteradas.\nPor exemplo, a arrow function <code>() => this</code> será transformada na expressão <code>function</code> equivalente se o <code>target</code> for ES5 ou mais baixo.</p>\n<p>Alterando o <code>target</code> também alterará o valor da <a href=\"#lib\"><code>lib</code></a>.\nVocê pode “misturar e combinar” as configurações <code>target</code> e <code>lib</code> da forma que quiser, mas você pode definir apenas o <code>target</code>, por conveniência.</p>\n<p>Se você está trabalhando apenas com Node.js, esses são os <code>target</code>s recomendados para essas versões do Node:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Supported Target</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>Eles são baseados no banco de dados de suporte do <a href=\"https://node.green\">node.green</a>.</p>\n<p>O valor especial <code>ESNext</code> se refere a versão mais alta que a sua versão do TypeScript suporta.\nEssa configuração deve ser utilizada com precaução, pois não significa a mesma coisa entre diferentes versões do TypeScript e pode tornar atualizações menos previsíveis.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><ul><li><p><code>es3</code></p>\n</li><li><p><code>es5</code></p>\n</li><li><p><code>es6</code>/<code>es2015</code></p>\n</li><li><p><code>es2016</code></p>\n</li><li><p><code>es2017</code></p>\n</li><li><p><code>es2018</code></p>\n</li><li><p><code>es2019</code></p>\n</li><li><p><code>es2020</code></p>\n</li><li><p><code>es2021</code></p>\n</li><li><p><code>es2022</code></p>\n</li><li><p><code>esnext</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Usar Define para Propriedades de Classes - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Esta flag é utilizada para realizar a migração para as próximas versões padrões da especificação de propriedades de classe. O TypeScript introduziu propriedades de classe muitos anos antes de elas serem ratificadas pelo TC39. A última versão da especificação do JavaScript tem um comportamento diferente da implementação do TypeScript em tempo de execução, mas a mesma sintaxe.</p>\n<p>Essa flag altera esse comportamento para o comportamento do ECMA.</p>\n<p>Você pode ler mais sobre essa transição nas <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">notas de release da versão 3.7</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#target\"><code>target</code></a> is <code>ES2022</code> or higher, including <code>ESNext</code>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Compiler_Diagnostics_6251' ><a href='#Compiler_Diagnostics_6251' name='Compiler_Diagnostics_6251' aria-label=\"Link to the section Compiler Diagnostics\" aria-labelledby='Compiler_Diagnostics_6251'>#</a>Compiler Diagnostics</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnósticos - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usado para gerar informações de diagnóstico para depuração. Este comando é um subconjunto de <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a>, apenas com resultados voltados para o usuário e mais fáceis de interpretar.</p>\n<p>Se você tiver sido solicitado por um engenheiro do compilador do TypeScript para fornecer os resultados usando esse sinalizador em uma compilação, não há mal algum em usar <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> durante o processo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Deprecated</span>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> explainFiles - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Imprime os nomes dos arquivos que o TypeScript reconhece como parte do seu projeto e a razão pela qual são partes da compilação.</p>\n<p>Por exemplo, neste projeto com apenas um simples arquivo <code>index.ts</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">example</span></div><div class='line'><span style=\"color: #000000\">├── index.ts</span></div><div class='line'><span style=\"color: #000000\">├── package.json</span></div><div class='line'><span style=\"color: #000000\">└── tsconfig.json</span></div></code></div></pre>\n<p>Usando um <code>tsconfig.json</code> que tem <code>explainFiles</code> configurado como true:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es5\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"explainFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Executando o TypeScript nesta pasta teremos uma saída semelhante à essa:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'</span></div></code></div></pre>\n<p>A saída acima mostra:</p>\n<ul>\n<li>A busca lib.d.ts inicial baseada em <a href=\"#include\"><code>target</code></a>, e a cadeia de arquivos <code>.d.ts</code> que são referenciados</li>\n<li>O arquivo <code>index.ts</code> localizado através do pattern padrão de <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>Esta opção é destinada à depurar como um arquivo se tornou parte de sua compilação.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Diagnóstico estendido - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Você pode usar esta <em>flag</em> para descobrir em que o compilador TypeScript está utilizando o tempo de compilação.\nEsta é uma ferramenta utilizada para compreender as características da performance da sua base de código.</p>\n<p>Você pode aprender mais sobre como medir e compreender as informações retornadas por esta <em>flag</em> na <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">sessão de performance da wiki</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Gerar Perfil de CPU - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa opção permite que o TypeScript emita um perfil de CPU durante a depuração. O perfil de CPU pode oferecer informações sobre o porquê das suas compilações estarem lentas.</p>\n<p>Essa opção só pode ser utilizada no CLI pelo comando: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></div></code></div></pre>\n<p>Esse arquivo pode ser aberto em um navegador baseado no Chromium, como o Chrome ou Microsoft Edge na seção <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">de perfil de CPU</a>. Para saber mais sobre o desempenho dos compiladores, pode visitar a <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">wiki do TypeScript sobre performance</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>profile.cpuprofile</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> Listar arquivos emitidos - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Imprime nomes de arquivos gerados parte da compilação para o terminal.</p>\n<p>Este sinalizador é útil em dois casos:</p>\n<ul>\n<li>Você deseja transpilar o TypeScript como parte de uma cadeia de construção no terminal onde os nomes dos arquivos são processados no próximo comando.</li>\n<li>Você não tem certeza de que o TypeScript incluiu um arquivo que você esperava, como parte da depuração das <a href=\"#Project_Files_0\">configurações de inclusão de arquivo</a>.</li>\n</ul>\n<p>Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">exemplo\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>Com:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"declaration\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ecoaria caminhos como:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts</span></div></code></div></pre>\n<p>Normalmente, o TypeScript retornaria silenciosamente em caso de sucesso.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> Lista de arquivos - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Imprime nomes de arquivos que fazem parte da compilação. Isso é útil quando você não tem certeza de que o TypeScript tem\nincluiu um arquivo que você esperava.</p>\n<p>Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">exemplo\n├── index.ts\n├── package.json\n└── tsconfig.json</span></div></code></div></pre>\n<p>Com:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"listFiles\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Ecoaria caminhos como::</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul></li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Resolução de rastreamento - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando você estiver tentando depurar o motivo de um módulo não ter sido incluso,\nvocê pode definir o <code>traceResolutions</code> para <code>true</code> para que o TypeScript imprima informações sobre o seu processo de resolução de cada arquivo processado.</p>\n<p>Você pode ler mais sobre projetos compostos <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">nesse guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Projects_6255' ><a href='#Projects_6255' name='Projects_6255' aria-label=\"Link to the section Projects\" aria-labelledby='Projects_6255'>#</a>Projects</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Composição - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A opção <code>composite</code> aplica certas restrições que possibilitam que ferramentas de build (incluindo o TypeScript\nno modo <code>--build</code>) determinem rapidamente se um projeto já foi construído.</p>\n<p>Quando esta configuração está ativada:</p>\n<ul>\n<li>\n<p>A configuração <code>rootDir</code>, se não foi setada explicitamente, é o diretório que contém o arquivo <code>tsconfig.json</code>.</p>\n</li>\n<li>\n<p>Todos os arquivos de implementação devem corresponder a um padrão do <code>include</code> ou listados no array <code>files</code>. Se esta restrição for violada, o <code>tsc</code> informará quais arquivos não foram especificados.</p>\n</li>\n<li>\n<p><code>declaration</code> é setado como <code>true</code></p>\n</li>\n</ul>\n<p>Você pode encontrar a documentação de projetos TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">no guia</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> Desabilitar o carregamento do projeto referenciado - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Em aplicações Typescript de multi projetos, o TypeScript irá carregar todos os projetos disponíveis na memória com o objetivo de\nfornecer resultados mais precisos para as respostas do editor que requerem um gráfico de conhecimento completo como ‘Localizar todas as referências’.</p>\n<p>Se o seu projeto for grande, você pode utilizar a <em>flag</em> <code>disableReferencedProjectLoad</code> para desabilitar o carregamento automático de todos os projetos. Com isso, os projetos serão carregados dinamicamente quando você abrir os arquivos através do seu editor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Desabilitar Busca por Soluções - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ao trabalhar com <a href=\"/docs/handbook/project-reference.html\">projetos TypeScript compostos</a>, esta opção fornece uma maneira de declarar que você não deseja que um projeto seja incluído ao usar recursos como <em>encontrar todas as referências</em> ou <em>pular para definição</em> em um editor.</p>\n<p>Esse sinalizador é algo que você pode usar para aumentar a capacidade de resposta em grandes projetos compostos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Desabilitar Redirecionamento de Referências no Projeto de Origem - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ao trabalhar com <a href=\"/docs/handbook/project-reference.html\">projetos TypeScript compostos</a>, esta opção fornece uma maneira de voltar <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-edition-with-project-reference\">ao comportamento pré-3.7</a> em que os arquivos d.ts eram usados como limites entre os módulos.</p>\n<p>Na versão 3.7, a fonte da verdade são agora os arquivos TypeScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Diz ao TypeScript para salvar informações sobre o grafo do projeto da última compilação em arquivos armazenados no disco.\nEste cria uma série de arquivos <code>.tsbuildinfo</code> na mesma pasta de sua saída de compilação. Eles não são usados por seu JavaScript em tempo de execução e pode ser excluído com segurança. Você pode ler mais sobre a bandeira no <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 notas de lançamento</a>.</p>\n<p>Para controlar em quais pastas você deseja que os arquivos sejam construídos, use a opção de configuração <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <a href=\"#composite\"><code>composite</code></a>; <code>false</code> otherwise.</p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li><li><p><a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> Arquivo de informações da build do TS - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Essa configuração possibilita a você especificar um arquivo para armazenar informações incrementais de compilação como parte de projetos compostos que habilitam\nbuilds rápidas de grandes bases de código TypeScript. Você pode ler mais sobre projetos compostos <a href=\"/docs/handbook/project-references.html\">nesse guia</a>.</p>\n<p>Essa opção oferece uma forma de configurar o local onde o TypeScript se mantém informado sobre os arquivos que armazena no disco para\nindicar o estado de build de um projeto — por padrão, eles estão na mesma pasta dos seus JavaScripts emitidos.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><ul><li><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a></p>\n</li><li><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Output_Formatting_6256' ><a href='#Output_Formatting_6256' name='Output_Formatting_6256' aria-label=\"Link to the section Output Formatting\" aria-labelledby='Output_Formatting_6256'>#</a>Output Formatting</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> Sem truncamento de erro - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Não truncar mensagens de erro</p>\n<p>Com <code>false</code>, o padrão.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// A representação da string do tipo &apos;x&apos; deve ser truncada na mensagem de erro</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmoBmrADaJIRAG6tooAB6oA3kVCgADvGUx2ATwDqndgAsAgmUrTmkSABNOZAOaDNAGR62AcqwC2kAIypE7aBtbAG5FFTUNHT0jEzMLazsHZzt3LzQ-AKDQpVU4dWgtXQNjU3MrIKSXVMgMDMC7bPC8yKKY0viKpyrPSFw6rLDc-MLokrjyxK6Unvx+hqIAX1CSMENQaEhVSBEydlYAc4BjuFBLVlB-ettTk65lE4ByaQfTyDFIC5hQAKY2M9AyOcvGREKxbJAPK9QDB4OJJBc5tcALwyYJAA'>Try</a></div></pre>\n<p>Com <code>true</code></p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string' >propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string' >propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string' >propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string' >propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string' >propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// A representação da string do tipo &apos;x&apos; deve ser truncada na mensagem de erro</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-err><data-lsp lsp='var x: {&#10;    propertyWithAnExceedinglyLongName1: string;&#10;    propertyWithAnExceedinglyLongName2: string;&#10;    propertyWithAnExceedinglyLongName3: string;&#10;    propertyWithAnExceedinglyLongName4: string;&#10;    propertyWithAnExceedinglyLongName5: string;&#10;}' >x</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brSiAF9AkjBdUGhIRUhESDJ2VgBzgGO4UFNWUB9qqyPDrnlDgHJxW6PIIUhTmFB+JjZj0DIT9zIiFYlkgrieoBg8GEolOU0soAAvBJ-EA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Manter as saídas observadas - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Mantém as saídas desatualizadas no console durante o modo de observação, ao invés de limpar a tela toda vez que ocorrer alguma modificação.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Internal</span>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Embelezar - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Estiliza erros e mensagens utilizando cores e contexto, isso é ativado por padrão — oferece a você a oportunidade de receber do compilador menos mensagens concisas e de uma única cor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Completeness_6257' ><a href='#Completeness_6257' name='Completeness_6257' aria-label=\"Link to the section Completeness\" aria-labelledby='Completeness_6257'>#</a>Completeness</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Ignorar a verificação da biblioteca padrão - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Usar <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> no lugar dessa. Ignora a checagem dos tipos de arquivos de declaração na biblioteca padrão.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Ignorar a verificação de biblioteca - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ignora a verificação dos arquivos de declaração.</p>\n<p>Isso pode economizar tempo durante a compilação, porém, às custas da precisão do sistema de tipos. Por exemplo, duas bibliotecas podem definir duas cópias do mesmo <code>type</code> de modo inconsistente. Em vez de fazer uma verificação completa de todos os arquivos <code>d.ts</code>, o TypeScript irá verificar o código ao qual você se refere no código-fonte do aplicativo.</p>\n<p>Um uso comum para se usar o <code>skipLibCheck</code> é quando há duas cópias de uma biblioteca no seu <code>node_modules</code>. Nesses casos você deve considerar usar um recurso como as <a href=\"https://classic.yarnpkg.com/pt-BR/docs/selective-version-resolutions\">resoluções do yarn</a> para garantir que há apenas uma única cópia de cada dependência na sua árvore, ou descobrir como se certificar, entendendo as resoluções de dependência, como manter uma única cópia sem utilizar nenhuma ferramenta adicional.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended</span>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Linha de comando\" aria-labelledby='Command_line_Options_6171'>#</a>Linha de comando</h2>\n</div>\n<div class='category'>\n<h2 id='Watch_and_Build_Modes_6250' ><a href='#Watch_and_Build_Modes_6250' name='Watch_and_Build_Modes_6250' aria-label=\"Link to the section Watch Options\" aria-labelledby='Watch_and_Build_Modes_6250'>#</a>Watch Options</h2>\n<p>O TypeScript 3.8 lançou uma nova estratégia para monitorar as pastas, que é crucial para obter as mudanças no <code>node_modules</code>.</p>\n<p>Nos sistemas operacionais como Linux, o Typescript instala monitores de diretórios (ao contrário dos monitores de arquivos) no <code>node_modules</code> e muitos dos seus sub-diretórios para detectar mudanças nas suas dependências.\nIsto é devido a quantidade de monitores de arquivos disponíveis que é eclipsado pelo número de arquivos no <code>node_modules</code>, enquanto há muito poucos diretórios para rastrear.</p>\n<p>Como cada projeto deve funcionar melhor com diferentes estratégias, e esta nova abordagem pode não funcionar para o seu fluxo de trabalho, o TypeScript 3.8 introduziu o novo campo <code>watchOptions</code> que permite que o usuário diga ao compilador/serviço de linguagem quais estratégias de monitoramento devem ser utilizadas para manter o controle dos diretórios e arquivos.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Assume que as alterações afetem apenas dependências diretas - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando essa opção está ativada, o TypeScript apenas verifica/reconstrói os arquivos que foram alterados, bem como os arquivos que os importam diretamente. Evitando assim a verificação/reconstrução de todos os arquivos que realmente podem ter sido afetados pelas alterações.</p>\n<p>Isso pode ser considerado uma implementação ‘rápida’ do algoritmo de observação, que pode reduzir drasticamente os tempos de reconstrução incremental às custas de ter que executar a compilação completa ocasionalmente para obter todas as mensagens de erro do compilador.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='watchOptions'>\n<div>\n<section class='compiler-option'>\n<h3 id='watch-watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watch-watchFile' href='#watch-watchFile' name='watch-watchFile' aria-labelledby=\"watch-watchFile-config\">#</a> Observar Arquivo - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Define a estratégia como arquivos individuais devem ser observados por mudanças.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>priorityPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo, mas usando heurísticas para checar alguns tipos de arquivos mais frequentemente que outros.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde arquivos menos modificados são checados menos frequentemente.</li>\n<li><code>useFsEvents</code> (padrão): Tenta utilizar a funcionalidade nativa de eventos de modificação de arquivos do sistema operacional.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Tenta utilizar a implementação de eventos de modificação nativa do sistema operacional para detectar mudanças no diretório pai de um arquivo.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>prioritypollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li><li><p><code>usefsevents</code></p>\n</li><li><p><code>usefseventsonparentdirectory</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watch-watchDirectory' href='#watch-watchDirectory' name='watch-watchDirectory' aria-labelledby=\"watch-watchDirectory-config\">#</a> Observar Diretório - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Determina a estratégia que rege como árvores de diretório são observadas por mudanças em sistemas que não possuem a funcionalidade de observação recursiva de arquivos.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa por mudanças nos arquivos várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde diretórios que são menos alterados serão checados menos vezes.</li>\n<li><code>useFsEvents</code> (padrão): Tenta utilizar os eventos de modificação de diretórios/arquivos do próprio sistema operacional.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>usefsevents</code></p>\n</li><li><p><code>fixedpollinginterval</code></p>\n</li><li><p><code>dynamicprioritypolling</code></p>\n</li><li><p><code>fixedchunksizepolling</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='watch-fallbackPolling' href='#watch-fallbackPolling' name='watch-fallbackPolling' aria-labelledby=\"watch-fallbackPolling-config\">#</a> Alternativas na ausência de observadores - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando utilizar eventos de arquivos do sistema, essa opção indica as estratégias de verificação que o sistema deve executar quando estiver sem observadores e/ou não suportar os observadores nativos.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Checa por mudanças nos arquivos várias vezes por segundo a um intervalo pré-determinado.</li>\n<li><code>priorityPollingInterval</code>: Checa todos os arquivos por mudanças várias vezes por segundo, mas usando heurísticas para checar alguns tipos de arquivos mais frequentemente que outros.</li>\n<li><code>dynamicPriorityPolling</code>: Usa uma fila dinâmica onde diretórios que são menos alterados serão checados menos vezes.</li>\n<li><code>synchronousWatchDirectory</code>: Desativa a checagem adiada nos diretórios. Adiar a checagem é útil quando muitas mudanças podem acontecer de uma vez só (ex.: uma mudança em <code>node_modules</code> por executar o <code>npm install</code>), mas você pode querer desativar isso para configurações menos comuns.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><ul><li><p><code>fixedinterval</code></p>\n</li><li><p><code>priorityinterval</code></p>\n</li><li><p><code>dynamicpriority</code></p>\n</li><li><p><code>fixedchunksize</code></p>\n</li></ul></li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-synchronousWatchDirectory-config'><a aria-label=\"Link to the compiler option: synchronousWatchDirectory\" id='watch-synchronousWatchDirectory' href='#watch-synchronousWatchDirectory' name='watch-synchronousWatchDirectory' aria-labelledby=\"watch-synchronousWatchDirectory-config\">#</a> Synchronous Watch Directory - <code>synchronousWatchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory'><data-lsp lsp=\"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.\">synchronousWatchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeDirectories-config'><a aria-label=\"Link to the compiler option: excludeDirectories\" id='watch-excludeDirectories' href='#watch-excludeDirectories' name='watch-excludeDirectories' aria-labelledby=\"watch-excludeDirectories-config\">#</a> Exclude Directories - <code>excludeDirectories</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <a href=\"#excludeFiles\"><code>excludeFiles</code></a> to drastically reduce the number of files which are watched during <code>--watch</code>. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeDirectories'><data-lsp lsp=\"Remove a list of directories from the watch process.\">excludeDirectories</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"**/node_modules\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"_build\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"temp/*\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watch-excludeFiles-config'><a aria-label=\"Link to the compiler option: excludeFiles\" id='watch-excludeFiles' href='#watch-excludeFiles' name='watch-excludeFiles' aria-labelledby=\"watch-excludeFiles-config\">#</a> Exclude Files - <code>excludeFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use <code>excludeFiles</code> to remove a set of specific files from the files which are watched.</p>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#excludeFiles'><data-lsp lsp=\"Remove a list of files from the watch mode's processing.\">excludeFiles</data-lsp></a>\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"temp/file.ts\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n</div>\n</article></div>\n<div class=\"tsconfig raised main-content-block markdown\"><article id='typeAcquisition'>\n<h2 id=\"type-acquisition\" style=\"position:relative;\"><a href=\"#type-acquisition\" aria-label=\"type acquisition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Acquisition</h2>\n<p>Type Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node_modules folder.</p>\n<div>\n<section class='compiler-option'>\n<h3 id='type-enable-config'><a aria-label=\"Link to the compiler option: enable\" id='type-enable' href='#type-enable' name='type-enable' aria-labelledby=\"type-enable-config\">#</a> Enable - <code>enable</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables automatic type acquisition in JavaScript projects:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">false</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-include-config'><a aria-label=\"Link to the compiler option: include\" id='type-include' href='#type-include' name='type-include' aria-labelledby=\"type-include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via <a href=\"#disableFilenameBasedTypeAcquisition\"><code>disableFilenameBasedTypeAcquisition</code></a>.</p>\n<p>You can use <code>include</code> to specify which types should be used from DefinitelyTyped:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='type-exclude' href='#type-exclude' name='type-exclude' aria-labelledby=\"type-exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #000000\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"mocha\"</span><span style=\"color: #000000\">]</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n</div></section>\n<section class='compiler-option'>\n<h3 id='type-disableFilenameBasedTypeAcquisition-config'><a aria-label=\"Link to the compiler option: disableFilenameBasedTypeAcquisition\" id='type-disableFilenameBasedTypeAcquisition' href='#type-disableFilenameBasedTypeAcquisition' name='type-disableFilenameBasedTypeAcquisition' aria-labelledby=\"type-disableFilenameBasedTypeAcquisition-config\">#</a> Disable Filename Based Type Acquisition - <code>disableFilenameBasedTypeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like <code>jquery.js</code> in your project would automatically download the types for JQuery from DefinitelyTyped.</p>\n<p>You can disable this via <code>disableFilenameBasedTypeAcquisition</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"disableFilenameBasedTypeAcquisition\"</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">true</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n</div>\n</article></div>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"pt","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/pt.md","intro":{"html":"<h2>Introdução às referências do TSConfig</h2>\n<p>Ter um arquivo TSConfig em uma pasta indica que esta pasta é a raiz de um projeto TypeScript ou JavaScript. O arquivo TSConfig pode ser um <code>tsconfig.json</code> ou um <code>jsconfig.json</code>, os dois possuem o mesmo comportamento e as mesmas variáveis de configuração.</p>\n<p>Esta página cobre todas as diferentes opções de configuração disponíveis em um arquivo TSConfig. Ela começa com uma visão geral de todas as configurações, depois passa pelos atributos principais que estão na raiz do arquivo JSON, então fala sobre as <code>compilerOptions</code>, que são a maioria das opções e finaliza com as <code>watchOptions</code>.</p>\n"},"categories":[{"display":"Top Level","anchor":"Top Level","options":[{"anchor":"files","name":"Arquivos"},{"anchor":"extends","name":"Estender"},{"anchor":"include","name":"Incluir"},{"anchor":"exclude","name":"Excluir"},{"anchor":"references","name":"Referências"}]},{"display":"Type Checking","anchor":"Type_Checking_6248","options":[{"anchor":"allowUnreachableCode","name":"Permitir Código Não Executado"},{"anchor":"allowUnusedLabels","name":"Permitir Labels Não Utilizadas"},{"anchor":"alwaysStrict","name":"Sempre Estrito"},{"anchor":"exactOptionalPropertyTypes","name":"Exact Optional Property Types"},{"anchor":"noFallthroughCasesInSwitch","name":"Sem casos de Fallthrough no Switch"},{"anchor":"noImplicitAny","name":"Sem 'Any' Implícito"},{"anchor":"noImplicitOverride","name":"No Implicit Override"},{"anchor":"noImplicitReturns","name":"Sem Retornos Implícitos"},{"anchor":"noImplicitThis","name":"Sem 'This' Implícito"},{"anchor":"noPropertyAccessFromIndexSignature","name":"Sem acesso a propriedade pela assinatura do índice"},{"anchor":"noUncheckedIndexedAccess","name":"noUncheckedIndexedAccess"},{"anchor":"noUnusedLocals","name":"Sem Variáveis Locais Não Utilizadas"},{"anchor":"noUnusedParameters","name":"Sem Parâmetros Não Utilizados"},{"anchor":"strict","name":"Modo estrito"},{"anchor":"strictBindCallApply","name":"Bind Call Apply Restritos"},{"anchor":"strictFunctionTypes","name":"Tipo de Funções Restritos"},{"anchor":"strictNullChecks","name":"Checagem estrita de nulos"},{"anchor":"strictPropertyInitialization","name":"Inicialização restrita de propriedade"},{"anchor":"useUnknownInCatchVariables","name":"Use Unknown In Catch Variables"}]},{"display":"Modules","anchor":"Modules_6244","options":[{"anchor":"allowArbitraryExtensions","name":"Allow Arbitrary Extensions"},{"anchor":"allowImportingTsExtensions","name":"Allow Importing TS Extensions"},{"anchor":"allowUmdGlobalAccess","name":"Permitir Acesso Global UMD"},{"anchor":"baseUrl","name":"URL Base"},{"anchor":"customConditions","name":"Custom Conditions"},{"anchor":"module","name":"Módulo"},{"anchor":"moduleResolution","name":"Resolução de Módulos"},{"anchor":"moduleSuffixes","name":"Module Suffixes"},{"anchor":"noResolve","name":"Sem Resolução"},{"anchor":"paths","name":"Caminhos"},{"anchor":"resolveJsonModule","name":"Resolução de módulo JSON"},{"anchor":"resolvePackageJsonExports","name":"Resolve package.json Exports"},{"anchor":"resolvePackageJsonImports","name":"Resolve package.json Imports"},{"anchor":"rootDir","name":"Diretório Raiz"},{"anchor":"rootDirs","name":"Diretórios Raiz"},{"anchor":"typeRoots","name":"Raizes de Tipo"},{"anchor":"types","name":"Tipos"}]},{"display":"Emit","anchor":"Emit_6246","options":[{"anchor":"declaration","name":"Declarações"},{"anchor":"declarationDir","name":"Diretório de declarações"},{"anchor":"declarationMap","name":"Mapa de declarações"},{"anchor":"downlevelIteration","name":"Iteração Downlevel"},{"anchor":"emitBOM","name":"Emitir BOM"},{"anchor":"emitDeclarationOnly","name":"Emitir Somente Declarações"},{"anchor":"importHelpers","name":"Importar Auxiliares"},{"anchor":"importsNotUsedAsValues","name":"Importações não utilizadas como valores"},{"anchor":"inlineSourceMap","name":"Mapa de origem embutido"},{"anchor":"inlineSources","name":"Origens Embutidas"},{"anchor":"mapRoot","name":"Raiz do mapa"},{"anchor":"newLine","name":"Nova linha"},{"anchor":"noEmit","name":"Não Emita"},{"anchor":"noEmitHelpers","name":"No Emit Helpers"},{"anchor":"noEmitOnError","name":"Não emitir em caso de erro"},{"anchor":"outDir","name":"Diretório de saída"},{"anchor":"outFile","name":"Arquivo de saída"},{"anchor":"preserveConstEnums","name":"Manter Enums Constantes"},{"anchor":"preserveValueImports","name":"Preserve Value Imports"},{"anchor":"removeComments","name":"Remover Comentários"},{"anchor":"sourceMap","name":"Mapas de código"},{"anchor":"sourceRoot","name":"Raiz do código-fonte"},{"anchor":"stripInternal","name":"Remover internal"}]},{"display":"JavaScript Support","anchor":"JavaScript_Support_6247","options":[{"anchor":"allowJs","name":"Permitir JS"},{"anchor":"checkJs","name":"Checar JS"},{"anchor":"maxNodeModuleJsDepth","name":"Profundidade JS do módulo de nó máximo"}]},{"display":"Editor Support","anchor":"Editor_Support_6249","options":[{"anchor":"disableSizeLimit","name":"Desativar limite de tamanho"},{"anchor":"plugins","name":"Plugins"}]},{"display":"Interop Constraints","anchor":"Interop_Constraints_6252","options":[{"anchor":"allowSyntheticDefaultImports","name":"Permitir Imports Sintéticos Padrão"},{"anchor":"esModuleInterop","name":"Interoperabilidade de Módulo ES"},{"anchor":"forceConsistentCasingInFileNames","name":"Manter a consistência nos nomes do arquivo"},{"anchor":"isolatedModules","name":"Módulos Isolados"},{"anchor":"preserveSymlinks","name":"Preservar Symlinks"},{"anchor":"verbatimModuleSyntax","name":"Verbatim Module Syntax"}]},{"display":"Backwards Compatibility","anchor":"Backwards_Compatibility_6253","options":[{"anchor":"charset","name":"Charset"},{"anchor":"keyofStringsOnly","name":"Somente Strings em KeyOf"},{"anchor":"noImplicitUseStrict","name":"Sem 'Use Strict' Implícito"},{"anchor":"noStrictGenericChecks","name":"Sem Verificações Genéricas Estritas"},{"anchor":"out","name":"Saída"},{"anchor":"suppressExcessPropertyErrors","name":"Prevenir erros de propriedades em excesso"},{"anchor":"suppressImplicitAnyIndexErrors","name":"Prevenir erros de implicit any index"}]},{"display":"Language and Environment","anchor":"Language_and_Environment_6254","options":[{"anchor":"emitDecoratorMetadata","name":"Emitir Metadados de Decorators"},{"anchor":"experimentalDecorators","name":"Decorators experimentais"},{"anchor":"jsx","name":"JSX"},{"anchor":"jsxFactory","name":"Fabrica JSX"},{"anchor":"jsxFragmentFactory","name":"Fábrica de fragmentos JSX"},{"anchor":"jsxImportSource","name":"Fonte de importação jsx"},{"anchor":"lib","name":"Biblioteca"},{"anchor":"moduleDetection","name":"Module Detection"},{"anchor":"noLib","name":"Sem Biblioteca"},{"anchor":"reactNamespace","name":"Namespace do React"},{"anchor":"target","name":"Runtime alvo"},{"anchor":"useDefineForClassFields","name":"Usar Define para Propriedades de Classes"}]},{"display":"Compiler Diagnostics","anchor":"Compiler_Diagnostics_6251","options":[{"anchor":"diagnostics","name":"Diagnósticos"},{"anchor":"explainFiles","name":"explainFiles"},{"anchor":"extendedDiagnostics","name":"Diagnóstico estendido"},{"anchor":"generateCpuProfile","name":"Gerar Perfil de CPU"},{"anchor":"listEmittedFiles","name":"Listar arquivos emitidos"},{"anchor":"listFiles","name":"Lista de arquivos"},{"anchor":"traceResolution","name":"Resolução de rastreamento"}]},{"display":"Projects","anchor":"Projects_6255","options":[{"anchor":"composite","name":"Composição"},{"anchor":"disableReferencedProjectLoad","name":"Desabilitar o carregamento do projeto referenciado"},{"anchor":"disableSolutionSearching","name":"Desabilitar Busca por Soluções"},{"anchor":"disableSourceOfProjectReferenceRedirect","name":"Desabilitar Redirecionamento de Referências no Projeto de Origem"},{"anchor":"incremental","name":"Incremental"},{"anchor":"tsBuildInfoFile","name":"Arquivo de informações da build do TS"}]},{"display":"Output Formatting","anchor":"Output_Formatting_6256","options":[{"anchor":"noErrorTruncation","name":"Sem truncamento de erro"},{"anchor":"preserveWatchOutput","name":"Manter as saídas observadas"},{"anchor":"pretty","name":"Embelezar"}]},{"display":"Completeness","anchor":"Completeness_6257","options":[{"anchor":"skipDefaultLibCheck","name":"Ignorar a verificação da biblioteca padrão"},{"anchor":"skipLibCheck","name":"Ignorar a verificação de biblioteca"}]},{"display":"Linha de comando","anchor":"Command_line_Options_6171","options":[]},{"display":"Watch Options","anchor":"Watch_and_Build_Modes_6250","options":[{"anchor":"assumeChangesOnlyAffectDirectDependencies","name":"Assume que as alterações afetem apenas dependências diretas"}]},{"display":"watchOptions","anchor":"watchOptions","options":[{"anchor":"watchFile","name":"Observar Arquivo"},{"anchor":"watchDirectory","name":"Observar Diretório"},{"anchor":"fallbackPolling","name":"Alternativas na ausência de observadores"},{"anchor":"synchronousWatchDirectory","name":"Synchronous Watch Directory"},{"anchor":"excludeDirectories","name":"Exclude Directories"},{"anchor":"excludeFiles","name":"Exclude Files"}]},{"display":"typeAcquisition","anchor":"typeAcquisition","options":[{"anchor":"enable","name":"Enable"},{"anchor":"include","name":"Include"},{"anchor":"exclude","name":"Exclude"},{"anchor":"disableFilenameBasedTypeAcquisition","name":"Disable Filename Based Type Acquisition"}]}]}},"staticQueryHashes":[]}