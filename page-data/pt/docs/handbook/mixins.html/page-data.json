{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/mixins.html","result":{"data":{"markdownRemark":{"id":"d58bcd02-eff5-57ac-89d5-3035f0e17068","excerpt":"Junto com as hierarquias OO tradicionais, outra maneira popular de construir classes a partir de componentes reutilizáveis ​​é construí-los combinando classes…","html":"<p>Junto com as hierarquias OO tradicionais, outra maneira popular de construir classes a partir de componentes reutilizáveis ​​é construí-los combinando classes parciais mais simples.\nVocê pode estar familiarizado com a ideia de mixins ou traits para linguagens como Scala, e o padrão também alcançou alguma popularidade na comunidade JavaScript.</p>\n<h2 id=\"como-funciona-um-mixin\" style=\"position:relative;\"><a href=\"#como-funciona-um-mixin\" aria-label=\"como funciona um mixin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Como funciona um Mixin?</h2>\n<p>O padrão depende do uso de Genéricos com herança de classe para estender uma classe base.\nO melhor suporte mixin do TypeScript é feito por meio do padrão de expressão de classe.\nVocê pode ler mais sobre como esse padrão funciona em <a href=\"https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\">JavaScript aqui</a>.</p>\n<p>Para começar, precisaremos de uma classe que terá o mixin aplicado em cima de:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAOAnAlgFwKbQN4ChrQDsB7AW0wF5oAiKgbj2gA9pKAGe-ATxenZweBECEVIgCuwVEUQAKYmQBc0ESgIBzAJTYG+VAAtkEAHTyKhUug7QAvjmtA'>Try</a></div></pre>\n<p>Então você precisa de um tipo e uma função de fábrica que retorne uma expressão de classe estendendo a classe base.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Para começar, precisamos de um tipo que usaremos para estender</span></div><div class='line'><span style=\"color: #008000\">// outras classes de. A principal responsabilidade é declarar</span></div><div class='line'><span style=\"color: #008000\">// que o tipo que está sendo passado é uma classe.</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Construtor = new (...args: any[]) => {}' >Construtor</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Este mixin adiciona uma propriedade de escala, com getters e setters</span></div><div class='line'><span style=\"color: #008000\">// para alterá-lo com uma propriedade privada encapsulada:</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >Escala</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Construtor = new (...args: any[]) => {}' >Construtor</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) Base: TBase extends Construtor' >Base</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(local class) Dimensionamento' >Dimensionamento</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) Base: TBase extends Construtor' >Base</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Mixins não podem declarar propriedades privadas/protegidas</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// entretanto, você pode usar campos privados ES2020</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dimensionamento.setEscala(escala: number): void' >setEscala</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) escala: number' >escala</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) escala: number' >escala</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(getter) Dimensionamento.escala: number' >escala</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAUEMCdNBjA9gWwKYHOYBpQAdqrwCWAzpMoiaACaqgCuyoALkboqAI7131kEUquGHFQlmqAHa1oAKBChE9ZrCrwANpBIkxNVADpQAQTzQik4sPWgCJdpLIAjIuqLVItUAEu9GkXIVuOg5Wdi4eUDFmAEPQHWkOYW0PDh9GOD9tA1lZZgBPXDoAYUQHFWVEaFAAXlBJVAB3UAAKfTaYAHMSAC5QSEk8gG0AXQBKGoA+UABvAF8AbhyFAFFxOmQiAA9zPuoiYlK4dNNEfCJUd09PMXhITRwkJg7UZgloKjodV9R3+TBhWB9dRvaIAWnUHEeDGQcHwpzMFw8dDOADcPKILJBcCR6Jp3N0cgAzegWVilUCrW6aAA8ABUAEJaOioTYSaRUEplaAVaATZqMnS9BlM8bTWSgGwvejQSQITTaUAAESIaAcREOquYHBZbOoVAFdDFEolCgAsltzFRJABjxKIWhMWh+WBVOFnRG0IRmNHuEjAOESDpuLTi40KKQqF79LU4FGIeAAK7w9t4-AQ5HYXqIPsoFIAygAmAAMxdDEoA+jc7nBagBGRZluIvSnV5pVzS9SSMRw-UWNiXMAAWpH0lZIVJrkXH1cWxtAsxyc+ezCnE+ao073Z+M37kuY0tlQ5HY4ns+NC4lC1ksyAA'>Try</a></div></pre>\n<p>Com tudo isso configurado, você pode criar uma classe que representa a classe base com mixins aplicados:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Construtor = new (...args: any[]) => {}' >Construtor</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >Escala</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Construtor = new (...args: any[]) => {}' >Construtor</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) Base: TBase extends Construtor' >Base</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Escala&lt;TBase extends Construtor>(Base: TBase): {&#10;    new (...args: any[]): Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(local class) Dimensionamento' >Dimensionamento</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) Base: TBase extends Construtor' >Base</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Mixins não podem declarar propriedades privadas/protegidas</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// entretanto, você pode usar campos privados ES2020</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dimensionamento.setEscala(escala: number): void' >setEscala</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) escala: number' >escala</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) escala: number' >escala</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">get</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(getter) Dimensionamento.escala: number' >escala</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento._escala: number' >_escala</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---cortar---</span></div><div class='line'><span style=\"color: #008000\">// Componha uma nova classe da classe Sprite,</span></div><div class='line'><span style=\"color: #008000\">// com o aplicador Mixin Escala:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const SpriteOitoBits: {&#10;    new (...args: any[]): Escala&lt;typeof Sprite>.Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; typeof Sprite' >SpriteOitoBits</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function Escala&lt;typeof Sprite>(Base: typeof Sprite): {&#10;    new (...args: any[]): Escala&lt;typeof Sprite>.Dimensionamento;&#10;    prototype: Escala&lt;any>.Dimensionamento;&#10;} &amp; typeof Sprite' >Escala</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const abanoSprite: Escala&lt;typeof Sprite>.Dimensionamento &amp; Sprite' >abanoSprite</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const SpriteOitoBits: new (nome: string) => Escala&lt;typeof Sprite>.Dimensionamento &amp; Sprite' >SpriteOitoBits</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Passaro\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const abanoSprite: Escala&lt;typeof Sprite>.Dimensionamento &amp; Sprite' >abanoSprite</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Dimensionamento&lt;typeof Sprite>.setEscala(escala: number): void' >setEscala</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0.8</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const abanoSprite: Escala&lt;typeof Sprite>.Dimensionamento &amp; Sprite' >abanoSprite</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dimensionamento&lt;typeof Sprite>.escala: number' >escala</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKAOAnAlgFwKbQN4ChrQDsB7AW0wF5oAiKgbj2gA9pKAGe-ATxenZweBECEVIgCuwVEUQAKYmQBc0ESgIBzAJTYG+VAAtkEAHTyKhUug7QAvjlupO8TAGEhKsVMQ8C6AO7QZIyCwRDUIJTACTgBtAF0tcgA+bGt6ADMxAklkIWgAUQhgMHAAHgAVACFITHRGDAIAExhXYVEPaUSZKoh0JUrqrVx8RHRUMUQCaFBIGAARZDJhHIIwRaloWvqm6G7MIfxoAHpD6ABZZEZkYUIAY6JoeCIG9BJoZ+nEEIfEIiRkdAaYGeMD+ADcgZBDkgiBg1MhARAdEcTugCKJRpEpAAaaCgojAABXDyemDEEC+RRIjxBKHBDSIMDysAATKxWUiAProQrFMA8ACM9CRPVQBSK4Bk3PFYCUBDEJAARuhEIMkboDMYuTzwDwpbyrPhbEi1KMNtqwDINLL5UqvPsDtARmMJtB9IYjFrpQabAxUnYcMdoABaEOCRCoEIhoMBk6uKlCPR8+V84jgqbgKCYQHpmaYBAoDBYmNTUjQe5geAgZBFelec6XSZi3kKHCCVpwP4YADyaCIFTQMEoTYl+bQ6A0QrbImgYAVkSIo4w3j8HYL6B7Un7qAgMioAAUZiEiFQJzhZ-PF+gjCLhxbWEYABynqdEEBXkBENQyc-ES9GPXgBOQA'>Try</a></div></pre>\n<h2 id=\"mixins-restritos\" style=\"position:relative;\"><a href=\"#mixins-restritos\" aria-label=\"mixins restritos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mixins restritos</h2>\n<p>Na forma acima, o mixin não tem nenhum conhecimento básico da classe, o que pode dificultar a criação do design que você deseja.</p>\n<p>Para modelar isso, modificamos o tipo de construtor original para aceitar um argumento genérico.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Este era nosso construtor anterior:</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Construtor = new (...args: any[]) => {}' >Construtor</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #008000\">// Agora usamos uma versão genérica que pode aplicar uma restrição em</span></div><div class='line'><span style=\"color: #008000\">// a classe a qual este mixin é aplicado</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\"> = {}&gt; = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEFEGcBcFNVgJwIagHYHtKQ6AxhmjIgK7QaKjJpyICWFAXAFDQCeADvAMKHFkVQAXnSwA7qAAUAOlnJEAc0iMqaNgG0AugEphAPlABvAL4BuZiFABBBRVQlIyALZZQJJ6gBuSSAGPcCrBoAJf0eKgAjiTwHBgAJvDIHAA2dOGU7qiIsMR0AOf+CE4WYKh4ycjYiaBRyMkIMPBOdAAedGigwVQpachxGKyc8ADivETQpOSIADwAKsJGxgYiaOJSstLySirUGjr6oLOmQA'>Try</a></div></pre>\n<p>Isso permite a criação de classes que funcionam apenas com classes de base restritas:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\"> = {}&gt; = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ---corte---</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Posicionavel = new (...args: any[]) => {&#10;    setPos: (x: number, y: number) => void;&#10;}' >Posicionavel</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\"><data-lsp lsp='(property) setPos: (x: number, y: number) => void' >setPos</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Spritable = new (...args: any[]) => typeof Sprite' >Spritable</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Loggable = new (...args: any[]) => {&#10;    impressao: () => void;&#10;}' >Loggable</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\"><data-lsp lsp='(property) impressao: () => void' >impressao</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gwgewHYGdgCcCuwHoDwAqUAvFAN4C+AfCVEhAO5QAUAdOwIboDmKAXFA5IQAbQC6AShI0CAbgBQAYwA2HFCigBlMOgCWwaGXlQ6CALbRSAIisKTAD1oAGO1BDOFxqIuRosinHRmJHMIAT9dJG4pIxMTYAALXRRWEItaNIhXCnkcgHo8qABaEp90AxKi+VBIKAAFBBRdRV1kDgA3CGVaeF8MbFw8MigUCGAG-hZ7ASRMMwAjCHQAGjcZucX0KWIadoRdABMoagUa6G09YA555UtYRFR+wLwzhAAzLR19CCpT8GgADIIbjca63HoPPwDfDDXRmHQQdQcBACZjbXb7I4nIA'>Try</a></div></pre>\n<p>Então você pode criar mixins que só funcionam quando você tem uma base particular para construir:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\"> = {}&gt; = </span><span style=\"color: #AF00DB\">new</span><span style=\"color: #000000\"> (...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in type GConstrutor&lt;T = {}>' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Posicionavel = new (...args: any[]) => {&#10;    setPos: (x: number, y: number) => void;&#10;}' >Posicionavel</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\"><data-lsp lsp='(property) setPos: (x: number, y: number) => void' >setPos</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Spritable = new (...args: any[]) => typeof Sprite' >Spritable</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Loggable = new (...args: any[]) => {&#10;    impressao: () => void;&#10;}' >Loggable</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type GConstrutor&lt;T = {}> = new (...args: any[]) => T' >GConstrutor</data-lsp></span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #795E26\"><data-lsp lsp='(property) impressao: () => void' >impressao</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> }&gt;;</span></div><div class='line'><span style=\"color: #008000\">// ---cortar---</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Saltavel&lt;TBase extends Posicionavel>(Base: TBase): {&#10;    new (...args: any[]): Saltavel;&#10;    prototype: Saltavel&lt;any>.Saltavel;&#10;} &amp; TBase' >Saltavel</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Saltavel&lt;TBase extends Posicionavel>(Base: TBase): {&#10;    new (...args: any[]): Saltavel;&#10;    prototype: Saltavel&lt;any>.Saltavel;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Posicionavel = new (...args: any[]) => {&#10;    setPos: (x: number, y: number) => void;&#10;}' >Posicionavel</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) Base: TBase extends Posicionavel' >Base</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) TBase in Saltavel&lt;TBase extends Posicionavel>(Base: TBase): {&#10;    new (...args: any[]): Saltavel;&#10;    prototype: Saltavel&lt;any>.Saltavel;&#10;} &amp; TBase' >TBase</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(local class) Saltavel' >Saltavel</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) Base: TBase extends Posicionavel' >Base</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Saltavel.saltar(): void' >saltar</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// Este mixin só funcionará se for passado uma base</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// classe que tem setPos definido por causa da</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #008000\">// Restrição posicionável.</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) setPos: (x: number, y: number) => void' >setPos</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gwgewHYGdgCcCuwHoDwAqUAvFAN4C+AfCVEhAO5QAUAdOwIboDmKAXFA5IQAbQC6AShI0CAbgBQAYwA2HFCigBlMOgCWwaGXlQ6CALbRSAIisKTAD1oAGO1BDOFxqIuRosinHRmJHMIAT9dJG4pIxMTYAALXRRWEItaNIhXCnkc0EgoAAUEFF1FXWQOADcIZVp4XwxsXDwyKBQIYGL+FnsBJEwzACMIdAAaN37BkfQpYhoqhF0AEyhqBXzobT1gDiHlS1hEVCbAvE2EADMtHX0IKg3waAAZBG5uPYP6479m-DbdGYdBB1BwEAJmHMFktVut5AB6eFQAC0qJ86F26FRyPk8kumCQAQqSC0HGUuxqykIACE1NAIPYDEhlhpumVidValRmLSOgICLyIDEvOhOph0CSVGoNJoyRTalAGUyWVBBeQvCYUHKuJD1XE4oioABRNDQMy6eyRdoAZ6g+MJHPQAEP2tBLrgoGBpRxlggoIMOFAhnSNQakVL1NAAI6YaAGMyurolKDLCCXSIrP1gD2KDiYLUpjihkyGgBKIIwugA5wBjrMldnIJ2U1jFqCJZKsDpJlDMJwTABMTgkrhMOTHCgoQA'>Try</a></div></pre>\n<h2 id=\"padrão-alternativo\" style=\"position:relative;\"><a href=\"#padr%C3%A3o-alternativo\" aria-label=\"padrão alternativo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Padrão Alternativo</h2>\n<p>As versões anteriores deste documento recomendavam uma maneira de escrever mixins em que você criava o tempo de execução e as hierarquias de tipo separadamente e depois os mesclava no final:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Cada mixin é uma classe ES tradicional</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Saltavel' >Saltavel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Saltavel.saltar(): void' >saltar</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Abaixavel' >Abaixavel</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) Abaixavel.abaixar(): void' >abaixar</data-lsp></span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Incluindo a base</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite&#10;interface Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Então você cria uma interface que mescla</span></div><div class='line'><span style=\"color: #008000\">// os mixins esperados com o mesmo nome de sua base</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Sprite&#10;interface Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Saltavel' >Saltavel</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='class Abaixavel' >Abaixavel</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// Aplique os mixins na classe base via</span></div><div class='line'><span style=\"color: #008000\">// JS em tempo de execução</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function aplicarMixins(derivadoCtor: any, construtores: any[]): void' >aplicarMixins</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='class Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\">, [</span><span style=\"color: #001080\"><data-lsp lsp='class Saltavel' >Saltavel</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='class Abaixavel' >Abaixavel</data-lsp></span><span style=\"color: #000000\">]);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let jogador: Sprite' >jogador</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Sprite(): Sprite' >Sprite</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let jogador: Sprite' >jogador</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Saltavel.saltar(): void' >saltar</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='let jogador: Sprite' >jogador</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.x: number' >x</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='let jogador: Sprite' >jogador</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Sprite.y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Isso pode estar em qualquer lugar em sua base de código:</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function aplicarMixins(derivadoCtor: any, construtores: any[]): void' >aplicarMixins</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) derivadoCtor: any' >derivadoCtor</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) construtores: any[]' >construtores</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) construtores: any[]' >construtores</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.forEach(callbackfn: (value: any, index: number, array: any[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) baseCtor: any' >baseCtor</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #1C6277\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.getOwnPropertyNames(o: any): string[]' >getOwnPropertyNames</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) baseCtor: any' >baseCtor</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >prototype</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #000000\">((</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #1C6277\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.defineProperty&lt;any>(o: any, p: PropertyKey, attributes: PropertyDescriptor &amp; ThisType&lt;any>): any' >defineProperty</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) derivadoCtor: any' >derivadoCtor</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >prototype</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">        </span><span style=\"color: #1C6277\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor' >getOwnPropertyDescriptor</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) baseCtor: any' >baseCtor</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >prototype</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">) ||</span></div><div class='line'><span style=\"color: #000000\">          </span><span style=\"color: #1C6277\"><data-lsp lsp='var Object: ObjectConstructor' >Object</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ObjectConstructor.create(o: object): any (+1 overload)' >create</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">)</span></div><div class='line'><span style=\"color: #000000\">      );</span></div><div class='line'><span style=\"color: #000000\">    });</span></div><div class='line'><span style=\"color: #000000\">  });</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BcoBmBDANpApgFAigDCmAJpqALbwAe8AdqAJegCu1Vi2mk+oAKIBlUHApJ4Ae0Y4CPPpFDCc0TADc82UAG8CoUJFWZYACgCUugL4Eb83v1ABBAEaZ6Grbv2hMbj2aWOjZ2xACSjDzsTORSvqBu+PaKygAOCNB43gZ0oAC8oAAMANw+AJ75RaWhYIKM0ADHcepSiABXoIgIVJxUTJmwWIhZAI7sWdR4kApEYFJKtAyMSlOpeLAU851S1KBxk5DUcYw7WeRZkOxUiYT960NZwunwmaB4dJmM5Eoq2Gqa2AANM5-HRPNpgrNnKlsPAxlktosmEpZJ0HAIbqB1PBMFCAFKiPC7TLUVJxc5vOh4RDsADnTQImBhSBMAFl6MjTE8MnhgQBtX7-LTA1zuMEAgC65lKBGweGgoAAVlIAOabWCVRh4ADuaR5FlKyrVsVgADojH8TAb5DJIFI5absKrTEb1aa6MDXSbTWVpQQoWF+HEyRSpmoNUTQGMcPCNdh2GqI7tLtc+GcsogAM-keAqqQoAjodiRaDSZhM2GINkc5amc4IdSbEjQKSwNCYRhlYGIW1wdgt2BTdudvlS7LbZZ9gdTU3oVuCTCIAAWplMN2brcseQAfOODAB5FyK6nQU0q+X77WMAAKsCka1g0DKADlMAc12mN2b0lIW0+1uYs7zouK6mCckxbruegGDBoCHseyCmuc6BMHgt73usT6mD4sEGPW8CNrEX6mj+f5lGsgI4bh4G8lRsHwSeZ4Xle6EPk+AAiUxdPAqQDh++DEaRv7kbyoA0ZYAA+El0bhDGIV0eCYJkYHsNg2DmDJfqwVYWmgDp1RAA'>Try</a></div></pre>\n<p>Esse padrão depende menos do compilador e mais da sua base de código para garantir que o tempo de execução e o sistema de tipos sejam mantidos corretamente em sincronia.</p>\n<h2 id=\"restrições\" style=\"position:relative;\"><a href=\"#restri%C3%A7%C3%B5es\" aria-label=\"restrições permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Restrições</h2>\n<p>O padrão mixin é suportado nativamente dentro do compilador TypeScript por análise de fluxo de código.\nExistem alguns casos em que você pode atingir as bordas do suporte nativo.</p>\n<h4 id=\"decoradores-e-mixins-4881\" style=\"position:relative;\"><a href=\"#decoradores-e-mixins-4881\" aria-label=\"decoradores e mixins 4881 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoradores e Mixins <a href=\"https://github.com/microsoft/TypeScript/issues/4881\"><code>#4881</code></a></h4>\n<p>Você não pode usar decoradores para fornecer mixins por meio de análise de fluxo de código:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// Uma função decoradora que replica o padrão mixin:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='const Pausavel: (alvo: typeof Jogador) => typeof Pausavel' >Pausavel</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) alvo: typeof Jogador' >alvo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Jogador' >Jogador</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(local class) Pausavel' >Pausavel</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(parameter) alvo: typeof Jogador' >alvo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(property) Pausavel.deveCongelar: boolean' >deveCongelar</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">@</span><span style=\"color: #001080\"><data-lsp lsp='const Pausavel: (alvo: typeof Jogador) => typeof Pausavel' >Pausavel</data-lsp></span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Jogador' >Jogador</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Jogador.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Jogador.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// A classe Jogador não tem o tipo de decorador mesclado:</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const jogador: Jogador' >jogador</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Jogador(): Jogador' >Jogador</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const jogador: Jogador' >jogador</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >deveCongelar</data-lsp></data-err></span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'deveCongelar' does not exist on type 'Jogador'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'deveCongelar' does not exist on type 'Jogador'.</span><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Se o aspecto do tempo de execução pode ser replicado manualmente via</span></div><div class='line'><span style=\"color: #008000\">// composição de tipo ou fusão de interface.</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type JogadorCongelado = typeof Jogador &amp; {&#10;    deveCongelar: boolean;&#10;}' >JogadorCongelado</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Jogador' >Jogador</data-lsp></span><span style=\"color: #000000\"> & { </span><span style=\"color: #001080\"><data-lsp lsp='(property) deveCongelar: boolean' >deveCongelar</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const jogadorDois: JogadorCongelado' >jogadorDois</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Jogador(): Jogador' >Jogador</data-lsp></span><span style=\"color: #000000\">() </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">) </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type JogadorCongelado = typeof Jogador &amp; {&#10;    deveCongelar: boolean;&#10;}' >JogadorCongelado</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const jogadorDois: JogadorCongelado' >jogadorDois</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) deveCongelar: boolean' >deveCongelar</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEiC1AXKAEwDMHAnHWAKopsoAGYBXdAHOAxyVAATYmWzzloAI5jIoBJFi4kRYXNgqEs0CiTQk6ZjVLoqmUAAVsYqtgBukXKABeUAAKPG8SVkwAT3gSEVAAKRIAcxUyAEpAgD5QAG8aUB1ITDEEdFAiXGwqKjcPL19-GEwMeVqwuXzCwsVfAGESdGS-bARA0TwqSABuAtAAX1nFmhpwd08fPwcqmsSUtLGu0GhxgAZZwqizpZX6AEEKnam91NUx9AsWlFA5TCRYOSKBRKchvSyQKiVNL2RzOUAAK32YKC6EgAHcXgdgulZojXmQAHS9SADIYjBCzPigADK2jk1XgREoCl+kBQAOBoBgxDEMhMJCBUzGun0hjSlmw6DEeDQWG03iQ2CppHZJCoSD5nL+HJIYlEngsQNsLQQImwREgBJo0XgmLepOGVVU4xtkDidrIoAAZHlgf1Bo7RqwAEYkEi4SCShaU2EuPEHfAkJC1ILBVEYpL4hDY0DVUASADW6BIaPQmTzmYODpGqlxSLIieTRMg-rJVQpQA'>Try</a></div></pre>\n<h4 id=\"mixins-de-propriedade-estática-17829\" style=\"position:relative;\"><a href=\"#mixins-de-propriedade-est%C3%A1tica-17829\" aria-label=\"mixins de propriedade estática 17829 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mixins de propriedade estática <a href=\"https://github.com/microsoft/TypeScript/issues/17829\"><code>#17829</code></a></h4>\n<p>Mais uma pegadinha do que uma restrição.\nO padrão de expressão de classe cria singletons, portanto, não podem ser mapeados no sistema de tipos para suportar diferentes tipos de variáveis.</p>\n<p>Você pode contornar isso usando funções para retornar suas classes que diferem com base em um genérico:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function base&lt;T>(): typeof Base' >base</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in base&lt;T>(): typeof Base' >T</data-lsp></span><span style=\"color: #000000\">&gt;() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) Base.prop: T' >prop</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in base&lt;T>(): typeof Base' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function derivado&lt;T>(): typeof Derivado' >derivado</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in derivado&lt;T>(): typeof Derivado' >T</data-lsp></span><span style=\"color: #000000\">&gt;() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Derivado' >Derivado</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function base&lt;T>(): typeof Base' >base</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in derivado&lt;T>(): typeof Derivado' >T</data-lsp></span><span style=\"color: #000000\">&gt;() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(property) Derivado.outraProp: T' >outraProp</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in derivado&lt;T>(): typeof Derivado' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='class Derivado' >Derivado</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Spec' >Spec</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function derivado&lt;string>(): typeof Derivado' >derivado</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Spec' >Spec</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Base&lt;string>.prop: string' >prop</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Spec' >Spec</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Derivado&lt;string>.outraProp: string' >outraProp</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAIwIYGcCmAeAKgPgAoBKRAbwChFEIAbDdRAIQ03KusXSlVgkQAOAJzgCAXIlwBuDgF8OQzFBBCkLLDPkVQkWAkQATTEJgA3VAbh4ipStToNEAEWNmLcRJgAeUTGAOMaFjWJOycXDx8iHAgUEKoAAoi4pIy1PLUisqqzq7mlpoUFA7ojADKApj83r7+jEYm+VbcJmAA5jbkWhVVAHTColKIAPTDEa1tFD0QvTFxiclDo+Mw7UA'>Try</a></div></pre>","headings":[{"value":"Como funciona um Mixin?","depth":2},{"value":"Mixins restritos","depth":2},{"value":"Padrão Alternativo","depth":2},{"value":"Restrições","depth":2},{"value":"Decoradores e Mixins #4881","depth":4},{"value":"Mixins de propriedade estática #17829","depth":4}],"frontmatter":{"permalink":"/pt/docs/handbook/mixins.html","title":"Mixins","disable_toc":null,"handbook":null,"oneline":"Usando o padrão Mixin com TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-mixins","slug":"/pt/docs/handbook/mixins.html","repoPath":"/packages/documentation/copy/pt/reference/Mixins.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}