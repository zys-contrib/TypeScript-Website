{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/utility-types.html","result":{"data":{"markdownRemark":{"id":"139ea06c-0c94-54d2-b60b-9f0217d32542","excerpt":"TypeScript provém vários tipos utilitários para facilitar transformações de tipo comum. Esses utilitários estão disponíveis globalmente. Partial<Type> Constrói…","html":"<p>TypeScript provém vários tipos utilitários para facilitar transformações de tipo comum. Esses utilitários estão disponíveis globalmente.</p>\n<h2 id=\"partialtype\" style=\"position:relative;\"><a href=\"#partialtype\" aria-label=\"partialtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Partial&#x3C;Type></code></h2>\n<p>Constrói um tipo com todas as propriedades de <code>Type</code> definidas como opcionais. Esse utilitário irá retornar um tipo que representa todos os subconjuntos de um determinado tipo.</p>\n<h5 id=\"exemplo\" style=\"position:relative;\"><a href=\"#exemplo\" aria-label=\"exemplo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.titulo: string' >titulo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.descricao: string' >descricao</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function atualizaTodo(todo: Todo, camposParaAtualizar: Partial&lt;Todo>): {&#10;    titulo: string;&#10;    descricao: string;&#10;}' >atualizaTodo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) todo: Todo' >todo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) camposParaAtualizar: Partial&lt;Todo>' >camposParaAtualizar</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Partial&lt;T> = { [P in keyof T]?: T[P] | undefined; }' >Partial</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) todo: Todo' >todo</data-lsp></span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) camposParaAtualizar: Partial&lt;Todo>' >camposParaAtualizar</data-lsp></span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const todo1: {&#10;    titulo: string;&#10;    descricao: string;&#10;}' >todo1</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"organizar a mesa\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) descricao: string' >descricao</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"limpar bagunça\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const todo2: {&#10;    titulo: string;&#10;    descricao: string;&#10;}' >todo2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function atualizaTodo(todo: Todo, camposParaAtualizar: Partial&lt;Todo>): {&#10;    titulo: string;&#10;    descricao: string;&#10;}' >atualizaTodo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const todo1: {&#10;    titulo: string;&#10;    descricao: string;&#10;}' >todo1</data-lsp></span><span style=\"color: #000000\">, {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) descricao?: string | undefined' >descricao</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"tirar o lixo\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCoHsAm7kG8BQyyYwYArgDboBcyAzmFKAOYDchymEdCTCcNeoxbsAvvnwwyIBCXQhkccnArAAXnAzYAFGCyCt6ADTJ+AWwAO6OgAU4UOAEFlqjVFp2oJFQB5DAPgBKPA4oCHIoBVxkADo4vWwTOJjzK1t7Jxd1e2RRMQkEeQZifQBGZABeEKIScipaACJ0KGY4EGyoRWQzbjgGow4uHj4BRtVLHIAjOGZpAHO+gbyCorAS7AAmSsUsjUNdMpMCIiHeYH5BBpIHTpxVAA90fvxRQNYgA'>Try</a></div></pre>\n<h2 id=\"readonlytype\" style=\"position:relative;\"><a href=\"#readonlytype\" aria-label=\"readonlytype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Readonly&#x3C;Type></code></h2>\n<p>Constrói um tipo com todas as propriedades de <code>Type</code> definidas como <code>readonly</code>, significando que as propriedades do tipo construído não podem ser reatribuídas.</p>\n<h5 id=\"exemplo-1\" style=\"position:relative;\"><a href=\"#exemplo-1\" aria-label=\"exemplo 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.titulo: string' >titulo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const todo: Readonly&lt;Todo>' >todo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Readonly&lt;T> = { readonly [P in keyof T]: T[P]; }' >Readonly</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Deleta usuários inativos\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const todo: Readonly&lt;Todo>' >todo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='(property) titulo: any' >titulo</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Cannot assign to 'titulo' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'titulo' because it is a read-only property.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAJYB2ALjAGYCGAxpKACpwAmcoA3nqKCQSQK4AbOKkQloxAOYBuPAF88eanCKjuzYaABKkSiyICAngB5GLAHygAvO07degjQCIAIpAGQSlUH0R8Ah+JwiKDElDwAbkGOADRyMngk6gB0PPxCVqCOAPICfo5SQA'>Try</a></div></pre>\n<p>Esse utilitário é útil para representar expressões de atribuição que irão falhar em tempo de execução (Ex. Ao tentar reatribuir propriedades de um <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">objeto congelado</a>).</p>\n<h5 id=\"objectfreeze\" style=\"position:relative;\"><a href=\"#objectfreeze\" aria-label=\"objectfreeze permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Object.freeze</code></h5>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">freeze</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">obj</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Readonly</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Type</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<h2 id=\"recordkeystype\" style=\"position:relative;\"><a href=\"#recordkeystype\" aria-label=\"recordkeystype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Record&#x3C;Keys,Type></code></h2>\n<p>Constrói um tipo com um conjunto de propriedades <code>Keys</code> do tipo <code>Type</code>. Esse utilitário pode ser usado para mapear as propriedades de um tipo para outro tipo.</p>\n<h5 id=\"exemplo-2\" style=\"position:relative;\"><a href=\"#exemplo-2\" aria-label=\"exemplo 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface InfoPagina' >InfoPagina</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) InfoPagina.titulo: string' >titulo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Pagina = \"inicio\" | \"sobre\" | \"contato\"' >Pagina</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"inicio\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"sobre\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"contato\"</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const nav: Record&lt;Pagina, InfoPagina>' >nav</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Record&lt;K extends string | number | symbol, T> = { [P in K]: T; }' >Record</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='type Pagina = \"inicio\" | \"sobre\" | \"contato\"' >Pagina</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='interface InfoPagina' >InfoPagina</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) sobre: InfoPagina' >sobre</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) InfoPagina.titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"sobre\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) contato: InfoPagina' >contato</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) InfoPagina.titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"contato\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) inicio: InfoPagina' >inicio</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) InfoPagina.titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"inicio\"</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const nav: Record&lt;Pagina, InfoPagina>' style='border-bottom: solid 2px lightgrey;'>nav</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) sobre: InfoPagina' >sobre</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>const nav: Record&lt;Pagina, InfoPagina&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgJIhgewApwOahzIDeAUMsmMGAK4A2mAXMgM5hSh4DcpAvqaTABPAA4pcBEEQC8yAEShgCYJjnIAPvJaYARlAhrNchJnBwwqnqRMg2yKQDdmAJQgmoAEwA8EwgBo0DBx8QgA+ZFkyCm09CGZiSmp6Ji1dfTVeP3JkGzBzFISqWgZmY1M8iwysikVlAsTilIUQJRUqvitHADoY-R4Aen7kAD0AfiA'>Try</a></div></pre>\n<h2 id=\"picktype-keys\" style=\"position:relative;\"><a href=\"#picktype-keys\" aria-label=\"picktype keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Pick&#x3C;Type, Keys></code></h2>\n<p>Constrói um tipo pegando um conjunto de propriedades <code>Keys</code> de <code>Type</code>.</p>\n<h5 id=\"exemple\" style=\"position:relative;\"><a href=\"#exemple\" aria-label=\"exemple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemple</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.titulo: string' >titulo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.descricao: string' >descricao</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.completado: boolean' >completado</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type TodoPreVisualizacao = {&#10;    titulo: string;&#10;    completado: boolean;&#10;}' >TodoPreVisualizacao</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"titulo\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"completado\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const todo: TodoPreVisualizacao' >todo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type TodoPreVisualizacao = {&#10;    titulo: string;&#10;    completado: boolean;&#10;}' >TodoPreVisualizacao</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Limpar quarto\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) completado: boolean' >completado</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const todo: TodoPreVisualizacao' style='border-bottom: solid 2px lightgrey;'>todo</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const todo: TodoPreVisualizacao</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCoHsAm7kG8BQyyYwYArgDboBcyAzmFKAOYDchymEdCTCcNeoxbsiCdAFsADhQhg42WgCN06WXBDsAvvnxgAnlJQZsABSgQAasDpk4FYAC9EA5AF5kp4AgDWAHhN0ABpkACIScipQ5AAfMPFpWXlsUIA+dnxxEAZiLEFA8ysbOwdnfhwPAiIIykFQgBlgaTgoZABHOygwdFCgjgSZOQVBeAo6CD6tDO7sdgB6OeQAPQB+IA'>Try</a></div></pre>\n<h2 id=\"omittype-keys\" style=\"position:relative;\"><a href=\"#omittype-keys\" aria-label=\"omittype keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Omit&#x3C;Type, Keys></code></h2>\n<p>Constrói um tipo pegando todas as propriedades de <code>Type</code> e então removendo <code>Keys</code>.</p>\n<h5 id=\"exemplo-3\" style=\"position:relative;\"><a href=\"#exemplo-3\" aria-label=\"exemplo 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.titulo: string' >titulo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.descricao: string' >descricao</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Todo.completado: boolean' >completado</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type TodoPreVisualizacao = {&#10;    titulo: string;&#10;    completado: boolean;&#10;}' >TodoPreVisualizacao</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Omit&lt;T, K extends string | number | symbol> = { [P in Exclude&lt;keyof T, K>]: T[P]; }' >Omit</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"descricao\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const todo: TodoPreVisualizacao' >todo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type TodoPreVisualizacao = {&#10;    titulo: string;&#10;    completado: boolean;&#10;}' >TodoPreVisualizacao</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) titulo: string' >titulo</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Limpar quarto\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) completado: boolean' >completado</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const todo: TodoPreVisualizacao' style='border-bottom: solid 2px lightgrey;'>todo</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const todo: TodoPreVisualizacao</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgCoHsAm7kG8BQyyYwYArgDboBcyAzmFKAOYDchymEdCTCcNeoxbsiCdAFsADhQhg42WgCN06WXBDsAvvnxgAnlJQZsABSgQAasDpk4FYAC9EA5AF5kAeQmkAPCfQAGmQAIi4ePgEQgD52fHEQBmIsQQDzKxs7B2d+HA8CIhJyKloQgBlgaTgoZABHOygwdBDAjnFpWXlFZHgKOghWrTim7HYAejHkAD0AfiA'>Try</a></div></pre>\n<h2 id=\"excludetype-excludedunion\" style=\"position:relative;\"><a href=\"#excludetype-excludedunion\" aria-label=\"excludetype excludedunion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Exclude&#x3C;Type, ExcludedUnion></code></h2>\n<p>Constrói um tipo excluindo de <code>Type</code> todos membros de união que são atribuíveis a <code>ExcludedUnion</code>.</p>\n<h5 id=\"exemplo-4\" style=\"position:relative;\"><a href=\"#exemplo-4\" aria-label=\"exemplo 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = \"b\" | \"c\"' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = \"b\" | \"c\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = \"c\"' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = \"c\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T2 = string | number' style='border-bottom: solid 2px lightgrey;'>T2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Function' >Function</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T2 = string | number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKgDFAvFAogDwMYBsCuATCAHgCIBDYqAHymICMLriNiAaG8gPgG4AoAej5QhUAHoB+HqEiwAjElSZcBEuSo16apq3YN1xbv0HDxk8NBgAmeemz4iAZ2AAnAJYA7AOZq3OALa0IJzUACmCASiQOKAA3AHsXPDC2ADEcNwxgF1i3AwFhUTEgA'>Try</a></div></pre>\n<h2 id=\"extracttype-union\" style=\"position:relative;\"><a href=\"#extracttype-union\" aria-label=\"extracttype union permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Extract&#x3C;Type, Union></code></h2>\n<p>Constrói um tipo extraindo de <code>Type</code> todos membros de união que são atribuíveis a <code>Union</code>.</p>\n<h5 id=\"exemplo-5\" style=\"position:relative;\"><a href=\"#exemplo-5\" aria-label=\"exemplo 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = \"a\"' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">\"f\"</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = \"a\"</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = () => void' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">), </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Function' >Function</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = () =&gt; void</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKgDFAvFAogD2AJwIYGNgA8ARNkVAD5REBGZlRuRANFaRVQGZEB8A3AFAB6QVFFQAegH5+oSLACMSVBhz4CAZywBLAHYBzdjoCuAW2oRM7ABRWAlEm5QAbgHstAE1ssAYkZ34tFx0+IRExKSA'>Try</a></div></pre>\n<h2 id=\"nonnullabletype\" style=\"position:relative;\"><a href=\"#nonnullabletype\" aria-label=\"nonnullabletype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>NonNullable&#x3C;Type></code></h2>\n<p>Constrói um tipo por excluir <code>null</code> e <code>undefined</code> de <code>Type</code>.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = string | number' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type NonNullable&lt;T> = T &amp; {}' >NonNullable</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = string | number</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string[]' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type NonNullable&lt;T> = T &amp; {}' >NonNullable</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">undefined</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string[]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKgDFAvFAcgewHYoK4BtcCGARrhADwDOwATgJYYDmUAPlBtgLZETUtTYYAJhABm9CIIB8AbgBQAenlRlUAHoB+WaEiwAjElSYc+YqUo16DANoBdPu3x8BwsRgkyFSlRqA'>Try</a></div></pre>\n<h2 id=\"parameterstype\" style=\"position:relative;\"><a href=\"#parameterstype\" aria-label=\"parameterstype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Parameters&#x3C;Type></code></h2>\n<p>Constrói uma tipo tupla a partir de tipos usados nos parâmetros de uma função tipo <code>Type</code>.</p>\n<h5 id=\"exemplo-6\" style=\"position:relative;\"><a href=\"#exemplo-6\" aria-label=\"exemplo 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f1(arg: {&#10;    a: number;&#10;    b: string;&#10;}): void' >f1</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: {&#10;    a: number;&#10;    b: string;&#10;}' >arg</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: string' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = []' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = []</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = [s: string]' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = [s: string]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T2 = [arg: unknown]' style='border-bottom: solid 2px lightgrey;'>T2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T>(arg: T): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T>(arg: T): T' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T>(arg: T): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T2 = [arg: unknown]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T3 = [arg: {&#10;    a: number;&#10;    b: string;&#10;}]' style='border-bottom: solid 2px lightgrey;'>T3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function f1(arg: {&#10;    a: number;&#10;    b: string;&#10;}): void' >f1</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T3 = [arg: {\n    a: number;\n    b: string;\n}]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T4 = unknown[]' style='border-bottom: solid 2px lightgrey;'>T4</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T4 = unknown[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T5 = never' style='border-bottom: solid 2px lightgrey;'>T5</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T5 = never</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T6 = never' style='border-bottom: solid 2px lightgrey;'>T6</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'string' does not satisfy the constraint '(...args: any) =&gt; any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'string' does not satisfy the constraint '(...args: any) =&gt; any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T6 = never</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T7 = never' style='border-bottom: solid 2px lightgrey;'>T7</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type Parameters&lt;T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never' >Parameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err><data-lsp lsp='interface Function' >Function</data-lsp></data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'Function' does not satisfy the constraint '(...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature '(...args: any): any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'Function' does not satisfy the constraint '(...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature '(...args: any): any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T7 = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQATSAYwBsBDaSUAMwFcA7IgFwEs56aBGACgoHNUAb1BlU9WgFsARjADcoKakRNoLen1ABfAJSoAbnBb5ZuXEwCeAByoAVAAygAvKAAKFMhMhMYiADzdtJwA+UGVVdSCTEFAY0AA9AH4zK1tOJ1d3T28kfxRQlTU+QMcQgyNI3GjYxOTrUBs0dLdoDy8fX18bIN5oAXrikK6osGqkizqbDCbMtpzxyDhqLgqqmJr5+qxplqz2snpzFZG1sZT6gFZt1uy-ekg9GCPY+NOJgDYr3ZywwqfR2tsAHZPrM-AAxBjMNj0P4nIA'>Try</a></div></pre>\n<h2 id=\"constructorparameterstype\" style=\"position:relative;\"><a href=\"#constructorparameterstype\" aria-label=\"constructorparameterstype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ConstructorParameters&#x3C;Type></code></h2>\n<p>Constrói um tipo tupla ou array a partir dos tipos de um tipo função construtora. Isso gera um tipo tupla com todos os tipos parâmetros (ou o tipo <code>never</code> se <code>Type</code> não for uma função).</p>\n<h5 id=\"exemplo-7\" style=\"position:relative;\"><a href=\"#exemplo-7\" aria-label=\"exemplo 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = [message?: string]' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ConstructorParameters&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never' >ConstructorParameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface ErrorConstructor' >ErrorConstructor</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = [message?: string]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = string[]' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ConstructorParameters&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never' >ConstructorParameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface FunctionConstructor' >FunctionConstructor</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = string[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T2 = [pattern: string | RegExp, flags?: string]' style='border-bottom: solid 2px lightgrey;'>T2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ConstructorParameters&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never' >ConstructorParameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface RegExpConstructor' >RegExpConstructor</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T2 = [pattern: string | RegExp, flags?: string]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T3 = unknown[]' style='border-bottom: solid 2px lightgrey;'>T3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ConstructorParameters&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never' >ConstructorParameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T3 = unknown[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T4 = never' style='border-bottom: solid 2px lightgrey;'>T4</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ConstructorParameters&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never' >ConstructorParameters</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err><data-lsp lsp='interface Function' >Function</data-lsp></data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'Function' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature 'new (...args: any): any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'Function' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature 'new (...args: any): any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T4 = never</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQIJEAXaASwGMjUAzAQwBtFJciBPAB0lABUAGUALygAwnAB2xaAFdKCAAq1otALaQiMRAB4AorASiJJGUQQA+ANz4woGwD0A-Cw5duARkEjxk4-MUq1GpoAYlJilKTiBt6y0BZWNnaObJw8aB5RRjEKSqrqSJoASpAA5toAHuwZ0jFxBAkOTincGOlemSbQ2f55WrRirLXWiY0uWK2G1R1duYEhYUQRYoMJoA5AA'>Try</a></div></pre>\n<h2 id=\"returntypetype\" style=\"position:relative;\"><a href=\"#returntypetype\" aria-label=\"returntypetype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ReturnType&#x3C;Type></code></h2>\n<p>Constrói um tipo consistindo do tipo retorno da função <code>Type</code>.</p>\n<h5 id=\"exemplo-8\" style=\"position:relative;\"><a href=\"#exemplo-8\" aria-label=\"exemplo 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function f1(): {&#10;    a: number;&#10;    b: string;&#10;}' >f1</data-lsp></span><span style=\"color: #000000\">(): { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: string' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = string' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = string</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = void' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = void</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T2 = unknown' style='border-bottom: solid 2px lightgrey;'>T2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T>(): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T>(): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T2 = unknown</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T3 = number[]' style='border-bottom: solid 2px lightgrey;'>T3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T extends U, U extends number[]>(): T' >T</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T extends U, U extends number[]>(): T' >U</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in &lt;T extends U, U extends number[]>(): T' >U</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[]&gt;() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in &lt;T extends U, U extends number[]>(): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T3 = number[]</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T4 = {&#10;    a: number;&#10;    b: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>T4</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function f1(): {&#10;    a: number;&#10;    b: string;&#10;}' >f1</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T4 = {\n    a: number;\n    b: string;\n}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T5 = any' style='border-bottom: solid 2px lightgrey;'>T5</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T5 = any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T6 = never' style='border-bottom: solid 2px lightgrey;'>T6</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T6 = never</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T7 = any' style='border-bottom: solid 2px lightgrey;'>T7</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'string' does not satisfy the constraint '(...args: any) =&gt; any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'string' does not satisfy the constraint '(...args: any) =&gt; any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T7 = any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T8 = any' style='border-bottom: solid 2px lightgrey;'>T8</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type ReturnType&lt;T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any' >ReturnType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err><data-lsp lsp='interface Function' >Function</data-lsp></data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'Function' does not satisfy the constraint '(...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature '(...args: any): any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'Function' does not satisfy the constraint '(...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature '(...args: any): any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T8 = any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsX3awFAAmkAxgDYCG0koAZgK4B2pALgJZxP0CMAFAEpUAb1CVUTBgFsARjADcoGakSto7JgHNQAX3kECrAJ4AHWgBUADKAC8oAEqRWDaE3OnIAHkG2AfKFV1LV99EFBw0AA9AH5DD1BzHlsHJxc3D28UALUNTQE-UAA3OHYiEIIwiJi4swS0ZMdnV3czT09zXx8bfw7QsCrY41rzDAbU5oz20EgAD1ZIJiJEUABVABpV6bmFpdBJWRgAbQBdTvzuhPLK8Oqhi1w7RrSWrzu4Ol4r-pvB+PMAVjGTXSrUoTCMXwiUV+wwAbEDnhkmJBCjBIQMahYAOwIiatQK5dE-TEJAAcuJBXgAYsw2JwmEToUA'>Try</a></div></pre>\n<h2 id=\"instancetypetype\" style=\"position:relative;\"><a href=\"#instancetypetype\" aria-label=\"instancetypetype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InstanceType&#x3C;Type></code></h2>\n<p>Constrói um tipo consistindo do tipo instancia de uma função construtora em <code>Type</code>.</p>\n<h5 id=\"exemplo-9\" style=\"position:relative;\"><a href=\"#exemplo-9\" aria-label=\"exemplo 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) C.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) C.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T0 = C' style='border-bottom: solid 2px lightgrey;'>T0</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T0 = C</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T1 = any' style='border-bottom: solid 2px lightgrey;'>T1</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T1 = any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T2 = never' style='border-bottom: solid 2px lightgrey;'>T2</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">never</span><span style=\"color: #000000\">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T2 = never</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T3 = any' style='border-bottom: solid 2px lightgrey;'>T3</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err>string</data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'string' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'string' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T3 = any</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type T4 = any' style='border-bottom: solid 2px lightgrey;'>T4</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\"><data-lsp lsp='type InstanceType&lt;T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any' >InstanceType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-err><data-lsp lsp='interface Function' >Function</data-lsp></data-err></span><span style=\"color: #000000\">&gt;;</span></div><span class=\"error\"><span>Type 'Function' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature 'new (...args: any): any'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'Function' does not satisfy the constraint 'abstract new (...args: any) =&gt; any'.\n  Type 'Function' provides no match for the signature 'new (...args: any): any'.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type T4 = any</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsX3awFAgSIAu0AlgMamoBmAhgDaKQFVMOKKgDCoAbwKhQAD1ABeUAAYA3MNABPSTPkBfAgVKKADpFAAVaSoCSAOzIMzVSAd2QAPNr1w6fAHzziI0AD0A-Fr2hgCMphakVjZ2eg5Wip5EYD4BQXqGaOGW1rb2DmaQAG4wid4iqc76BhhZkTkxjmSUZgDmpcnlgZWGuFLm2dF5AGIArtakFHBm7T5+-kA'>Try</a></div></pre>\n<h2 id=\"requiredtype\" style=\"position:relative;\"><a href=\"#requiredtype\" aria-label=\"requiredtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Required&#x3C;Type></code></h2>\n<p>Constrói um tipo consistindo de todas propriedades de <code>T</code> definidas como obrigatórias. O oposto de <a href=\"#partialtype\"><code>Partial</code></a>.</p>\n<h5 id=\"exemplo-10\" style=\"position:relative;\"><a href=\"#exemplo-10\" aria-label=\"exemplo 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Props' >Props</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Props.a?: number | undefined' >a</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) Props.b?: string | undefined' >b</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: Props' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Props' >Props</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) Props.a?: number | undefined' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-err><data-lsp lsp='const obj2: Required&lt;Props>' >obj2</data-lsp></data-err></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Required&lt;T> = { [P in keyof T]-?: T[P]; }' >Required</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='interface Props' >Props</data-lsp></span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> };</span></div><span class=\"error\"><span>Property 'b' is missing in type '{ a: number; }' but required in type 'Required&lt;Props&gt;'.</span><span class=\"code\">2741</span></span><span class=\"error-behind\">Property 'b' is missing in type '{ a: number; }' but required in type 'Required&lt;Props&gt;'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYAsBGAUAJYB2ALjAGYCGAxpKAArwAOioA3nqKJQPypEBXALYAjGAG5OoEX1CIS0YgHNJAXzx5qcIvNBwRAK1SM4LUAF523VAFZQqyZu279BtKgBKkAI4CC0SAATAB4TFgA+CytKW3txIA'>Try</a></div></pre>\n<h2 id=\"thisparametertypetype\" style=\"position:relative;\"><a href=\"#thisparametertypetype\" aria-label=\"thisparametertypetype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ThisParameterType&#x3C;Type></code></h2>\n<p>Extrai o tipo do parâmetro <a href=\"/docs/handbook/functions.html#this-parameters\">this</a> para um tipo <code>function</code>, ou <a href=\"/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\">unknown</a> se o tipo da função não tem o parâmetro <code>this</code>.</p>\n<h5 id=\"exemplo-11\" style=\"position:relative;\"><a href=\"#exemplo-11\" aria-label=\"exemplo 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: Number' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Number' >Number</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toString(radix?: number | undefined): string' >toString</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">16</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function numeroToString(n: ThisParameterType&lt;typeof paraHex>): string' >numeroToString</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: Number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type ThisParameterType&lt;T> = T extends (this: infer U, ...args: never) => any ? U : unknown' >ThisParameterType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">&gt;) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.apply&lt;Number, string>(this: (this: Number) => string, thisArg: Number): string (+1 overload)' >apply</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: Number' >n</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYCdUAkCmAPACigAsYBnALkQDkQBbAIx3QEpEBvAKEUXRyhDokJcgDoocAMpR0MMAHMCARgBsLANycAvp06hIsBIjD1mcACpSZcxWCrnSZAAoZUdfs3MBPZDgA8UD44cMAorrh4AHxsXDx8AkJhmBGiqMjIADZeBGAa2kA'>Try</a></div></pre>\n<h2 id=\"omitthisparametertype\" style=\"position:relative;\"><a href=\"#omitthisparametertype\" aria-label=\"omitthisparametertype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>OmitThisParameter&#x3C;Type></code></h2>\n<p>Remove o parâmetro <a href=\"/docs/handbook/functions.html#this-parameters\"><code>this</code></a> de <code>Type</code>. Se <code>Type</code> não tem parâmetro <code>this</code> explicitamente declarado, o resultado é simplesmente <code>Type</code>. Caso contrário, um novo tipo função sem o parâmetro <code>this</code> é criado a partir de <code>Type</code>. Generics são apagados e apenas a ultima assinatura sobrecarregada é propagada para o novo tipo função.</p>\n<h5 id=\"exemplo-12\" style=\"position:relative;\"><a href=\"#exemplo-12\" aria-label=\"exemplo 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='(parameter) this: Number' >this</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Number' >Number</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toString(radix?: number | undefined): string' >toString</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">16</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const cincoParaHex: () => string' >cincoParaHex</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type OmitThisParameter&lt;T> = unknown extends ThisParameterType&lt;T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T' >OmitThisParameter</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">&gt; = </span><span style=\"color: #001080\"><data-lsp lsp='function paraHex(this: Number): string' >paraHex</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) CallableFunction.bind&lt;(this: Number) => string>(this: (this: Number) => string, thisArg: Number): () => string (+5 overloads)' >bind</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='const cincoParaHex: () => string' >cincoParaHex</data-lsp></span><span style=\"color: #000000\">());</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABABwIYCdUAkCmAPACigAsYBnALkQDkQBbAIx3QEpEBvAKEUXRyhDokJcgDoocAMpR0MMAHMCARgBsLANycAvp04QEZKIghz9ABQzZ8VAPJ0YUACqkyFzHX7MAPFACeyHDhgFEtcPAA+RABeEMww0QY5ABMCAFYNXX0wMjgAGxxRXLhFE0g4NytCFg0gA'>Try</a></div></pre>\n<h2 id=\"thistypetype\" style=\"position:relative;\"><a href=\"#thistypetype\" aria-label=\"thistypetype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ThisType&#x3C;Type></code></h2>\n<p>Esse utilitário não retorna um tipo transformado. Ao invés, serve como um marcador para um tipo contextual <a href=\"/docs/handbook/functions.html#this\"><code>this</code></a>. Note que a flag <code>--noImplicitThis</code> precisa ser ativada para usar esse utilitário.</p>\n<h5 id=\"exemplo-13\" style=\"position:relative;\"><a href=\"#exemplo-13\" aria-label=\"exemplo 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo</h5>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescritorDeObjeto&lt;D, M> = {&#10;    dado?: D | undefined;&#10;    metodos?: (M &amp; ThisType&lt;D &amp; M>) | undefined;&#10;}' >DescritorDeObjeto</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in type DescritorDeObjeto&lt;D, M>' >D</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in type DescritorDeObjeto&lt;D, M>' >M</data-lsp></span><span style=\"color: #000000\">&gt; = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) dado?: D | undefined' >dado</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in type DescritorDeObjeto&lt;D, M>' >D</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) metodos?: (M &amp; ThisType&lt;D &amp; M>) | undefined' >metodos</data-lsp></span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in type DescritorDeObjeto&lt;D, M>' >M</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='interface ThisType&lt;T>' >ThisType</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in type DescritorDeObjeto&lt;D, M>' >D</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in type DescritorDeObjeto&lt;D, M>' >M</data-lsp></span><span style=\"color: #000000\">&gt;; </span><span style=\"color: #008000\">// Tipo de this em metodos é D & M</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >fazObjeto</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >D</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >M</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) desc: DescritorDeObjeto&lt;D, M>' >desc</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type DescritorDeObjeto&lt;D, M> = {&#10;    dado?: D | undefined;&#10;    metodos?: (M &amp; ThisType&lt;D &amp; M>) | undefined;&#10;}' >DescritorDeObjeto</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >D</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >M</data-lsp></span><span style=\"color: #000000\">&gt;): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >D</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >M</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let dado: object' >dado</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) desc: DescritorDeObjeto&lt;D, M>' >desc</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) dado?: D | undefined' >dado</data-lsp></span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let metodos: object' >metodos</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) desc: DescritorDeObjeto&lt;D, M>' >desc</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) metodos?: (M &amp; ThisType&lt;D &amp; M>) | undefined' >metodos</data-lsp></span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { ...</span><span style=\"color: #001080\"><data-lsp lsp='let dado: object' >dado</data-lsp></span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\"><data-lsp lsp='let metodos: object' >metodos</data-lsp></span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) D in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >D</data-lsp></span><span style=\"color: #000000\"> & </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) M in fazObjeto&lt;D, M>(desc: DescritorDeObjeto&lt;D, M>): D &amp; M' >M</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let obj: {&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function fazObjeto&lt;{&#10;    x: number;&#10;    y: number;&#10;}, {&#10;    moveBy(dx: number, dy: number): void;&#10;}>(desc: DescritorDeObjeto&lt;{&#10;    x: number;&#10;    y: number;&#10;}, {&#10;    moveBy(dx: number, dy: number): void;&#10;}>): {&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}' >fazObjeto</data-lsp></span><span style=\"color: #000000\">({</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) dado?: {&#10;    x: number;&#10;    y: number;&#10;} | undefined' >dado</data-lsp>:</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> },</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(property) metodos?: ({&#10;    moveBy(dx: number, dy: number): void;&#10;} &amp; ThisType&lt;{&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}>) | undefined' >metodos</data-lsp>:</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\"><data-lsp lsp='(method) moveBy(dx: number, dy: number): void' >moveBy</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dx: number' >dx</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dy: number' >dy</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >x</data-lsp></span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dx: number' >dx</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// this fortemente tipado</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >y</data-lsp></span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) dy: number' >dy</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// this fortemente tipado</span></div><div class='line'><span style=\"color: #000000\">    },</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: {&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: {&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let obj: {&#10;    x: number;&#10;    y: number;&#10;} &amp; {&#10;    moveBy(dx: number, dy: number): void;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) moveBy(dx: number, dy: number): void' >moveBy</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwCoAtUBnALlADMBDZQgUwCgsBPRG0AERsPQCdtpuOAeQBGAKxpZoAHjYAaUAFkAfKAC8oAN51QoACYVd0APyk2Abm2h4E6IcInFoAGSh8RHMxoznipWdAgrqiI0HqsWASEoDTwVjZ2oACX7D4KdAC+FnRkAK6Q6Fio0JDkFABeIuKSMvLKABS6nOimTbySAjSVNjW+AJSmqZqWyBJ6BtCk0GI0BWphXAB0+oagAD6rmpnDo9aSdpPTs+qNi7u20FHrmxY63BI53CUaoAuvy9DyrwtnCemgFFE2KkLOk6HQRlhQFNRHNKBVppI6lodO9SM8AB6kAAM8kY2NA6Vklh+FzRlh08GgADcaAAhRgNTGgSA5eDCGjceS6PHM1ns7i9IY6YWgCJEBbo0AAamO6P8gTFUTI-CwMRokFVouC43JwsVC0Y0uOjHlYEV5BVao14W1hl1hMsDvSvSy0IlcwAjFiLG7DeoAEzeuhuyk0+l1ACs8gjLqAA'>Try</a></div></pre>\n<p>No exemplo acima, o objeto <code>metodos</code> no argumento para <code>fazObjeto</code> tem um tipo contextual que inclui <code>EsseTipo&#x3C;D &#x26; M></code> portanto o tipo de <a href=\"/docs/handbook/functions.html#this\">this</a> em metodos dentro do objeto <code>metodos</code> é <code>{ x: number, y: number } &#x26; { movePor(dx: number, dy: number): number }</code>. Perceba como o tipo da propriedade <code>metodos</code> é simultaneamente uma interface alvo e a fonte para o tipo <code>this</code> nos metodos.</p>\n<p>O marcador interface <code>EsseTipo&#x3C;T></code> é simplesmente uma interface vazia declarada em <code>lib.d.ts</code>. Além de ser reconhecida no tipo contextual de um objeto literal, a interface age como qualquer interface vazia.</p>","headings":[{"value":"Partial<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"Readonly<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"Object.freeze","depth":5},{"value":"Record<Keys,Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"Pick<Type, Keys>","depth":2},{"value":"Exemple","depth":5},{"value":"Omit<Type, Keys>","depth":2},{"value":"Exemplo","depth":5},{"value":"Exclude<Type, ExcludedUnion>","depth":2},{"value":"Exemplo","depth":5},{"value":"Extract<Type, Union>","depth":2},{"value":"Exemplo","depth":5},{"value":"NonNullable<Type>","depth":2},{"value":"Example","depth":5},{"value":"Parameters<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"ConstructorParameters<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"ReturnType<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"InstanceType<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"Required<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"ThisParameterType<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"OmitThisParameter<Type>","depth":2},{"value":"Exemplo","depth":5},{"value":"ThisType<Type>","depth":2},{"value":"Exemplo","depth":5}],"frontmatter":{"permalink":"/pt/docs/handbook/utility-types.html","title":"Tipos Utilitários","disable_toc":null,"handbook":null,"oneline":"Tipos que são inclusos globalmente em TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-tipos-utilitários","slug":"/pt/docs/handbook/utility-types.html","repoPath":"/packages/documentation/copy/pt/reference/Utility Types.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.573Z"}},"staticQueryHashes":[]}