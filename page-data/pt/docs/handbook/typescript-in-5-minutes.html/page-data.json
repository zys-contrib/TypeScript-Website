{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/typescript-in-5-minutes.html","result":{"data":{"markdownRemark":{"id":"96ffb6b9-3f78-5f3e-8ce4-57431a99108b","excerpt":"TypeScript tem uma relação incomum com JavaScript. TypeScript oferece todas as features do JavaScript, e uma camada adicional no topo deste: o sistema de tipos…","html":"<p>TypeScript tem uma relação incomum com JavaScript. TypeScript oferece todas as features do JavaScript, e uma camada adicional no topo deste: o sistema de tipos do TypeScript.</p>\n<p>Por exemplo, JavaScript oferece primitivos de linguagem como <code>string</code> e <code>number</code>, mas não checa consistentemente que você atribuiu estes. TypeScript checa.</p>\n<p>Isso significa que seu código JavaScript existente também é código TypeScript. O benefício principal do TypeScript é que ele pode destacar comportamento inesperado no seu código, diminuindo a chance de bugs.</p>\n<p>Este tutorial fornece um resumo do TypeScript, focando no seu sistema de tipos.</p>\n<h2 id=\"tipos-por-inferência\" style=\"position:relative;\"><a href=\"#tipos-por-infer%C3%AAncia\" aria-label=\"tipos por inferência permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos por Inferência</h2>\n<p>TypeScript conhece a linguagem JavaScript e vai gerar tipos para você em muitos casos. Por exemplo quando criando uma variável e atribuindo à um determinado valor, TypeScript usará o valor como seu tipo.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let olaMundo: string' style='border-bottom: solid 2px lightgrey;'>olaMundo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;Olá Mundo&apos;</span><span style=\"color: #000000\">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let olaMundo: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBA9sCGCyBXAdgEyhAvBA5AeWAEOIk0ocBuAKAHoaIIA9AfiA'>Try</a></div></pre>\n<p>Entendendo como o JavaScript funciona, TypeScript pode construir um sistema de tipos que aceita código JavaScript mas tem tipos. Isso oferece um sistema de tipos sem a necessidade de adicionar caracteres extra para fazer com que os tipos sejam explícitos no seu código. É assim que o TypeScript sabe que <code>olaMundo</code> é uma <code>string</code> no exemplo acima.</p>\n<p>Você já pode ter escrito código JavaScript no Visual Studio Code, e teve auto-complete do editor. Visual Studio Code usa TypeScript por baixo dos panos para tornar mais fácil o trabalho com JavaScript.</p>\n<h2 id=\"definindo-tipos\" style=\"position:relative;\"><a href=\"#definindo-tipos\" aria-label=\"definindo tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definindo Tipos</h2>\n<p>Você pode usar uma ampla variedade de tipos de padrões de projetos no JavaScript. Entretanto, alguns padrões de projeto tornam a inferência de tipos automática difícil (por exemplo, padrões que usam programação dinâmica). Para cobrir estes casos, TypeScript suporta uma extensão do JavaScript, que oferece lugares para que você diga ao TypeScript quais deveriam ser os tipos.</p>\n<p>Por exemplo, para criar um objteo com um tipo inferido que inclui <code>name: string</code> e <code>id: number</code>, você pode escrever:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuario: {&#10;    nome: string;&#10;    id: number;&#10;}' >usuario</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Hayes&apos;</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBArhOBDATgSxDAvDA3gKAEgwQBbAUwC4YByACSQE9yIaAaItAE2oAZ8AvgG4gA'>Try</a></div></pre>\n<p>Você pode explicitamente descrever a forma desse objeto usando uma declaração de <code>interface</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGcCucrAPbIDeAUAJAh4C2EAXMumLiAOYDcZwAJnSJpQEbR2AXyA'>Try</a></div></pre>\n<p>Você pode então declarar um objeto JavaScript conforme o formato da sua nova <code>interface</code> usando a sintaxe <code>: TypeName</code> depois da declaração de uma variável:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuario: Usuario' >usuario</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Hayes&apos;</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGcCucrAPbIDeAUAJAh4C2EAXMumLiAOYDcZwAJnSJpQEbR2AX2IB6McgC0MhJjAypxBHhANkmLDnx0M2XAQC8RMhWp0A5AAk4ATwjoLAGg7dkABmLDWQA'>Try</a></div></pre>\n<p>Se você fornecer um objeto que não corresponde a interface que você forneceu, o TypeScript vai te alertar:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuario: Usuario' >usuario</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) nomeDeUsuario: string' >nomeDeUsuario</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Hayes&apos;</span><span style=\"color: #000000\">,</span></div><span class=\"error\"><span>Type '{ nomeDeUsuario: string; id: number; }' is not assignable to type 'Usuario'.\n  Object literal may only specify known properties, and 'nomeDeUsuario' does not exist in type 'Usuario'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ nomeDeUsuario: string; id: number; }' is not assignable to type 'Usuario'.\n  Object literal may only specify known properties, and 'nomeDeUsuario' does not exist in type 'Usuario'.</span><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.id: number' >id</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAEsA7AFxgDMBDAY0lAFVEBXc6POUAbxwEgC4BbSKkREWBAOYBubngAmqAgz4AjGFIC+OHJTgFhoBo2atU9JizYBeDt14CAIpFNG4qAOQAJcgE9IiVwBppOVAABhw1CSA'>Try</a></div></pre>\n<p>Já que o JavaScript suporta classes e programação orientada a objeto, TypeScript também. Você pode usar a declaração de interface com classes:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Usuario.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class UsuarioConta' >UsuarioConta</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) UsuarioConta.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) UsuarioConta.id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UsuarioConta.nome: string' >nome</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) nome: string' >nome</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) UsuarioConta.id: number' >id</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) id: number' >id</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const usuario: Usuario' >usuario</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor UsuarioConta(nome: string, id: number): UsuarioConta' >UsuarioConta</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;Murphy&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKoGcCucrAPbIDeAUAJAh4C2EAXMumLiAOYDcZwAJnSJpQEbR2AX2LEEAGzjp0aLDnwBhPODhEyFanQZM2Hbsl4ChY0ghU7MCMHigAKTbXqNQzADTIuPPoKgBKdVJSMAALYHQAOkdkAF5DKgh2INDwiK5Yz04k0VFxCzBkTHlcPDoMbBKMkAgAdzkKpRUwODsAcgBZTCgABxCAT1aPAEY-ViA'>Try</a></div></pre>\n<p>Você pode usar interfaces para tipar parâmetros e valores de retorno em funções:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function buscarUsuarioAdmin(): Usuario' >buscarUsuarioAdmin</data-lsp></span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #008000\">//...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function deletarUsuario(usuario: Usuario): void' >deletarUsuario</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) usuario: Usuario' >usuario</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Usuario' >Usuario</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEtIBcCm8AzAQwGNdQBVFAVyPg2lAG80BIGAW1wC5QVt6kAOYBuNhgAmvSNQ4AjfGIC+aEKAC0mktWyb1aAtUglsDSKDnUUJOlVr1oAQQkcsACgCUvO3QbM2IAB0wWgqBkYmZqASuAA2uNi2NL7Qblb2DN7JDh7+rGrBgaFAA'>Try</a></div></pre>\n<p>Já há um pequeno conjunto de tipos primitivos disponíveis em JavaScript: <code>boolean</code>, <code>bigint</code>, <code>null</code>, <code>number</code>, <code>string</code>, <code>symbol</code>, e <code>undefined</code>, que você pode usar em uma interface. TypeScript extende essa lista com mais alguns como <code>any</code> (permitir qualquer coisa), <a href=\"/play#example/unknown-and-never\"><code>unknown</code></a> (garanta que alguém usando esse tipo declare qual tipo é), <a href=\"/play#example/unknown-and-never\"><code>never</code></a> (não é possível que esse tipo aconteça), e <code>void</code> (uma função que retorna <code>undefined</code> ou que não tem valor de retorno).</p>\n<p>Você verá que há duas sintaxes para construir tipos: <a href=\"/play/?e=83#example/types-vs-interfaces\">Interfaces e Types</a>. Você deve preferir <code>interface</code>. Use <code>type</code> quando precisar de funcionalidades específicas.</p>\n<h2 id=\"compondo-tipos\" style=\"position:relative;\"><a href=\"#compondo-tipos\" aria-label=\"compondo tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compondo Tipos</h2>\n<p>Com TypeScript, você pode criar tipos complexos combinando os simples. Existem duas formas populares de fazer isso: com uniões, e com genéricos.</p>\n<h3 id=\"uniões\" style=\"position:relative;\"><a href=\"#uni%C3%B5es\" aria-label=\"uniões permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uniões</h3>\n<p>Com uma união, você pode declarar que um tipo pode ser um de muitos. Por exemplo, você pode descrever um tipo <code>boolean</code> como sendo <code>true</code> ou <code>false</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type MeuBooleano = boolean' >MeuBooleano</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">true</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">false</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshCuAhA9sgNhAhgO2VAvFMAE7zQA+UAZpmgM4QDcQA'>Try</a></div></pre>\n<p><em>Nota:</em> se você passar o mouse por cima do <code>MeuBoleano</code> acima, você verá que é classificado como <code>boolean</code>. Essa é uma propriedade do Sistema de Tipos Estruturais. Mais sobre isso abaixo.</p>\n<p>Um caso de uso popular de tipos uniões é para descrever o valor que um conjunto de <a href=\"/docs/handbook/2/everyday-types.html#literal-types\">literais</a> de <code>string</code> ou <code>number</code> pode ter:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EstadoDaJanela = \"aberto\" | \"fechado\" | \"minimizado\"' >EstadoDaJanela</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;aberto&apos;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&apos;fechado&apos;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&apos;minimizado&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type EstadosDeBloqueio = \"trancado\" | \"destrancado\"' >EstadosDeBloqueio</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;trancado&apos;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&apos;destrancado&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type NumerosImparesMenoresQue10 = 1 | 3 | 5 | 7 | 9' >NumerosImparesMenoresQue10</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">7</span><span style=\"color: #000000\"> | </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogzsAhgEwPYBFEClEDsIA2iUAvFAOSIBGEATsKuVAD4UBmEAxgBYqMsUAtgEtcwkQC8+5ANwAoUJFgI+cdBABCBVAEcArhGGpSFYLTydpA8sggJzuS2lkLw0AHJ7BdVHACSgmCItHYAshC4qCFwAIoGAIwADCbxAgDMAgCsAgDsAgCcMkA'>Try</a></div></pre>\n<p>Uniões fornecem uma forma de gerenciar tipos diferentes também. Por exemplo, você pode ter uma função que recebe como argumento um <code>array</code> ou uma <code>string</code>:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function buscarComprimento(obj: string | string[]): number' >buscarComprimento</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) length: number' >length</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAIxAZwgQwE4GE4C2ADtjAQKZhRwAUcyAVgFyJpSlgDmiAPq+zC4BtALoBKRAG8AUAEhs5KCGxJ6DAHQAbSpygALANzSAvkA'>Try</a></div></pre>\n<p>Para saber o tipo de uma variável, use <code>typeof</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Tipo</th>\n<th>Predicado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td><code>typeof s === \"string\"</code></td>\n</tr>\n<tr>\n<td>number</td>\n<td><code>typeof n === \"number\"</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>typeof b === \"boolean\"</code></td>\n</tr>\n<tr>\n<td>undefined</td>\n<td><code>typeof undefined === \"undefined\"</code></td>\n</tr>\n<tr>\n<td>function</td>\n<td><code>typeof f === \"function\"</code></td>\n</tr>\n<tr>\n<td>array</td>\n<td><code>Array.isArray(a)</code></td>\n</tr>\n</tbody>\n</table>\n<p>Por exemplo, você pode fazer uma função retornar diferentes tipos dependendo se uma string ou um array forem passados:</p>\n<!-- prettier-ignore -->\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function envolverEmArray(obj: string | string[]): string[]' >envolverEmArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string | string[]' >obj</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string' style='border-bottom: solid 2px lightgrey;'>obj</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(parameter) obj: string</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: string[]' >obj</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAUzANzgGzcgTgUQFsBBXXAQwE8AKOAIwCsAuRAZylxjAHNEAfNhy7cA2gF0AlIgDeAKESIYwRNSiUADsjjL6DRAF5DiAETtOPY1LkKFuZFBC4kI3WIDcsgPSebvmwD0AfnlEAF8QuwcnRF0PUKA'>Try</a></div></pre>\n<h3 id=\"genéricos\" style=\"position:relative;\"><a href=\"#gen%C3%A9ricos\" aria-label=\"genéricos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Genéricos</h3>\n<p>Genéricos fornecem variáveis para tipos. Um exemplo comum é um array. Um array sem genéricos pode conter qualquer coisa. Um array com genéricos pode descrever os valores que aquele array contém.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ArrayDeStrings</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ArrayDeNumeros</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ObjetoComNomeArray</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;{ </span><span style=\"color: #001080\">nome</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }&gt;;</span></div></code></div></pre>\n<p>Você pode declarar seus próprios tipos usando genéricos:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Mochila&lt;Tipo>' >Mochila</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Tipo in Mochila&lt;Tipo>' >Tipo</data-lsp></span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Mochila&lt;Tipo>.adicionar: (obj: Tipo) => void' >adicionar</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) obj: Tipo' >obj</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Tipo in Mochila&lt;Tipo>' >Tipo</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Mochila&lt;Tipo>.buscar: () => Tipo' >buscar</data-lsp></span><span style=\"color: #000000\">: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) Tipo in Mochila&lt;Tipo>' >Tipo</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Esse é um atalho para dizer ao Typescript que há uma</span></div><div class='line'><span style=\"color: #008000\">// constante chamada mochila, e não se preocupar de onde ela veio.</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const mochila: Mochila&lt;string>' >mochila</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Mochila&lt;Tipo>' >Mochila</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// objeto é uma string, porque nós o declaramos acima como a parte variável de Mochila.</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const objeto: string' >objeto</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='const mochila: Mochila&lt;string>' >mochila</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Mochila&lt;string>.buscar: () => string' >buscar</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Já que a variável mochila é uma string, você não pode passar um número para a função adicionar.</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const mochila: Mochila&lt;string>' >mochila</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(property) Mochila&lt;string>.adicionar: (obj: string) => void' >adicionar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\"><data-err>23</data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKALJzUAWBANpQDwAqBADnAB8oAN54AkJQAmBagThFK0VAAo4AIwBWqXgICUoALzCAbnAJSA3BPUBXRNSWqDx0LrjWAvnjwhQAUUREOgBL0FsAW1BKEko2ZjhQPiVKUBkALxhoxO4ATz5IB2h+ElAAR1s6ZgBD8IjKXzBqBURY0joWSnqpVIimVg4AGlA6IgBjxOCk6EgmW2ToNLoFKTpIDlATSHkAOjxV6g4Z0GaiVtA+lnZKVEYrjk5W4qIAc0FrRtANTUgSRLDIqknsQXsMBNAKqMAM+IL5LQ4pPqwmgEeonOB9aJJJRkTZKAjVLZsJYMfrXPanc7fX6JQwXMkcHZ2BxKFR6D5+ABStUhWJM+MJ63p91SALRwNewzM1AAV6BxokBKtsUElHV5QAviIwRUpLHkWxEADnE2iMjkCiUe0uA0oO2ksnkimgKkw7KAA'>Try</a></div></pre>\n<h2 id=\"sistema-de-tipos-estruturais\" style=\"position:relative;\"><a href=\"#sistema-de-tipos-estruturais\" aria-label=\"sistema de tipos estruturais permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sistema de Tipos Estruturais</h2>\n<p>Um dos princípios centrais do TypeScript é que a checagem de tipo é focada no <em>formato</em> que os valores têm. Isso é chamado as vezes de “tipagem do pato” ou “tipagem estrutural”.</p>\n<p>Em um sistema de tipagem estruturado, se dois objetos tem o mesmo formato, eles são considerados do mesmo tipo.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Ponto' >Ponto</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Ponto' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Ponto' >Ponto</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Ponto' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.x: number' >x</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">, </span><span style=\"color: #0000FF\">${</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) p: Ponto' >p</data-lsp></span><span style=\"color: #000000FF\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.y: number' >y</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// exibe \"12, 26\"</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const ponto: {&#10;    x: number;&#10;    y: number;&#10;}' >ponto</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const ponto: {&#10;    x: number;&#10;    y: number;&#10;}' >ponto</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtzuQbwFACQAHgFzIgCuAtgEbQDchAnmZbQ3gL554wUgIwwTMghFgNYFAxYAFAAcyMsOgCUuQgkwBndABsIAOj3oA5rIAGAEhzzDRTgBpkNu004XVjbngD0v0XE6ZAAiAEYAJmcIgDYQvC0QbTBkeUwVZABeXGRSZEjnFmRY5E5GMQkpZXQFdLV6IA'>Try</a></div></pre>\n<p>A variável <code>ponto</code> nunca é declarada como sendo do tipo <code>Ponto</code>. Entretanto, o TypeScript compara o formato de <code>ponto</code> ao formato de <code>Ponto</code> na checagem de tipo. Eles têm o mesmo formato, então o código passa.</p>\n<p>A correspondência de tipo só requere que um subconjunto de campos do objeto sejam correspondentes:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const ponto3: {&#10;    x: number;&#10;    y: number;&#10;    z: number;&#10;}' >ponto3</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">26</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) z: number' >z</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">89</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const ponto3: {&#10;    x: number;&#10;    y: number;&#10;    z: number;&#10;}' >ponto3</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// logs \"12, 26\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const rect: {&#10;    x: number;&#10;    y: number;&#10;    largura: number;&#10;    altura: number;&#10;}' >rect</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">33</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) largura: number' >largura</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">30</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(property) altura: number' >altura</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">80</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const rect: {&#10;    x: number;&#10;    y: number;&#10;    largura: number;&#10;    altura: number;&#10;}' >rect</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// logs \"33, 3\"</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const color: {&#10;    hex: string;&#10;}' >color</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) hex: string' >hex</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;#187ABF&apos;</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-err><data-lsp lsp='const color: {&#10;    hex: string;&#10;}' >color</data-lsp></data-err></span><span style=\"color: #000000\">);</span></div><span class=\"error\"><span>Argument of type '{ hex: string; }' is not assignable to parameter of type 'Ponto'.\n  Type '{ hex: string; }' is missing the following properties from type 'Ponto': x, y</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '{ hex: string; }' is not assignable to parameter of type 'Ponto'.\n  Type '{ hex: string; }' is missing the following properties from type 'Ponto': x, y</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAApylygDeeAkAB6pECuAWwBGMANycAnr0Ejo4gL5485PkWokCTUJC4EhBaI2YAKAA6ojJOAEo2nak0RwANpAB0zuAHNjAAwAkrKZuXPIANKCBwRLyvtYKeCCgALSp1Hwkqcl4DkSIJKCmTFYYoAC8bKA8oACMaBFS6ABsEQBeqAAcAJyg8uI6egaWcGbFcBjxoEmeXoigAER1EWhN80q5+aDQkOrlldUYGA2oR6DOlNBefNCUJwAMEZTOJNe3oB13vf26+oZjxtt1JNpt45vNDhEMGsco4Cg5PNA9qxQAALHSoADkAGIah0AOwAQQAQgAxDFfPADX7DYzwhDxIA'>Try</a></div></pre>\n<p>Não há diferença entre como as classes e os objetos se conformam aos formatos:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class PontoVirtual' >PontoVirtual</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) PontoVirtual.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) PontoVirtual.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PontoVirtual.x: number' >x</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) PontoVirtual.y: number' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) y: number' >y</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const novoPontoV: PontoVirtual' >novoPontoV</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor PontoVirtual(x: number, y: number): PontoVirtual' >PontoVirtual</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">13</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">56</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(p: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const novoPontoV: PontoVirtual' >novoPontoV</data-lsp></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// logs \"13, 56\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAJYB2ALjAGYCGAxpKAApylygDeeAkAB6pECuAWwBGMANycAnr0Ejo4gL5485PkWokCTUJC4EhBaI2YAKAA6ojJOAEo2nak0RwANpAB0zuAHNjAAwAkrKZuXPIANKCBwRLyvtYKeCCgALSp1Hwkqcl41M6UiIgMTFYAagYkfJTOdtzSwmKSdbLi9o4k0HzqCMY8oPz10BFSfTIwtuwcHCQAFgSIIaAAvKBc4pMzc24SS6ASa4qKOW19cABucJZwJTtEkADuRcxl0BVVxgCMGBE4AGzxeDo9AZLsYiGcLsUrvFQElPF5CgAiT7fH4IoA'>Try</a></div></pre>\n<p>Se o objeto ou classe tem todas as propriedades requeridas, TypeScript dirá que eles são correspondentes, independente dos detalhes de implementação.</p>\n<h2 id=\"próximos-passos\" style=\"position:relative;\"><a href=\"#pr%C3%B3ximos-passos\" aria-label=\"próximos passos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Próximos Passos</h2>\n<p>Essa documentação é uma resumo de alto nível da sintaxe e tipos qeu você usaria em código no dia-a-dia. Daqui você deve:</p>\n<ul>\n<li>Ler o Handbook completo <a href=\"/docs/handbook/intro.html\">from start to finish</a> (30m)</li>\n<li>Explorar os <a href=\"/play#show-examples\">exemplos do Playground</a></li>\n</ul>","headings":[{"value":"Tipos por Inferência","depth":2},{"value":"Definindo Tipos","depth":2},{"value":"Compondo Tipos","depth":2},{"value":"Uniões","depth":3},{"value":"Genéricos","depth":3},{"value":"Sistema de Tipos Estruturais","depth":2},{"value":"Próximos Passos","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/typescript-in-5-minutes.html","title":"TypeScript para programadores JavaScript","disable_toc":null,"handbook":null,"oneline":"Aprenda como o TypeScript extende o JavaScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-typescript-para-programadores-javascript","slug":"/pt/docs/handbook/typescript-in-5-minutes.html","repoPath":"/packages/documentation/copy/pt/get-started/TS for JS Programmers.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}