{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/variable-declarations.html","result":{"data":{"markdownRemark":{"id":"a4ff086c-6a33-5b48-a175-cd08d1ee41b2","excerpt":"let e constsão dois conceitos relativamente novos para declarações de variáveis em JavaScript.\nComo mencionamos anteriormente, let é similar a var em alguns…","html":"<p><code>let</code> e <code>const</code>são dois conceitos relativamente novos para declarações de variáveis em JavaScript.\n<a href=\"/docs/handbook/basic-types.html#a-note-about-let\">Como mencionamos anteriormente</a>, <code>let</code> é similar a <code>var</code> em alguns aspectos, mas evita que alguns usuários caiam em momentos “te peguei” em JavaScript.</p>\n<p><code>const</code> é uma ampliação de <code>let</code> no qual previne reatribuições a uma variável.</p>\n<p>Com TypeScript sendo uma extensão de JavaScript, a linguagem naturalmente suporta <code>let</code> e <code>const</code>.\nAqui iremos nos aprofundar nessas novas declarações e porque elas tem melhor preferência do que <code>var</code>.</p>\n<p>Se você vem usando JavaScript descuidadamente, a próxima sessão pode ser uma boa maneira de refrescar sua memória.\nSe você está intimamente familiarizado com todas as peculiaridades de declarações <code>var</code> em JavaScript, talvéz você ache mais fácil pular essa sessão.</p>\n<h2 id=\"declarações-var\" style=\"position:relative;\"><a href=\"#declara%C3%A7%C3%B5es-var\" aria-label=\"declarações var permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>declarações <code>var</code></h2>\n<p>Tradicionalmente, declarar uma variável em JavaScript sempre foi feito usando a palavra chave <code>var</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Como você ja deve ter descoberto, apenas declaramos a variável chamada <code>a</code> com o valor <code>10</code>.</p>\n<p>Podemos também declarar uma variável dentro de uma função:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mensagem</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá, mundo!\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">mensagem</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>e também podemos acessar essas mesmas variáveis através de outras funções:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">g</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// retorna '11'</span></div></code></div></pre>\n<p>No exemplo acima, <code>g</code> capturou a variável <code>a</code> declarada em <code>f</code>.\nEm qualquer ponto que <code>g</code> for chamada, o valor de <code>a</code> será atrelado com o valor de <code>a</code> em <code>f</code>.\nMesmo se <code>g</code> for chamada quando <code>f</code> tiver terminado de rodar, ela será capaz de acessar e modificar <code>a</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// retorna '2'</span></div></code></div></pre>\n<h2 id=\"regras-de-escopo\" style=\"position:relative;\"><a href=\"#regras-de-escopo\" aria-label=\"regras de escopo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regras de escopo</h2>\n<p>Declarações <code>var</code> possuem regras de escopo estranhas para aqueles acostumados com outras linguagens.\nVeja o exemplo a seguir:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">deveriaInicializar</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">deveriaInicializar</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna '10'</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna 'undefined'</span></div></code></div></pre>\n<p>Talvez alguns leitores precisem dar uma segunda olhada nesse exemplo.\nA variável <code>x</code> foi declarada <em>dentro do bloco <code>if</code></em>, e mesmo assim fomos capazes de acessa-la de fora daquele bloco.\nIsso porque declarações <code>var</code> são acessíveis em qualquer lugar dentro da função, módulo, namespace ou escopo global em que estão contidas - o que iremos ver mais à frente - independente do bloco contido.\nAlgumas pessoas chamam isso <em>escopo-<code>var</code></em> ou <em>escopo de função</em>.\nParâmetros também tem escopo de função.</p>\n<p>Essas regras de escopo podem causar muitos tipos de erros.\nUm problema que elas deixam exacerbado é o fato de que não é um erro declarar a mesma variável várias vezes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">sumaMatriz</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[][]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Talvez tenha sido fácil para alguns desenvolvedores JavaScript experientes identificar, mas o loop <code>for</code> interno acidentalmente sobrescreve a variável <code>i</code> porque <code>i</code> faz referência para a mesma variável com escopo de função.\nComo desenvolvedores experientes já sabem, tipos similares de bugs escorregam pelo code review e podem ser uma fonte interminável de frustração.</p>\n<h2 id=\"captura-de-peculiaridades-em-variáveis\" style=\"position:relative;\"><a href=\"#captura-de-peculiaridades-em-vari%C3%A1veis\" aria-label=\"captura de peculiaridades em variáveis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Captura de peculiaridades em variáveis</h2>\n<p>Gaste alguns segundos para adivinhar qual é a saída do seguinte trecho de código:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Para aqueles sem familiaridade, <code>setTimeout</code> irá tentar executar a função após um certo numero de milissegundos (esperando, entretanto, qualquer outra coisa parar de rodar).</p>\n<p>Preparado? Dê uma olhada:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">10\n10\n10\n10\n10\n10\n10\n10\n10\n10</span></div></code></div></pre>\n<p>Muitos desenvolvedores JavaScript estão intimamente familiarizados com esse comportamento, mas se você está surpreso, certamente não esta sozinho.\nA maioria das pessoas espera que a saída seja:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</span></div></code></div></pre>\n<p>Lembra o que mencionamos anteriormente sobre captura de variáveis?\nToda expressão função que passamos para <code>setTimeout</code> na verdade faz referencia para <code>i</code> do mesmo escopo.</p>\n<p>Vamos parar um pouco para entender o que isso significa.\n<code>setTimeout</code> irá executar a função após determinado numero de milissegundos, <em>mas apenas</em> após o loop <code>for</code> ter parado de executar;\nQuando o loop <code>for</code> parar sua execução, o valor de <code>i</code> é <code>10</code>.\nEntão cada vez que a função for chamada irá imprimir <code>10</code>!</p>\n<p>Uma forma comum de contornar o caso é usar um IIFE - uma Immediately Invoked Function Expression (Expressão de Invocação Imediata) - para capturar <code>i</code> a cada iteração:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// captura o estado atual de 'i'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ao invocar a função com seu valor atual</span></div><div class='line'><span style=\"color: #000000\">  (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">    }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  })(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Esse padrão de aparência estranha é, na verdade, bem comum.\nO <code>i</code> na lista de parâmetros, na verdade, oculta o <code>i</code> declarado no loop <code>for</code>, mas como demos o mesmo nome para ambos, não temos de modificar muito o corpo do loop.</p>\n<h2 id=\"declarações-let\" style=\"position:relative;\"><a href=\"#declara%C3%A7%C3%B5es-let\" aria-label=\"declarações let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarações <code>let</code></h2>\n<p>Até agora você descobriu que <code>var</code> tem alguns problemas, o que é precisamente o porque afirmações <code>let</code> foram introduzidas.\nIndependentemente da palavra chave usada, afirmações <code>let</code> são escritas da mesma forma que afirmações <code>var</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ola</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá!\"</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>A principal diferença não está na sintaxe, mas na semântica, na qual iremos nos aprofundar agora.</p>\n<h2 id=\"escopo-de-bloco\" style=\"position:relative;\"><a href=\"#escopo-de-bloco\" aria-label=\"escopo de bloco permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Escopo de bloco</h2>\n<p>Quando uma variável é declarada usando <code>let</code>, usa-se o que alguns chamam de <em>escopo léxico</em> ou <em>escopo de bloco</em>.\nDiferente de variáveis declaradas com <code>var</code> no qual o escopo permeia suas funções, variáveis com escopo de bloco não são visíveis de fora de seus blocos mais próximos ou loop-<code>for</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">input</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Ainda é ok referenciar 'a'</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Erro: 'b' não existe aqui</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Aqui, temos duas variáveis locais <code>a</code> e <code>b</code>.\nO escopo de <code>a</code> é limitado ao corpo de <code>f</code> em quanto o escopo de <code>b</code> é limitado ao bloco <code>if</code> na qual está contida.</p>\n<p>Variáveis declaradas em uma cláusula <code>catch</code> também possuem regras similares de escopo.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">try</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">throw</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"ah não!\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">} </span><span style=\"color: #AF00DB\">catch</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Eh bem.\"</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Erro: 'e' não existe aqui</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">e</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Outra propriedade de variáveis com escopo de bloco é que elas não podem ser lidas ou escritas antes de serem declaradas.\nEnquanto essas variáveis estão “presentes” através de seu escopo, todas apontam para cima até que sua declaração seja parte de sua <em>zona morta temporal</em>.\nIsso é apenas uma forma sofisticada de dizer que você não pode acessa-las antes da afirmação <code>let</code> e por sorte o TypeScript fará com que você saiba disso.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">++; </span><span style=\"color: #008000\">// ilegal usar `a` antes de ser declarada;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Algo a se notar é que você ainda pode <em>capturar</em> uma variável de escopo antes dela ser declarada.\nO único problema é que é ilegal chamar essa função antes da declaração.\nSe tivermos como foco ES2015, um ambiente de execução moderno irá lançar um erro; entretanto, atualmente TypeScript é permissívo e não irá reportar isso com um erro.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ok capturar 'a'</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// chamada ilegal 'foo' antes de 'a' ser declarada</span></div><div class='line'><span style=\"color: #008000\">// ambiente de execução deveria lançar um erro aqui</span></div><div class='line'><span style=\"color: #795E26\">foo</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Para mais informações sobre zonas mortas temporais, veja conteúdo relevante no <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Mozilla Developer Network</a>.</p>\n<h2 id=\"re-declarações-e-shadowing\" style=\"position:relative;\"><a href=\"#re-declara%C3%A7%C3%B5es-e-shadowing\" aria-label=\"re declarações e shadowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Re-declarações e Shadowing</h2>\n<p>Com declarações <code>var</code>, mencionamos que não importa quantas vezes você declara suas variáveis; você tem apenas uma.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>No exemplo acima, todas as declarações de <code>x</code> na verdade fazem referencia para <em>o mesmo</em> <code>x</code>, e isso é perfeitamente válido.\nIsso acaba sendo fonte de erros com frequência.\nFelizmente, declarações <code>let</code> não são tão permissíveis.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">20</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro: não pode redeclarar 'x' no mesmo escopo</span></div></code></div></pre>\n<p>Ambas as variáveis não precisam necessáriamente ter escopo de bloco para o TypeScript nos falar que existe um problema.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro: interfere com a declaração de parâmetros</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro: não pode haver ambas declarações de 'x'</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Isso não quer dizer que uma variável de bloco nunca pode ser declarada com uma variável com escopo de função.\nA variável de escopo de bloco precisa apenas ser declarada dentro de um bloco diferente distinguível.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">condicao</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">condicao</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna '0'</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna '100'</span></div></code></div></pre>\n<p>O ato de introduzir um novo nome em um escopo mais encadeado é chamado <em>shadowing</em>.\nIsso é meio que uma faca de dois gúmes pois pode introduzir certos bugs por sí só no evento de shadowing acidental, em quanto também pode prevenir certos bugs.\nPor exemplo, imagine que tenhamos escrito nossa função anterior <code>somaMatriz</code> usando variáveis <code>let</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">somaMatriz</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[][]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">matriz</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\"> += </span><span style=\"color: #001080\">linhaAtual</span><span style=\"color: #000000\">[</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">soma</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Essa versão do loop irá, na verdade, fazer a soma corretamente porque o <code>i</code> do loop interior espelha o <code>i</code> do loop exterior.\nO <em>shadowing</em> deveria <em>normalmente</em> ser evitado com o intuito de escrever código mas claro.\nEmbora existam alguns cenários onde ele pode se encaixar de forma vantajosa, você deve julgar a melhor forma de usa-lo.</p>\n<h2 id=\"captura-de-variáveis-de-escopo-de-bloco\" style=\"position:relative;\"><a href=\"#captura-de-vari%C3%A1veis-de-escopo-de-bloco\" aria-label=\"captura de variáveis de escopo de bloco permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Captura de variáveis de escopo de bloco</h2>\n<p>Quando abordamos pela primeira vez a idéia de captura de variáveis com declarações <code>var</code>, abordamos de forma breve como variáveis agem quando capturadas.\nPara dar uma melhor visão sobre isso, cada vez que um escopo é rodado, ele cria um “ambiente” de variáveis.\nEsse ambiente e suas variáveis capturadas podem existir mesmo após tudo em seu escopo tiver terminado de ser executado.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">aCidadeQueSempreDorme</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">getCidade</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">cidade</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Seattle\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">getCidade</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">cidade</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">getCidade</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Porque nós capturamos <code>cidade</code> de dentro de seu ambiente, ainda somos capazes de acessa-la a pesar do fato de que o bloco <code>if</code> terminou sua execução.</p>\n<p>Lembre que com nosso exemplo anterior <code>setTimeout</code>, adicionamos a necessidade de usar um IIFE para capturar o estado de uma variável para cada iteração do loop <code>for</code>.\nNa prática, o que estávamos fazendo era criar uma nova variável de ambiente para nossas variáveis capturadas.\nIsso foi um pouco doloroso, mas felizmente, você nunca terá de fazer isso em TypeScript de novo.</p>\n<p>Declarações <code>let</code> tem um comportamento drasticamente diferentes quando declaradas como parte de um loop.\nAlém de apenas introduzir um novo ambiente ao próprio loop, essas declarações meio que criam um novo escopo <em>por iteração</em>.\nComo isso é o que estamos fazendo de qualquer forma com nosso IIFE, nós podemos mudar nosso exemplo antigo <code>setTimeout</code> para usar apenas uma declaração <code>let</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">setTimeout</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  }, </span><span style=\"color: #098658\">100</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>como esperado, isso irá imprimir</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</span></div></code></div></pre>\n<h2 id=\"declarações-const\" style=\"position:relative;\"><a href=\"#declara%C3%A7%C3%B5es-const\" aria-label=\"declarações const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarações <code>const</code></h2>\n<p>Declarações <code>const</code> são outra forma de declarar variáveis.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">numVidasParaPorGato</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Elas são como declarações <code>let</code> mas, como seu nome indica, seu valor não pode ser alterado uma vez que o mesmo é delimitado.\nEm outras palavras, elas tem a mesma regra de escopo de <code>let</code>, mas você não pode reatribui-las.</p>\n<p>Isso não deveria ser confundido com a idéia de que os valores nos quais elas fazem referência são <em>imutáveis</em>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">numVidasParaPorGato</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">9</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">gatinho</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">nome:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Aurora\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">numVidas:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numVidasParaPorGato</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Erro</span></div><div class='line'><span style=\"color: #001080\">gatinho</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"Danielle\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">numVidas:</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">numVidasParaPorGato</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// tudo \"okay\"</span></div><div class='line'><span style=\"color: #001080\">gatinho</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nome</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Rory\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">gatinho</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nome</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Kitty\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">gatinho</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">nome</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Cat\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">gatinho</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">numVidas</span><span style=\"color: #000000\">--;</span></div></code></div></pre>\n<p>A não ser que você tome medidas específicas para evitar, o estado interior de uma variável <code>const</code> ainda é modificável.\nFelizmente, TypeScript te permite especificar que membros de um objeto são <code>readonly</code>.\nO <a href=\"/docs/handbook/interfaces.html\">capítulo sobre Interfaces</a> tem mais detalhes.</p>\n<h2 id=\"let-vs-const\" style=\"position:relative;\"><a href=\"#let-vs-const\" aria-label=\"let vs const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>let</code> vs. <code>const</code></h2>\n<p>Dado que temos dois tipos de declarações com semântica de escopo similares, é natural nos perguntarmos qual usar.\nComo a maioria das perguntas amplas, a resposta é: depende.</p>\n<p>Aplicando o <a href=\"https://wikipedia.org/wiki/Principle_of_least_privilege\">princípio do menos privilegiado</a>, todas declarações além daquelas que você planeja modificar deveriam usar <code>const</code>.</p>\n<p>A justificativa é que, se uma variável não precisa ser escrita, outros trabalhando na mesma base de dados não deveriam ser possibilitados de escrever automaticamente no objeto, e precisarão considerar quando eles realmente precisam reatribuir para a variável.\nUsando <code>const</code> também faz o código mais previsível quando se está raciocinando sobre o fluxo de dados.</p>\n<p>Use seu melhor julgamento, e se aplicável, consulte o assunto com o resto de seu time.</p>\n<p>A maioria desse manual usa declarações <code>let</code>.</p>\n<h2 id=\"desestruturação\" style=\"position:relative;\"><a href=\"#desestrutura%C3%A7%C3%A3o\" aria-label=\"desestruturação permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Desestruturação</h2>\n<p>Outra funcionalidade do ECMAScript 2015 que o TypeScript tem é desestruturação.</p>\n<p>Para uma referência completa, veja <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">o artigo na Mozilla Developer Network</a>.\nNessa sessão, daremos uma visão geral breve.</p>\n<h2 id=\"desestruturação-de-array\" style=\"position:relative;\"><a href=\"#desestrutura%C3%A7%C3%A3o-de-array\" aria-label=\"desestruturação de array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Desestruturação de Array</h2>\n<p>A forma mais simples de desestruturação são atribuições de desestruturação de arrays:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">entrada</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">entrada</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 1</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 2</span></div></code></div></pre>\n<p>Isso cria duas novas variáveis chamadas <code>primeiro</code> e <code>segundo</code>.\nIsso é equivalente a usar indexação, mas é muito mais conveniente:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">entrada</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">entrada</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>Desestruturação também funciona com variáveis ja declaradas:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// variáveis de troca</span></div><div class='line'><span style=\"color: #000000\">[</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">] = [</span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>E com parâmetros para uma função:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">([</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">]: [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">]) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">([</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">]);</span></div></code></div></pre>\n<p>Você pode criar uma variável para os itens restantes da lista usando a sintaxe <code>...</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">restante</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 1</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">restante</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída [ 2, 3, 4 ]</span></div></code></div></pre>\n<p>Claro, como isso é JavaScript, você pode apenas ignorar elementos finais que não se importa:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 1</span></div></code></div></pre>\n<p>Ou outros elementos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [, </span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">, , </span><span style=\"color: #001080\">quarto</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 2</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">quarto</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna saída 4</span></div></code></div></pre>\n<h2 id=\"desestruturação-de-tupla\" style=\"position:relative;\"><a href=\"#desestrutura%C3%A7%C3%A3o-de-tupla\" aria-label=\"desestruturação de tupla permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Desestruturação de Tupla</h2>\n<p>Tuplas podem ser desestruturadas como arrays; as variáveis de desestruturação pegam os tipos dos elementos tupla correspondentes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">: [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\">] = [</span><span style=\"color: #098658\">7</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">\"olá\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// a: number, b: string, c: boolean</span></div></code></div></pre>\n<p>É um erro desestruturar a tupla além do limite de seus elementos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Erro, sem elementos no index 3</span></div></code></div></pre>\n<p>Como nos arrays, você pode desestruturar o resto da tupla com <code>...</code>, para obter uma tupla mais curta:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">bc</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// bc: [string, boolean]</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">d</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// d: [], a tupla vazia</span></div></code></div></pre>\n<p>Ou ignorar elementos finais, ou outros elementos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// a: number</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> [, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">] = </span><span style=\"color: #001080\">tupla</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// b: string</span></div></code></div></pre>\n<h2 id=\"desestruturação-de-objetos\" style=\"position:relative;\"><a href=\"#desestrutura%C3%A7%C3%A3o-de-objetos\" aria-label=\"desestruturação de objetos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Desestruturação de Objetos</h2>\n<p>Você também pode desestruturar objetos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">c:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Isso cria novas variáveis <code>a</code> e <code>b</code> a partir de <code>o.a</code> e <code>o.b</code>.\nPerceba que você pode pular <code>c</code> se você não o quiser.</p>\n<p>Como desestruturação de arrays, você pode ter atribuições sem declarações:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> } = { </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">101</span><span style=\"color: #000000\"> });</span></div></code></div></pre>\n<p>Perceba que tivemos que cercar esse elemento com parêntesis.\nJavaScript normalmente analisa um <code>{</code> como o começo do bloco.</p>\n<p>Você pode criar uma variável para o restante dos itens em um objeto usando a sintaxe <code>...</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">atravessando</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">total</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">atravessando</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">atravessando</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h3 id=\"renomeação-de-propriedades\" style=\"position:relative;\"><a href=\"#renomea%C3%A7%C3%A3o-de-propriedades\" aria-label=\"renomeação de propriedades permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Renomeação de propriedades</h3>\n<p>Você também pode dar nomes diferentes para propriedades:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">novoNome1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">novoNome2</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Aqui a sintaxe começa a ficar confusa.\nVocê pode ler <code>a: novoNome1</code> como ”<code>a</code> sendo <code>novoNome1</code>”.\nA direção é esquerda para direita, como se você tivesse escrito:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">novoNome1</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">novoNome2</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>De forma confusa, os dois pontos <em>não</em> indicam o tipo.\nO tipo, se você o especificar, ainda precisa ser escrito após toda desestruturação:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> }: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<h3 id=\"valores-padrão\" style=\"position:relative;\"><a href=\"#valores-padr%C3%A3o\" aria-label=\"valores padrão permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Valores padrão</h3>\n<p>Valores padrão te permitem especificar um valor caso a propriedade seja <code>undefined</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mantenhaObjetoInteiro</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">objetoInteiro</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1001</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">objetoInteiro</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Nesse exemplo o <code>b?</code> indica que <code>b</code> é opcional, então ele pode ser <code>undefined</code>.\n<code>mantenhaObjetoInteiro</code> agora tem uma variável para <code>objetoInteiro</code> assim como as propriedades <code>a</code> e <code>b</code>, mesmo se <code>b</code> for <code>undefined</code>.</p>\n<h2 id=\"declaração-de-funções\" style=\"position:relative;\"><a href=\"#declara%C3%A7%C3%A3o-de-fun%C3%A7%C3%B5es\" aria-label=\"declaração de funções permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaração de Funções</h2>\n<p>Desestruturação também funciona em declarações de funções.\nPara casos simples é bem descomplicado:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> }: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Mas especificar valores padrões é mais comum para parâmetros, e ter valores padrão de forma correta com desestruturação pode ser complicado.\nPrimeiro, você precisa lembrar de por a padronização antes do valor padrão.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> } = {}): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<blockquote>\n<p>O código acima é um exemplo de inferência de tipo, explicado anteriormente nesse manual.</p>\n</blockquote>\n<p>Então, você precisa lembrar de prover um valor padrão para parâmetros opcionais na propriedade desestruturada ao invés do inicializador principal.\nLembre que <code>C</code> foi definida com <code>b</code> opcional:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\"> } = { </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\"> }): </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\">a:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"sim\"</span><span style=\"color: #000000\"> }); </span><span style=\"color: #008000\">// ok, padrão b = 0</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// ok, padrão para { a: \"\" }, no qual então define padrão b = 0</span></div><div class='line'><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">({}); </span><span style=\"color: #008000\">// erro, 'a' é requerido se você fornecer um argumento</span></div></code></div></pre>\n<p>Use desestruturação com cuidado.\nComo os exemplos anteriores demonstram, qualquer coisa a mais do que desestruturação simples é confuso.\nIsso é especialmente verdade com desestruturação em encadeamentos profundos, que fica <em>realmente</em> difícil de entender mesmo sem empilhamento, renomeação, valores padrão e anotações de tipo.\nTente manter expressões de desestruturação pequenas e simples.\nVocê pode sempre escrever as atribuições que a desestruturação geraria.</p>\n<h2 id=\"propagação\" style=\"position:relative;\"><a href=\"#propaga%C3%A7%C3%A3o\" aria-label=\"propagação permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Propagação</h2>\n<p>O operador de propagação é o oporto do de desestruturação.\nEle te permite propagar um array para outro array, ou um objeto para outro objeto.\nPor exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">ambosMais</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">primeiro</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">segundo</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">];</span></div></code></div></pre>\n<p>Isso dá a <code>ambosMais</code> o valor <code>[0, 1, 2, 3, 4, 5]</code>.\nPropagação cria uma cópia rasa de <code>primeiro</code> e <code>segundo</code>.\nEles não são modificados pela propagação.</p>\n<p>Você também pode propagar objetos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">padroes</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">comida:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"apimentada\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preco:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"$$\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ambiente:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"barulhento\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">busca</span><span style=\"color: #000000\"> = { ...</span><span style=\"color: #001080\">padroes</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">comida:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"rica\"</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Agora <code>busca</code> é <code>{ comida: \"rica\", preco: \"$$\", ambiente: \"barulhento\" }</code>.\nPropagação de objetos é mais complexo do que propagação de array.\nComo propagação de array, procede-se da esquerda para direita, mas o resultado ainda é um objeto.\nIsso significa que propriedades que vem depois no objeto propagado sobrescrevem propriedades que vieram anteriormente.\nEntão se modificarmos o exemplo anterior para propagar no final:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">padroes</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">comida:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"apimentada\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">preco:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"$$\"</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">ambiente:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"barulhento\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">busca</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">comida:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"rica\"</span><span style=\"color: #000000\">, ...</span><span style=\"color: #001080\">padroes</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Então a propriedade <code>comida</code> em <code>padroes</code> sobrescreve <code>comida: \"rica\"</code>, o que não é o que queremos nesse caso.</p>\n<p>Propagação de objetos também possui outros limites surpreendentes.\nPrimeiro, ele apenas inclui <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">as próprias propriedades enumeradas</a> de um objeto.\nBasicamente, isso significa que você perde métodos quando propaga instancias de um objeto:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">C</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">clone</span><span style=\"color: #000000\"> = { ...</span><span style=\"color: #001080\">c</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\">clone</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #001080\">clone</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">m</span><span style=\"color: #000000\">(); </span><span style=\"color: #008000\">// erro!</span></div></code></div></pre>\n<p>Segundo, o compilador TypeScript não permite propagação do tipo dos parâmetros para funções genéricas.\nEssa funcionalidade é esperada em versões futuras da linguagem.</p>","headings":[{"value":"declarações var","depth":2},{"value":"Regras de escopo","depth":2},{"value":"Captura de peculiaridades em variáveis","depth":2},{"value":"Declarações let","depth":2},{"value":"Escopo de bloco","depth":2},{"value":"Re-declarações e Shadowing","depth":2},{"value":"Captura de variáveis de escopo de bloco","depth":2},{"value":"Declarações const","depth":2},{"value":"let vs. const","depth":2},{"value":"Desestruturação","depth":2},{"value":"Desestruturação de Array","depth":2},{"value":"Desestruturação de Tupla","depth":2},{"value":"Desestruturação de Objetos","depth":2},{"value":"Renomeação de propriedades","depth":3},{"value":"Valores padrão","depth":3},{"value":"Declaração de Funções","depth":2},{"value":"Propagação","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/variable-declarations.html","title":"Declarações de variáveis","disable_toc":null,"handbook":null,"oneline":"Como TypeScript lida com declarações de variáveis","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-declarações-de-variáveis","slug":"/pt/docs/handbook/variable-declarations.html","repoPath":"/packages/documentation/copy/pt/reference/Variable Declarations.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.573Z"}},"staticQueryHashes":[]}