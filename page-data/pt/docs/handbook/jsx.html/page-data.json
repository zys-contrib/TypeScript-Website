{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/jsx.html","result":{"data":{"markdownRemark":{"id":"9dbda7af-7be3-5f4b-83b1-780608b26a03","excerpt":"JSX é uma sintaxe semelhante a um XML incorporável.\nEle deve ser transformado em JavaScript válido, embora a semântica dessa transformação seja específica da…","html":"<p><a href=\"https://facebook.github.io/jsx/\">JSX</a> é uma sintaxe semelhante a um XML incorporável.\nEle deve ser transformado em JavaScript válido, embora a semântica dessa transformação seja específica da implementação.\nJSX ganhou popularidade com o framework <a href=\"https://reactjs.org/\">React</a>, mas desde então viu outras implementações também.\nTypeScript suporta incorporação, verificação de tipo, e compilação de JSX diretamente para JavaScript.</p>\n<h2 id=\"uso-básico\" style=\"position:relative;\"><a href=\"#uso-b%C3%A1sico\" aria-label=\"uso básico permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uso básico</h2>\n<p>Para usar JSX, você deve fazer duas coisas.</p>\n<ol>\n<li>Nomeie seus arquivos com extensão <code>.tsx</code></li>\n<li>Ativar a opção <code>jsx</code></li>\n</ol>\n<p>TypeScript vem com três modos JSX: <code>preserve</code>, <code>react</code>, e <code>react-native</code>.\nEsses modos afetam apenas o estágio de emissão - verificação de tipo não é afetada.\nO modo <code>preserve</code> manterá o JSX como parte da output para ser posteriormente consumido por outra etapa de transformação (e.g. <a href=\"https://babeljs.io/\">Babel</a>).\nAlém disso, a output terá uma extensão de arquivo <code>.jsx</code>.\nO modo <code>react</code> vai emitir <code>React.createElement</code>, não precisa passar por uma transformação JSX antes de usar, e a saída terá uma extensão de arquivo <code>.js</code>.\nO modo <code>react-native</code> é o equivalente ao modo <code>preserve</code> no sentido de que mantém todos os JSX, mas a saída terá uma extensão de arquivo <code>.js</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Modo</th>\n<th>Input</th>\n<th>Output</th>\n<th>Output File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>preserve</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.jsx</code></td>\n</tr>\n<tr>\n<td><code>react</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>React.createElement(\"div\")</code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-native</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-jsx</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>_jsx(\"div\", {}, void 0);</code></td>\n<td><code>.js</code></td>\n</tr>\n<tr>\n<td><code>react-jsxdev</code></td>\n<td><code>&#x3C;div /></code></td>\n<td><code>_jsxDEV(\"div\", {}, void 0, false, {...}, this);</code></td>\n<td><code>.js</code></td>\n</tr>\n</tbody>\n</table>\n<p>Você pode especificar esse modo usando tanto a flag na linha de comando <code>--jsx</code> ou a opção <a href=\"/tsconfig#jsx\"><code>jsx</code> correspondente no seu arquivo tsconfig.json</a>.</p>\n<blockquote>\n<p>*Nota: Você pode especificar a função factory JSX para usar quando direcionar react JSX com a opção <code>--jsxFactory</code> (padrão para <code>React.createElement</code>)</p>\n</blockquote>\n<h2 id=\"o-operador-as\" style=\"position:relative;\"><a href=\"#o-operador-as\" aria-label=\"o operador as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O operador <code>as</code></h2>\n<p>Observe como escrever uma declaração de tipo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = &lt;</span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Isso afirma que a variável <code>bar</code> tem o tipo <code>foo</code>.\nUma vez que o TypeScript também usa colchetes angulares para afirmações de tipo, combiná-lo com a sintaxe JSX apresentaria certas dificuldades de análise. Como resultado, o TypeScript não permite afirmações do tipo colchete angular em arquivos <code>.tsx</code>.</p>\n<p>Uma vez que a sintaxe acima não pode ser usada em arquivos <code>.tsx</code>, um operador de asserção de tipo alternativo deve ser usado: <code>as</code>.\nO exemplo pode ser facilmente reescrito com o operador <code>as</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>O operador <code>as</code> está disponívem em ambos arquivos <code>.ts</code> e <code>.tsx</code>, e é idêntico em comportamento ao estilo de asserção do tipo colchete angular.</p>\n<h2 id=\"verificação-de-tipos\" style=\"position:relative;\"><a href=\"#verifica%C3%A7%C3%A3o-de-tipos\" aria-label=\"verificação de tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verificação de tipos</h2>\n<p>Para entender a verificação de tipo com JSX, você deve primeiro entender a diferença entre os elementos intrínsecos e os elementos baseados em valores.\nDada uma expressão JSX <code>&#x3C;expr /></code>, <code>expr</code> pode se referir a algo intrínseco ao ambiente (e.g. uma <code>div</code> ou <code>span</code> em um ambiente DOM) ou a um componente personalizado que você criou.\nIsto é importante por duas razões:</p>\n<ol>\n<li>Para React, os elementos intrínsecos são emitidos como strings (<code>React.createElement(\"div\")</code>), enquanto um componente que você criou não é (<code>React.createElement(MyComponent)</code>).</li>\n<li>Os tipos de atributos passados no elemento JSX devem ser pesquisados de forma diferente.\nAtributos de elementos intrínsecos devem ser conhecidos <em>intrinsicamente</em>, enquanto os componentes provavelmente desejarão especificar seu próprio conjunto de atributos.</li>\n</ol>\n<p>TypeScript usa a <a href=\"http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components\">mesma convenção que React usa</a> para distinguir entre estes.\nUm elemento intrínseco sempre começa com uma letra minúscula e um elemento baseado em valor sempre começa com uma letra maiúscula.</p>\n<h2 id=\"elementos-intrínsecos\" style=\"position:relative;\"><a href=\"#elementos-intr%C3%ADnsecos\" aria-label=\"elementos intrínsecos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elementos intrínsecos</h2>\n<p>Os elementos intrínsecos são pesquisados na interface especial <code>JSX.IntrinsicElements</code>.\nPor padrão, se esta interface não for especificada, então vale tudo e os elementos intrínsecos não serão verificados por tipo.\nNo entanto, se esta interface <em>estiver</em> presente, então o nome do elemento intrínseco é procurado como uma propriedade na interface <code>JSX.IntrinsicElements</code>.\nPor exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>No exemplo acima, <code>&#x3C;foo /></code> vai funcionar bem, mas <code>&#x3C;bar /></code> resultará em um erro, pois não foi especificado em <code>JSX.IntrinsicElements</code>.</p>\n<blockquote>\n<p>Nota: Você também pode especificar um indexador de string abrangente em <code>JSX.IntrinsicElements</code> do seguinte modo:</p>\n</blockquote>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    [</span><span style=\"color: #001080\">elemName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">]: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"elementos-baseados-em-valor\" style=\"position:relative;\"><a href=\"#elementos-baseados-em-valor\" aria-label=\"elementos baseados em valor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elementos baseados em valor</h2>\n<p>Os elementos baseados em valor são simplesmente pesquisados por identificadores que estão no escopo.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./myComponent\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">SomeOtherComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>Existem duas maneiras de definir um elemento baseado em valor:</p>\n<ol>\n<li>Function Component (FC)</li>\n<li>Class Component</li>\n</ol>\n<p>Como esses dois tipos de elementos baseados em valor são indistinguíveis um do outro em uma expressão JSX, primeiro o TS tenta resolver a expressão como um componente de função usando resolução de sobrecarga. Se o processo for bem-sucedido, o TS termina de resolver a expressão para sua declaração. Se o valor não resolver como um componente de função, o TS tentará resolvê-lo como um componente de classe. Se isso falhar, o TS relatará um erro.</p>\n<h3 id=\"function-component\" style=\"position:relative;\"><a href=\"#function-component\" aria-label=\"function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Component</h3>\n<p>Como o nome sugere, o componente é definido como uma função JavaScript em que seu primeiro argumento é um objeto <code>props</code>.\nTS impõe que seu tipo de retorno deve ser atribuível a <code>JSX.Element</code>.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FooProp</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">X</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">Y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">AnotherComponent</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> });</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">ComponentFoo</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">FooProp</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">AnotherComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">name</span><span style=\"color: #000000\">={</span><span style=\"color: #1C6277\">prop</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">} /&gt;;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Button</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }, </span><span style=\"color: #001080\">context</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">color</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #001080\">button</span><span style=\"color: #000000\"> /&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Como um componente de função é simplesmente uma função JavaScript, sobrecargas de função também podem ser usadas aqui:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ClickableProps</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">[] | </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HomeProps</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ClickableProps</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">home</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SideProps</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ClickableProps</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">side</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MainButton</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HomeProps</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MainButton</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">SideProps</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<blockquote>\n<p>Nota: Componentes de Função eram anteriormente conhecidos como Stateless Function Components (SFC). Como Function Components não pode mais ser considerado sem estado nas versões recentes do react, o tipo <code>SFC</code> e seu alias <code>StatelessComponent</code> foram descontinuados.</p>\n</blockquote>\n<h3 id=\"class-component\" style=\"position:relative;\"><a href=\"#class-component\" aria-label=\"class component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Component</h3>\n<p>É possível definir o tipo de um componente da classe.\nNo entanto, para fazer isso, é melhor entender dois novos termos: o <em>tipo de classe de elemento</em> e <em>tipo de instância de elemento</em>.</p>\n<p>Dado <code>&#x3C;Expr /></code>, o <em>tipo de classe de elemento</em> é o tipo de <code>Expr</code>.\nPortanto, no exemplo acima, se <code>MyComponent</code> era uma classe ES6, o tipo de classe seria o construtor dessa classe e estática.\nSe <code>MyComponent</code> era uma função factory, o tipo de classe seria essa função.</p>\n<p>Uma vez que o tipo de classe é estabelecido, o tipo de instância é determinado pela união dos tipos de retorno da construção do tipo de classe ou assinaturas de chamada (o que estiver presente).\nEntão, novamente, no caso de uma classe ES6, o tipo de instância seria o tipo de uma instância dessa classe, e no caso de uma função factory, seria o tipo do valor retornado da função.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// use uma assinatura de construção</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myComponent</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyComponent</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element class type =&gt; MyComponent</span></div><div class='line'><span style=\"color: #008000\">// element instance type =&gt; { render: () =&gt; void }</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">render</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {},</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// use uma assinatura de chamada</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">myComponent</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">();</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// element class type =&gt; MyFactoryFunction</span></div><div class='line'><span style=\"color: #008000\">// element instance type =&gt; { render: () =&gt; void }</span></div></code></div></pre>\n<p>O tipo de instância do elemento é interessante porque deve ser atribuível a <code>JSX.ElementClass</code> ou resultará em um erro.\nPor padrão <code>JSX.ElementClass</code> é <code>{}</code>, mas pode ser aumentado para limitar o uso de JSX apenas aos tipos que estão em conformidade com a interface adequada.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementClass</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">render</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">MyFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> { </span><span style=\"color: #795E26\">render</span><span style=\"color: #001080\">:</span><span style=\"color: #000000\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {} };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">NotAValidComponent</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">NotAValidFactoryFunction</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">NotAValidComponent</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">NotAValidFactoryFunction</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<h2 id=\"verificação-de-tipo-de-atributo\" style=\"position:relative;\"><a href=\"#verifica%C3%A7%C3%A3o-de-tipo-de-atributo\" aria-label=\"verificação de tipo de atributo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verificação de tipo de atributo</h2>\n<p>A primeira etapa para os atributos de verificação de tipo é determinar o <em>tipo de atributos de elemento</em>.\nIsso é ligeiramente diferente entre os elementos intrínsecos e os baseados em valores.</p>\n<p>Para elementos intrínsecos, é o tipo da propriedade em <code>JSX.IntrinsicElements</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">boolean</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// tipo de atributos de elemento para 'foo' é '{bar?: boolean}'</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\"> /&gt;;</span></div></code></div></pre>\n<p>Para elementos baseados em valor, é um pouco mais complexo.\nÉ determinado pelo tipo de uma propriedade no <em>tipo de instância do elemento</em> que foi determinado anteriormente.\nQual propriedade usar é determinada por <code>JSX.ElementAttributesProperty</code>.\nDeve ser declarado com uma única propriedade.\nO nome dessa propriedade é então usado.\nA partir do TypeScript 2.8, se <code>JSX.ElementAttributesProperty</code> não for fornecido, o tipo de primeiro parâmetro do construtor do elemento de classe ou a chamada do fucntion componenent será usada.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementAttributesProperty</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// especifica o nome da propriedade a usar</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// especifica a propriedade no tipo de instância do elemento</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// tipo de atributos de elemento para 'MyComponent' é '{foo?: string}'</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;;</span></div></code></div></pre>\n<p>O tipo de atributo de elemento é usado para verificar o tipo dos atributos no JSX.\nPropriedades opcionais e obrigatórias são suportadas.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">IntrinsicElements</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">optionalProp</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">optionalProp</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, requiredProp is missing</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error, requiredProp should be a string</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">unknownProp</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// error, unknownProp does not exist</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">requiredProp</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">some</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">unknown</span><span style=\"color: #000000\">-</span><span style=\"color: #001080\">prop</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok, because 'some-unknown-prop' is not a valid identifier</span></div></code></div></pre>\n<blockquote>\n<p>Nota: Se um nome de atributo não for um identificador JS válido (como um atributo <code>data-*</code>), não é considerado um erro se não for encontrado no tipo de atributos do elemento.</p>\n</blockquote>\n<p>Além disso, a interface <code>JSX.IntrinsicAttributes</code> pode ser usada para especificar propriedades extras usadas pela estrutura JSX que geralmente não são usadas pelos adereços ou argumentos dos componentes - por exemplo <code>key</code> em React. Especializando-se ainda mais, o tipo genérico <code>JSX.IntrinsicClassAttributes&#x3C;T></code> também pode ser usado para especificar o mesmo tipo de atributos extras apenas para class components (e não Function Components). Nesse tipo, o parâmetro genérico corresponde ao tipo de instância de classe. Em React, isso é usado para permitir o atributo <code>ref</code> do tipo <code>Ref&#x3C;T></code>. De modo geral, todas as propriedades dessas interfaces devem ser opcionais, a menos que você pretenda que os usuários de sua estrutura JSX precisem fornecer algum atributo em cada tag.</p>\n<p>O operador de propagação também funciona:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">props</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">requiredProp:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">badProps</span><span style=\"color: #000000\"> = {};</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> {...</span><span style=\"color: #001080\">badProps</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<h2 id=\"verificação-de-tipos-filhos\" style=\"position:relative;\"><a href=\"#verifica%C3%A7%C3%A3o-de-tipos-filhos\" aria-label=\"verificação de tipos filhos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verificação de tipos filhos</h2>\n<p>No TypeScript 2.3, TS introduziu verificação de tipo <em>filho</em>. <em>filho</em> é uma propriedade especial em um <em>tipo de atributos de elemento</em> onde <em>JSXExpression</em>s são consideradas para seres inseridas nos elementos.\nSemelhante a como o TS usa <code>JSX.ElementAttributesProperty</code> para determinar o nome de <em>props</em>, TS usa <code>JSX.ElementChildrenAttribute</code> para determinar o nome do <em>filho</em> dentro dessas props.\n<code>JSX.ElementChildrenAttribute</code> deve ser declarado com uma única propriedade.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ElementChildrenAttribute</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: {}; </span><span style=\"color: #008000\">// especifica o nome dos filhos a serem usados</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">World</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">CustomComp</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;{props.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">CustomComp</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  {</span><span style=\"color: #A31515\">\"This is just a JS expression...\"</span><span style=\"color: #000000\"> + </span><span style=\"color: #098658\">1000</span><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">CustomComp</span><span style=\"color: #000000\">&gt;</span></div></code></div></pre>\n<p>Você pode especificar o tipo do <em>filho</em> como qualquer outro atributo. Isso substituirá o tipo padrão de, por exemplo, a <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">tipagem React</a> se você os usar.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">PropsType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">JSX</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Element</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">React</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">PropsType</span><span style=\"color: #000000\">, {}&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span></div><div class='line'><span style=\"color: #000000\">      &lt;</span><span style=\"color: #1C6277\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">        {</span><span style=\"color: #001080\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #000000\">      &lt;/</span><span style=\"color: #001080\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    )</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Error: children is of type JSX.Element not array of JSX.Element</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h2</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">World</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h2</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Error: children is of type JSX.Element not array of JSX.Element or string.</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"baz\"</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">h1</span><span style=\"color: #000000\">&gt;</span><span style=\"color: #001080\">Hello</span><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">h1</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">World</span></div><div class='line'><span style=\"color: #000000\">&lt;/</span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\">&gt;</span></div></code></div></pre>\n<h2 id=\"o-tipo-de-resultado-jsx\" style=\"position:relative;\"><a href=\"#o-tipo-de-resultado-jsx\" aria-label=\"o tipo de resultado jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O tipo de resultado JSX</h2>\n<p>Por padrão, o resultado de uma expressão JSX é digitado como <code>any</code>.\nVocê pode personalizar o tipo, especificando a interface <code>JSX.Element</code>.\nNo entanto, não é possível recuperar informações de tipo sobre o elemento, atributos ou filhos do JSX a partir desta interface.\nÉ uma caixa preta.</p>\n<h2 id=\"incorporando-expressões\" style=\"position:relative;\"><a href=\"#incorporando-express%C3%B5es\" aria-label=\"incorporando expressões permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Incorporando Expressões</h2>\n<p>JSX permite que você incorpore expressões entre as tags circundando as expressões com chaves (<code>{ }</code>).</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    {[\"</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">\", \"</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">\"].</span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) =&gt; (</span></div><div class='line'><span style=\"color: #000000\">      &lt;</span><span style=\"color: #1C6277\">span</span><span style=\"color: #000000\">&gt;{i / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    ))}</span></div><div class='line'><span style=\"color: #000000\">  &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>O código acima resultará em um erro, pois você não pode dividir uma string por um número.\nA saída, ao usar a opção <code>preserve</code>, parece:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">a</span><span style=\"color: #000000\"> = (</span></div><div class='line'><span style=\"color: #000000\">  &lt;</span><span style=\"color: #1C6277\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">    {[\"</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">\", \"</span><span style=\"color: #001080\">bar</span><span style=\"color: #000000\">\"].</span><span style=\"color: #001080\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #001080\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;{</span><span style=\"color: #001080\">i</span><span style=\"color: #000000\"> / 2}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">    })}</span></div><div class='line'><span style=\"color: #000000\">  &lt;/</span><span style=\"color: #001080\">div</span><span style=\"color: #000000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">);</span></div></code></div></pre>\n<h2 id=\"integração-com-react\" style=\"position:relative;\"><a href=\"#integra%C3%A7%C3%A3o-com-react\" aria-label=\"integração com react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integração com React</h2>\n<p>Para usar JSX com React, você deve usar a <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">tipagem React</a>.\nEssa tipagem define o namespace <code>JSX</code> apropriadamente para uso com React.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/// </span><span style=\"color: #800000\">&lt;reference</span><span style=\"color: #008000\"> </span><span style=\"color: #EE0000\">path</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"react.d.ts\"</span><span style=\"color: #008000\"> </span><span style=\"color: #800000\">/&gt;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Props</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">React</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">Props</span><span style=\"color: #000000\">, {}&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> &lt;</span><span style=\"color: #1C6277\">span</span><span style=\"color: #000000\">&gt;{this.props.</span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">}&lt;/</span><span style=\"color: #001080\">span</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">=</span><span style=\"color: #A31515\">\"bar\"</span><span style=\"color: #000000\"> /&gt;; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #000000\">&lt;</span><span style=\"color: #001080\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">={</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">} /&gt;; </span><span style=\"color: #008000\">// error</span></div></code></div></pre>\n<h3 id=\"configurando-o-jsx\" style=\"position:relative;\"><a href=\"#configurando-o-jsx\" aria-label=\"configurando o jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando o JSX</h3>\n<p>Existem vários sinalizadores de compilador que podem ser usados para personalizar seu JSX, que funcionam tanto como um sinalizador do compilador quanto por meio de pragmas embutidos por arquivo. Para saber mais, consulte as páginas de referência do tsconfig:</p>\n<ul>\n<li><a href=\"/tsconfig/#jsxFactory\"><code>jsxFactory</code></a></li>\n<li><a href=\"/tsconfig/#jsxFragmentFactory\"><code>jsxFragmentFactory</code></a></li>\n<li><a href=\"/tsconfig/#jsxImportSource\"><code>jsxImportSource</code></a></li>\n</ul>","headings":[{"value":"Uso básico","depth":2},{"value":"O operador as","depth":2},{"value":"Verificação de tipos","depth":2},{"value":"Elementos intrínsecos","depth":2},{"value":"Elementos baseados em valor","depth":2},{"value":"Function Component","depth":3},{"value":"Class Component","depth":3},{"value":"Verificação de tipo de atributo","depth":2},{"value":"Verificação de tipos filhos","depth":2},{"value":"O tipo de resultado JSX","depth":2},{"value":"Incorporando Expressões","depth":2},{"value":"Integração com React","depth":2},{"value":"Configurando o JSX","depth":3}],"frontmatter":{"permalink":"/pt/docs/handbook/jsx.html","title":"JSX","disable_toc":null,"handbook":null,"oneline":"Utilizando JSX com TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-jsx","slug":"/pt/docs/handbook/jsx.html","repoPath":"/packages/documentation/copy/pt/reference/JSX.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}