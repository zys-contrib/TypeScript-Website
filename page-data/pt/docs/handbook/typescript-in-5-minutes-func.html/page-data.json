{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/typescript-in-5-minutes-func.html","result":{"data":{"markdownRemark":{"id":"7c9f4c1e-d859-524b-87b6-7f60e9914155","excerpt":"Typescript começou sua vida numa tentativa de trazer tipos tradicionalmente orientados a objeto para o JavaScript para que os programadores na Microsoft…","html":"<p>Typescript começou sua vida numa tentativa de trazer tipos tradicionalmente orientados a objeto para o JavaScript para que os programadores na Microsoft pudessem trazer programas tradicionalmente orientados a objeto para a web. Conforme foi se desenvolvendo, o sistema de tipos do Typescript evoluiu para código modelo escrito por JavaScripters nativos. O sistema resultante é poderoso, interessante e confuso.</p>\n<p>Essa introdução foi desenvolvida para ajudar programadores Haskell ou ML que querem aprender Typescript. Ela descreve como o sistema de tipos do Typescript difere do sistema de tipos do Haskell. Ela também descreve as funcionalidades únicas do sistema de tipos do Typescript que tem ascendência na modelagem de código JavaScript.</p>\n<p>Essa introdução não cobre programação orientada a objeto. Na prática, programação orientada a objeto em Typescript é similar a outras linguagens populares com funcionalidades OO.</p>\n<h2 id=\"pré-requisitos\" style=\"position:relative;\"><a href=\"#pr%C3%A9-requisitos\" aria-label=\"pré requisitos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pré-requisitos</h2>\n<p>Nessa introdução, eu assumo que você tenha os seguintes conhecimentos:</p>\n<ul>\n<li>Como programar em JavaScript, as boas partes.</li>\n<li>Sintaxe de tipo de uma linguagem descendente do C.</li>\n</ul>\n<p>Se você precisa aprender as boas partes do Javascript, leia <a href=\"https://shop.oreilly.com/product/9780596517748.do\">JavaScript: As Boas Partes</a>. Você pode ser capaz de pular o livro se você sabe como escrever programas em uma linguagem com escopo léxico de chamada-por-valor com muita mutabilidade e não muito mais. <a href=\"https://people.csail.mit.edu/jaffer/r4rs.pdf\">R<sup>4</sup>RS Scheme</a> é um bom exemplo.</p>\n<p><a href=\"http://www.stroustrup.com/4th.html\">A Linguagem de Programação C++</a> é um bom lugar para aprender sobre sintaxe no estilo C. Diferente do C++, Typescript usa tipos pós-fixados, como: <code>x: string</code> ao invés de <code>string x</code>.</p>\n<h2 id=\"conceitos-que-não-estão-em-haskell\" style=\"position:relative;\"><a href=\"#conceitos-que-n%C3%A3o-est%C3%A3o-em-haskell\" aria-label=\"conceitos que não estão em haskell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conceitos que não estão em Haskell</h2>\n<h2 id=\"tipos-nativos\" style=\"position:relative;\"><a href=\"#tipos-nativos\" aria-label=\"tipos nativos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos Nativos</h2>\n<p>JavaScript define 8 tipos nativos:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Number</code></td>\n<td>um ponto flutuante de dupla precisão IEEE 754.</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td>uma string imutável UTF-16.</td>\n</tr>\n<tr>\n<td><code>BigInt</code></td>\n<td>inteiros no formato de precisão arbitrário.</td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td><code>true</code> e <code>false</code>.</td>\n</tr>\n<tr>\n<td><code>Symbol</code></td>\n<td>um valor único usado como uma chave.</td>\n</tr>\n<tr>\n<td><code>Null</code></td>\n<td>equivalente ao tipo unit.</td>\n</tr>\n<tr>\n<td><code>Undefined</code></td>\n<td>também equivalente ao tipo unit.</td>\n</tr>\n<tr>\n<td><code>Object</code></td>\n<td>similar aos records.</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Data_structures\">Veja a MDN para mais detalhes</a>.</p>\n<p>Typescript tem os tipos primitivos correspondentes para os tipos nativos:</p>\n<ul>\n<li><code>number</code></li>\n<li><code>string</code></li>\n<li><code>bigint</code></li>\n<li><code>boolean</code></li>\n<li><code>symbol</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>object</code></li>\n</ul>\n<h3 id=\"outros-tipos-importantes-do-typescript\" style=\"position:relative;\"><a href=\"#outros-tipos-importantes-do-typescript\" aria-label=\"outros tipos importantes do typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outros tipos importantes do Typescript</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Explanation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>unknown</code></td>\n<td>o tipo do topo.</td>\n</tr>\n<tr>\n<td><code>never</code></td>\n<td>o tipo do final.</td>\n</tr>\n<tr>\n<td>object literal</td>\n<td>eg <code>{ property: Type }</code></td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td>um subtipo de <code>undefined</code> para ser usado como um tipo de retorno.</td>\n</tr>\n<tr>\n<td><code>T[]</code></td>\n<td>arrays mutáveis, também escritos como <code>Array&#x3C;T></code></td>\n</tr>\n<tr>\n<td><code>[T, T]</code></td>\n<td>tuplas, que tem tamanho fixado mas são mutáveis</td>\n</tr>\n<tr>\n<td><code>(t: T) => U</code></td>\n<td>funções</td>\n</tr>\n</tbody>\n</table>\n<p>Notas:</p>\n<ol start=\"4\">\n<li>\n<p>Sintaxe de funções incluem os nomes dos parâmetros. É bem difícil se acostumar com isso!</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fst</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ou mais precisamente:</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">fst</span><span style=\"color: #000000\">: &lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> = (</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n</li>\n<li>\n<p>Sintaxe de tipo literal de objeto espelha precisamente a sintaxe de valor de objeto literal:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">n</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">xs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">object</span><span style=\"color: #000000\">[] } = { </span><span style=\"color: #001080\">n:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">xs:</span><span style=\"color: #000000\"> [] };</span></div></code></div></pre>\n</li>\n<li>\n<p><code>[T, T]</code> é um subtipo de <code>T[]</code>. Isso é diferente em Haskell, onde tuplas não são relacionadas a listas.</p>\n</li>\n</ol>\n<h3 id=\"tipos-em-caixas\" style=\"position:relative;\"><a href=\"#tipos-em-caixas\" aria-label=\"tipos em caixas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos em caixas</h3>\n<p>Javascript tem tipos em caixas equivalentes aos tipos primitivos que contém métodos que os programadores associam com esses tipos. Typescript reflete isso com, por exemplo, a diferença entre o tipo primitivo <code>number</code> e o tipo em caixa <code>Number</code>. Os tipos em caixa raramente são necessários, já que seus métodos retornam primitivos.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\">toExponential</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #008000\">// é equivalente a</span></div><div class='line'><span style=\"color: #1C6277\">Number</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">toExponential</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">call</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Note que para chamar um método em um numérico literal ele tem que estar entre parênteses para auxiliar o tradutor.</p>\n<h2 id=\"tipagem-gradual\" style=\"position:relative;\"><a href=\"#tipagem-gradual\" aria-label=\"tipagem gradual permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipagem gradual</h2>\n<p>Typescript usa o tipo <code>any</code> sempre que não pode dizer qual deveria ser o tipo de uma expressão. Comparado ao <code>Dynamic</code>, chamar o <code>any</code> de um tipo é um exagero. Ele apenas desativa o verificador de tipo onde quer que apareça. Por exemplo, você pode inserir qualquer valor em um <code>any[]</code> sem marcar o valor de nenhuma forma:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// com \"noImplicitAny\": false no tsconfig.json, anys: any[]</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const anys: any[]' >anys</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const anys: any[]' >anys</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const anys: any[]' >anys</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;oh não&apos;</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='const anys: any[]' >anys</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) qualquer: string' >qualquer</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;coisa&apos;</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEGMHsFtQIgHaQJLQA4BsCW4sBcBBBATzgC5QAzAQwwGcBTUJUPOqBSrAcwDoArOpAQAaUNRJ0KE4gG0AugCgOdPOMmgAvKAUBuRTLq80AVzoALABQBGAJT7Dxs1YDkkc8wDHkF-YOSnC0sAb1AARxNaCIYAJwoXKCw6ahdQAF97IA'>Try</a></div></pre>\n<p>E você pode usar expressões do tipo <code>any</code> em qualquer lugar:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">anys</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">anys</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]); </span><span style=\"color: #008000\">// oh não, \"oh não\" não é uma função</span></div></code></div></pre>\n<p><code>any</code> é contagioso, também — se você inicializar uma variável com uma expressão do tipo <code>any</code>, a variável tem o tipo <code>any</code> também.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">sepsis</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">anys</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] + </span><span style=\"color: #001080\">anys</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">]; </span><span style=\"color: #008000\">// isso poderia significar qualquer coisa</span></div></code></div></pre>\n<p>Para ter um erro quando o Typescript produzir um <code>any</code>, use <code>\"noImplicitAny\": true</code>, ou <code>\"strict\": true</code> no <code>tsconfig.json</code>.</p>\n<h2 id=\"tipagem-estrutural\" style=\"position:relative;\"><a href=\"#tipagem-estrutural\" aria-label=\"tipagem estrutural permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipagem estrutural</h2>\n<p>Tipagem estrutural é um conceito familiar para a maioria dos programadores funcionais, mesmo que Haskell e a maior parte das MLs não são estrturalmente tipadas. Sua forma básica é bem simples:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// @strict: false</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">x:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'olá'</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">extra:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> }; </span><span style=\"color: #008000\">// ok</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o2</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> } = </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok</span></div></code></div></pre>\n<p>Aqui, o objeto literal <code>{ x: \"hi\", extra: 1 }</code> tem um tipo literal correspondente <code>{ x: string, extra: number }</code>. Esse tipo é atribuível à <code>{ x: string }</code> já que tem todas as propriedades requisitadas e essas propriedades tem tipos atribíveis. A propriedade extra não tem nenhuma atribuição anterior, apenas forma um subtipo de <code>{ x: string }</code>.</p>\n<p>Tipos nomeados apenas dão um nome a um tipo; para propósitos de atribuição não há nenhuma diferença entre o nome de tipo <code>Um</code> e a interface de tipo <code>Dois</code> abaixo. Eles ambos tem uma propriedade <code>p: string</code>. (Nomes de tipos se comportam diferente de interfaces com respeito a definições recursivas e parâmetros de tipo entretanto.)</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Um = {&#10;    p: string;&#10;}' >Um</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) p: string' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dois' >Dois</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Dois.p: string' >p</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Tres' >Tres</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Tres.p: string' >p</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;Olá&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: Um' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Um = {&#10;    p: string;&#10;}' >Um</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) p: string' >p</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;oi&apos;</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let dois: Dois' >dois</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Dois' >Dois</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\"><data-lsp lsp='let x: Um' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='let dois: Dois' >dois</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Tres(): Tres' >Tres</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAFUBbUAXlAG9QjVE9oBLAOwHNQBfAbhyc8MAGYBDAMakAInDaJ6OAJBNQLdt0G8ckgDbjEigCrRIiuiqI1QAcgDyegIe3tOHHsh5QAD1SUbBjVbeVs+QU9vABN5FFA5BRsfQRjE2g5IAHdQU3MACgBKfiA'>Try</a></div></pre>\n<h2 id=\"uniões\" style=\"position:relative;\"><a href=\"#uni%C3%B5es\" aria-label=\"uniões permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uniões</h2>\n<p>Em Typescript, os tipos uniões são marcados. Em outras palavras, eles não são uniões discriminadas como <code>data</code> em Haskell. Entretanto, você pode frequentemente discriminar tipos em uma união usando tags nativas ou outras propriedades.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function começar(arg: string | string[] | (() => string) | {&#10;    s: string;&#10;}): string' >começar</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string | {&#10;    s: string;&#10;} | string[] | (() => string)' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">[] | (() </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) | { </span><span style=\"color: #001080\"><data-lsp lsp='(property) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #008000\">// isso é super comum em Javascript</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string | {&#10;    s: string;&#10;} | string[] | (() => string)' >arg</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">&apos;string&apos;</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(local function) casoComum(s: string): string' >casoComum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string' >arg</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #1C6277\"><data-lsp lsp='var Array: ArrayConstructor' >Array</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ArrayConstructor.isArray(arg: any): arg is any[]' >isArray</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: {&#10;    s: string;&#10;} | string[] | (() => string)' >arg</data-lsp></span><span style=\"color: #000000\">)) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: string[]' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.map&lt;string>(callbackfn: (value: string, index: number, array: string[]) => string, thisArg?: any): string[]' >map</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(local function) casoComum(s: string): string' >casoComum</data-lsp></span><span style=\"color: #000000\">).</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;string>.join(separator?: string | undefined): string' >join</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;,&apos;</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: {&#10;    s: string;&#10;} | (() => string)' >arg</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">&apos;function&apos;</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(local function) casoComum(s: string): string' >casoComum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) arg: () => string' >arg</data-lsp></span><span style=\"color: #000000\">());</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(local function) casoComum(s: string): string' >casoComum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: {&#10;    s: string;&#10;}' >arg</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) s: string' >s</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='(local function) casoComum(s: string): string' >casoComum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #008000\">// finalmente, apenas converta uma string para outra string</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABBOBbApgc4IYCcAUAUAJB4DmAXIgM5S4xhmIA+NdDZA2gLouL74AlIgC8APjb1Gw1gG8aVWlKYBfQoMXtGiWSQD0exDGrU4iAJc0QAB3S5kaEKkTpnAKWwA3bNQj1rUCQwwPxQAJ62cCHkoiIiiADkShwJwrrExLjoUCC4SBA+cADCjqj45IIA3CQqLgA21OhGIfgAgri42GEAdMbtnWHluGSCaSSZ2blI5N2o2Nb4BaYlqE6C3QBWcAz4CQA0qdXEtegNTcGhEehRiDFx8QmgkLAIqTrjWTl5yIUrTkNkIRVGr1RrvDKfKY-ZalAHdajA46EEhPaDwfK-WHUTTKDSSDjg4gGRDABjYOoYMBQdB7W62MA+BxgTx2KDYRBOdnJbTWPDsuAgOhcrRkD6Tb7UI5qFRAA'>Try</a></div></pre>\n<p><code>string</code>, <code>Array</code> e <code>Function</code> têm predicados de tipos nativos, levando convenientemente o tipo objeto para a ramificação <code>else</code>. É possível, entretanto, gerar uniões que são difíceis de diferenciar em tempo de execução, para código novo, é melhor construir apenas uniões discriminadas.</p>\n<p>Os seguintes tipos tem predicados nativos:</p>\n<table>\n<thead>\n<tr>\n<th>Tipo</th>\n<th>Predicado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td><code>typeof s === \"string\"</code></td>\n</tr>\n<tr>\n<td>number</td>\n<td><code>typeof n === \"number\"</code></td>\n</tr>\n<tr>\n<td>bigint</td>\n<td><code>typeof m === \"bigint\"</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>typeof b === \"boolean\"</code></td>\n</tr>\n<tr>\n<td>symbol</td>\n<td><code>typeof g === \"symbol\"</code></td>\n</tr>\n<tr>\n<td>undefined</td>\n<td><code>typeof undefined === \"undefined\"</code></td>\n</tr>\n<tr>\n<td>function</td>\n<td><code>typeof f === \"function\"</code></td>\n</tr>\n<tr>\n<td>array</td>\n<td><code>Array.isArray(a)</code></td>\n</tr>\n<tr>\n<td>object</td>\n<td><code>typeof o === \"object\"</code></td>\n</tr>\n</tbody>\n</table>\n<p>Note que funções e arrays são objetos em tempo de execução, porém tem seus próprios predicados.</p>\n<h3 id=\"intersecções\" style=\"position:relative;\"><a href=\"#intersec%C3%A7%C3%B5es\" aria-label=\"intersecções permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersecções</h3>\n<p>Em adição a uniões, Typescript também tem intersecções:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Combinada = {&#10;    a: number;&#10;} &amp; {&#10;    b: string;&#10;}' >Combinada</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> } & { </span><span style=\"color: #001080\"><data-lsp lsp='(property) b: string' >b</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Conflitante = {&#10;    a: number;&#10;} &amp; {&#10;    a: string;&#10;}' >Conflitante</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> } & { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: string' >a</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> };</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwg9gWwEYEsB2BDAJhqBeKAbygwC4o0BXZCAJygF8oAyIqJcgZ2FvQHNGAbgBQoSLDhoAZgBsUwDGmDQCxMhWpI6jFm3XdeaAQ0FA'>Try</a></div></pre>\n<p><code>Combinada</code> tem duas propriedades, <code>a</code> e <code>b</code>, como se tivessem sido escritas como um único tipo de objeto literal. Intersecções e uniões são recursivas em casos de conflito, então <code>Conflitante.a: number &#x26; string</code>.</p>\n<h2 id=\"tipos-unitários\" style=\"position:relative;\"><a href=\"#tipos-unit%C3%A1rios\" aria-label=\"tipos unitários permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos unitários</h2>\n<p>Tipos unitários são subtipos de tipos primitivos que contem exatamente um valor primitivo. Por exemplo, a string <code>foo</code> tem o mesmo tipo de <code>\"foo\"</code>. Jà que o JavaScript não tem enums nativas, é comum usar um conjunto de strings conhecidas. Uniões de tipos strings literais permitem que o TypeScript ter este padrão:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function encher(s: string, n: number, direction: &apos;esquerda&apos; | &apos;direita&apos;): string' >encher</data-lsp></span><span style=\"color: #000000\">(</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: string' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) direction: \"esquerda\" | \"direita\"' >direction</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&apos;esquerda&apos;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&apos;direita&apos;</span></div><div class='line'><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function encher(s: string, n: number, direction: &apos;esquerda&apos; | &apos;direita&apos;): string' >encher</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;hi&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #A31515\">&apos;esquerda&apos;</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXxHQAsQYAKAKAEgBnALnhoxi1QHMAaa1B1ZAWwBGpLlWBY4mXD3gByEDQCOyUsCiz4AHzni4WDOooBKBkxbsA3BQqEwJcrKJZZHeAEYADK-lKVMNbJGFkA'>Try</a></div></pre>\n<p>Quando necessário, o compilador <em>extende</em> — converte para um super tipo — o tipo unitário para um tipo primitivo, como <code>\"foo\"</code>\npara <code>string</code>. Isso acontece quando a mutabilidade é usada, que pode atrapalhar o uso de variáveis mutáveis:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let s: string' >s</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;direita&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function encher(s: string, n: number, direction: &apos;esquerda&apos; | &apos;direita&apos;): string' >encher</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;hi&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-err><data-lsp lsp='let s: string' >s</data-lsp></data-err></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// error: &apos;string&apos; is not assignable to &apos;\"esquerda\" | \"direita\"&apos;</span></div><span class=\"error\"><span>Argument of type 'string' is not assignable to parameter of type '\"esquerda\" | \"direita\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'string' is not assignable to parameter of type '\"esquerda\" | \"direita\"'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUACaQDGANgIbSSgBmArgHbEAuAlnA6JEwBYwAUeAJApQiZtFYMA5gBphDVAzoBbAEYx5Qgqyot2i0AHJIiAI50YBckdAAfYzqqtmNvAEpU4yTIDceEFAAWhDiOmYQoLxSSGYxUABeR11IFxt-bmI+aH4jHlYjWVAARgAGIsR3X1BAmHhoVCNvKWlbVkRQBjg48kREVmkGcjUY0GY4YwAiUwsrckn7UEmnVNdJoyA'>Try</a></div></pre>\n<p>Como o erro acontece:</p>\n<ul>\n<li><code>\"direita\": \"direita\"</code></li>\n<li><code>s: string</code> pois <code>\"direita\"</code> expande para <code>string</code> quando atribuída para uma variável mutável.</li>\n<li><code>string</code> não é atribuível para <code>\"esquerda\" | \"direita\"</code></li>\n</ul>\n<p>Você pode resolver isso com uma notação de tipo para <code>s</code>, porém isso previne atribuições a <code>s</code> de variáveis que não são do tipo <code>\"esquerda\" | \"direita\"</code>.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let s: \"esquerda\" | \"direita\"' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&apos;esquerda&apos;</span><span style=\"color: #000000\"> | </span><span style=\"color: #A31515\">&apos;direita&apos;</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;direita&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function encher(s: string, n: number, direction: &apos;esquerda&apos; | &apos;direita&apos;): string' >encher</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;hi&apos;</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='let s: \"direita\"' >s</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXxHQAsQYAKAKAEgBnALnhoxi1QHMAaa1B1ZAWwBGpLlWBY4mXD3gByEDQCOyUsCiz4AHzni4WDOooBKBkxbsA3BQD01+AFpHYZBkf2KEEBkYN5SlTBqGtqyuiD66vAAvDoS4QayVoRgJOSyRFiyHPAAjAAM2TRGFkA'>Try</a></div></pre>\n<h2 id=\"conceitos-similares-a-haskell\" style=\"position:relative;\"><a href=\"#conceitos-similares-a-haskell\" aria-label=\"conceitos similares a haskell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conceitos similares a Haskell</h2>\n<h2 id=\"tipagem-contextual\" style=\"position:relative;\"><a href=\"#tipagem-contextual\" aria-label=\"tipagem contextual permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipagem contextual</h2>\n<p>TypeScript tem alguns lugares óbvios onde ele pode inferir tipos, como declarações de variáveis:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let s: string' >s</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;Eu sou uma string!&apos;</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/DYUwLgBAzhC8EHICiBXaB7NKC2BDaYATgJYB2A5gIQIDcQA'>Try</a></div></pre>\n<p>Mas também infere tipos em alguns outros lugares que você pode não esperar se já trabalhou com outras linguagens com sintaxes baseadas em C:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >map</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: (t: T) => U' >f</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) t: T' >t</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >U</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ts: T[]' >ts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >T</data-lsp></span><span style=\"color: #000000\">[]): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(f: (t: T) => U, ts: T[]): U[]' >U</data-lsp></span><span style=\"color: #000000\">[];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let sns: string[]' >sns</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;number, string>(f: (t: number) => string, ts: number[]): string[]' >map</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: number' >n</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Number.toString(radix?: number | undefined): string' >toString</data-lsp></span><span style=\"color: #000000\">(), [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">]);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFsoAHAHgBUAaeAVQD4AKRALngY1fIEp4BeO2tQwBnTgG0Aul1Y1JAbgBQEEBnjDUwvoRIN8-eKgB0GHAGUMMLKgDmDLtTEBGagCZqAZilygA'>Try</a></div></pre>\n<p>Aqui, <code>n: number</code> nesse exemplo também, apesar do fato que <code>T</code> e <code>U</code> não foram inferidas antes da chamada. Na verdade, antes de <code>[1,2,3]</code> ter sido usado para inferir <code>T=number</code>, o tipo de retorno de <code>n => n.toString()</code> é usado para inferir <code>U=string</code>, causando <code>sns</code> ter o tipo <code>string[]</code>.</p>\n<p>Note que inferência funcionará em qualquer ordem, mas o intellisense só funcionará da direita pra esquerda, então o TypeScript prefere declarar <code>map</code> com o array primeiro:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >map</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >T</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >U</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) ts: T[]' >ts</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >T</data-lsp></span><span style=\"color: #000000\">[], </span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) f: (t: T) => U' >f</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) t: T' >t</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >U</data-lsp></span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) U in map&lt;T, U>(ts: T[], f: (t: T) => U): U[]' >U</data-lsp></span><span style=\"color: #000000\">[];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFsoAHAHgBUAaeAVQD4AKDAZwC55yBtAXWsXabtyASngBeOrWHsaPANxA'>Try</a></div></pre>\n<p>Tipagem contextual também funciona de forma recursiva entre objetos literais, e em tipos unitários que seriam inferidos como <code>string</code> ou <code>number</code>. E pode inferir tipos de retorno do contexto:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function rodar&lt;T>(thunk: (t: T) => void): T' >rodar</data-lsp></span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in rodar&lt;T>(thunk: (t: T) => void): T' >T</data-lsp></span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #795E26\"><data-lsp lsp='(parameter) thunk: (t: T) => void' >thunk</data-lsp></span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) t: T' >t</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in rodar&lt;T>(thunk: (t: T) => void): T' >T</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">void</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\"><data-lsp lsp='(type parameter) T in rodar&lt;T>(thunk: (t: T) => void): T' >T</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let i: {&#10;    inferencia: string;&#10;}' >i</data-lsp></span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\"><data-lsp lsp='(property) inferencia: string' >inferencia</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> } = </span><span style=\"color: #795E26\"><data-lsp lsp='function rodar&lt;{&#10;    inferencia: string;&#10;}>(thunk: (t: {&#10;    inferencia: string;&#10;}) => void): {&#10;    inferencia: string;&#10;}' >rodar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) o: {&#10;    inferencia: string;&#10;}' >o</data-lsp></span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) o: {&#10;    inferencia: string;&#10;}' >o</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) inferencia: string' >inferencia</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">&apos;INSIRA O ESTADO AQUI&apos;</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">});</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXxh2FgB4AVAPgAoMALNAawC54aWyBKeAXgvgDccWYB3YBuAFAQQGeFhYBvOakQg46LFBYBnDDCyoA5vAC+PAkVhUcPPgokBIHADoDq9WE3mA5AEkAcgDKvgBKAILwAPLwAKKBZGEAItFhAIoAqr7ekiYcYkA'>Try</a></div></pre>\n<p>O tipo de <code>o</code> é determinado para ser <code>{ inferencia: string }</code> porque</p>\n<ol>\n<li>Inicializadores de declaração são contextualmente tipados pela delcaração do\ntipo: <code>{ inference: string }</code>.</li>\n<li>O tipo de retorno de uma chamada usa o tipo contextual para inferências,\nentão o compilador infere que <code>T={ inferencia: string }</code>.</li>\n<li>Arrow functions usam a tipagem contextual para tipar seus parâmetros,\nentão o compilador entrega <code>o: { inferencia: string }</code>.</li>\n</ol>\n<p>E faz isso enquanto você está digitando, para que antes que você digite <code>o.</code>, você tem sugestões para a propriedade <code>inferencia</code>, junto com qualquer outras propriedades que você teria em um programa real.\nAo todo, essa feature pode fazer com que a inferência do TypeScript pareça um pouco como um motor de unificação de inferência de tipos, mas não é.</p>\n<h2 id=\"apelidos-de-tipos\" style=\"position:relative;\"><a href=\"#apelidos-de-tipos\" aria-label=\"apelidos de tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apelidos de tipos</h2>\n<p>Apelidos de tipos são meros apelidos, assim como <code>type</code> em Haskell. O compilador vai tentar usar o nome de apelido onde quer que tenha sido usado no código fonte, mas não vai ter sucesso sempre.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Tamanho = [number, number]' >Tamanho</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">, </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='let x: Tamanho' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Tamanho = [number, number]' >Tamanho</data-lsp></span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">101.1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">999.9</span><span style=\"color: #000000\">];</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKghgWzgOwBYHsoF4oG1kCuCARhAE4A0UhJ5AugNwBQANhMFAB4BcsiKGbHgCMABmEA6YVQCcciTMZA'>Try</a></div></pre>\n<p>O equivalente mais próximo de <code>newtype</code> é uma <em>intersecção marcada</em>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">FString</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> & { </span><span style=\"color: #001080\">__compileTimeOnly</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Uma <code>FString</code> é como uma string normal, exceto que o compilador pensa que ela tem uma propriedade chamada <code>__compileTimeOnly</code> que não existe de fato. Isso significa que <code>FString</code> ainda pode ser atribuída para string, mas não o inverso.</p>\n<h2 id=\"uniões-discriminadas\" style=\"position:relative;\"><a href=\"#uni%C3%B5es-discriminadas\" aria-label=\"uniões discriminadas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uniões Discriminadas</h2>\n<p>O equivalente mais próximo do <code>data</code> é uma união de tipos com propriedades discriminantes, normalmente chamadas de uniões discriminadas no TypeScript:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Forma</span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\">tipo</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">'circulo'</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">raio</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\">tipo</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">'quadrado'</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\">tipo</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">'triangulo'</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Diferente de Haskell, a marcação, ou discriminante, é apenas uma propriedade em cada objeto de tipo. Cada variante tem uma propriedade idêntica com um tipo unitário diferente. Isso ainda é uma união de tipo normal; o <code>|</code> na frente é uma parte opcional da sintaxe de união de tipo. Você pode discriminar os membros de uma união usando código JavaScript normal:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='type Forma = {&#10;    tipo: &apos;circulo&apos;;&#10;    raio: number;&#10;} | {&#10;    tipo: &apos;quadrado&apos;;&#10;    x: number;&#10;} | {&#10;    tipo: &apos;triangulo&apos;;&#10;    x: number;&#10;    y: number;&#10;}' >Forma</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"circulo\"' >tipo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&apos;circulo&apos;</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) raio: number' >raio</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"quadrado\"' >tipo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&apos;quadrado&apos;</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }</span></div><div class='line'><span style=\"color: #000000\">\t| { </span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"triangulo\"' >tipo</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">&apos;triangulo&apos;</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> };</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function area(s: Forma): number' >area</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Forma' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Forma = {&#10;    tipo: \"circulo\";&#10;    raio: number;&#10;} | {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;} | {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >Forma</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Forma' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"circulo\" | \"quadrado\" | \"triangulo\"' >tipo</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">&apos;circulo&apos;</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #000000\">.<data-lsp lsp='(property) Math.PI: number' >PI</data-lsp> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"circulo\";&#10;    raio: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) raio: number' >raio</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"circulo\";&#10;    raio: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) raio: number' >raio</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;} | {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"quadrado\" | \"triangulo\"' >tipo</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">&apos;quadrado&apos;</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp></span><span style=\"color: #000000\">) / </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9gJwLYEMoF4BQBIAPlAbymAEsw4AuKAcgGMSFaBXAGzmoG4oEUTKoAdkyQAjCAigBfHPiKlyVagEcmKACY817LgA8qQ0eKkzCxMv2rAEJFAIDmrbVD2DhYhFxD63RyR0yYAGZMArSkcAJQKAgQKAAUAM5U8MgoAJSEOCSBUIkAdPJwGOjoNPSMjtQZBDjYMcBMCJEAsijAABZ5AAoAklAAVFAJeTx8A0MjvHD+2JJQECwJ0Nm5w4XFpcqqGurs1bX1jZHDOuMnM3MLS5nYdRANTat5p4PDIBkA9FAATBeYkkA'>Try</a></div></pre>\n<p>Note que o tipo de retorno de <code>area</code> é inferido como <code>number</code> porque o TypeScript sabe que a função é total. Se alguma variante não é coberta, o tipo de retorno será <code>number | undefined</code>.</p>\n<p>Também, diferente de Haskell, propriedades comuns aparecem em qualquer união, então você pode usualmente discriminar múltiplos membros da união:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function altura(s: Forma): number' >altura</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Forma' >s</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='type Forma = {&#10;    tipo: \"circulo\";&#10;    raio: number;&#10;} | {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;} | {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >Forma</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: Forma' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) tipo: \"circulo\" | \"quadrado\" | \"triangulo\"' >tipo</data-lsp></span><span style=\"color: #000000\"> === </span><span style=\"color: #A31515\">&apos;circulo&apos;</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\"> * </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"circulo\";&#10;    raio: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) raio: number' >raio</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t} </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #008000\">// s.tipo: \"quadrado\" | \"triangulo\"</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) s: {&#10;    tipo: \"quadrado\";&#10;    x: number;&#10;} | {&#10;    tipo: \"triangulo\";&#10;    x: number;&#10;    y: number;&#10;}' >s</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYg9gJwLYEMoF4BQBIAPlAbymAEsw4AuKAcgGMSFaBXAGzmoG4oEUTKoAdkyQAjCAigBfHPiKlyVagEcmKACY817LgA8qQ0eKkzCxMv2rAEJFAIDmrbVD2DhYhFxD63RyR0wA9AFQALRhzMBhIZgAZkwCtKRwAlAoLMBMPAAUAM5U8MgoAJSEOCQxULkAdPJwGOjoNPSMjtQlBDjYCBAZCCkATFAAVFA5VTx8-tiSUBAsOdAd2NhBozXmVABEKuqacJtQ+JtWNvaOm53dvSljOlPSkkA'>Try</a></div></pre>\n<h2 id=\"parâmetros-de-tipo\" style=\"position:relative;\"><a href=\"#par%C3%A2metros-de-tipo\" aria-label=\"parâmetros de tipo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parâmetros de Tipo</h2>\n<p>Como a maioria das linguagens descendentes de C, TypeScript pede a declaração de parâmetros de tipo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">levantarArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> [</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Não há requerimento de caso, mas parâmetros de tipo são convencionalmente letras maiúsculas únicas. Parâmetros de tipo também podem ser restritos para um tipo, que se comporta um pouco como restrições de classes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">primeiro</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">length</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> }&gt;(</span><span style=\"color: #001080\">t1</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">t2</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">t1</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> &gt; </span><span style=\"color: #001080\">t2</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">length</span><span style=\"color: #000000\"> ? </span><span style=\"color: #001080\">t1</span><span style=\"color: #000000\"> : </span><span style=\"color: #001080\">t2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>TypeScript pode usualmente inferir argumentos de tipo de uma chamada baseado no tipo dos argumentos, então argumentos de tipo não são usualmente necessários.</p>\n<p>Por TypeScript ser estrutural, ele não precisa de nenhum parâmetro de tipo quanto tanto sistemas nominais. Especificamente, eles não são necessários para fazer uma função polimórfica. Parâmetros de tipo devem ser usados apenas para <em>propagar</em> informação de tipo, como restringir parâmetros para serem do mesmo tipo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">comprimento</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ArrayLike</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt;&gt;(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">comprimento</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">t</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">ArrayLike</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt;): </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\"> {}</span></div></code></div></pre>\n<p>No primeiro <code>comprimento</code>, T não é necessário; note que ele só é referenciado uma vez, então não está sendo usado para restringir o tipo do valor de retorno ou de outros parâmetros.</p>\n<h3 id=\"tipos-superiores\" style=\"position:relative;\"><a href=\"#tipos-superiores\" aria-label=\"tipos superiores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos superiores</h3>\n<p>TypeScript não tem tipos superiores, então o seguinte não é permitido:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">comprimento</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">ArrayLike</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">unknown</span><span style=\"color: #000000\">&gt;, </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">m</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;) {}</span></div></code></div></pre>\n<h3 id=\"programação-livre-de-pontos\" style=\"position:relative;\"><a href=\"#programa%C3%A7%C3%A3o-livre-de-pontos\" aria-label=\"programação livre de pontos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programação livre de pontos</h3>\n<p>Programação livre de pontos — uso pesado de currying e composição de funções — é possível em JavaScript, mas pode ser verboso. Em TypeScript, a inferência de tipo falha frequentemente para programas livres de pontos, então você vai acabar especificando os parâmetros de tipo ao invés de parâmetros de valor. O resultado é tão verboso que é usualmente melhor evitar progamação livre de pontos.</p>\n<h2 id=\"sistema-de-módulos\" style=\"position:relative;\"><a href=\"#sistema-de-m%C3%B3dulos\" aria-label=\"sistema de módulos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sistema de módulos</h2>\n<p>A sintaxe moderna de módulos do JavaScript é parecida com a de Haskell, exceto que qualquer arquivo com <code>import</code> ou <code>export</code> é implicitamente um módulo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">value</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Type</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'npm-package'</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">other</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">Types</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'./local-package'</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">prefix</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">'../lib/third-package'</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Você também pode importar módulos commonjs — módulos escritos usando o sistema de móudlos do node.js:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> = </span><span style=\"color: #AF00DB\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">'single-function-package'</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Você pode exportar com uma lista de exportação:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">f</span><span style=\"color: #000000\"> };</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() {} </span><span style=\"color: #008000\">// g is not exported</span></div></code></div></pre>\n<p>Ou marcando cada export individualmente:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\"> { </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() }</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">g</span><span style=\"color: #000000\">() { }</span></div></code></div></pre>\n<p>O último é mais comum mas ambos são permitidos, mesmo quando no mesmo arquivo.</p>\n<h2 id=\"readonly-e-const\" style=\"position:relative;\"><a href=\"#readonly-e-const\" aria-label=\"readonly e const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code> e <code>const</code></h2>\n<p>Em JavaScript, mutabilidade é o padrão, embora ele permita declarações de variáveis com <code>const</code> para declarar que <em>referência</em> é mutável. O refernte ainda é mutável:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">a</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">102</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// ):</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">101</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// D:</span></div></code></div></pre>\n<p>TypeScript tem o modificador adicional <code>readonly</code> para propriedades.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Rx</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">rx</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Rx</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">x:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\">rx</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>Ele também conta com um tipo mapeado <code>Readonly&#x3C;T></code> que faz todas as propriedades serem <code>readonly</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">rx</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Readonly</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\">&gt; = { </span><span style=\"color: #001080\">x:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\">rx</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">12</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>E tem um tipo específico <code>ReadonlyArray&#x3C;T></code> que remove métodos de efeitos colaterais e previne escrita aos índices do array, assim como sintaxe especial para este tipo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">ReadonlyArray</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt; = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">: </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">[] = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">102</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// erro</span></div><div class='line'><span style=\"color: #001080\">b</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">101</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>Você também pode usar assertividade constante, que opera em objetos literais e arrays:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\"> = [</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">3</span><span style=\"color: #000000\">] </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">push</span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">102</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// erro</span></div><div class='line'><span style=\"color: #001080\">a</span><span style=\"color: #000000\">[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">] = </span><span style=\"color: #098658\">101</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// erro</span></div></code></div></pre>\n<p>Entretanto, nenhuma dessas opções são o padrão, então elas não são consistentemente usadas em código TypeScript</p>\n<h2 id=\"próximos-passos\" style=\"position:relative;\"><a href=\"#pr%C3%B3ximos-passos\" aria-label=\"próximos passos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Próximos Passos</h2>\n<p>Essa documentação é uma resumo de alto nível da sintaxe e tipos qeu você usaria em código no dia-a-dia. Daqui você deve:</p>\n<ul>\n<li>Ler o Handbook completo <a href=\"/docs/handbook/intro.html\">from start to finish</a> (30m)</li>\n<li>Explorar os <a href=\"/play#show-examples\">exemplos do Playground</a></li>\n</ul>","headings":[{"value":"Pré-requisitos","depth":2},{"value":"Conceitos que não estão em Haskell","depth":2},{"value":"Tipos Nativos","depth":2},{"value":"Outros tipos importantes do Typescript","depth":3},{"value":"Tipos em caixas","depth":3},{"value":"Tipagem gradual","depth":2},{"value":"Tipagem estrutural","depth":2},{"value":"Uniões","depth":2},{"value":"Intersecções","depth":3},{"value":"Tipos unitários","depth":2},{"value":"Conceitos similares a Haskell","depth":2},{"value":"Tipagem contextual","depth":2},{"value":"Apelidos de tipos","depth":2},{"value":"Uniões Discriminadas","depth":2},{"value":"Parâmetros de Tipo","depth":2},{"value":"Tipos superiores","depth":3},{"value":"Programação livre de pontos","depth":3},{"value":"Sistema de módulos","depth":2},{"value":"readonly e const","depth":2},{"value":"Próximos Passos","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/typescript-in-5-minutes-func.html","title":"TypeScript para Programadores Funcionais","disable_toc":null,"handbook":null,"oneline":"Aprenda Typescript se você tiver uma história com programação funcional","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-typescript-para-programadores-funcionais","slug":"/pt/docs/handbook/typescript-in-5-minutes-func.html","repoPath":"/packages/documentation/copy/pt/get-started/TS for Functional Programmers.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}