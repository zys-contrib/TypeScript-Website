{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/manipulacao-dom.html","result":{"data":{"markdownRemark":{"id":"069d26c2-2810-5847-876f-5e0c0a855272","excerpt":"Manipulação do DOM Uma exploração no tipo HTMLElement Nos mais de 20 anos desde sua padronização, o JavaScript tem percorrido um longo caminho. Enquanto em 202…","html":"<h2 id=\"manipulação-do-dom\" style=\"position:relative;\"><a href=\"#manipula%C3%A7%C3%A3o-do-dom\" aria-label=\"manipulação do dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manipulação do DOM</h2>\n<h3 id=\"uma-exploração-no-tipo-htmlelement\" style=\"position:relative;\"><a href=\"#uma-explora%C3%A7%C3%A3o-no-tipo-htmlelement\" aria-label=\"uma exploração no tipo htmlelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><em>Uma exploração no tipo <code>HTMLElement</code></em></h3>\n<p>Nos mais de 20 anos desde sua padronização, o JavaScript tem percorrido um longo caminho. Enquanto em 2020, o JavaScript pode ser usado em servidores, em ciência de dados, e até mesmo em dispositivos Internet das Coisas (IoT), é importante lembrar seu caso de uso mais popular: navegadores web.</p>\n<p>Websites são feitos de documentos HTML e/ou XML. Estes documentos são estáticos, eles não mudam. O <em>Modelo de Objeto de Documento (DOM)</em> é uma interface de programação implementada por navegadores para tornar sites estáticos funcionais. A API do DOM pode ser usada para alterar a estrutura do documento, estilo e conteúdo. A API é tão poderosa que inúmeras ferramentas de front-end (jQuery, React, Angular, etc.) foram desenvolvidos em torno dele, a fim de tornar os sites dinâmicos ainda mais fáceis de desenvolver.</p>\n<p>TypeScript é um superconjunto do JavaScript, e envia definições de tipo para a API DOM. Essas definições estão prontamente disponíveis em qualquer projeto TypeScript padrão. Das mais de 20.000 linhas de definições em <em>lib.dom.d.ts</em>, uma se destaca entre as demais: <code>HTMLElement</code>. Este tipo é a espinha dorsal para a manipulação do DOM com TypeScript.</p>\n<blockquote>\n<p>Você pode explorar o código-fonte para a <a href=\"https://github.com/microsoft/TypeScript/blob/master/lib/lib.dom.d.ts\">definição de tipos do DOM</a></p>\n</blockquote>\n<h2 id=\"exemplo-básico\" style=\"position:relative;\"><a href=\"#exemplo-b%C3%A1sico\" aria-label=\"exemplo básico permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplo Básico</h2>\n<p>Dado um arquivo <em>index.html</em> simplificado:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class='code-container'><code><div class='line'><span style=\"color: undefined\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;&lt;title&gt;Manipulação do DOM com TypeScript&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;&lt;/div&gt;\n    &lt;!-- Assumindo que index.js é a saída compilada de index.ts --&gt;\n    &lt;script src=\"index.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</span></div></code></div></pre>\n<p>Vamos explorar um script TypeScript que adiciona um elemento <code>&#x3C;p>Olá, Mundo!&#x3C;/p></code> ao elemento <code>#app</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// 1. Seleciona o elemento div usando a propriedade id</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">app</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getElementById</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"app\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 2. Cria um novo elemento &lt;p&gt;&lt;/p&gt; programáticamente</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"p\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 3. Adiciona conteúdo de texto</span></div><div class='line'><span style=\"color: #001080\">p</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">textContent</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Olá, Mundo!\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// 4. Acrescenta o elemento p no elemento div</span></div><div class='line'><span style=\"color: #001080\">app</span><span style=\"color: #000000\">?.</span><span style=\"color: #795E26\">appendChild</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">p</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Depois de compilado e executando a página <em>index.html</em>, o resultado HTML será:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;div</span><span style=\"color: #000000\"> </span><span style=\"color: #EE0000\">id</span><span style=\"color: #000000\">=</span><span style=\"color: #0000FF\">\"app\"</span><span style=\"color: #800000\">&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Olá, mundo!</span><span style=\"color: #800000\">&lt;/p&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;/div&gt;</span></div></code></div></pre>\n<h2 id=\"a-interface-document\" style=\"position:relative;\"><a href=\"#a-interface-document\" aria-label=\"a interface document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A interface <code>Document</code></h2>\n<p>A primeira linha do código TypeScript usa uma variável global <code>document</code>. A inspeção da variável mostra que ela é definida pela interface <code>Document</code> do arquivo <em>lib.dom.d.ts</em>. O trecho de código contém chamadas para dois métodos, <code>getElementById</code> e <code>createElement</code>.</p>\n<h3 id=\"documentgetelementbyid\" style=\"position:relative;\"><a href=\"#documentgetelementbyid\" aria-label=\"documentgetelementbyid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Document.getElementById</code></h3>\n<p>A definição para este método é a seguinte:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #795E26\">getElementById</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">elementId</span><span style=\"color: #000000\">: </span><span style=\"color: #001080\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #001080\">HTMLElement</span><span style=\"color: #000000\"> | </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Passe o texto do id de um elemento e ele retornará <code>HTMLElement</code> ou <code>null</code>. Este método introduz um dos mais importantes tipos, <code>HTMLElement</code>. Ele serve como interface base para todas as outras interfaces de elementos. Por exemplo, a variável <code>p</code> no exemplo de código é do tipo <code>HTMLParagraphElement</code>. Também observe que este método pode retornar <code>null</code>. Isso ocorre porque o método não pode determinar em tempo de pré-execução se ele será capaz de encontrar realmente o elemento especificado ou não. Na última linha do trecho de código, o novo operador <em>optional chaining</em> é usado para chamar <code>appendChild</code>.</p>\n<h3 id=\"documentcreateelement\" style=\"position:relative;\"><a href=\"#documentcreateelement\" aria-label=\"documentcreateelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Document.createElement</code></h3>\n<p>A definição para este método é (eu omiti a definição <em>depreciada</em>)</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">createElement</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">ElementCreationOptions</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #1C6277\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">options</span><span style=\"color: #000000\">?: </span><span style=\"color: #1C6277\">ElementCreationOptions</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Esta é uma definição de função sobrecarregada. A segunda sobrecarga é mais simples e funciona muito como o método <code>getElementById</code> faz. Passe qualquer <code>string</code> e ele irá retornar um HTMLElement padrão. Essa definição é o que permite aos desenvolvedores criar tags de elemento HTML exclusivas.</p>\n<p>Por exemplo <code>document.createElement('xyz')</code> retorna um elemento <code>&#x3C;xyz>&#x3C;/xyz></code>, claramente não é um elemento que esteja especificado pela especificação HTML.</p>\n<blockquote>\n<p>Para os interessados, você pode interagir com tag de elementos customizados usando o <code>document.getElementsByTagName</code></p>\n</blockquote>\n<p>Para a primeira definição de <code>createElement</code>, é usado alguns padrões genéricos avançados. Ele é melhor entendido quando dividido em partes, começando com a expressão genérica: <code>&#x3C;K extends keyof HTMLElementTagNameMap></code>. Essa expressão define um parâmetro genérico <code>K</code> que é <em>restrito</em> às chaves da interface <code>HTMLElementTagNameMap</code>. A interface mapeada conté toda a especificação da tag HTML e seus tipos de interface correspondentes. Por exemplo, aqui estão os 5 primeiros valores mapeados:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLAnchorElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"abbr\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"address\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"applet\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLAppletElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #A31515\">\"area\"</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">HTMLAreaElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">        ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Alguns elementos não exibem propriedades únicas e, então, eles apenas retornam <code>HTMLElement</code>, mas outros tipos tem propriedades e métodos únicos, então, eles retornam suas interfaces específicas (como irão extender ou implementar <code>HTMLElement</code>).</p>\n<p>Agora, para o restante da definição do <code>createElement</code>: <code>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]</code>. O primeiro argumento <code>tagName</code> é definido como um parâmetro genérico <code>K</code>. O interpretador TypeScript é inteligente o suficiente para <em>inferir</em> o parâmetro genérico para este argumento. Isso significa que o desenvolvedor não precisa especificar o parâmetro genérico que utiliza o método; qualquer valor que é passado para o argumento <code>tagName</code> será inferido como <code>K</code> e, portanto, pode ser usado em todo restante da definição. O que acontece exatamente; o valor retornado de <code>HTMLElementTagNameMap[K]</code> pega o argumento <code>tagName</code> e utiliza para retornar o tipo correspondente. Esta definição é como a variável <code>p</code> do trecho de código obtém o tipo <code>HTMLParagraphElement</code>. E se o código tem <code>document.createElement('a')</code>, então ele deve ser um tipo de elemento <code>HTMLAnchorElement</code>.</p>\n<h2 id=\"a-interface-node\" style=\"position:relative;\"><a href=\"#a-interface-node\" aria-label=\"a interface node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A interface <code>Node</code></h2>\n<p>A função <code>document.getElementById</code> retorna um <code>HTMLElement</code>. A interface <code>HTMLElement</code> extende a interface <code>Element</code> que, por sua vez, extende a interface <code>Node</code>. Essa extensão a nível de protótipo permite a todos <code>HTMLElements</code> a utilizar um subconjunto de métodos padrão. No trecho de código, nós usamos uma propriedade definida na interface <code>Node</code> para anexar o novo elemento <code>p</code> ao website.</p>\n<h3 id=\"nodeappendchild\" style=\"position:relative;\"><a href=\"#nodeappendchild\" aria-label=\"nodeappendchild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Node.appendChild</code></h3>\n<p>A última linha do trecho de código é <code>app?.appendChild(p)</code>. A seção anterior, <code>document.getElementById</code>, detalha o que o operador <em>optional chaining</em>  é usado aqui porque <code>app</code> pode ser potencialmente nulo durante a execução. O método <code>appendChild</code> é definido por:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #001080\">appendChild</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Node</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">newChild</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Este método funciona de forma semelhante ao método <code>createElement</code> com o parâmetro genérico <code>T</code> sendo inferido do argumento <code>newChild</code>. <code>T</code> é <em>restrito</em> a outra interface base <code>Node</code>.</p>\n<h2 id=\"diferença-entre-children-e-childnodes\" style=\"position:relative;\"><a href=\"#diferen%C3%A7a-entre-children-e-childnodes\" aria-label=\"diferença entre children e childnodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diferença entre <code>children</code> e <code>childNodes</code></h2>\n<p>Anteriormente, este documento detalhou a interface <code>HTMLElement</code> extendendo de <code>Element</code> que estende de <code>Node</code>. Na API DOM existe um conceito de elementos <em>filhos</em>. Por exemplo no HTML seguinte, as tags <code>p</code> são filhas do elemento <code>div</code></p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;div&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Olá, Mundo</span><span style=\"color: #800000\">&lt;/p&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">TypeScript!</span><span style=\"color: #800000\">&lt;/p&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">div</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getElementsByTagName</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// HTMLCollection(2) [p, p]</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">childNodes</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// NodeList(2) [p, p]</span></div></code></div></pre>\n<p>Depois de capturar o elemento <code>div</code>, a propriedade <code>children</code> irá retornar uma lista <code>HTMLCollection</code> contendo os <code>HTMLParagraphElements</code>. A propriedade <code>childNodes</code> irá retornar uma lista similar de nodes <code>NodeList</code>. Cada tag <code>p</code> irá permanecer sendo do tipo <code>HTMLParagraphElements</code>, mas o <code>NodeList</code> pode conter adicionalmente <em>nós HTML</em> que a lista <code>HTMLCollection</code> não contém.</p>\n<p>Modifique o html para remover uma das tags <code>p</code>, mas deixe o texto.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;div&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;p&gt;</span><span style=\"color: #000000\">Olá, Mundo</span><span style=\"color: #800000\">&lt;/p&gt;</span></div><div class='line'><span style=\"color: #000000\">  TypeScript!</span></div><div class='line'><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">div</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">getElementsByTagName</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">)[</span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">];</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">children</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// HTMLCollection(1) [p]</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">div</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">childNodes</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #008000\">// NodeList(2) [p, text]</span></div></code></div></pre>\n<p>Veja como os duas listas mudaram. <code>children</code> agora contém apenas o elemento <code>&#x3C;p>Hello, World&#x3C;/p></code>, e o <code>childNodes</code> contém um nó <code>text</code> em vez de dois nós <code>p</code>. A parte <code>text</code> do<code> NodeList</code> é o <code>Node</code> literal contendo o texto <code>TypeScript!</code>. A lista <code>children</code> não contém este<code> Node</code> porque não é considerado um <code>HTMLElement</code>.</p>\n<h2 id=\"os-métodos-queryselector-e-queryselectorall\" style=\"position:relative;\"><a href=\"#os-m%C3%A9todos-queryselector-e-queryselectorall\" aria-label=\"os métodos queryselector e queryselectorall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Os métodos <code>querySelector</code> e <code>querySelectorAll</code></h2>\n<p>Ambos os métodos são ótimas ferramentas para obter listas de elementos do DOM que se encaixam em um conjunto mais exclusivo de restrições. Eles são definidos em <em>lib.dom.d.ts</em> como:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Retorna o primeiro elemento do nó que é descendente do nó que corresponde aos seletores.</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #001080\">querySelector</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">] | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">querySelector</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SVGElementTagNameMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">SVGElementTagNameMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">] | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">querySelector</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> | </span><span style=\"color: #1C6277\">null</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * Retorna todos os elementos descendentes do nó que corresponde ao seletor</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #1C6277\">querySelectorAll</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">NodeListOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">HTMLElementTagNameMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">]&gt;;</span></div><div class='line'><span style=\"color: #1C6277\">querySelectorAll</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SVGElementTagNameMap</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">NodeListOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">SVGElementTagNameMap</span><span style=\"color: #000000\">[</span><span style=\"color: #1C6277\">K</span><span style=\"color: #000000\">]&gt;;</span></div><div class='line'><span style=\"color: #1C6277\">querySelectorAll</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #001080\">selectors</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">NodeListOf</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">E</span><span style=\"color: #000000\">&gt;;</span></div></code></div></pre>\n<p>A definição de <code>querySelectorAll</code> é similar a de <code>getElementsByTagName</code>, exceto que ele retorna um novo tipo: <code>NodeListOf</code>. Este tipo de retorno é essencialmente uma implementação customizada do elemento de lista padrão do JavaScript. Discutivelmente, substituindo <code>NodeListOf&#x3C;E></code> com <code>E[]</code> deve resultar em uma experiência do usuário muito similar. <code>NodeListOf</code> apenas implementa as seguintes propriedades e métodos: <code>length</code> , <code>item(index)</code>, <code>forEach((value, key, parent) => void)</code>, e indexação numérica. Adicionalmente, este método retorno uma lista de <em>elementos</em>, não <em>nós</em>, que é o que <code>NodeList</code> estava retornando para o método <code>.childNodes</code>. Enquanto isto pode parecer como uma discrepância, pegue nota que a interface <code>Element</code> extende de <code>Node</code>.</p>\n<p>Para ver estes métodos em ação modifique o código existente para:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">tsx</div><div class='code-container'><code><div class='line'><span style=\"color: #800000\">&lt;ul&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">Primeiro :)</span><span style=\"color: #800000\">&lt;/li&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">Segundo!</span><span style=\"color: #800000\">&lt;/li&gt;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #800000\">&lt;li&gt;</span><span style=\"color: #000000\">Terceira vez um encanto.</span><span style=\"color: #800000\">&lt;/li&gt;</span></div><div class='line'><span style=\"color: #800000\">&lt;/ul&gt;</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">primeiro</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">querySelector</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"li\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna o primeiro elemento 'li'</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">todos</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">document</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">querySelectorAll</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"li\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// retorna a lista de todos os elementos 'li'</span></div></code></div></pre>\n<h2 id=\"interessado-em-aprender-mais\" style=\"position:relative;\"><a href=\"#interessado-em-aprender-mais\" aria-label=\"interessado em aprender mais permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interessado em aprender mais?</h2>\n<p>A melhor parte sobre as definições de tipo <em>lib.dom.d.ts</em> é que elas refletem os tipos anotados no site de documentação da Rede de Desenvolvedores Mozilla (Mozilla Developer Network - MDN). Por exemplo, a interface <code>HTMLElement</code> é documentada pela <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/HTMLElement\">página HTMLElement</a> na MDN. Estas páginas listam todas as propriedades disponíveis, métodos, e até mesmo alguns exemplos. Outro grande  aspecto das páginas é que elas fornecem links para os documentos padrão correspondentes. Este é o link para a <a href=\"https://www.w3.org/TR/html52/dom.html#htmlelement\">Recomendação da W3C para HTMLElement</a>.</p>\n<p>Recursos:</p>\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/10.0/index.html\">Padrão ECMA-262</a></li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction\">Introdução ao DOM</a></li>\n</ul>","headings":[{"value":"Manipulação do DOM","depth":2},{"value":"Uma exploração no tipo HTMLElement","depth":3},{"value":"Exemplo Básico","depth":2},{"value":"A interface Document","depth":2},{"value":"Document.getElementById","depth":3},{"value":"Document.createElement","depth":3},{"value":"A interface Node","depth":2},{"value":"Node.appendChild","depth":3},{"value":"Diferença entre children e childNodes","depth":2},{"value":"Os métodos querySelector e querySelectorAll","depth":2},{"value":"Interessado em aprender mais?","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/manipulacao-dom.html","title":"Manipulação do DOM","disable_toc":null,"handbook":null,"oneline":"Usando o DOM com TypeScript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"4-manipulação-do-dom","slug":"/pt/docs/handbook/manipulacao-dom.html","repoPath":"/packages/documentation/copy/pt/tutorials/DOM Manipulation.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.573Z"}},"staticQueryHashes":[]}