{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/type-checking-javascript-files.html","result":{"data":{"markdownRemark":{"id":"1e30b944-e836-5572-bbc0-a4955d7fa3b4","excerpt":"Aqui estão algumas diferenças notáveis em como a checagem de tipo funciona em arquivos .js comparados com arquivos .ts. Propriedades são inferidas de…","html":"<p>Aqui estão algumas diferenças notáveis em como a checagem de tipo funciona em arquivos <code>.js</code> comparados com arquivos <code>.ts</code>.</p>\n<h2 id=\"propriedades-são-inferidas-de-atribuições-no-corpo-das-classes\" style=\"position:relative;\"><a href=\"#propriedades-s%C3%A3o-inferidas-de-atribui%C3%A7%C3%B5es-no-corpo-das-classes\" aria-label=\"propriedades são inferidas de atribuições no corpo das classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Propriedades são inferidas de atribuições no corpo das classes</h2>\n<p>ES2015 não tem meios de declaração de propriedades em uma classe. Propriedades são atribuídas dinamicamente, assim como objetos literais.</p>\n<p>Em um arquivo <code>.js</code>, o compilador infere propriedades a partir da atribuição das mesmas dentro de um corpo de uma classe.\nO tipo de uma propriedade é o tipo dado no construtor, a não ser que não seja definido lá ou o tipo no construtor for undefined ou null.\nNeste caso, o tipo é uma união dos tipos de todos os valores que estão do lado direito dessas atribuições.\nPropriedades definidas no construtor são sempre assumidas existentes, enquanto as que foram definidas apenas em métodos, getters ou setters são consideradas opcionais.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: any' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: any' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method(): void' >method</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: number' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: string | undefined' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"plunkbat\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok, construtorUnknown é uma string | undefined</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.methodOnly: string | boolean | undefined' >methodOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"ok\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// ok, mas methodOnly também pode ser undefined</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method2(): void' >method2</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.methodOnly: string | boolean | undefined' >methodOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// também ok, methodOnly&apos;s type é string | boolean | undefined</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZTS1IAbAQxRVAGFQBvNUUSPAOxQAXbAFdIgggAoAlBy7dQg6AEsUAOl4DhYidgDyfWgE9QAXlAAGANzzuS1Rv5DR4ggFU+CPngDufM6AifAAmsABmynywwTbcAL7yALawSnjBMnIKiirqms46BAbGAWH0tCiwsQr2uU7artgeXr7+5gBEAA60QQgARvSCbVagmHgIADQ8daK6Td5+oACXgYn0oM6RAOagAD6BIeGR0bbZDsmpwUUm7WNDI2Bjk6vM59BpV4r0ib2LiaAdaVg6xw+1CESiwXkCW4rzSpAynCyNTUsMuhmuilElXun2+v1Aj1AqKuAHJmIIjB0gcsNnxtnteng8LRYPR-HsgmCjpD4mg4kA'>Try</a></div></pre>\n<p>Se propriedades nunca forem declaradas no corpo da classe, elas são consideradas desconhecidas (com o tipo unknown).\nSe sua classe tem propriedades que são apenas lidas, adicione e então anote uma declaraçao no construtor com JSDoc para especificação de tipo.\nVocê não precisa nem atribuir um valor a ela se for inicializada posteriormente.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C' >C</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | undefined}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.prop: number | undefined' >prop</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{number | undefined}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.count: number | undefined' >count</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor C(): C' >C</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.prop: number | undefined' >prop</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module c&#10;let c: C' >c</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.count: number | undefined' >count</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'string' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'string' is not assignable to type 'number'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZTS1IAbAQxRVAGFQBvNUUSPAOxQAXbAFdIgggAoAlBy7dQwAFRKIggJ4AHWBz4iAtgCMcoAD6gRfACawAZgEs+sKwF9QS4PO6Do9lADpNfE1QAF4LaztHZwBuL0UVNS0ddj0jE3NLGwcnV3dPBVAfP39eS0E47hc0arRaWEEeMNAnAHdWGTjIQODmgAYYxTAAeQBpGlK8cuaAIiFsRwBzGZigA'>Try</a></div></pre>\n<h2 id=\"funções-construtoras-são-equivalentes-a-classes\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%B5es-construtoras-s%C3%A3o-equivalentes-a-classes\" aria-label=\"funções construtoras são equivalentes a classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Funções construtoras são equivalentes a classes</h2>\n<p>Antes do ES2015, Javascript usava funções construtoras ao invés de classes.\nO compilador suporta esse padrão e entende que funções construtoras são equivalentes a Classes do ES2015.\nAs regras de inferência de propriedades funcionam exatamente da mesma forma.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function C(): void' >C</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: any' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: any' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\"><data-lsp lsp='class C&#10;function C(): void' >C</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Function.prototype: any' >prototype</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) C.method(): void' >method</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorOnly: number' >constructorOnly</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">false</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Type 'boolean' is not assignable to type 'number'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'boolean' is not assignable to type 'number'.</span><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) C.constructorUnknown: string | undefined' >constructorUnknown</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"plunkbat\"</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK, o tipo é string | undefined</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgDYAOAZjOtNLQDMBXAO0gBcBLPN0AMIAKAJSgA3mlChO0bigB0kPik7YWXAgHk2AGwCeoALygADAG4pMuYuVtV6zdgCqbBGzwB3fifYATWCZuNlg-SwBfNAEFAAd8TjxOfRjYBQBbWFk8P2NQVg4ePlBRCStZeSUVNQ0E7B0DXKYAQ10UWEtpctsqx1rXdy8fUAAiGN12BAAjJs5h81BMLQBpABpQPBluGI2AS9AHYIBzUAAfUH9A4NC0cPMgA'>Try</a></div></pre>\n<h2 id=\"commonjs-modules-são-suportados\" style=\"position:relative;\"><a href=\"#commonjs-modules-s%C3%A3o-suportados\" aria-label=\"commonjs modules são suportados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS modules são suportados</h2>\n<p>Em um arquivo <code>.js</code>, TypeScript entende o formato de módulo CommonJS.\nAtribuiçoes a <code>exports</code> e <code>modules.exports</code> são reconhecidas como declarações de exportação.\nSimilarmente, chamadas de função <code>require</code> são reconhecidas como importações de módulos. Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// o mesmo que `import module \"fs\"`</span></div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">fs</span><span style=\"color: #000000\"> = </span><span style=\"color: #795E26\">require</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #000000\">);</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// o mesmo que `export funcion readFile`</span></div><div class='line'><span style=\"color: #1C6277\">module</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">exports</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFile</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">fs</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">readFileSync</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>O suporte de módulo em Javascript é muito mais flexível sinteticamente que o suporte de módulo de TypeScript.\nMuitas das combinações de atribuições e declarações são suportadas.</p>\n<h2 id=\"classes-funções-e-object-literals-são-namespaces\" style=\"position:relative;\"><a href=\"#classes-fun%C3%A7%C3%B5es-e-object-literals-s%C3%A3o-namespaces\" aria-label=\"classes funções e object literals são namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes, funções, e object literals são namespaces</h2>\n<p>Classes sao namespaces em arquivos <code>.js</code>.\nIsso pode ser usado para aninhar classes, por exemplo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class C&#10;module C' >C</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #0070C1\"><data-lsp lsp='class C&#10;module C' >C</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) C.D: typeof D' >D</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDC0G8C+AoWA6AItAvNUkMyA3EA'>Try</a></div></pre>\n<p>E para código pre-ES2015, pode ser usado para simular métodos estáticos:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Outer(): void&#10;module Outer' >Outer</data-lsp></span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Outer.y: any' >y</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Outer&#10;module Outer&#10;function Outer(): void' >Outer</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Outer.Inner(): void' >Inner</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Inner.yy: any' >yy</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='class Outer&#10;module Outer&#10;function Outer(): void' >Outer</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='any' >innter</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAeRFApgJwBQEpEDeAUIolABYwDOAdAJ6IC8iATANxEC+RRqGmNAJJgwWJolCRYCRHkIkylWnQbN2XDrzRYaMEfzxsgA'>Try</a></div></pre>\n<p>Também pode ser usado para criar namespaces simples:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\"> = {};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='(property) ns.C: typeof C' >C</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> {};</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) ns.func(): void' >func</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: typeof ns' >ns</data-lsp></span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/G4QwTgBAdgzhC8EDeBfA3AKFgOgMIIgGMAbEGOVTHAMwFcpCC6GAXASwHsoIAKASmToMWGGiA'>Try</a></div></pre>\n<p>Outras variantes são permitidas também:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// IIFE</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: {}' >ns</data-lsp></span><span style=\"color: #000000\"> = (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: undefined' >n</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) n: undefined' >n</data-lsp></span><span style=\"color: #000000\"> || {};</span></div><div class='line'><span style=\"color: #000000\">})();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module ns&#10;var ns: {}' >ns</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #0070C1\"><data-lsp lsp='any' >CONST</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// defaulting to global</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\"> =</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\"> ||</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// code goes here</span></div><div class='line'><span style=\"color: #000000\">  };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module assign&#10;var assign: {&#10;    (): void;&#10;    extra: number;&#10;}' >assign</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) assign.extra: number' >extra</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEElwMQUQKAG4EMBOoB2BnUBeUAKAMwFd0BjAFwEsB7dA9ASlAG85RQUBTC4le+gB9BrAL4BuOKMb5GkrADoAwgHkAcgGUAKrlABGSXBCgAJl0JJiAG2roA5qAo1QdqzQBGSK4lSgkmTCo7ehx2PwCgoUEwknJqOgJmNg4OYzIaMxcaLmwACy5uMIk4f0DghS4ADwoUJF0DIA'>Try</a></div></pre>\n<h2 id=\"objetos-literais-são-abertos\" style=\"position:relative;\"><a href=\"#objetos-literais-s%C3%A3o-abertos\" aria-label=\"objetos literais são abertos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objetos literais são abertos</h2>\n<p>Em um arquivo <code>.ts</code>, um objeto literal que inicializa uma declaração de variável dá o seu tipo para a declaração.\nNenhum membro novo que não foi especificado na declaração pode ser adicionado.\nEssas regras são relaxadas em um arquivo <code>.js</code>; objetos literais tem um tipo aberto (uma assinatura de índice) que permite adicionar e procurar propriedades que não foram adicionadas originalmente.\nPor exemplo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >b</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Permitido</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/G4QwTgBA9gRgVhAvBA3hEAuCBGCBfAbgChY4A6GJCAJgIgHp6IAFAUzAFsBLAFy4BMoQA'>Try</a></div></pre>\n<p>Objetos literais se comportam como se tivessem uma assinatura de índice <code>[x:string]: any</code> que permite que sejam tratados como maps abertos ao invés de objetos fechados.</p>\n<p>Assim como outros comportamentos especiais do JS, esse comportamento pode ser mudado adicionando um tipo JSDoc para a variável. Por exemplo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{{a: number}}</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\"><data-lsp lsp='(property) a: number' >a</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='module obj&#10;var obj: {&#10;    a: number;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-err><data-lsp lsp='any' >b</data-lsp></data-err></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><span class=\"error\"><span>Property 'b' does not exist on type '{ a: number; }'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'b' does not exist on type '{ a: number; }'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEFYCdsHtsUAuUAJgGZyBODAKlogBcBPAB1lAG9OBDEgOwCuAWwBGOAL4TQtYGgBuPbKDyiAVqAC8XUH1ABGUBIDcaVWoB0orWWNA'>Try</a></div></pre>\n<h2 id=\"inicializadores-null-undefined-e-arrays-vazios-são-do-tipo-any-ou-any\" style=\"position:relative;\"><a href=\"#inicializadores-null-undefined-e-arrays-vazios-s%C3%A3o-do-tipo-any-ou-any\" aria-label=\"inicializadores null undefined e arrays vazios são do tipo any ou any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inicializadores null, undefined e arrays vazios são do tipo any ou any[]</h2>\n<p>Qualquer variável, parâmetro ou propriedade que é inicializado com null ou undefined terão tipo any, mesmo que a checagem estrita de null esteja habilitada.\nQualquer variável, parâmetro ou propriedade que é inicializada com [] terá tipo any[], mesmo que a checagem estrita de null esteja habiltada.\nA única exceção é para propriedades que tem múltiplos inicializadores como descrito acima.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function Foo(i?: null): void' >Foo</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">null</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\">) </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) i: null' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='(local var) j: any' >j</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any' >l</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='constructor Foo(i?: null): Foo' >Foo</data-lsp></span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any[]' >l</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='any' >i</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var foo: Foo' >foo</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Foo.l: any[]' >l</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"end\"</span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAMTnAFDRBeRYQA2BAlIgN4BQiiMwi6AhDKVrgIwDcViAbgIYAnRACscicABMApsBhgpErtVG4ATEsRQAFjADOAOgJiA2gF0uAXwoV+Q4GjHyA7ijTpiXe3EP6ADiF0tdC99Zk80H39A9AAiKTAJGI8gA'>Try</a></div></pre>\n<h2 id=\"parâmetros-de-funções-são-opcionais-por-padrão\" style=\"position:relative;\"><a href=\"#par%C3%A2metros-de-fun%C3%A7%C3%B5es-s%C3%A3o-opcionais-por-padr%C3%A3o\" aria-label=\"parâmetros de funções são opcionais por padrão permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parâmetros de funções são opcionais por padrão</h2>\n<p>Uma vez que não há uma forma de especificar opcionalidade em parâmetros de funções em Javascript pre-ES2015, todas os parâmetros de funções são considerados opcionais.\nChamadas com menos argumentos que a quantidade declarada na função são permitidas.</p>\n<p>É importante notar que é um erro chamar funções com mais argumentos do que declarados.</p>\n<p>Por exemplo:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\">, </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) a: any' >a</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">\" \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) b: any' >b</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK, segundo argumento considerado opcional</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function bar(a: any, b: any): void' >bar</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">, </span><span style=\"color: #098658\"><data-err>3</data-err></span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Erro, argumentos em excesso</span></div><span class=\"error\"><span>Expected 0-2 arguments, but got 3.</span><span class=\"code\">2554</span></span><span class=\"error-behind\">Expected 0-2 arguments, but got 3.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGMAsFNINYCkDOAoEEUBcBOBLSbALlADMBDAGxVgzHFl1wHtcVSB2ABm4DZQPfqABMAVjEAWNGQCuAOyL4W80ACMKuABQUANOoCUoAN5pQoSCpQsqsAHRUWAcx2gA1KABEX94YDcaAC+aGga2gCMBn6gmADyANL6tE4KACYsoJopALaw8tgZlvIo+KlMFOmgLAAOkMry1KGaWuH6IlFNEW36AMxRMWAAosws+lmyufksKKCw2bMAHpCwKNZAA'>Try</a></div></pre>\n<p>Funções anotadas com JSDoc são excluídas dessa regra.\nUse a sintaxe de parâmetro opcional JSDoc (<code>[</code> <code>]</code>) para expressar opcionalidade. e.g.:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{string}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">[somebody]</span><span style=\"color: #008000\"> - O nome de alguém.</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sayHello(somebody?: string | undefined): void' >sayHello</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (!</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string | undefined' >somebody</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"John Doe\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Hello \"</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) somebody: string' >somebody</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function sayHello(somebody?: string | undefined): void' >sayHello</data-lsp></span><span style=\"color: #000000\">();</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgBAHAhgJ0QW0gbwM4BdkCWAdgOYC+kA2tgPZoCmARjQCYCeAupALSQDykInXqQWIxABsSAVwCXaAHRQQwcADNpRAMa4CNIpGyI2ACXoSJNABS0GzdgEosUSATWQrAQltNWbJ5gukIbC9myQALyQAEQAUjQAFgYAIjT00QDcLmQuWvq0EvQKliRW0WYWNDGQANQhdn4OWTngRqbmllZNQA'>Try</a></div></pre>\n<h2 id=\"declarações-de-parâmetros-var-args-são-inferidos-do-uso-de-arguments\" style=\"position:relative;\"><a href=\"#declara%C3%A7%C3%B5es-de-par%C3%A2metros-var-args-s%C3%A3o-inferidos-do-uso-de-arguments\" aria-label=\"declarações de parâmetros var args são inferidos do uso de arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarações de parâmetros var-args são inferidos do uso de <code>arguments</code></h2>\n<p>Uma função que tem uma referência à referência <code>arguments</code> é considerada tendo parâmetros var-arg (i.e. <code>(...arg: any[]) => any</code>). Use a sintaxe de var-arg JSDoc para especificar o tipo destes argumentos.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@param</span><span style=\"color: #008000\"> </span><span style=\"color: #1C6277\">{...number}</span><span style=\"color: #008000\"> </span><span style=\"color: #001080\">args</span><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function sum(...args: number[]): number' >sum</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #008000\">/* numbers */</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">for</span><span style=\"color: #000000\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\"> &lt; </span><span style=\"color: #0000FF\"><data-lsp lsp='(local var) arguments: IArguments' >arguments</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) IArguments.length: number' >length</data-lsp></span><span style=\"color: #000000\">; </span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\">++) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\"> += </span><span style=\"color: #0000FF\"><data-lsp lsp='(local var) arguments: IArguments' >arguments</data-lsp></span><span style=\"color: #000000\">[</span><span style=\"color: #001080\"><data-lsp lsp='(local var) i: number' >i</data-lsp></span><span style=\"color: #000000\">];</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='(local var) total: number' >total</data-lsp></span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEAcEMCdYFtwG8B0mB2BXJAjAU3gF9wEBzAZ3BGACgAzHLAYwBcBLAey3CrwAKUOFwFiNOgEo09cOABuCcO27tYAG3ABecAAYA3HPCNu8cIKXnOO-QfA2APOXgU8hLOyroNHiuwALe04AahCZVGN5VXUtEN1Kd08qAG1OAF0jeRJjeEJ2HHg+GM0jEiA'>Try</a></div></pre>\n<h2 id=\"tipos-de-parâmetros-não-especificados-tem-como-padrão-any\" style=\"position:relative;\"><a href=\"#tipos-de-par%C3%A2metros-n%C3%A3o-especificados-tem-como-padr%C3%A3o-any\" aria-label=\"tipos de parâmetros não especificados tem como padrão any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos de parâmetros não especificados tem como padrão <code>any</code></h2>\n<p>Uma vez que não há sintaxe natual para especificar tipos de parâmetros genéricos em Javascript, um tipo de parâmetro não especificado tem como padrão <code>any</code>.</p>\n<h3 id=\"em-uma-cláusula-extends\" style=\"position:relative;\"><a href=\"#em-uma-cl%C3%A1usula-extends\" aria-label=\"em uma cláusula extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Em uma cláusula extends</h3>\n<p>Por exemplo, <code>React.Component</code> é definido para ter dois parâmetros específicos, <code>Props</code> e <code>State</code>.\nEm um arquivo <code>.js</code>, não há forma legal de especificar esses parâmetros na cláusula extends. Por padrão o tipo dos argumentos será <code>any</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Permitido, já que this.props tem o tipo any</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Use o JSDoc <code>@arguments</code> para especificar os tipos explicitamente. Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Component</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">/**</span></div><div class='line'><span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@augments</span><span style=\"color: #008000\"> {Component&lt;{a: number}, State&gt;}</span></div><div class='line'><span style=\"color: #008000\"> */</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">MyComponent</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Component</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">render</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">props</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">b</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Erro: b não existe em {a: number}</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h3 id=\"em-referências-jsdoc\" style=\"position:relative;\"><a href=\"#em-refer%C3%AAncias-jsdoc\" aria-label=\"em referências jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Em referências JSDoc</h3>\n<p>Um tipo de argumento não especificado em JSDoc tem como padrão any</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\">{Array} */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var x: any[]' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;any>.push(...items: any[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK, x é do tipo Array&lt;any&gt;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@type</span><span style=\"color: #008000\">{Array.&lt;number&gt;} */</span></div><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\"> = [];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div><div class='line'><span style=\"color: #001080\"><data-lsp lsp='var y: number[]' >y</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Array&lt;number>.push(...items: number[]): number' >push</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"string\"</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// Erro, string não é atribuível a number</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhAIAEBcE8AcCmBvAggJ3QQ1gX3CMAFABuW64AHuALzgDaAugNxFGUB08ArgM4AWACgCMASmbhgwcAHkA0uy58hAIl7R0ASwB2AcxXjJ0+QBoq4AJfgAJgHtw0TfHsZssADxZtsAHxtQEDAIKK44HO7a3AC2AEaI6D74hKTk4LC0DCxssEoCIoZSsgo5PHlqGjr6BdIAopi2ZupaeuDaAMf2VlgVMdwAtySIADbgWK3RcehAA'>Try</a></div></pre>\n<h3 id=\"em-chamadas-de-função\" style=\"position:relative;\"><a href=\"#em-chamadas-de-fun%C3%A7%C3%A3o\" aria-label=\"em chamadas de função permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Em chamadas de função</h3>\n<p>Uma chamada para uma função genérica usa os argumentos para inferir o tipo dos parâmetros. As vezes este processo falha ao inferir qualquer tipo, principalmente por causa da falta de fontes de inferência; nesses casos, o tipo dos parâmetros será <code>any</code>. Por exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">p</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Promise</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">resolve</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">reject</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">reject</span><span style=\"color: #000000\">();</span></div><div class='line'><span style=\"color: #000000\">});</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">p</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Promise&lt;any&gt;;</span></div></code></div></pre>\n<p>Para aprender todas as features disponíveis em JSDoc, veja <a href=\"/docs/handbook/jsdoc-supported-types.html\">a referência</a></p>","headings":[{"value":"Propriedades são inferidas de atribuições no corpo das classes","depth":2},{"value":"Funções construtoras são equivalentes a classes","depth":2},{"value":"CommonJS modules são suportados","depth":2},{"value":"Classes, funções, e object literals são namespaces","depth":2},{"value":"Objetos literais são abertos","depth":2},{"value":"Inicializadores null, undefined e arrays vazios são do tipo any ou any[]","depth":2},{"value":"Parâmetros de funções são opcionais por padrão","depth":2},{"value":"Declarações de parâmetros var-args são inferidos do uso de arguments","depth":2},{"value":"Tipos de parâmetros não especificados tem como padrão any","depth":2},{"value":"Em uma cláusula extends","depth":3},{"value":"Em referências JSDoc","depth":3},{"value":"Em chamadas de função","depth":3}],"frontmatter":{"permalink":"/pt/docs/handbook/type-checking-javascript-files.html","title":"Checando tipos de arquivos JavaScript","disable_toc":null,"handbook":null,"oneline":"Como adicionar checagem de tipos a arquivos JavaScript usando Typescript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Projetos JS utilizando TypeScript","oneline":"Como adicionar verificação de tipo a arquivos JavaScript usando TypeScript","permalink":"/pt/docs/handbook/intro-to-js-ts.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Referência JSDoc","oneline":"Quais JSDoc Javascript baseado em Typescript suporta?","permalink":"/pt/docs/handbook/jsdoc-supported-types.html"}}}},"pageContext":{"id":"7-checando-tipos-de-arquivos-javascript","slug":"/pt/docs/handbook/type-checking-javascript-files.html","repoPath":"/packages/documentation/copy/pt/javascript/Type Checking JavaScript Files.md","previousID":"670bf195-5c99-5c93-8fd0-c5d938d41c60","nextID":"3c6ddc7c-8f1f-506c-97e2-1469496966e6","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}