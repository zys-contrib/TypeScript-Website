{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/typescript-in-5-minutes-oop.html","result":{"data":{"markdownRemark":{"id":"16245d69-493d-5e00-adaf-ecb6e3dc01fc","excerpt":"TypeScript é uma escolha popular para programadores acostumados com outras linguagens com tipagem estática, como C# e Java. O sistema de tipos do TypeScript…","html":"<p>TypeScript é uma escolha popular para programadores acostumados com outras linguagens com tipagem estática, como C# e Java.</p>\n<p>O sistema de tipos do TypeScript oferece muitos dos mesmos benefícios, como melhor conclusão de código, detecção prematura de erros e comuincação mais clara entre partes do seu programa. Enquanto o TypeScript fornece muitas features familiares para esses desenvolvedores, é válido dar um passo atrás para ver o quanto JavaScript (por consequência TypeScript) difere das linguagens orientadas a objeto. Entender essas diferenças vão te ajudar a escrever um código JavaScript melhor e evitar armadilhas comuns que programadores que vão diretamente de C#/Java para TypeScript caem.</p>\n<h2 id=\"co-aprendendo-javascript\" style=\"position:relative;\"><a href=\"#co-aprendendo-javascript\" aria-label=\"co aprendendo javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Co-aprendendo JavaScript</h2>\n<p>Se você já é familiar com JavaScript mas é primariamente um programador Java ou C#, essa página introdutória pode ajudar a explicar alguns dos equívocos e armadilhas comuns que você pode estar suscetível. Algumas das formas de modelos de tipo do TypeScript são bem diferentes de Java ou C# e é importante manter esses em mente quando se aprende TypeScript.</p>\n<p>Se você é um desenvolvedor Java ou C# que é novo no JavaScript em geral, nós recomendamos aprender um pouco de JavaScript <em>sem</em> tipos primeiro para entender o comportamento do JavaScript em tempo de execução. Porque o TypeScript não muda a forma que seu código é <em>executado</em>, você ainda vai ter que aprender como o JavaScript funciona para escrever código que realmente faz alguma coisa!</p>\n<p>É importante lembrar que TypeScript usa o mesmo <em>ambiente de execução</em> que o JavaScript, então qualquer recursos sobre como realizar determinado comportamento em tempo de execução (converter uma string para um número, exibir um alerta, escrever um arquivo em disco, etc.) vai sempre se aplicar igualmente para programas TypeScript. Não se limite a recursos específicos do TypeScript!</p>\n<h2 id=\"repensando-a-classe\" style=\"position:relative;\"><a href=\"#repensando-a-classe\" aria-label=\"repensando a classe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repensando a Classe</h2>\n<p>C# e Java são o que podemos chamar de linguagens <em>obrigatoriamente orientadas a objeto</em>. Nessas linguagens, a <em>classe</em> é a unidade básica de organização de código e também o recipiente básico de todos os dados <em>e</em> comportamento em tempo de execução. Forçar todas as funcionalidades e dados a serem contidos em classes pode ser um bom modelo de domínio para alguns problemas, mas nem todo domínio <em>precisa</em> ser representado dessa forma.</p>\n<h3 id=\"funções-livres-e-dados\" style=\"position:relative;\"><a href=\"#fun%C3%A7%C3%B5es-livres-e-dados\" aria-label=\"funções livres e dados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Funções Livres e Dados</h3>\n<p>Em JavaScript, funções podem existir em qualquer lugar e dados podem ser enviados livremente sem estar dentro de uma <code>class</code> ou <code>struct</code> pré definida. Essa flexiblidade é extremamente poderosa. Funções “livres” (aquelas que não são associadas à uma classe) trabalhando sobre os dados sem uma hierarquia de orientação a objeto implicada tendem a ser o modelo preferido para escrever programas em JavaScript.</p>\n<h3 id=\"classes-estáticas\" style=\"position:relative;\"><a href=\"#classes-est%C3%A1ticas\" aria-label=\"classes estáticas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes Estáticas</h3>\n<p>Adicionalmente, certos construtos de C# e Java tais como singletons e classes estáticas são desnecessários em TypeScript.</p>\n<h2 id=\"poo-em-typescript\" style=\"position:relative;\"><a href=\"#poo-em-typescript\" aria-label=\"poo em typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POO em TypeScript</h2>\n<p>Com isso dito, você ainda pode usar classes se quiser! Alguns problemas são adequados a serem resolvidosp por hierarquia de POO tradicional e o suporte do TypeScript a classes JavaScript fará esses modelos ainda mais poderosos. TypeScript suporta muitos padrões comuns tais como implementar interfaces, herança e métodos estáticos.</p>\n<p>Nós cobriremos classes mais tarde neste guia.</p>\n<h2 id=\"repensando-tipos\" style=\"position:relative;\"><a href=\"#repensando-tipos\" aria-label=\"repensando tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repensando Tipos</h2>\n<p>O entendimento do TypeScript de um <em>tipo</em> é atualmente bem diferente do de C# ou Java. Vamos explorar algumas diferenças.</p>\n<h3 id=\"sistema-de-tipos-nominal-reificado\" style=\"position:relative;\"><a href=\"#sistema-de-tipos-nominal-reificado\" aria-label=\"sistema de tipos nominal reificado permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sistema de Tipos Nominal Reificado</h3>\n<p>Em C# ou Java, qualquer dado valor ou objeto tem um tipo exato - seja <code>null</code>, um primitivo, ou uma classe conhecida. Nós podemos chamar métodos como <code>value.GetType()</code> ou <code>value.getClass()</code> para buscar o tipo exato em tempo de execução. A definição desse tipo vai residir em uma classe em algum lugar com algum nome e nós não podemos usar duas classes com formatos similares no lugar uma da outra a não ser que haja uma relação de herança explícita ou uma interface comum implementada.</p>\n<p>Estes aspectos descrevem um sistema de tipo <em>nominal, reificado</em>. Os tipos que escrevemos no código são presentes em tempos de execução e esses tipos são relacionados por suas declarações, não suas estruturas.</p>\n<h2 id=\"tipos-como-conjuntos\" style=\"position:relative;\"><a href=\"#tipos-como-conjuntos\" aria-label=\"tipos como conjuntos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos como Conjuntos</h2>\n<p>Em C# ou Java, é siginficante pensar em uma correspondência um pra um entre os tipos de tempo de execução e suas declarações de tempo de compilação.</p>\n<p>Em TypeScript, é melhor pensar em um tipo como um <em>conjunto de valores</em> que compartilham algo em comum. Por tipos serem apenas conjuntos, um valor particular pode pertencer à <em>muitos</em> conjuntos ao mesmo tempo.</p>\n<p>Uma vez que você começa a pensar em tipos como conjuntos, certas operações se tornam bastante naturais. Por exemplo, em C#, é bem estranho enviar um valor que <em>pode ser</em> uma <code>string</code> ou um <code>int</code>, porque não há um tipo único que represente este valor.</p>\n<p>Em TypeScript, isso se torna bem natural uma vez que você realiza que todo tipo é apenas um conjunto. Como você descreve um valor que pode pertencer ao conjunto <code>string</code> ou ao conjunto <code>number</code>? Ele simplesmente pertence à <em>união</em> desses conjuntos: <code>string | number</code>.</p>\n<p>TypeScript fornece um número de mecanismos para trabalhar com tipos em forma de conjuntos e você vai descobrir que eles são mais intuitivos se você pensar em tipos como conjuntos.</p>\n<h3 id=\"tipos-estruturais-apagados\" style=\"position:relative;\"><a href=\"#tipos-estruturais-apagados\" aria-label=\"tipos estruturais apagados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos Estruturais Apagados</h3>\n<p>Em TypeScript, objetos <em>não</em> são de um tipo exato. Por Exemplo, se construímos um objeto que satisfaz uma interface, nós podemos usar este objeto onde aquela interface é esperada mesmo que não haja relação delcarativa entre os dois.</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Ponto' >Ponto</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.x: number' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.y: number' >y</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Nomeada' >Nomeada</data-lsp></span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) Nomeada.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(point: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Ponto' >point</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Ponto' >Ponto</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;x = &apos;</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Ponto' >point</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.x: number' >x</data-lsp></span><span style=\"color: #000000\"> + </span><span style=\"color: #A31515\">&apos;, y = &apos;</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) point: Ponto' >point</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Ponto.y: number' >y</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function exibirNome(x: Nomeada): void' >exibirNome</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Nomeada' >x</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='interface Nomeada' >Nomeada</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='var console: Console' >console</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">&apos;Olá, &apos;</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\"><data-lsp lsp='(parameter) x: Nomeada' >x</data-lsp></span><span style=\"color: #000000\">.</span><span style=\"color: #001080\"><data-lsp lsp='(property) Nomeada.nome: string' >nome</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    nome: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\"> = {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) x: number' >x</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) y: number' >y</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">0</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #001080\"><data-lsp lsp='(property) nome: string' >nome</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">&apos;Origem&apos;</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirPonto(point: Ponto): void' >exibirPonto</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    nome: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function exibirNome(x: Nomeada): void' >exibirNome</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='const obj: {&#10;    x: number;&#10;    y: number;&#10;    nome: string;&#10;}' >obj</data-lsp></span><span style=\"color: #000000\">);</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgAoHtzuQbwFACQAHgFzIgCuAtgEbQDchAnmZbQ3gL56iSyIoAcuioQ4AEzi5CIERDIBnMFFABzRtzwwKIBGGCZkEIsBrAoGLAAoADul5lLYdAEppBBJgXoANhAB0PuiqVgDkRMgAvMihyADUyHa8-hEJoQA0yExRMfGJ9uD+TC4aeFo6egYgRiZmUMKiVqTIDWKSbvgeXr4BQSGhAPI+AIeZsQlE-rKiJVxlniBKyOg0AFY5nc0ADOnMZDsycmSDKqoQVKFcjHjGpuZO6FYrq7O3da1PayVAA'>Try</a></div></pre>\n<p>O sistema de tipos do TypeScript é <em>estrutural</em>, não nominal: Nós podemos usar <code>obj</code> como um <code>Ponto</code> porque as propriedades <code>x</code> e <code>y</code> são ambas números. A relação entre os tipos são determinadas pelas propriedades que eles contém, não se foram declarados com determinada relação.</p>\n<p>O sistema de tipos do TypeScript também não é <em>reificado</em>: Nâo há nada em tempo de execução que nós dirá se aquele <code>obj</code> é um <code>Ponto</code>. Na verdade, o tipo <code>Ponto</code> não é presente em <em>nenhuma forma</em> em tempo de execução.</p>\n<p>Voltando para a ideia de <code>tipos como conjuntos</code>, nós podemos pensar que <code>obj</code> é um membro tanto do conjunto de valores <code>Ponto</code> quanto do conjunto de valores <code>Nomeada</code>.</p>\n<h3 id=\"consequências-da-tipagem-estrutural\" style=\"position:relative;\"><a href=\"#consequ%C3%AAncias-da-tipagem-estrutural\" aria-label=\"consequências da tipagem estrutural permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consequências da Tipagem Estrutural</h3>\n<p>Programadores POO são frequentementes surpreendidos pelos aspectos particulares da tipagem estrutural.</p>\n<h4 id=\"tipos-vazios\" style=\"position:relative;\"><a href=\"#tipos-vazios\" aria-label=\"tipos vazios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos Vazios</h4>\n<p>O primeiro é que o <em>tipo vazio</em> parece desafiar as expectativas:</p>\n<pre class=\"shiki light-plus twoslash lsp\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\"><data-lsp lsp='class Vazio' >Vazio</data-lsp></span><span style=\"color: #000000\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\"><data-lsp lsp='function fn(arg: Vazio): void' >fn</data-lsp></span><span style=\"color: #000000\">(</span><span style=\"color: #001080\"><data-lsp lsp='(parameter) arg: Vazio' >arg</data-lsp></span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\"><data-lsp lsp='class Vazio' >Vazio</data-lsp></span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #008000\">// fazer algo?</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #008000\">// Sem erro, mas isso não é um &apos;Vazio&apos; ?</span></div><div class='line'><span style=\"color: #795E26\"><data-lsp lsp='function fn(arg: Vazio): void' >fn</data-lsp></span><span style=\"color: #000000\">({ </span><span style=\"color: #001080\"><data-lsp lsp='(property) k: number' >k</data-lsp>:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> });</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBqYC8CWB7aBvAvgKGwMwFcA7YAF1SOjyIAowAnAcwC45FUBKDbASAHo+VRAFN60MCEYoA-NhzYB0AMrCAttFH0UAGmirI0JFDREAx2gCX0AuoDk8ZClvRZ1GumgBrVgEYADNCYHADcQA'>Try</a></div></pre>\n<p>TypeScript determina se a chamada para <code>fn</code> é válida por checar se o argumento fornecido é um <code>Vazio</code> válido. Ele faz isso examinando a <code>estrutura</code> de <code>{ k: 10 }</code> e <code>class Vazio { }</code>. Nós podemos ver que <code>{ k: 10 }</code> tem todas as propriedades que <code>Vazio</code> tem, porque <code>Vazio</code> não tem propriedades. Logo, é uma chamada válida.</p>\n<p>Isso pode parecer muito surpreendente, mas, em última análise, é uma relação muito similar a uma aplicada em linguagens de POO nominais. Uma subclasse não pode <em>remover</em> uma propriedade de sua classe base, porque fazer isso destruiria a relação natural de subtipo entre a classe derivada e sua base. Sistemas de tipagem estrutural simplesmente identificam esse relacionamento implicitamente descrevendo subtipos em termos de tendo propriedades de tipos compatíveis.</p>\n<h3 id=\"tipos-idênticos\" style=\"position:relative;\"><a href=\"#tipos-id%C3%AAnticos\" aria-label=\"tipos idênticos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos Idênticos</h3>\n<p>Outra frequente fonte de supresa vem com tipos idênticos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Carro</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #795E26\">dirigir</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #008000\">// pressionar o acelerador</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Golfer</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">\t</span><span style=\"color: #795E26\">dirigir</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">\t\t</span><span style=\"color: #008000\">// jogar a bola para longe</span></div><div class='line'><span style=\"color: #000000\">\t}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// Sem erro?</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">w</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Carro</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">new</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">Golfer</span><span style=\"color: #000000\">();</span></div></code></div></pre>\n<p>Novamente, isso não é um erro porque as <em>estruturas</em> dessas classes são as mesmas. Enquanto isso pode parecer como uma potencial fonte de confusão, na prática, classes idênticas que não deveriam ser relacionadas não são comuns.</p>\n<p>Nós aprendemos mais sobre como classes se relacionam umas com as outras no capítulo Classes.</p>\n<h3 id=\"reflexão\" style=\"position:relative;\"><a href=\"#reflex%C3%A3o\" aria-label=\"reflexão permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflexão</h3>\n<p>Programadores POO são acostumados a serem capazes de pegar o tipo de qualquer valor, até um genérico:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">csharp</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// C#</span></div><div class='line'><span style=\"color: #0000FF\">static</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">TipoDoLog</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">Console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">WriteLine</span><span style=\"color: #000000\">(</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #000000\">(</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">).</span><span style=\"color: #001080\">Name</span><span style=\"color: #000000\">);</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Porque o sistema de tipos do TypeScript é totalmente apagado, informação sobre e.g. a instanciação de um parâmetro de tipo genérico não está disponível em tempo de execução.</p>\n<p>JavaScript tem alguns primitivos limitados como <code>typeof</code> e <code>instanceof</code>, mas lembre-se que esses operadores ainda funcionarão nos valores porque eles existem no código de saída com tipo apagado. Por exemplo <code>typeof (new Carro())</code> será <code>object</code>, não <code>Carro</code> ou <code>\"Carro\"</code></p>\n<h2 id=\"próximos-passos\" style=\"position:relative;\"><a href=\"#pr%C3%B3ximos-passos\" aria-label=\"próximos passos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Próximos Passos</h2>\n<p>Essa documentação é uma resumo de alto nível da sintaxe e tipos qeu você usaria em código no dia-a-dia. Daqui você deve:</p>\n<ul>\n<li>Ler o Handbook completo <a href=\"/docs/handbook/intro.html\">from start to finish</a> (30m)</li>\n<li>Explorar os <a href=\"/play#show-examples\">exemplos do Playground</a></li>\n</ul>","headings":[{"value":"Co-aprendendo JavaScript","depth":2},{"value":"Repensando a Classe","depth":2},{"value":"Funções Livres e Dados","depth":3},{"value":"Classes Estáticas","depth":3},{"value":"POO em TypeScript","depth":2},{"value":"Repensando Tipos","depth":2},{"value":"Sistema de Tipos Nominal Reificado","depth":3},{"value":"Tipos como Conjuntos","depth":2},{"value":"Tipos Estruturais Apagados","depth":3},{"value":"Consequências da Tipagem Estrutural","depth":3},{"value":"Tipos Vazios","depth":4},{"value":"Tipos Idênticos","depth":3},{"value":"Reflexão","depth":3},{"value":"Próximos Passos","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/typescript-in-5-minutes-oop.html","title":"TypeScript para programadores Java/C#","disable_toc":null,"handbook":null,"oneline":"Aprenda TypeScript se você tem um background com linguagens orientadas a objeto","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"0-typescript-para-programadores-java/c#","slug":"/pt/docs/handbook/typescript-in-5-minutes-oop.html","repoPath":"/packages/documentation/copy/pt/get-started/TS for OOPers.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}