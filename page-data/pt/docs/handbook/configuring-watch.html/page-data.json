{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/configuring-watch.html","result":{"data":{"markdownRemark":{"id":"b5e469c6-6a55-5138-a742-5d4656e7443f","excerpt":"O compilador suporta configurar como observar arquivos e diretórios usando opções de compilador no Typescript 3.8+, e variáveis de ambiente antes dessa versão…","html":"<p>O compilador suporta configurar como observar arquivos e diretórios usando opções de compilador no Typescript 3.8+, e variáveis de ambiente antes dessa versão.</p>\n<h2 id=\"contexto\" style=\"position:relative;\"><a href=\"#contexto\" aria-label=\"contexto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contexto</h2>\n<p>A implementação <code>--watch</code> do compilador se apoia em usar <code>fs.watch</code> e <code>fs.watchFile</code> que são providos pelo node, ambos os métodos têm seus prós e contras.</p>\n<p><code>fs.watch</code> usa os eventos do file system para notificar as mudanças no arquivo/diretório. Mas isso depende do SO e a notificação não é completamente confiável e não funciona como esperado em vários SOs. Também pode haver um limite do número de observadores que podem ser criados, eg. linux, e nós poderíamos superar esse limite bem rápido com programas que incluem grandes números de arquivos. Mas, por usar os eventos do file system, não há tantos ciclos de CPU envolvidos. O compilador usa <code>fs.watch</code> tipicamente para observar diretórios (eg. diretórios fonte que são incluídos por um arquivo de configuração, diretório em que a resolução de módulos falhou etc.) estes podem lidar com a falta de precisão em notificação de mudanças. Mas observação recursiva é suportada apenas no Windows e no OSX. Isso significa que precisamos de algo para substituir a natureza recursiva em outros SOs.</p>\n<p><code>fs.watchFile</code> usa uma checagem de estado dos arquivos e por isso envolve ciclos de CPU. Mas essa é a forma mais confiável de se conseguir atualizações dos arquivos/diretórios. O compilador usa <code>fs.watchFile</code> tipicamente para observar arquivos fonte, arquivos de configuração e arquivos em falta (referências de arquivos falhas) e isso significa que o uso de CPU depende da quantidade de arquivos no programa.</p>\n<h2 id=\"configurando-observação-de-arquivos-usando-o-tsconfigjson\" style=\"position:relative;\"><a href=\"#configurando-observa%C3%A7%C3%A3o-de-arquivos-usando-o-tsconfigjson\" aria-label=\"configurando observação de arquivos usando o tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando observação de arquivos usando o <code>tsconfig.json</code></h2>\n<pre class=\"shiki light-plus tsconfig lsp\" style=\"background-color: #FFFFFF; color: #000000\" tsconfig=\"true\"><div class='code-container'><code><div class='line'><span style=\"color: #000000\">{</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// Algumas opções típicas do compilador</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"es2020\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#moduleResolution'><data-lsp lsp=\"Specify how TypeScript looks up a file from a given module specifier.\">moduleResolution</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"node\"</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">  },</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// NOVO: Opçoes para observação de arquivo/diretório</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0451A5\">\"watchOptions\"</span><span style=\"color: #000000\">: {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Usa os eventos nativos do file system para arquivos e diretórios</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#watchFile'><data-lsp lsp=\"Specify how the TypeScript watch mode works.\">watchFile</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"useFsEvents\"</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#watchDirectory'><data-lsp lsp=\"Specify how directories are watched on systems that lack recursive file-watching functionality.\">watchDirectory</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"useFsEvents\"</span><span style=\"color: #000000\">,</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// Checka os arquivos buscando atualizações mais frequentemente</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #008000\">// quando eles são muito atualizados</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true tabindex=\"-1\" href='https://www.typescriptlang.org/tsconfig#fallbackPolling'><data-lsp lsp=\"Specify what approach the watcher should use if the system runs out of native file watchers.\">fallbackPolling</data-lsp></a>\"</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"dynamicPriority\"</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Você pode ler mais sobre isso nas <a href=\"/docs/handbook/release-notes/typescript-3-8.html#better-directory-watching-on-linux-and-watchoptions\">notas de atualização</a>.</p>\n<h2 id=\"configurando-observação-de-arquivos-usando-variáveis-de-ambiente-tsc_watchfile\" style=\"position:relative;\"><a href=\"#configurando-observa%C3%A7%C3%A3o-de-arquivos-usando-vari%C3%A1veis-de-ambiente-tsc_watchfile\" aria-label=\"configurando observação de arquivos usando variáveis de ambiente tsc_watchfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando observação de arquivos usando variáveis de ambiente <code>TSC_WATCHFILE</code></h2>\n<!-- prettier-ignore -->\n<table>\n<thead>\n<tr>\n<th>Opção</th>\n<th>Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PriorityPollingInterval</code></td>\n<td>Usa <code>fs.watchFile</code> mas usa diferentes intervalos de checagem para arquivos fonte, arquivos de configuração e arquivos em falta</td>\n</tr>\n<tr>\n<td><code>DynamicPriorityPolling</code></td>\n<td>Usa uma fila dinâmica onde os arquivos modificados mais frequentemente serão checados em menor intervalo e os que se mantem inalterados serão checados em um intervalo maior</td>\n</tr>\n<tr>\n<td><code>UseFsEvents</code></td>\n<td>Usa o <code>fs.watch</code> que por sua vez usa os eventos de file system (mas pode não ser exato em diferentes SOs) para conseguir as notificações de mudança/criação/remoção de arquivos. Note que alguns SOs eg. linux tem um limite no número de observadores e a falha de criação de um observador com <code>fs.watch</code> resultará na criação de outro observador usando <code>fs.watchFile</code></td>\n</tr>\n<tr>\n<td><code>UseFsEventsWithFallbackDynamicPolling</code></td>\n<td>Essa opção é similar a <code>UseFsEvents</code> exceto na falha de criação de um observador usando <code>fs.watch</code>, a contingência de observação acontece por filas de checagem dinâmicas (como explicado em <code>DynamicPriorityPolling</code>)</td>\n</tr>\n<tr>\n<td><code>UseFsEventsOnParentDirectory</code></td>\n<td>Essa opção observa o diretório pai do arquivo com <code>fs.watch</code> (usando eventos do file system) causando com que o uso de CPU seja baixo</td>\n</tr>\n<tr>\n<td>default (nenhum valor especificado)</td>\n<td>Se a variável de ambiente <code>TSC_NONPOLLING_WATCHER</code> tem valor true, observa os diretórios pai dos arquivos (assim como <code>UseFsEventsOnParentDirectory</code>). De outra forma observa os arquivos usando <code>fs.watchFile</code> com <code>250ms</code> como tempo limite para qualquer arquivo.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"configurando-observação-de-diretório-usando-a-variável-de-ambiente-tsc_watchdirectory\" style=\"position:relative;\"><a href=\"#configurando-observa%C3%A7%C3%A3o-de-diret%C3%B3rio-usando-a-vari%C3%A1vel-de-ambiente-tsc_watchdirectory\" aria-label=\"configurando observação de diretório usando a variável de ambiente tsc_watchdirectory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configurando observação de diretório usando a variável de ambiente <code>TSC_WATCHDIRECTORY</code></h2>\n<p>A observação de diretório em plataformas que não suportam observação recursiva de diretório nativamente em node é suportada por meio da criação recursiva de observadores de diretório para os diretórios filhos usando diferentes opções selecionadas pela variável ambiente <code>TSC_WATCHDIRECTORY</code>. Note que, em plataformas que suportam observação de diretórios recursivamente (e.g. windows), o valor dessa variável é ignorado.</p>\n<!-- prettier-ignore -->\n<table>\n<thead>\n<tr>\n<th>Opção</th>\n<th>Descrição</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RecursiveDirectoryUsingFsWatchFile</code></td>\n<td>Usa <code>fs.watchFile</code> para observar os diretórios e diretórios filhos o que torna isso uma observação por checagem de estado (consumindo ciclos de CPU).</td>\n</tr>\n<tr>\n<td><code>RecursiveDirectoryUsingDynamicPriorityPolling</code></td>\n<td>Usa a fila de checagem de estado dinâmica para checar por mudanças nos diretórios e diretórios filhos.</td>\n</tr>\n<tr>\n<td>default (sem valor especificado)</td>\n<td>Usa <code>fs.watch</code> para observar diretórios e diretórios filhos.</td>\n</tr>\n</tbody>\n</table>","headings":[{"value":"Contexto","depth":2},{"value":"Configurando observação de arquivos usando o tsconfig.json","depth":2},{"value":"Configurando observação de arquivos usando variáveis de ambiente TSC_WATCHFILE","depth":2},{"value":"Configurando observação de diretório usando a variável de ambiente TSC_WATCHDIRECTORY","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/configuring-watch.html","title":"Configurando Watch","disable_toc":null,"handbook":null,"oneline":"Como configurar o modo de observação do Typescript","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"8-configurando-watch","slug":"/pt/docs/handbook/configuring-watch.html","repoPath":"/packages/documentation/copy/pt/project-config/Configuring Watch.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}