{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/declaration-files/deep-dive.html","result":{"data":{"markdownRemark":{"id":"09b62a3f-e701-5276-be61-b92c42fce7ad","excerpt":"Teoria do arquivo de declaração: Uma análise profunda Estruturar módulos para obter a forma exata da API que você deseja pode ser complicado.\nPor exemplo, nós…","html":"<h2 id=\"teoria-do-arquivo-de-declaração-uma-análise-profunda\" style=\"position:relative;\"><a href=\"#teoria-do-arquivo-de-declara%C3%A7%C3%A3o-uma-an%C3%A1lise-profunda\" aria-label=\"teoria do arquivo de declaração uma análise profunda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Teoria do arquivo de declaração: Uma análise profunda</h2>\n<p>Estruturar módulos para obter a forma exata da API que você deseja pode ser complicado.\nPor exemplo, nós talvez queiramos um módulo que possa ser invocado com ou sem <code>new</code> para produzir diferentes tipos,\nque tenha uma variedade de tipos nomeados expostos em uma hierarquia,\ne que tenha algumas propriedades no objeto de módulo também.</p>\n<p>Ao ler este guia, você terá as ferramentas para escrever arquivos de declaração complexos que expõem uma API amigável.\nEste guia se concentra em bibliotecas de módulo (ou UMD) pois as opções são mais variadas.</p>\n<h2 id=\"conceitos-chaves\" style=\"position:relative;\"><a href=\"#conceitos-chaves\" aria-label=\"conceitos chaves permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conceitos chaves</h2>\n<p>Você pode entender perfeitamente como criar qualquer forma de declaração\nao compreender alguns conceitos chaves de como o TypeScript funciona.</p>\n<h3 id=\"tipos\" style=\"position:relative;\"><a href=\"#tipos\" aria-label=\"tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipos</h3>\n<p>Se você está lendo este guia, provavelmente já sabe de forma superficial o que é um tipo em TypeScript.\nPara ser mais explícito, no entanto, um <em>tipo</em> é introduzido com:</p>\n<ul>\n<li>Uma declaração de alias de tipo (<code>type sn = number | string;</code>)</li>\n<li>Uma declaração de interface (<code>interface I { x: number[]; }</code>)</li>\n<li>Uma declaração de classe (<code>class C { }</code>)</li>\n<li>Uma declaração de enum (<code>enum E { A, B, C }</code>)</li>\n<li>Uma declaração <code>import</code> que se refere a um tipo</li>\n</ul>\n<p>Cada uma dessas formas de declaração cria um novo nome de tipo.</p>\n<h3 id=\"valores\" style=\"position:relative;\"><a href=\"#valores\" aria-label=\"valores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Valores</h3>\n<p>Assim como tipos, você provavelmente já entende o que um valor é.\nValores são nomes em tempo de execução que podemos referenciar em expressões.\nPor exemplo <code>let x = 5;</code> cria um valor chamado <code>x</code>.</p>\n<p>Novamente, sendo explícito, o itens seguintes criam valores:</p>\n<ul>\n<li>Declarações <code>let</code>, <code>const</code> e <code>var</code></li>\n<li>Uma declaração de <code>namespace</code> ou <code>module</code> que contém um valor</li>\n<li>Uma declaração de <code>enum</code></li>\n<li>Uma declaração de <code>class</code></li>\n<li>Uma declaração <code>import</code> que se refere a um valor</li>\n<li>Uma declaração de <code>function</code></li>\n</ul>\n<h3 id=\"namespaces\" style=\"position:relative;\"><a href=\"#namespaces\" aria-label=\"namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Namespaces</h3>\n<p>Tipos podem existir em <em>namespaces</em>.\nPor exemplo, se temos a declaração <code>let x: A.B.C</code>,\nnós dizemos que o tipo <code>C</code> vem do namespace <code>A.B</code>.</p>\n<p>Esta distinção é sutil e importante — aqui, <code>A.B</code> não é necessariamente um tipo ou um valor.</p>\n<h2 id=\"combinações-simples-um-nome-múltiplos-significados\" style=\"position:relative;\"><a href=\"#combina%C3%A7%C3%B5es-simples-um-nome-m%C3%BAltiplos-significados\" aria-label=\"combinações simples um nome múltiplos significados permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combinações simples: Um nome, múltiplos significados</h2>\n<p>Dado um nome <code>A</code>, nós podemos encontrar até três significados para <code>A</code>: um tipo, um valor ou um namespace.\nComo o nome é interpretado depende do contexto em que ele é usado.\nPor exemplo, na declaração <code>let m: A.A = A;</code>,\n<code>A</code> é usado primeiro como um namespace, então como nome de tipo, e então como um valor.\nEsses significados podem acabar se referindo a declarações totalmente diferentes!</p>\n<p>Isso pode parecer confuso, mas é muito conveniente contanto que nós não sobrecarreguemos excessivamente as coisas.\nVejamos alguns aspectos úteis desta combinação de comportamento.</p>\n<h3 id=\"combinações-integradas\" style=\"position:relative;\"><a href=\"#combina%C3%A7%C3%B5es-integradas\" aria-label=\"combinações integradas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combinações integradas</h3>\n<p>Leitores atentos vão notar que, por exemplo, <code>class</code> apareceu em ambas as listas de <em>tipo</em> e <em>valor</em>.\nA declaração <code>class C { }</code> cria duas coisas:\num <em>tipo</em> <code>C</code> que se refere à forma da instância da classe,\ne um <em>valor</em> <code>C</code> que se refere à função construtora da classe.\nDeclaração de enums se comportam de forma semelhante.</p>\n<h3 id=\"combinações-de-usuários\" style=\"position:relative;\"><a href=\"#combina%C3%A7%C3%B5es-de-usu%C3%A1rios\" aria-label=\"combinações de usuários permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combinações de usuários</h3>\n<p>Digamos que escrevemos um arquivo de módulo <code>foo.d.ts</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">SomeVar</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Em seguida, utilizarmos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">foo</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">SomeType</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">foo</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">SomeVar</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Isso funciona bem, mas podemos imaginar que <code>SomeType</code> e <code>SomeVar</code> são intimamente relacionados\nde forma que você gostaria que eles tivessem o mesmo nome.\nNós podemos usar a combinação para apresentar esse dois objetos diferentes (o valor e o tipo) sob o mesmo nome <code>Bar</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\">: { </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> };</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Isso apresenta uma oportunidade muito boa para desestruturação no código que o utiliza:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./foo\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Bar</span><span style=\"color: #000000\"> = </span><span style=\"color: #001080\">Bar</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">count</span><span style=\"color: #000000\">);</span></div></code></div></pre>\n<p>Novamente, nós usamos o <code>Bar</code> aqui como tipo e valor.\nPerceba que não precisamos declarar o valor <code>Bar</code> como sendo do tipo <code>Bar</code> — eles são independentes.</p>\n<h2 id=\"combinações-avançadas\" style=\"position:relative;\"><a href=\"#combina%C3%A7%C3%B5es-avan%C3%A7adas\" aria-label=\"combinações avançadas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combinações avançadas</h2>\n<p>Alguns tipos de declaração podem ser combinadas através de múltiplas declarações.\nPor exemplo, <code>class C { }</code> e <code>interface C { }</code> podem coexistir e ambas contribuem com propriedades para os tipos <code>C</code>.</p>\n<p>Isso é permitido desde que não se crie um conflito.\nUma regra geral é que os valores sempre entram em conflito com outro valores de mesmo nome a menos que sejam declaras como <code>namespace</code>s,\ntipos conflitarão se forem declarados com um alias de tipo (<code>type s = string</code>),\ne namespaces nunca entram em conflito.</p>\n<p>Vamos ver como isso pode ser usado.</p>\n<h3 id=\"adicionar-usando-uma-interface\" style=\"position:relative;\"><a href=\"#adicionar-usando-uma-interface\" aria-label=\"adicionar usando uma interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adicionar usando uma <code>interface</code></h3>\n<p>Nós podemos adicionar membros adicionais à uma <code>interface</code> com outra declaração de <code>interface</code>:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... em outro local ...</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = ...;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div></code></div></pre>\n<p>Isso também funciona com classes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #008000\">// ... em outro local ...</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Foo</span><span style=\"color: #000000\"> = ...;</span></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">a</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">); </span><span style=\"color: #008000\">// OK</span></div></code></div></pre>\n<p>Perceba que não podemos adicionar ao alias de tipo (<code>type s = string;</code>) usando uma interface.</p>\n<h3 id=\"adicionar-usando-um-namespace\" style=\"position:relative;\"><a href=\"#adicionar-usando-um-namespace\" aria-label=\"adicionar usando um namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adicionar usando um <code>namespace</code></h3>\n<p>Uma declaração de <code>namespace</code> pode ser usada adicionar novos tipos, valores, e namespaces de qualquer forma que não crie conflitos.</p>\n<p>Por exemplo, podemos adicionar um membro estático a uma classe:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// ... em outro local ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\"> = </span><span style=\"color: #0070C1\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div></code></div></pre>\n<p>Perceba que neste exemplo, adicionamos um valor para o lado <em>estático</em> de <code>C</code> (sua função construtora)\nIsto ocorre porque nós adicionamos um <em>valor</em>, e o contêiner para todos os valores é outro valor\n(tipos são contidos por namespaces), e namespaces são contidos por outros namespaces).</p>\n<p>Nós também podemos adicionar um tipo com namespace a uma classe:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #008000\">// ... em outro local ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">D</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// OK</span></div></code></div></pre>\n<p>Neste exemplo, não havia um namespace <code>C</code> até nós escrevermos uma declaração de <code>namespace</code> para ele.\nO significado de <code>C</code> como um namespace não conflita com os significados de valor ou tipo de <code>C</code> criados pela classe.</p>\n<p>Finalmente, podemos realizar diferentes mesclas usando declarações de <code>namespace</code>.\nIsto não é um exemplo particularmente realista, mas mostra vários tipos de comportamentos interessantes:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Y</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Z</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// ... em outro local ...</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> </span><span style=\"color: #0070C1\">Y</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Z</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">C</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">X</span><span style=\"color: #000000\"> = </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">;</span></div></code></div></pre>\n<p>Neste exemplo, o primeiro bloco cria os seguintes significados de nome:</p>\n<ul>\n<li>Um valor <code>X</code> (pois a declaração de <code>namespace</code> contém um valor, <code>Z</code>)</li>\n<li>Um namespace <code>X</code> (pois a declaração de <code>namespace</code> contém um tipo, <code>Y</code>)</li>\n<li>Um tipo <code>Y</code> no namespace <code>X</code></li>\n<li>Um tipo <code>Z</code> no namespace <code>X</code> (a forma da instância da classe)</li>\n<li>Um valor <code>Z</code> que é uma propriedade do valor <code>X</code> (a função construtora da classe)</li>\n</ul>\n<p>O segundo bloco cria os seguintes significados de nome:</p>\n<ul>\n<li>Um valor <code>Y</code> (do tipo <code>number</code>) que é  uma propriedade do valor <code>X</code></li>\n<li>Um namespace <code>Z</code></li>\n<li>Um valor <code>Z</code> que é um propriedade do valor <code>X</code></li>\n<li>Um tipo <code>C</code> no namespace <code>X.Z</code></li>\n<li>Um valor <code>C</code> que é uma propriedade do valor <code>X.Z</code></li>\n<li>Um tipo <code>X</code></li>\n</ul>\n<!-- TODO: Write more on that. -->","headings":[{"value":"Teoria do arquivo de declaração: Uma análise profunda","depth":2},{"value":"Conceitos chaves","depth":2},{"value":"Tipos","depth":3},{"value":"Valores","depth":3},{"value":"Namespaces","depth":3},{"value":"Combinações simples: Um nome, múltiplos significados","depth":2},{"value":"Combinações integradas","depth":3},{"value":"Combinações de usuários","depth":3},{"value":"Combinações avançadas","depth":2},{"value":"Adicionar usando uma interface","depth":3},{"value":"Adicionar usando um namespace","depth":3}],"frontmatter":{"permalink":"/pt/docs/handbook/declaration-files/deep-dive.html","title":"Análise profunda","disable_toc":null,"handbook":null,"oneline":"Como arquivos d.ts funcionam, uma análise profunda","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Do's and Don'ts","oneline":"Recomendações para escrita de arquivos d.ts","permalink":"/pt/docs/handbook/declaration-files/do-s-and-don-ts.html"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Publishing","oneline":"How to get your d.ts files to users","permalink":"/docs/handbook/declaration-files/publishing.html"}}}},"pageContext":{"id":"6-análise-profunda","slug":"/pt/docs/handbook/declaration-files/deep-dive.html","repoPath":"/packages/documentation/copy/pt/declaration-files/Deep Dive.md","previousID":"d76f320a-b50d-52f2-b6f2-2fcb61c3e9e3","nextID":"be0014a7-52ec-5999-b80b-dffe931d4b52","lang":"pt","modifiedTime":"2024-10-21T12:35:09.565Z"}},"staticQueryHashes":[]}