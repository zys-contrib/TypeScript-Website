{"componentChunkName":"component---src-templates-documentation-tsx","path":"/pt/docs/handbook/declaration-merging.html","result":{"data":{"markdownRemark":{"id":"83cbc702-48c1-53d3-a2f3-f1eac9aa4438","excerpt":"Introdução Alguns dos conceitos únicos em Typescript descrevem a forma de um objeto Javascript ao nível de tipo.\nUm exemplo que é especialmente único do…","html":"<h2 id=\"introdução\" style=\"position:relative;\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-label=\"introdução permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introdução</h2>\n<p>Alguns dos conceitos únicos em Typescript descrevem a forma de um objeto Javascript ao nível de tipo.\nUm exemplo que é especialmente único do Typescript é o conceito de ‘fusão de declarações’.\nEntender este conceito vai lhe dar uma vantagem quando trabalhando com Javascript existente.\nEle também abre portas para mais coneceitos de abstração avançados.</p>\n<p>Para os propósitos deste artigo, “fusão de declarações” significa que o compilador funde duas declarações separadas que têm o mesmo nome em apenas uma definição.\nEssa definição fundida tem as funcionalidades de ambas as declarações originais.\nQualquer número de declarações podem ser fundidas, não está limitada a apenas duas declarações.</p>\n<h2 id=\"conceitos-básicos\" style=\"position:relative;\"><a href=\"#conceitos-b%C3%A1sicos\" aria-label=\"conceitos básicos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conceitos Básicos</h2>\n<p>Em Typescript, uma declaração cria entidades em pelo menos um destes três grupos: namespace, tipo, ou valor.\nCriação de declarações de namespace criam um namespace, que contém nomes que são acessados usando uma notação de ponto.\nDeclarações de criação de tipo fazem apeans isto: criam um tipo que é visível na forma declarada e ligado ao nome dado.\nPor último, declarações de criação de valor criam valores que são visíveis na saída Javascript.</p>\n<table>\n<thead>\n<tr>\n<th>Tipo da Declaração</th>\n<th align=\"center\">Namespace</th>\n<th align=\"center\">Tipo</th>\n<th align=\"center\">Valor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Namespace</td>\n<td align=\"center\">X</td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td>Class</td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td>Enum</td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td>Interface</td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>Type Alias</td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>Function</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n</tr>\n<tr>\n<td>Variable</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">X</td>\n</tr>\n</tbody>\n</table>\n<p>Entender o que é criado com cada declaração vai te ajudar a entender o que é fundido quando você performa uma fusão de declarações.</p>\n<h2 id=\"fundindo-interfaces\" style=\"position:relative;\"><a href=\"#fundindo-interfaces\" aria-label=\"fundindo interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fundindo Interfaces</h2>\n<p>O mais simples, e talvez o mais comum, tipo de fusão de declaração é a fusão de interfaces.\nNo nível mais básico, a fusão automaticamente junta os membros de ambas as declarações em apenas uma interface com o mesmo nome.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Box</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">height</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">width</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Box</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">scale</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">box</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Box</span><span style=\"color: #000000\"> = { </span><span style=\"color: #001080\">height:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">5</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">width:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">6</span><span style=\"color: #000000\">, </span><span style=\"color: #001080\">scale:</span><span style=\"color: #000000\"> </span><span style=\"color: #098658\">10</span><span style=\"color: #000000\"> };</span></div></code></div></pre>\n<p>Membros da interface que não são funções devem ter nomes únicos.\nSe eles não forem únicos, devem ser do mesmo tipo.\nO compilador irá indicar um erro se a interface declarar um membro não-função do mesmo nome, mas de tipo diferente.</p>\n<p>Para membros função, cada função do mesmo nome é tratada como descrevendo uma sobrecarga da mesma função.\nTambém é importante observar que, no caso da interface <code>A</code> se fundir com a interface <code>A</code> posterior, a segunda interface terá uma precedência maior que a primeira.</p>\n<p>Isto é, no exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Cloner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Cloner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Sheep</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Sheep</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Cloner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Cat</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Cat</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>As três interfaces vão ser fundidas para criar uma única declaração como a seguir:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Cloner</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Cat</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Cat</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Sheep</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Sheep</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">clone</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">animal</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Note que os elementos de cada grupo mantem a mesma ordem, mas os grupos em si são fundidos com os conjuntos de sobrecarga posteriores ordenados primeiro.</p>\n<p>Uma exceção à essa regra são assinaturas especializadas.\nSe uma assinatura tem um parâmetro cujo tipo seja um tipo de literal de string único (e.g. não uma união de literais de string) então ele será levado ao topo da sua lista de sobrecarga fundida.</p>\n<p>Por exempo, as seguintes interfaces vão se fundir:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Document</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Document</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"span\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLSpanElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Document</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"canvas\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLCanvasElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>O resultado da declaração fundida de <code>Document</code> será o seguinte:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Document</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"canvas\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLCanvasElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLDivElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #A31515\">\"span\"</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLSpanElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">HTMLElement</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #795E26\">createElement</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">tagName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">any</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Element</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"fundindo-namespaces\" style=\"position:relative;\"><a href=\"#fundindo-namespaces\" aria-label=\"fundindo namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fundindo Namespaces</h2>\n<p>Similar às interfaces, namespaces de mesmo nome terão seus membros fundidos.\nJá que namespaces criam ambos um namespace e um valor, precisamos entender como os dois se fundem.</p>\n<p>Para fundir namespaces, definições de tipo de interfaces exportadas declaradas em cada namespace são elas mesmas fundidas, formando um único namespace com declarações de interface fundidas dentro dele.</p>\n<p>Para fundir o valor do namespace, em cada lugar de declaração, se um namespace já existe com aquele nome, ele é extendido por meio da adição dos membros exportados do segundo namespace ao primeiro já existente.</p>\n<p>A fusão de declaração de <code>Animals</code> neste exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animals</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Zebra</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animals</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Legged</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">numberOfLegs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>é equivalente a:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animals</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Legged</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #001080\">numberOfLegs</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Zebra</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Dog</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Esse modelo de fusão de namespaces é um ponto de começo útil, mas também precisamos entender o que acontece com membros não exportados.\nMembros não exportados são visíveis apenas no namespace original (não fundido). Isso significa que depois da fusão, membros fundidos que vieram de outro namespace não podem ver membros não exportados.</p>\n<p>Podemos ver isso mais claramente neste exemplo:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">haveMuscles</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">animalsHaveMuscles</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">haveMuscles</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Animal</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">doAnimalsHaveMuscles</span><span style=\"color: #000000\">() {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">haveMuscles</span><span style=\"color: #000000\">; </span><span style=\"color: #008000\">// Erro, porque haveMuscles não é acessível aqui</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>Por <code>haveMuscles</code> não ser exportado, apenas a função <code>animalsHaveMuscles</code> que compartilha o mesmo namespace não fundido pode ver o símbolo.\nA função <code>doAnimalsHaveMuscles</code>, mesmo que seja parte do namespace fundido <code>Animal</code> não pode ver este membro não exportado.</p>\n<h2 id=\"fundindo-namespaces-com-classes-funções-e-enums\" style=\"position:relative;\"><a href=\"#fundindo-namespaces-com-classes-fun%C3%A7%C3%B5es-e-enums\" aria-label=\"fundindo namespaces com classes funções e enums permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fundindo Namespaces com Classes, Funções, e Enums</h2>\n<p>Namespaces são flexíveis a ponto de também se fundir com outros tipos de declarações.\nPara tal, a declaração do namespace deve seguir a declaração com que será fundido. As declarações resultantes têm propriedades de ambos os tipos de declaração.\nTypescript usa essa capacidade apra modelar alguns dos padrões em JavaScript assim como outras linguagens de programação</p>\n<h2 id=\"fundindo-namespaces-com-classes\" style=\"position:relative;\"><a href=\"#fundindo-namespaces-com-classes\" aria-label=\"fundindo namespaces com classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fundindo Namespaces com Classes</h2>\n<p>Isso dá ao usuário uma forma de descrever suas classes internas.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Album</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #001080\">label</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Album</span><span style=\"color: #000000\">.</span><span style=\"color: #1C6277\">AlbumLabel</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Album</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">AlbumLabel</span><span style=\"color: #000000\"> {}</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<p>A visibilidade para membros fundidos é a mesma descrita na seção <a href=\"./declaration-merging.html#merging-namespaces\">Fundindo Namespaces</a>, então nós devemos exportar a classe <code>AlbumLabel</code> para que a classe fundida seja capaz de visualizá-la.\nO resultado final é uma classe gerenciada dentro de outra classe.\nVocê também pode usar namespaces para adicionar mais membros estáticos a uma classe existente.</p>\n<p>Em adição ao padrão de classes internas, você também pode ser familiar com a prática JavaScript de criar uma função e então extender a função por meio de adição de propriedades a ela.\nO TypeScript usa a fusão de declarações para construir definições como essas em uma forma de tipo segura.</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">buildLabel</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">name</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">buildLabel</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prefix</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">name</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">buildLabel</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">suffix</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">buildLabel</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">suffix</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">prefix</span><span style=\"color: #000000\"> = </span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #001080\">console</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">log</span><span style=\"color: #000000\">(</span><span style=\"color: #795E26\">buildLabel</span><span style=\"color: #000000\">(</span><span style=\"color: #A31515\">\"Sam Smith\"</span><span style=\"color: #000000\">));</span></div></code></div></pre>\n<p>Similarmente, namesapces podem ser usados para extender enums com membros estáticos:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0000FF\">enum</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Color</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">red</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">1</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">green</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">2</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0070C1\">blue</span><span style=\"color: #000000\"> = </span><span style=\"color: #098658\">4</span><span style=\"color: #000000\">,</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Color</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> </span><span style=\"color: #795E26\">mixColor</span><span style=\"color: #000000\">(</span><span style=\"color: #001080\">colorName</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">string</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">colorName</span><span style=\"color: #000000\"> == </span><span style=\"color: #A31515\">\"yellow\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">red</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">green</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">colorName</span><span style=\"color: #000000\"> == </span><span style=\"color: #A31515\">\"white\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">red</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">green</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">blue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">colorName</span><span style=\"color: #000000\"> == </span><span style=\"color: #A31515\">\"magenta\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">red</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">blue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    } </span><span style=\"color: #AF00DB\">else</span><span style=\"color: #000000\"> </span><span style=\"color: #AF00DB\">if</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">colorName</span><span style=\"color: #000000\"> == </span><span style=\"color: #A31515\">\"cyan\"</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">      </span><span style=\"color: #AF00DB\">return</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">green</span><span style=\"color: #000000\"> + </span><span style=\"color: #001080\">Color</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">blue</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #000000\">    }</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div></code></div></pre>\n<h2 id=\"fusões-desencorajadas\" style=\"position:relative;\"><a href=\"#fus%C3%B5es-desencorajadas\" aria-label=\"fusões desencorajadas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fusões Desencorajadas</h2>\n<p>Nem todas as fusões são permitidas no TypeScript.\nAtualmente, classes não podem se fundir com outras classes ou variáveis.\nPara mais informações em simular a fusão de classes, veja a seção de <a href=\"/docs/handbook/mixins.html\">Mixins em TypeScript</a></p>\n<h2 id=\"aumento-de-módulos\" style=\"position:relative;\"><a href=\"#aumento-de-m%C3%B3dulos\" aria-label=\"aumento de módulos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aumento de Módulos</h2>\n<p>Ainda que módulos JavaScript não suportem fusões, você pode alterar objetos existentes por meio da importação e atualização deles.\nOlhemos para um exemplo de Observable:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// observable.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... implementação deixada como exercício para o leitor ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// map.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Observable</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./observable\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... outro exercicio para o leitor</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>Isso funciona perfeitamente em TypeScript também, mas o compilador não sabe sobre <code>Observable.prototype.map</code>.\nVocê pode usar aumento de módulos para informar o compilador sobre isso:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// observable.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... implementação deixada como exercício para o leitor ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// map.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Observable</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./observable\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">module</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./observable\"</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;(</span><span style=\"color: #795E26\">f</span><span style=\"color: #000000\">: (</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">): </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">U</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> (</span><span style=\"color: #001080\">f</span><span style=\"color: #000000\">) {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... outro exercicio para o leitor</span></div><div class='line'><span style=\"color: #000000\">};</span></div><div class='line'></div><div class='line'><span style=\"color: #008000\">// consumer.ts</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> { </span><span style=\"color: #001080\">Observable</span><span style=\"color: #000000\"> } </span><span style=\"color: #AF00DB\">from</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./observable\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #AF00DB\">import</span><span style=\"color: #000000\"> </span><span style=\"color: #A31515\">\"./map\"</span><span style=\"color: #000000\">;</span></div><div class='line'><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">o</span><span style=\"color: #000000\">: </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">number</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #001080\">o</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">map</span><span style=\"color: #000000\">((</span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">x</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toFixed</span><span style=\"color: #000000\">());</span></div></code></div></pre>\n<p>O nome do módulo é resolvido da mesma forma que os especificadores de módulo em <code>import</code>/<code>export</code>.\nVeja <a href=\"/docs/handbook/modules.html\">Módulos</a> para mais informações.\nEntão as declarações em um aumento são fundidas como se tivessem sido declaradas no mesmo arquivo que o original.</p>\n<p>Entretando, há duas limitações para se lembrar:</p>\n<ol start=\"3\">\n<li>Você não pode declarar novas declarações de alto nível no aumento — apenas mudanças para declarações existentes.</li>\n<li>Default exports não podem ser aumentados também, apenas named exports (já que você precisa aumentar um export por seu nome, e <code>default</code> é uma palavra reservada - veja <a href=\"https://github.com/Microsoft/TypeScript/issues/14080\">#14080</a> para detalhes)</li>\n</ol>\n<h2 id=\"aumento-global\" style=\"position:relative;\"><a href=\"#aumento-global\" aria-label=\"aumento global permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aumento Global</h2>\n<p>Você também pode adicionar declarações ao escopo global a partir de um módulo isolado:</p>\n<pre class=\"shiki light-plus\" style=\"background-color: #FFFFFF; color: #000000\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #008000\">// observable.ts</span></div><div class='line'><span style=\"color: #AF00DB\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ... ainda sem implementação ...</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #001080\">global</span><span style=\"color: #000000\"> {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> </span><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt; {</span></div><div class='line'><span style=\"color: #000000\">    </span><span style=\"color: #795E26\">toObservable</span><span style=\"color: #000000\">(): </span><span style=\"color: #1C6277\">Observable</span><span style=\"color: #000000\">&lt;</span><span style=\"color: #1C6277\">T</span><span style=\"color: #000000\">&gt;;</span></div><div class='line'><span style=\"color: #000000\">  }</span></div><div class='line'><span style=\"color: #000000\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #1C6277\">Array</span><span style=\"color: #000000\">.</span><span style=\"color: #001080\">prototype</span><span style=\"color: #000000\">.</span><span style=\"color: #795E26\">toObservable</span><span style=\"color: #000000\"> = </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> () {</span></div><div class='line'><span style=\"color: #000000\">  </span><span style=\"color: #008000\">// ...</span></div><div class='line'><span style=\"color: #000000\">};</span></div></code></div></pre>\n<p>Aumentos globais têm o mesmo comportamento e limites que os aumentos de módulos.</p>","headings":[{"value":"Introdução","depth":2},{"value":"Conceitos Básicos","depth":2},{"value":"Fundindo Interfaces","depth":2},{"value":"Fundindo Namespaces","depth":2},{"value":"Fundindo Namespaces com Classes, Funções, e Enums","depth":2},{"value":"Fundindo Namespaces com Classes","depth":2},{"value":"Fusões Desencorajadas","depth":2},{"value":"Aumento de Módulos","depth":2},{"value":"Aumento Global","depth":2}],"frontmatter":{"permalink":"/pt/docs/handbook/declaration-merging.html","title":"Fusão de Declarações","disable_toc":null,"handbook":null,"oneline":"Como a fusão de namespaces e interfaces funciona","preamble":null,"deprecated_by":null,"deprecation_redirects":null,"experimental":null}},"prev":null,"next":null},"pageContext":{"id":"2-fusão-de-declarações","slug":"/pt/docs/handbook/declaration-merging.html","repoPath":"/packages/documentation/copy/pt/reference/Declaration Merging.md","lang":"pt","modifiedTime":"2024-10-21T12:35:09.569Z"}},"staticQueryHashes":[]}