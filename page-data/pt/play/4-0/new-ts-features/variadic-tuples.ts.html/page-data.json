{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/4-0/new-ts-features/variadic-tuples.ts.html","result":{"pageContext":{"name":"Variadic Tuples","title":"Variadic Tuples","lang":"pt","html":" Tuplas Variádicas dão às tuplas a abilidate de utilizar o operador rest (...)\n para passar tipos através do verificador de tipos de uma forma que funciona\n como generics.\n\n Este é um tópico bastante avançado, então se você se sentir perdido não se preocupe.\n Baseia-se no example:generic-functions e example:tuples\n\n Para começar, aqui está uma tupla variádica que sempre prefixa outra tupla\n com um número\n\n<code><pre>\ntype AddMax<T extends unknown[]> = [max: number,  ...rest: T];\n</pre></code>\n//          ^ Generic usada para restringir o T\n                                                ^ ... usado para indicar onde mesclar\n\n Isso pode ser usado para composição:\n<code><pre>\ntype MaxMin = AddMax<[min: number]>\ntype MaxMinDiameter = AddMax<[min: number, diameter: number]>\n\n// O mesmo pode ser usado após a tupla:\ntype SuffixDIContext<T extends unknown[]> = [...first: T, context: any];\ntype DIContainer = SuffixDIContext<[param: string]>\n\n</pre></code>\n// Este mecanismo pode ser combinado com múltiplos parâmetros de entrada. Por exemplo,\n esta função mescla dois arrays, mas usa '\\0' como uma chave para indicar onde os arrays\n começam e terminam.\n<code><pre>\nfunction joinWithNullTerminators<T extends unknown[], U extends unknown[]>(t: [...T], u: [...U]) {\n    return ['\\0', ...t, '\\0', ...u, '\\0'] as const;\n}\n\n// O TypeScript pode inferir o tipe de retorno de uma função dessa forma:\nconst result = joinWithNullTerminators(['variadic', 'types'], [\"terminators\", 3]);\n\n</pre></code>\n// Essas ferramentas tornam possível tipar corretamente uma função como curry,\n um conceito muito usado na programação funcional\n\n<code><pre>\nfunction curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T) {\n    return (...b: U) => f(...a, ...b);\n}\n\n</pre></code>\n// Há três argumentos generics\n - T: Os parâmetros que são um array de entradas para a função curry\n - U: Os parâmetros que _não_ são passados na função curry, e precisam ser aplicados à função de retorno\n - R: O tipo de retorno da função passada\n\n<code><pre>\nconst sum = (left: number, right: number,) => left + right\n\nconst a = curry(sum, 1, 2)\nconst b = curry(sum, 1)(2)\nconst c = curry(sum)(1, 2)\n\n</pre></code>\n// Você pode encontrar uma explicação mais detalhada, com mais exemplos de código em:\n https://github.com/microsoft/TypeScript/pull/39094\n\n","redirectHref":"pt/play/?ts=4.0.2#example/variadic-tuples"}},"staticQueryHashes":[]}