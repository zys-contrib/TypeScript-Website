{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/4-1/template-literals/intro-to-template-literals.ts.html","result":{"pageContext":{"name":"Intro to Template Literals","title":"Intro to Template Literals","lang":"pt","html":"\n O TypeScript já suporta o tratamento de um string/número exato \n como um literal, por exemplo esta função permite somente duas\n strings exatas e somente isto:\n\n<code><pre>\ndeclare function enableFeature(command: \"redesign\" | \"newArtistPage\"): void;\nenableFeature(\"redesign\");\nenableFeature(`newArtistPage`);\nenableFeature(\"newPaymentSystem\");\n\n</pre></code>\n// Strings literais suportam a mesma forma como você escreve uma\n string no ES2020, com o TypeScript 4.1 estendemos o \n  suporte a interpolação dentro de uma string literal.\n\n<code><pre>\ntype Features = \"Redesign\" | \"newArtistPage\";\n\n</pre></code>\n// Isto pega a união na variável Features acima, e transforma\n cada pedaço desta união para adicionar o trecho `-branch` depois da string\n<code><pre>\ntype FeatureBranch = `${Features}-branch`;\n\n</pre></code>\n// A 4.1 suporta um conjunto de palavras chave genéricas que \n você pode utilizar dentro de uma template literal para manipular strings.\n Estas são: Uppercase, Lowercase, Capitalize e Uncapitalize\n\n<code><pre>\ntype FeatureID = `${Lowercase<Features>}-id`;\ntype FeatureEnvVar = `${ Uppercase<Features>} - ID`;\n\n</pre></code>\n// Strings em uniões são avaliados de forma cruzada, então se utilizado mais\n de um tipo de união cada membro de uma união é avaliado\n contra cada membro da outra união.\n\n<code><pre>\ntype EnabledStates = \"enabled\" | \"disabled\";\ntype FeatureUIStrings = `${ Features } is ${ EnabledStates }`;\n\n</pre></code>\n// Isto garante que qualquer combinação possível de cada\n união é considerada.\n\n Este type pode então ser utilizado com uma assinatura indexada\n para rapidamente criar uma lista de chaves:\n\n<code><pre>\ntype SetFeatures = {\n  [K in FeatureID]: boolean\n};\n\n</pre></code>\n// Continue aprendendo mais sobre template literals em\n mapped-types-with-template-literals\n\n Ou leia o artigo em nosso blog:\n https://devblogs.microsoft.com/typescript/announcing-typescript-4-1-beta/#template-literal-types\n","redirectHref":"pt/play/?#example/intro-to-template-literals"}},"staticQueryHashes":[]}