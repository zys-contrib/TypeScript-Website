{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/helping-with-javascript/errors.ts.html","result":{"pageContext":{"name":"Errors","title":"Errors","lang":"pt","html":"\n Por padrão o TypeScript não fornece mensagens\n de erro dentro do JavaScript. Em vez disso o ferramental\n é focado em prover um suporte avançado para editores.\n\n Ativar os erros entretanto, é muito fácil. Em um\n arquivo JS comum, tudo o que é necessário para ativar as\n mensagens de erro do TypeScript é adicionar o seguinte comentário:\n\n @ts-check\n\n<code><pre>\nlet myString = \"123\";\nmyString = {};\n\n</pre></code>\n// Isso pode começar a adicionar vários rabiscos vermelhos\n dentro do seu arquivo JS. Ainda que continue funcionando\n dentro do JavaScript, você tem algumas ferramentas para\n corrigir esses erros.\n\n Para alguns do erros, onde você não sente que mudanças\n no código devem ocorrer, você pode usar as anotações JSDoc\n para dizer ao TypeScript quais devem ser os tipos:\n\n<code><pre>\n/** @type {string | {}} */\nlet myStringOrObject = \"123\";\nmyStringOrObject = {};\n\n// Você pode ler mais aqui: example:jsdoc-support\n\n</pre></code>\n// Você pode declarar a falha sem importância, dizendo\n ao TypeScript para ignorar o próximo erro:\n\n<code><pre>\nlet myIgnoredError = \"123\";\n// @ts-ignore\nmyStringOrObject = {};\n\n</pre></code>\n// Você pode usar inferência de tipo através do fluxo de código\n para realizar mudanças no seu JavaSript: example:code-flow","redirectHref":"pt/play/?#example/errors"}},"staticQueryHashes":[]}