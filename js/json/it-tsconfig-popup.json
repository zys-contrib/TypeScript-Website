{"files":"<p>Include a list of files. This does not support glob patterns, as opposed to <a href=\"#include\"><code>include</code></a>.</p>\n","extends":"<p>Specify one or more path or node module references to base configuration files from which settings are inherited.</p>\n","include":"<p>Specify a list of modules which to acquire types for.</p>\n","exclude":"<p>Specify a list of modules which to exclude from type acquisition.</p>\n","references":"<p>Specify an array of objects that specify paths for projects. Used in project references.</p>\n","allowUnreachableCode":"<p>Visualizza un errore quando il codice non verrà mai eseguito</p>\n","allowUnusedLabels":"<p>Visualizza un errore quando un'etichetta viene creata accidentalmente</p>\n","alwaysStrict":"<p>Assicura che 'use strict' sia sempre inserito all'inizio del file</p>\n","exactOptionalPropertyTypes":"<p>Interpret optional property types as written, rather than adding <code>undefined</code>.</p>\n","noFallthroughCasesInSwitch":"<p>Enable error reporting for fallthrough cases in switch statements.</p>\n","noImplicitAny":"<p>Enable error reporting for expressions and declarations with an implied <code>any</code> type.</p>\n","noImplicitOverride":"<p>Ensure overriding members in derived classes are marked with an override modifier.</p>\n","noImplicitReturns":"<p>Enable error reporting for codepaths that do not explicitly return in a function.</p>\n","noImplicitThis":"<p>Enable error reporting when <code>this</code> is given the type <code>any</code>.</p>\n","noPropertyAccessFromIndexSignature":"<p>Enforces using indexed accessors for keys declared using an indexed type.</p>\n","noUncheckedIndexedAccess":"<p>Add <code>undefined</code> to a type when accessed using an index.</p>\n","noUnusedLocals":"<p>Enable error reporting when local variables aren't read.</p>\n","noUnusedParameters":"<p>Raise an error when a function parameter isn't read.</p>\n","strict":"<p>Enable all strict type-checking options.</p>\n","strictBindCallApply":"<p>Check that the arguments for <code>bind</code>, <code>call</code>, and <code>apply</code> methods match the original function.</p>\n","strictFunctionTypes":"<p>When assigning functions, check to ensure parameters and the return values are subtype-compatible.</p>\n","strictNullChecks":"<p>When type checking, take into account <code>null</code> and <code>undefined</code>.</p>\n","strictPropertyInitialization":"<p>Check for class properties that are declared but not set in the constructor.</p>\n","useUnknownInCatchVariables":"<p>Default catch clause variables as <code>unknown</code> instead of <code>any</code>.</p>\n","allowArbitraryExtensions":"<p>Enable importing files with any extension, provided a declaration file is present.</p>\n","allowImportingTsExtensions":"<p>Allow imports to include TypeScript file extensions.</p>\n","allowUmdGlobalAccess":"<p>Rende tutte le importazioni UMD disponibili globalmente</p>\n","baseUrl":"<p>Imposta un URL di base per i nomi dei moduli relativi</p>\n","customConditions":"<p>Conditions to set in addition to the resolver-specific defaults when resolving imports.</p>\n","module":"<p>Definisce il sistema di moduli previsto per il runtime</p>\n","moduleResolution":"<p>Specify how TypeScript looks up a file from a given module specifier.</p>\n","moduleSuffixes":"<p>List of file name suffixes to search when resolving a module.</p>\n","noResolve":"<p>Disallow <code>import</code>s, <code>require</code>s or <code>&#x3C;reference></code>s from expanding the number of files TypeScript should add to a project.</p>\n","paths":"<p>Specify a set of entries that re-map imports to additional lookup locations.</p>\n","resolveJsonModule":"<p>Enable importing .json files.</p>\n","resolvePackageJsonExports":"<p>Use the package.json 'exports' field when resolving package imports.</p>\n","resolvePackageJsonImports":"<p>Use the package.json 'imports' field when resolving imports.</p>\n","rootDir":"<p>Definizione della cartella di root e delle sue impostazioni</p>\n","rootDirs":"<p>Allow multiple folders to be treated as one when resolving modules.</p>\n","typeRoots":"<p>Specify multiple folders that act like <code>./node_modules/@types</code>.</p>\n","types":"<p>Specify type package names to be included without being referenced in a source file.</p>\n","declaration":"<p>Creazione di file d.ts per gestire le importazioni di un progetto</p>\n","declarationDir":"<p>Definisce la directory principale per i file .d.ts</p>\n","declarationMap":"<p>Crea una source map per tutti i file .d.ts</p>\n","downlevelIteration":"<p>Emette Javascript compatibile e più dettagliato per oggetti iterativi</p>\n","emitBOM":"<p>Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.</p>\n","emitDeclarationOnly":"<p>Only output d.ts files and not JavaScript files.</p>\n","importHelpers":"<p>Permette di importare alcune funzioni ausiliari per il progetto</p>\n","importsNotUsedAsValues":"<p>Specify emit/checking behavior for imports that are only used for types.</p>\n","inlineSourceMap":"<p>Include sourcemap files inside the emitted JavaScript.</p>\n","inlineSources":"<p>Include source code in the sourcemaps inside the emitted JavaScript.</p>\n","mapRoot":"<p>Specify the location where debugger should locate map files instead of generated locations.</p>\n","newLine":"<p>Set the newline character for emitting files.</p>\n","noEmit":"<p>Non genera file da una compilazione</p>\n","noEmitHelpers":"<p>Disable generating custom helper functions like <code>__extends</code> in compiled output.</p>\n","noEmitOnError":"<p>Disable emitting files if any type checking errors are reported.</p>\n","outDir":"<p>Imposta una directory di output per tutti i file generati.</p>\n","outFile":"<p>Crea un solo file js che contiene tutti i file concatenati</p>\n","preserveConstEnums":"<p>Disable erasing <code>const enum</code> declarations in generated code.</p>\n","preserveValueImports":"<p>Preserve unused imported values in the JavaScript output that would otherwise be removed.</p>\n","removeComments":"<p>Rimuove commenti di TypeScript in modo da non venire visualizzati in JavaScript</p>\n","sourceMap":"<p>Source Map del codice JavaScript generato</p>\n","sourceRoot":"<p>Specify the root path for debuggers to find the reference source code.</p>\n","stripInternal":"<p>Disable emitting declarations that have <code>@internal</code> in their JSDoc comments.</p>\n","allowJs":"<p>Consentire di importare i file .js</p>\n","checkJs":"<p>Eseguire o verificare i tipi nel file .js del progetto</p>\n","maxNodeModuleJsDepth":"<p>Specify the maximum folder depth used for checking JavaScript files from <code>node_modules</code>. Only applicable with <a href=\"#allowJs\"><code>allowJs</code></a>.</p>\n","disableSizeLimit":"<p>Rimuove la limitazione della memoria sul server di linguaggio TypeScript</p>\n","plugins":"<p>La lista dei plugin inclusi nel codice</p>\n","allowSyntheticDefaultImports":"<p>Permette di importare un modulo x da un modulo y’ quando un modulo non ha un’esportazione standard</p>\n","esModuleInterop":"<p>Emit additional JavaScript to ease support for importing CommonJS modules. This enables <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a> for type compatibility.</p>\n","forceConsistentCasingInFileNames":"<p>Ensure that casing is correct in imports.</p>\n","isolatedModules":"<p>Si assicura che ogni file possa essere compilato in sicurezza senza basarsi sulle altre importazioni</p>\n","preserveSymlinks":"<p>Disable resolving symlinks to their realpath. This correlates to the same flag in node.</p>\n","verbatimModuleSyntax":"<p>Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.</p>\n","charset":"<p>Imposta manualmente la codifica del testo per la lettura dei file</p>\n","keyofStringsOnly":"<p>Make keyof only return strings instead of string, numbers or symbols. Legacy option.</p>\n","noImplicitUseStrict":"<p>Disable adding 'use strict' directives in emitted JavaScript files.</p>\n","noStrictGenericChecks":"<p>Disable strict checking of generic signatures in function types.</p>\n","out":"<p>Deprecated setting. Use <a href=\"#outFile\"><code>outFile</code></a> instead.</p>\n","suppressExcessPropertyErrors":"<p>Disable reporting of excess property errors during the creation of object literals.</p>\n","suppressImplicitAnyIndexErrors":"<p>Suppress <a href=\"#noImplicitAny\"><code>noImplicitAny</code></a> errors when indexing objects that lack index signatures.</p>\n","emitDecoratorMetadata":"<p>Emit design-type metadata for decorated declarations in source files.</p>\n","experimentalDecorators":"<p>Enable experimental support for TC39 stage 2 draft decorators.</p>\n","jsx":"<p>Controlla come viene emesso JSX</p>\n","jsxFactory":"<p>Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'.</p>\n","jsxFragmentFactory":"<p>Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.</p>\n","jsxImportSource":"<p>Specify module specifier used to import the JSX factory functions when using <code>jsx: react-jsx*</code>.</p>\n","lib":"<p>Include le definizioni di disponibili nel runtime di JavaScript</p>\n","moduleDetection":"<p>Specify what method is used to detect whether a file is a script or a module.</p>\n","noLib":"<p>Disable including any library files, including the default lib.d.ts.</p>\n","reactNamespace":"<p>Specify the object invoked for <code>createElement</code>. This only applies when targeting <code>react</code> JSX emit.</p>\n","target":"<p>Imposta il runtime del linguaggio JavaScript supportato da compliare</p>\n","useDefineForClassFields":"<p>Emit ECMAScript-standard-compliant class fields.</p>\n","diagnostics":"<p>Genera più informazioni diagnostiche dopo la compilazione</p>\n","explainFiles":"<p>Print files read during the compilation including why it was included.</p>\n","extendedDiagnostics":"<p>Output more detailed compiler performance information after building.</p>\n","generateCpuProfile":"<p>Emit a v8 CPU profile of the compiler run for debugging.</p>\n","listEmittedFiles":"<p>Print the names of emitted files after a compilation.</p>\n","listFiles":"<p>Print all of the files read during the compilation.</p>\n","traceResolution":"<p>Log paths used during the <a href=\"#moduleResolution\"><code>moduleResolution</code></a> process.</p>\n","composite":"<p>Usato per creare varie build dello stesso progetto</p>\n","disableReferencedProjectLoad":"<p>Riduce il numero di progetti caricati automaticamente da TypeScript</p>\n","disableSolutionSearching":"<p>Opt a project out of multi-project reference checking when editing.</p>\n","disableSourceOfProjectReferenceRedirect":"<p>Disable preferring source files instead of declaration files when referencing composite projects.</p>\n","incremental":"<p>Crea dei file .tsbuildinfo per permettere la compilazione incrementale del progetto</p>\n","tsBuildInfoFile":"<p>Specifica la directory per le informazioni sulla compilazione incrementale .tsbuildinfo.</p>\n","noErrorTruncation":"<p>Disable truncating types in error messages.</p>\n","preserveWatchOutput":"<p>Disable wiping the console in watch mode.</p>\n","pretty":"<p>Enable color and formatting in TypeScript's output to make compiler errors easier to read.</p>\n","skipDefaultLibCheck":"<p>Skip type checking .d.ts files that are included with TypeScript.</p>\n","skipLibCheck":"<p>Skip type checking all .d.ts files.</p>\n","assumeChangesOnlyAffectDirectDependencies":"<p>Un'opzione della modalità watch che è drasticamente più veloce, ma a volte imprecisa</p>\n","watchFile":"<p>tecnica con come i singoli file vengono identificati</p>\n","watchDirectory":"<p>Specify how directories are watched on systems that lack recursive file-watching functionality.</p>\n","fallbackPolling":"<p>Specify what approach the watcher should use if the system runs out of native file watchers.</p>\n","synchronousWatchDirectory":"<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.</p>\n","excludeDirectories":"<p>Remove a list of directories from the watch process.</p>\n","excludeFiles":"<p>Remove a list of files from the watch mode's processing.</p>\n","enable":"<p>Disable the type acquisition for JavaScript projects.</p>\n","disableFilenameBasedTypeAcquisition":"<p>Disables inference for type acquisition by looking at filenames in a project.</p>\n"}