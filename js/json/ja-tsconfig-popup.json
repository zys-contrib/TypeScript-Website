{"files":"<p>Include a set list of files, does not support globs</p>\n","extends":"<p>Inherit options for a TSConfig</p>\n","include":"<p>Specify a list of modules which to acquire types for.</p>\n","exclude":"<p>Specify a list of modules which to exclude from type acquisition.</p>\n","references":"<p>Provide a structure for composite projects</p>\n","allowUnreachableCode":"<p>Error when code will never be called</p>\n","allowUnusedLabels":"<p>Error when accidentally creating a label</p>\n","alwaysStrict":"<p>Ensure 'use strict' is always emitted</p>\n","exactOptionalPropertyTypes":"<p>Interpret optional property types as written, rather than adding <code>undefined</code>.</p>\n","noFallthroughCasesInSwitch":"<p>Report errors for fallthrough cases in switch statements.</p>\n","noImplicitAny":"<p>Avoid introducing anys inside your codebase when a type could be specified</p>\n","noImplicitOverride":"<p>Ensure overriding members in derived classes are marked with an override modifier.</p>\n","noImplicitReturns":"<p>Ensure that all codepaths return in a function</p>\n","noImplicitThis":"<p>Raise errors when 'this' would be any</p>\n","noPropertyAccessFromIndexSignature":"<p>Enforces using indexed accessors for keys declared using an indexed type.</p>\n","noUncheckedIndexedAccess":"<p>Add <code>undefined</code> to a type when accessed using an index.</p>\n","noUnusedLocals":"<p>Error when a local variable isn't read</p>\n","noUnusedParameters":"<p>Error when a parameter isn't used</p>\n","strict":"<p>Enable TypeScript's most in-depth type checking rules</p>\n","strictBindCallApply":"<p>Ensure that 'call', 'bind' and 'apply' have the right arguments</p>\n","strictFunctionTypes":"<p>Ensure that function parameters are consistent</p>\n","strictNullChecks":"<p>Ensure that nullability is respected in the type checker</p>\n","strictPropertyInitialization":"<p>Ensure that all class properties match their types after the constructor has finished</p>\n","useUnknownInCatchVariables":"<p>Default catch clause variables as <code>unknown</code> instead of <code>any</code>.</p>\n","allowArbitraryExtensions":"<p>Enable importing files with any extension, provided a declaration file is present.</p>\n","allowImportingTsExtensions":"<p>Allow imports to include TypeScript file extensions.</p>\n","allowUmdGlobalAccess":"<p>Assume UMD imports are all globally available</p>\n","baseUrl":"<p>Set a baseurl for relative module names</p>\n","customConditions":"<p>Conditions to set in addition to the resolver-specific defaults when resolving imports.</p>\n","module":"<p>Sets the expected module system for your runtime</p>\n","moduleResolution":"<p>Allow TypeScript 1.6 module resolution strategies</p>\n","moduleSuffixes":"<p>List of file name suffixes to search when resolving a module.</p>\n","noResolve":"<p>Skip ahead-of-time checking for import and &#x3C;reference files</p>\n","paths":"<p>A set of locations to look for imports in</p>\n","resolveJsonModule":"<p>Allow importing .json files</p>\n","resolvePackageJsonExports":"<p>Use the package.json 'exports' field when resolving package imports.</p>\n","resolvePackageJsonImports":"<p>Use the package.json 'imports' field when resolving imports.</p>\n","rootDir":"<p>Sets the root folder within your source files</p>\n","rootDirs":"<p>Set multiple root directories</p>\n","typeRoots":"<p>locations where TypeScript should look for type definitions</p>\n","types":"<p>Used to create an allowlist of types to be included in the compile</p>\n","declaration":"<p>Emit d.ts files for referenced files in the project</p>\n","declarationDir":"<p>Set the root directory for d.ts files to go</p>\n","declarationMap":"<p>Create sourcemaps for d.ts files</p>\n","downlevelIteration":"<p>Emit more compliant, but verbose JavaScript for iterating objects</p>\n","emitBOM":"<p>Include a byte order mark to output files</p>\n","emitDeclarationOnly":"<p>Only output d.ts files and not .js files</p>\n","importHelpers":"<p>Allow importing helper functions once per project, instead of including them per-file</p>\n","importsNotUsedAsValues":"<p>Does something</p>\n","inlineSourceMap":"<p>Include sourcemap files inside the emitted JavaScript</p>\n","inlineSources":"<p>Include sourcemap files inside the emitted JavaScript</p>\n","mapRoot":"<p>Set an external root for sourcemaps</p>\n","newLine":"<p>Set the newline character</p>\n","noEmit":"<p>Do not emit files from a compilation</p>\n","noEmitHelpers":"<p>Assume helpers are available in the global runtime</p>\n","noEmitOnError":"<p>Only emit files on a successful compile</p>\n","outDir":"<p>Set an output folder for all emitted files</p>\n","outFile":"<p>Output a single file of all JS files concatenated</p>\n","preserveConstEnums":"<p>Do not erase <code>const enum</code> declarations in generated code</p>\n","preserveValueImports":"<p>Preserve unused imported values in the JavaScript output that would otherwise be removed.</p>\n","removeComments":"<p>Remove comments in TypeScript from appearing in JavaScript</p>\n","sourceMap":"<p>Creates source map files for emitted JavaScript files</p>\n","sourceRoot":"<p>Sets the root path for debuggers to find the reference source code</p>\n","stripInternal":"<p>Remove declarations which have '@internal' in their JSDoc comments</p>\n","allowJs":"<p>Let TS include .JS files in imports</p>\n","checkJs":"<p>Run the type checker on .js files in your project</p>\n","maxNodeModuleJsDepth":"<p>How deep should TypeScript run type checking in node_modules</p>\n","disableSizeLimit":"<p>Remove the memory cap on the TypeScript language server</p>\n","plugins":"<p>A list of language service plugins to include</p>\n","allowSyntheticDefaultImports":"<p>Allow 'import x from y' when a module doesn't have a default export</p>\n","esModuleInterop":"<p>Emit additional JS to ease support for importing commonjs modules</p>\n","forceConsistentCasingInFileNames":"<p>Ensure that casing is correct in imports</p>\n","isolatedModules":"<p>Ensure that each file can be safely transpiled without relying on other imports</p>\n","preserveSymlinks":"<p>Do not resolve symlink paths</p>\n","verbatimModuleSyntax":"<p>Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting.</p>\n","charset":"<p>Manually set the text encoding for reading files</p>\n","keyofStringsOnly":"<p>Make keyof only return strings instead of string or numbers</p>\n","noImplicitUseStrict":"<p>Disable 'use strict' in the JS emit</p>\n","noStrictGenericChecks":"<p>Disable strict checking of generic signatures in functions.</p>\n","out":"<p>Do not use this</p>\n","suppressExcessPropertyErrors":"<p>Allow additional properties being set during creation of types</p>\n","suppressImplicitAnyIndexErrors":"<p>Remove the warning when using string indexes to access unknown properties</p>\n","emitDecoratorMetadata":"<p>Adds additional type metadata to decorators in emitted code</p>\n","experimentalDecorators":"<p>Enable experimental support for TC39 stage 2 decorators</p>\n","jsx":"<p>Control how JSX is emitted</p>\n","jsxFactory":"<p>Control the function emitted by JSX</p>\n","jsxFragmentFactory":"<p>Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.</p>\n","jsxImportSource":"<p>Specify module specifier used to import the JSX factory functions when using <code>jsx: react-jsx*</code>.`</p>\n","lib":"<p>Include type definitions you know are available in your JavaScript runtime</p>\n","moduleDetection":"<p>Specify what method is used to detect whether a file is a script or a module.</p>\n","noLib":"<p>Ignore options from lib</p>\n","reactNamespace":"<p>Specify the object which 'createElement' is called on in JSX</p>\n","target":"<p>Set the supported JavaScript language runtime to transpile to</p>\n","useDefineForClassFields":"<p>Use define characteristics for handling class fields</p>\n","diagnostics":"<p>Output additional information after a compile</p>\n","explainFiles":"<p>Print files read during the compilation including why it was included.</p>\n","extendedDiagnostics":"<p>Include a lot of diagnostic information after a compile</p>\n","generateCpuProfile":"<p>Emit a v8 CPU profile of the compiler run for debugging</p>\n","listEmittedFiles":"<p>Print the names of emitted files after a compile</p>\n","listFiles":"<p>Print all of the files read during the compilation</p>\n","traceResolution":"<p>Log out paths when resolving all modules</p>\n","composite":"<p>Used to create multiple build projects</p>\n","disableReferencedProjectLoad":"<p>Reduce the number of projects loaded automatically by TypeScript.</p>\n","disableSolutionSearching":"<p> Opt a project out of multi-project reference checking</p>\n","disableSourceOfProjectReferenceRedirect":"<p>Use d.ts files as the source of truth for tooling between composite project boundries</p>\n","incremental":"<p>Save .tsbuildinfo files to allow for incremental compilation of projects</p>\n","tsBuildInfoFile":"<p>Set the folder for .tsbuildinfo files</p>\n","noErrorTruncation":"<p>Do not truncate error messages</p>\n","preserveWatchOutput":"<p>Do not wipe the console in watch mode</p>\n","pretty":"<p>Use color and formatting to make compiler errors easier to read</p>\n","skipDefaultLibCheck":"<p>use SkipLibCheck instead</p>\n","skipLibCheck":"<p>Skip type checking of declaration files</p>\n","assumeChangesOnlyAffectDirectDependencies":"<p>A drastically faster, but occasionally inaccurate watch mode option.</p>\n","watchFile":"<p>Specify how the TypeScript watch mode works.</p>\n","watchDirectory":"<p>Specify how directories are watched on systems that lack recursive file-watching functionality.</p>\n","fallbackPolling":"<p>What the watcher should use if the system runs out of native file watchers</p>\n","synchronousWatchDirectory":"<p>Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.</p>\n","excludeDirectories":"<p>Remove a list of directories from the watch process.</p>\n","excludeFiles":"<p>Remove a list of files from the watch mode's processing.</p>\n","enable":"<p>Disable the type acquisition for JavaScript projects.</p>\n","disableFilenameBasedTypeAcquisition":"<p>Disables inference for type acquisition by looking at filenames in a project.</p>\n"}