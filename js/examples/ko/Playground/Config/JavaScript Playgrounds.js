//// {  "order": 3,  "isJavaScript": true}

// 이제 플레이그라운드에서 JavaScript 파일을 다룰 수 ​​있습니다.

// 플레이그라운드에서 JavaScript를 지원하는 이유에 대해
// 의문을 갖는 건 당연합니다. 왜냐하면
// 대부분의 TypeScript 사용자는 JavaScript를 사용하고 있기 때문입니다.

// TypeScript는 유추된 타입들과 타입의 획득을 사용할 수 있으며
// JavaScript 파일에서 JSDoc 지원을 통해
// 뛰어난 툴링 환경을 제공합니다:
//
//  예시: 객체 및 배열
//  예시: 자동 타입 획득
//  예시: jsdoc 지원

// 플레이그라운드가 JavaScript를 지원하기 때문에
// 복잡한 JSDoc 예제를 통해 학습하거나 가이드할 수 있고,
// 또는 불일치가 예상될 때 
// 문제를 디버그할 수 있습니다.

// 예를 들어, 이 JSDoc 주석이 
// 올바르게 입력되지 않은 이유는 뭘까요?

/**
 * 두 숫자를 더합니다.
 * @파라미터 {number}는 첫 번째 숫자입니다.
 * @파라미터 {number}는 두 번째 숫자입니다.
 * {number}를 @리턴 합니다.
 */
function addTwoNumbers(a, b) {
  return a + b;
}

// 마우스를 가져가면, 무슨 일이 일어나고 있는지 즉시 볼 수 있는 환경에서
// 이를 파악하기가 훨씬 쉽습니다.
